
AD7738_H723ZG_20250128.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3ec  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db0  0801a6bc  0801a6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801d46c  0801d46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801d474  0801d474  0001e474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801d478  0801d478  0001e478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000dc  24004984  0801d47c  0001e984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  0001f000  2**2
                  ALLOC
  8 .bss          0000be34  24004a60  0801d558  0001ea60  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  24010894  0801d558  0001f894  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  0001f000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001ea60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034b92  00000000  00000000  0001ea8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b66  00000000  00000000  00053620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024d0  00000000  00000000  0005b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cfb  00000000  00000000  0005d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000438cf  00000000  00000000  0005f353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ae4c  00000000  00000000  000a2c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016ef55  00000000  00000000  000dda6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024c9c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0d4  00000000  00000000  0024ca08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00256adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a60 	.word	0x24004a60
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a6a4 	.word	0x0801a6a4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a64 	.word	0x24004a64
 800030c:	0801a6a4 	.word	0x0801a6a4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	4a07      	ldr	r2, [pc, #28]	@ (80003dc <vApplicationGetIdleTaskMemory+0x2c>)
 80003c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	4a06      	ldr	r2, [pc, #24]	@ (80003e0 <vApplicationGetIdleTaskMemory+0x30>)
 80003c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	24004a7c 	.word	0x24004a7c
 80003e0:	24004b1c 	.word	0x24004b1c

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b5b0      	push	{r4, r5, r7, lr}
 80003e6:	b092      	sub	sp, #72	@ 0x48
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ea:	f000 fed9 	bl	80011a0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000528 <main+0x144>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d11b      	bne.n	8000432 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003fa:	f3bf 8f4f 	dsb	sy
}
 80003fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000400:	f3bf 8f6f 	isb	sy
}
 8000404:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000406:	4b48      	ldr	r3, [pc, #288]	@ (8000528 <main+0x144>)
 8000408:	2200      	movs	r2, #0
 800040a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800040e:	f3bf 8f4f 	dsb	sy
}
 8000412:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000414:	f3bf 8f6f 	isb	sy
}
 8000418:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800041a:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <main+0x144>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a42      	ldr	r2, [pc, #264]	@ (8000528 <main+0x144>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000424:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042c:	f3bf 8f6f 	isb	sy
}
 8000430:	e000      	b.n	8000434 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000432:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000434:	4b3c      	ldr	r3, [pc, #240]	@ (8000528 <main+0x144>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d138      	bne.n	80004b2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000440:	4b39      	ldr	r3, [pc, #228]	@ (8000528 <main+0x144>)
 8000442:	2200      	movs	r2, #0
 8000444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000448:	f3bf 8f4f 	dsb	sy
}
 800044c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800044e:	4b36      	ldr	r3, [pc, #216]	@ (8000528 <main+0x144>)
 8000450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000458:	0b5b      	lsrs	r3, r3, #13
 800045a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800045e:	643b      	str	r3, [r7, #64]	@ 0x40
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000468:	63fb      	str	r3, [r7, #60]	@ 0x3c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800046a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800046c:	015a      	lsls	r2, r3, #5
 800046e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000472:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000474:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000476:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000478:	492b      	ldr	r1, [pc, #172]	@ (8000528 <main+0x144>)
 800047a:	4313      	orrs	r3, r2
 800047c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000482:	1e5a      	subs	r2, r3, #1
 8000484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1ef      	bne.n	800046a <main+0x86>
    } while(sets-- != 0U);
 800048a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800048c:	1e5a      	subs	r2, r3, #1
 800048e:	643a      	str	r2, [r7, #64]	@ 0x40
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1e5      	bne.n	8000460 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000494:	f3bf 8f4f 	dsb	sy
}
 8000498:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800049a:	4b23      	ldr	r3, [pc, #140]	@ (8000528 <main+0x144>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a22      	ldr	r2, [pc, #136]	@ (8000528 <main+0x144>)
 80004a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a6:	f3bf 8f4f 	dsb	sy
}
 80004aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ac:	f3bf 8f6f 	isb	sy
}
 80004b0:	e000      	b.n	80004b4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f001 fc76 	bl	8001da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f840 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 fb02 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c0:	f000 fac8 	bl	8000a54 <MX_DMA_Init>
  MX_TIM2_Init();
 80004c4:	f000 fa02 	bl	80008cc <MX_TIM2_Init>
  MX_SPI4_Init();
 80004c8:	f000 f8fe 	bl	80006c8 <MX_SPI4_Init>
  MX_TIM23_Init();
 80004cc:	f000 fa72 	bl	80009b4 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004d0:	f000 f952 	bl	8000778 <MX_TIM1_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8a0 	bl	8000618 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <main+0x148>)
 80004da:	f107 0420 	add.w	r4, r7, #32
 80004de:	461d      	mov	r5, r3
 80004e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004ec:	f107 0320 	add.w	r3, r7, #32
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f00b fb9a 	bl	800bc2c <osThreadCreate>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <main+0x14c>)
 80004fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ethernetTask */
  osThreadDef(ethernetTask, startEthernetTask, osPriorityHigh, 0, 256);
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <main+0x150>)
 8000500:	1d3c      	adds	r4, r7, #4
 8000502:	461d      	mov	r5, r3
 8000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandle = osThreadCreate(osThread(ethernetTask), NULL);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f00b fb89 	bl	800bc2c <osThreadCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <main+0x154>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f00b fb6d 	bl	800bbfe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x140>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	0801a6c8 	.word	0x0801a6c8
 8000530:	240050f0 	.word	0x240050f0
 8000534:	0801a6f4 	.word	0x0801a6f4
 8000538:	240050f4 	.word	0x240050f4

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	@ 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000546:	224c      	movs	r2, #76	@ 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f019 f96c 	bl	8019828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f019 f966 	bl	8019828 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800055c:	2002      	movs	r0, #2
 800055e:	f005 fc25 	bl	8005dac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <SystemClock_Config+0xd8>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a2a      	ldr	r2, [pc, #168]	@ (8000614 <SystemClock_Config+0xd8>)
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <SystemClock_Config+0xd8>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800057e:	bf00      	nop
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <SystemClock_Config+0xd8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800058c:	d1f8      	bne.n	8000580 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2301      	movs	r3, #1
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000592:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	2302      	movs	r3, #2
 800059e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80005a4:	f240 1313 	movw	r3, #275	@ 0x113
 80005a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005b6:	2304      	movs	r3, #4
 80005b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fc2a 	bl	8005e20 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d2:	f000 fe47 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	233f      	movs	r3, #63	@ 0x3f
 80005d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005ea:	2340      	movs	r3, #64	@ 0x40
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005ee:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f4:	2340      	movs	r3, #64	@ 0x40
 80005f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2103      	movs	r1, #3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 ffe9 	bl	80065d4 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000608:	f000 fe2c 	bl	8001264 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3770      	adds	r7, #112	@ 0x70
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	58024800 	.word	0x58024800

08000618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800061e:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <MX_SPI1_Init+0xac>)
 8000620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000622:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000624:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000630:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000632:	2207      	movs	r2, #7
 8000634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000638:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800063c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000644:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000648:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800064c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000650:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000654:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000670:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000678:	2200      	movs	r2, #0
 800067a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800067c:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800067e:	2200      	movs	r2, #0
 8000680:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000684:	2200      	movs	r2, #0
 8000686:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800068a:	2200      	movs	r2, #0
 800068c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000690:	2200      	movs	r2, #0
 8000692:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 8000696:	2200      	movs	r2, #0
 8000698:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 800069c:	2200      	movs	r2, #0
 800069e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_SPI1_Init+0xa8>)
 80006ae:	f007 fe4d 	bl	800834c <HAL_SPI_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80006b8:	f000 fdd4 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24004d1c 	.word	0x24004d1c
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80006cc:	4b28      	ldr	r3, [pc, #160]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006ce:	4a29      	ldr	r2, [pc, #164]	@ (8000774 <MX_SPI4_Init+0xac>)
 80006d0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80006d2:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006d8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80006da:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80006ec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006ee:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80006f4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <MX_SPI4_Init+0xa8>)
 80006f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80006fc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000700:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000704:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800071e:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000728:	2200      	movs	r2, #0
 800072a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800072c:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000734:	2200      	movs	r2, #0
 8000736:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800073a:	2200      	movs	r2, #0
 800073c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000740:	2200      	movs	r2, #0
 8000742:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000746:	2200      	movs	r2, #0
 8000748:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800074c:	2200      	movs	r2, #0
 800074e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_SPI4_Init+0xa8>)
 8000758:	2200      	movs	r2, #0
 800075a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_SPI4_Init+0xa8>)
 800075e:	f007 fdf5 	bl	800834c <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8000768:	f000 fd7c 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	24004da4 	.word	0x24004da4
 8000774:	40013400 	.word	0x40013400

08000778 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	@ 0x70
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000798:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2234      	movs	r2, #52	@ 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f019 f838 	bl	8019828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b8:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007ba:	4a43      	ldr	r2, [pc, #268]	@ (80008c8 <MX_TIM1_Init+0x150>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 80007be:	4b41      	ldr	r3, [pc, #260]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007c0:	f240 525e 	movw	r2, #1374	@ 0x55e
 80007c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b3f      	ldr	r3, [pc, #252]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007cc:	4b3d      	ldr	r3, [pc, #244]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007da:	4b3a      	ldr	r3, [pc, #232]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b38      	ldr	r3, [pc, #224]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e6:	4837      	ldr	r0, [pc, #220]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80007e8:	f009 f853 	bl	8009892 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007f2:	f000 fd37 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000800:	4619      	mov	r1, r3
 8000802:	4830      	ldr	r0, [pc, #192]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 8000804:	f009 fcf8 	bl	800a1f8 <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800080e:	f000 fd29 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000812:	482c      	ldr	r0, [pc, #176]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 8000814:	f009 f998 	bl	8009b48 <HAL_TIM_OC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800081e:	f000 fd21 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000832:	4619      	mov	r1, r3
 8000834:	4823      	ldr	r0, [pc, #140]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 8000836:	f00a fa25 	bl	800ac84 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000840:	f000 fd10 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	4816      	ldr	r0, [pc, #88]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 800086a:	f009 fb37 	bl	8009edc <HAL_TIM_OC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000874:	f000 fcf6 	bl	8001264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800089a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_TIM1_Init+0x14c>)
 80008ae:	f00a fa85 	bl	800adbc <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008b8:	f000 fcd4 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3770      	adds	r7, #112	@ 0x70
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2400500c 	.word	0x2400500c
 80008c8:	40010000 	.word	0x40010000

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 8000906:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000908:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800090c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000916:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000928:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 800092a:	f008 ffb2 	bl	8009892 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000934:	f000 fc96 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000946:	f009 fc57 	bl	800a1f8 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000950:	f000 fc88 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000956:	f009 f958 	bl	8009c0a <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000960:	f000 fc80 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 8000974:	f00a f986 	bl	800ac84 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800097e:	f000 fc71 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	@ 0x60
 8000984:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_TIM2_Init+0xe4>)
 800099a:	f009 fb19 	bl	8009fd0 <HAL_TIM_PWM_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80009a4:	f000 fc5e 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3738      	adds	r7, #56	@ 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24005058 	.word	0x24005058

080009b4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a50 <MX_TIM23_Init+0x9c>)
 80009d6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009da:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80009de:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	@ (8000a4c <MX_TIM23_Init+0x98>)
 80009fc:	f008 ff49 	bl	8009892 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000a06:	f000 fc2d 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <MX_TIM23_Init+0x98>)
 8000a18:	f009 fbee 	bl	800a1f8 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000a22:	f000 fc1f 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <MX_TIM23_Init+0x98>)
 8000a34:	f00a f926 	bl	800ac84 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000a3e:	f000 fc11 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	240050a4 	.word	0x240050a4
 8000a50:	4000e000 	.word	0x4000e000

08000a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_DMA_Init+0x6c>)
 8000a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a60:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <MX_DMA_Init+0x6c>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_DMA_Init+0x6c>)
 8000a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	200b      	movs	r0, #11
 8000a7e:	f001 fab9 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a82:	200b      	movs	r0, #11
 8000a84:	f001 fad0 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f001 fab1 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a92:	200c      	movs	r0, #12
 8000a94:	f001 fac8 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	200d      	movs	r0, #13
 8000a9e:	f001 faa9 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aa2:	200d      	movs	r0, #13
 8000aa4:	f001 fac0 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2105      	movs	r1, #5
 8000aac:	200e      	movs	r0, #14
 8000aae:	f001 faa1 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ab2:	200e      	movs	r0, #14
 8000ab4:	f001 fab8 	bl	8002028 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a49      	ldr	r2, [pc, #292]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a42      	ldr	r2, [pc, #264]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b3f      	ldr	r3, [pc, #252]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b3c      	ldr	r3, [pc, #240]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b38      	ldr	r3, [pc, #224]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b34:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a33      	ldr	r2, [pc, #204]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a24      	ldr	r2, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2140      	movs	r1, #64	@ 0x40
 8000bb0:	4816      	ldr	r0, [pc, #88]	@ (8000c0c <MX_GPIO_Init+0x148>)
 8000bb2:	f005 f8c7 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <MX_GPIO_Init+0x148>)
 8000bce:	f004 ff11 	bl	80059f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MX_GPIO_Init+0x148>)
 8000bea:	f004 ff03 	bl	80059f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f001 f9fe 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f001 fa15 	bl	8002028 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400

08000c10 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8000e88 <HAL_SPI_TxRxCpltCallback+0x278>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f040 81a8 	bne.w	8000f74 <HAL_SPI_TxRxCpltCallback+0x364>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	4898      	ldr	r0, [pc, #608]	@ (8000e8c <HAL_SPI_TxRxCpltCallback+0x27c>)
 8000c2a:	f005 f88b 	bl	8005d44 <HAL_GPIO_WritePin>

		ch1_status = rxBuffer24bit[1];
 8000c2e:	4b98      	ldr	r3, [pc, #608]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c30:	785a      	ldrb	r2, [r3, #1]
 8000c32:	4b98      	ldr	r3, [pc, #608]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c34:	701a      	strb	r2, [r3, #0]
		ch2_status = rxBuffer24bit[6];
 8000c36:	4b96      	ldr	r3, [pc, #600]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c38:	799a      	ldrb	r2, [r3, #6]
 8000c3a:	4b97      	ldr	r3, [pc, #604]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000c3c:	701a      	strb	r2, [r3, #0]
		ch3_status = rxBuffer24bit[11];
 8000c3e:	4b94      	ldr	r3, [pc, #592]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c40:	7ada      	ldrb	r2, [r3, #11]
 8000c42:	4b96      	ldr	r3, [pc, #600]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000c44:	701a      	strb	r2, [r3, #0]
		ch4_status = rxBuffer24bit[16];
 8000c46:	4b92      	ldr	r3, [pc, #584]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c48:	7c1a      	ldrb	r2, [r3, #16]
 8000c4a:	4b95      	ldr	r3, [pc, #596]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000c4c:	701a      	strb	r2, [r3, #0]
		ch5_status = rxBuffer24bit[21];
 8000c4e:	4b90      	ldr	r3, [pc, #576]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c50:	7d5a      	ldrb	r2, [r3, #21]
 8000c52:	4b94      	ldr	r3, [pc, #592]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000c54:	701a      	strb	r2, [r3, #0]
		ch6_status = rxBuffer24bit[26];
 8000c56:	4b8e      	ldr	r3, [pc, #568]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c58:	7e9a      	ldrb	r2, [r3, #26]
 8000c5a:	4b93      	ldr	r3, [pc, #588]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x298>)
 8000c5c:	701a      	strb	r2, [r3, #0]

		value1 = (rxBuffer24bit[2] << 16) | (rxBuffer24bit[3] << 8) | rxBuffer24bit[4];
 8000c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c60:	789b      	ldrb	r3, [r3, #2]
 8000c62:	041a      	lsls	r2, r3, #16
 8000c64:	4b8a      	ldr	r3, [pc, #552]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	4a88      	ldr	r2, [pc, #544]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c6e:	7912      	ldrb	r2, [r2, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b8d      	ldr	r3, [pc, #564]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000c76:	601a      	str	r2, [r3, #0]
		value2 = (rxBuffer24bit[7] << 16) | (rxBuffer24bit[8] << 8) | rxBuffer24bit[9];
 8000c78:	4b85      	ldr	r3, [pc, #532]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c7a:	79db      	ldrb	r3, [r3, #7]
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	4b84      	ldr	r3, [pc, #528]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c80:	7a1b      	ldrb	r3, [r3, #8]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	4313      	orrs	r3, r2
 8000c86:	4a82      	ldr	r2, [pc, #520]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c88:	7a52      	ldrb	r2, [r2, #9]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b88      	ldr	r3, [pc, #544]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000c90:	601a      	str	r2, [r3, #0]
		value3 = (rxBuffer24bit[12] << 16) | (rxBuffer24bit[13] << 8) | rxBuffer24bit[14];
 8000c92:	4b7f      	ldr	r3, [pc, #508]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c94:	7b1b      	ldrb	r3, [r3, #12]
 8000c96:	041a      	lsls	r2, r3, #16
 8000c98:	4b7d      	ldr	r3, [pc, #500]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000c9a:	7b5b      	ldrb	r3, [r3, #13]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	4a7b      	ldr	r2, [pc, #492]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000ca2:	7b92      	ldrb	r2, [r2, #14]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b82      	ldr	r3, [pc, #520]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8000caa:	601a      	str	r2, [r3, #0]
		value4 = (rxBuffer24bit[17] << 16) | (rxBuffer24bit[18] << 8) | rxBuffer24bit[19];
 8000cac:	4b78      	ldr	r3, [pc, #480]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cae:	7c5b      	ldrb	r3, [r3, #17]
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	4b77      	ldr	r3, [pc, #476]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cb4:	7c9b      	ldrb	r3, [r3, #18]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	4a75      	ldr	r2, [pc, #468]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cbc:	7cd2      	ldrb	r2, [r2, #19]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x2a8>)
 8000cc4:	601a      	str	r2, [r3, #0]
		value5 = (rxBuffer24bit[22] << 16) | (rxBuffer24bit[23] << 8) | rxBuffer24bit[24];
 8000cc6:	4b72      	ldr	r3, [pc, #456]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cc8:	7d9b      	ldrb	r3, [r3, #22]
 8000cca:	041a      	lsls	r2, r3, #16
 8000ccc:	4b70      	ldr	r3, [pc, #448]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cce:	7ddb      	ldrb	r3, [r3, #23]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cd6:	7e12      	ldrb	r2, [r2, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b77      	ldr	r3, [pc, #476]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x2ac>)
 8000cde:	601a      	str	r2, [r3, #0]
		value6 = (rxBuffer24bit[27] << 16) | (rxBuffer24bit[28] << 8) | rxBuffer24bit[29];
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000ce2:	7edb      	ldrb	r3, [r3, #27]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000ce8:	7f1b      	ldrb	r3, [r3, #28]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	4313      	orrs	r3, r2
 8000cee:	4a68      	ldr	r2, [pc, #416]	@ (8000e90 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000cf0:	7f52      	ldrb	r2, [r2, #29]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b72      	ldr	r3, [pc, #456]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x2b0>)
 8000cf8:	601a      	str	r2, [r3, #0]


		spiData[spiIndex] = value1 & 0xFFFF; // value1 bit1, bit2
 8000cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	4b71      	ldr	r3, [pc, #452]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	b289      	uxth	r1, r1
 8000d08:	4b6f      	ldr	r3, [pc, #444]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		spiData[spiIndex + 1] = ((value1 >> 16) & 0xFFFF) | ((value2 & 0xFF) << 8); //value1 bit3, value2 bit1
 8000d0e:	4b67      	ldr	r3, [pc, #412]	@ (8000eac <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	b299      	uxth	r1, r3
 8000d16:	4b66      	ldr	r3, [pc, #408]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b68      	ldr	r3, [pc, #416]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	b291      	uxth	r1, r2
 8000d2c:	4a66      	ldr	r2, [pc, #408]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 2] = (value2 >> 8) & 0xFFFF; // value2 bit2, bit3
 8000d32:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb0 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	0a1a      	lsrs	r2, r3, #8
 8000d38:	4b62      	ldr	r3, [pc, #392]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	3302      	adds	r3, #2
 8000d40:	b291      	uxth	r1, r2
 8000d42:	4a61      	ldr	r2, [pc, #388]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 3] = value3 & 0xFFFF; // value3 bit1, bit2
 8000d48:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3303      	adds	r3, #3
 8000d54:	b291      	uxth	r1, r2
 8000d56:	4a5c      	ldr	r2, [pc, #368]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 4] = ((value3 >> 16) & 0xFFFF) | ((value4 & 0xFF) << 8); //value3 bit3, value4 bit 1
 8000d5c:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0c1b      	lsrs	r3, r3, #16
 8000d62:	b299      	uxth	r1, r3
 8000d64:	4b54      	ldr	r3, [pc, #336]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x2a8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b55      	ldr	r3, [pc, #340]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3304      	adds	r3, #4
 8000d76:	430a      	orrs	r2, r1
 8000d78:	b291      	uxth	r1, r2
 8000d7a:	4a53      	ldr	r2, [pc, #332]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 5] = (value4 >> 8) & 0xFFFF; // value4 bit2, bit3
 8000d80:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb8 <HAL_SPI_TxRxCpltCallback+0x2a8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0a1a      	lsrs	r2, r3, #8
 8000d86:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3305      	adds	r3, #5
 8000d8e:	b291      	uxth	r1, r2
 8000d90:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 6] = value5 & 0xFFFF; // value5 bit1, bit2
 8000d96:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x2ac>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3306      	adds	r3, #6
 8000da2:	b291      	uxth	r1, r2
 8000da4:	4a48      	ldr	r2, [pc, #288]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 7] = ((value5 >> 16) & 0xFFFF) | ((value6 & 0xFF) << 8); //value5 bit3, value6 bit 1
 8000daa:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <HAL_SPI_TxRxCpltCallback+0x2ac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	0c1b      	lsrs	r3, r3, #16
 8000db0:	b299      	uxth	r1, r3
 8000db2:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x2b0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	b291      	uxth	r1, r2
 8000dc8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000dca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 8] = (value6 >> 8) & 0xFFFF; // value6 bit2, bit3
 8000dce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <HAL_SPI_TxRxCpltCallback+0x2b0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	0a1a      	lsrs	r2, r3, #8
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3308      	adds	r3, #8
 8000ddc:	b291      	uxth	r1, r2
 8000dde:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 9] = ch1_status | (ch2_status << 8);
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_SPI_TxRxCpltCallback+0x288>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3309      	adds	r3, #9
 8000e02:	b291      	uxth	r1, r2
 8000e04:	4a30      	ldr	r2, [pc, #192]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000e06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 10] = ch3_status | (ch4_status << 8);
 8000e0a:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	330a      	adds	r3, #10
 8000e28:	b291      	uxth	r1, r2
 8000e2a:	4a27      	ldr	r2, [pc, #156]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000e2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 11] = ch5_status | (ch6_status << 8);
 8000e30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <HAL_SPI_TxRxCpltCallback+0x298>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	330b      	adds	r3, #11
 8000e4e:	b291      	uxth	r1, r2
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 12] = (timer23val & 0xFFFF);
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <HAL_SPI_TxRxCpltCallback+0x2bc>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	330c      	adds	r3, #12
 8000e62:	b291      	uxth	r1, r2
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000e66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 13] = (timer23val >> 16) & 0xFFFF;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <HAL_SPI_TxRxCpltCallback+0x2bc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0c1a      	lsrs	r2, r3, #16
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	330d      	adds	r3, #13
 8000e78:	b291      	uxth	r1, r2
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <HAL_SPI_TxRxCpltCallback+0x2b8>)
 8000e7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 14] = 0xAB89; // 16 bit spacer
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_SPI_TxRxCpltCallback+0x2b4>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	e024      	b.n	8000ed0 <HAL_SPI_TxRxCpltCallback+0x2c0>
 8000e86:	bf00      	nop
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	24005bcc 	.word	0x24005bcc
 8000e94:	24005bea 	.word	0x24005bea
 8000e98:	24005beb 	.word	0x24005beb
 8000e9c:	24005bec 	.word	0x24005bec
 8000ea0:	24005bed 	.word	0x24005bed
 8000ea4:	24005bee 	.word	0x24005bee
 8000ea8:	24005bef 	.word	0x24005bef
 8000eac:	24005bf0 	.word	0x24005bf0
 8000eb0:	24005bf4 	.word	0x24005bf4
 8000eb4:	24005bf8 	.word	0x24005bf8
 8000eb8:	24005bfc 	.word	0x24005bfc
 8000ebc:	24005c00 	.word	0x24005c00
 8000ec0:	24005c04 	.word	0x24005c04
 8000ec4:	24005bc2 	.word	0x24005bc2
 8000ec8:	240050f8 	.word	0x240050f8
 8000ecc:	24005c08 	.word	0x24005c08
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	330e      	adds	r3, #14
 8000ed4:	4a29      	ldr	r2, [pc, #164]	@ (8000f7c <HAL_SPI_TxRxCpltCallback+0x36c>)
 8000ed6:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000eda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 15] = 0xEFCD; // 16 bit spacer (two are necessary due to timer23val being 32 bit -- all 16 bit values are eventually covered)
 8000ede:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	330f      	adds	r3, #15
 8000ee6:	4a25      	ldr	r2, [pc, #148]	@ (8000f7c <HAL_SPI_TxRxCpltCallback+0x36c>)
 8000ee8:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		spiData[spiIndex + 6] = (timer23val & 0xFFFF);
//		spiData[spiIndex + 7] = (timer23val >> 16) & 0xFFFF;
//		spiData[spiIndex + 8] = 0xAB89; // 16 bit spacer
//		spiData[spiIndex + 9] = 0xEFCD; // 16 bit spacer (two are necessary due to timer23val being 32 bit -- all 16 bit values are eventually covered)

		spiIndex = spiIndex + 16;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000efc:	801a      	strh	r2, [r3, #0]

		if (spiIndex >= 740) {
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 8000f08:	d303      	bcc.n	8000f12 <HAL_SPI_TxRxCpltCallback+0x302>
			spiIndex = 0;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
			vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
		}
	}
}
 8000f10:	e030      	b.n	8000f74 <HAL_SPI_TxRxCpltCallback+0x364>
		else if (spiIndex == 640) {
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000f1c:	d12a      	bne.n	8000f74 <HAL_SPI_TxRxCpltCallback+0x364>
			spiData[spiIndex] = sampleNum;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_SPI_TxRxCpltCallback+0x374>)
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <HAL_SPI_TxRxCpltCallback+0x36c>)
 8000f2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sampleNum++;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_SPI_TxRxCpltCallback+0x374>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <HAL_SPI_TxRxCpltCallback+0x374>)
 8000f3a:	6013      	str	r3, [r2, #0]
			spiIndex++;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_SPI_TxRxCpltCallback+0x370>)
 8000f48:	801a      	strh	r2, [r3, #0]
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_SPI_TxRxCpltCallback+0x378>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00d f937 	bl	800e1cc <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d007      	beq.n	8000f74 <HAL_SPI_TxRxCpltCallback+0x364>
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_SPI_TxRxCpltCallback+0x37c>)
 8000f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	f3bf 8f4f 	dsb	sy
 8000f70:	f3bf 8f6f 	isb	sy
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	240050f8 	.word	0x240050f8
 8000f80:	24005bc2 	.word	0x24005bc2
 8000f84:	24005bc4 	.word	0x24005bc4
 8000f88:	240050f4 	.word	0x240050f4
 8000f8c:	e000ed04 	.word	0xe000ed04

08000f90 <initializeA7738Board>:

void initializeA7738Board() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

	// RESET DEVICE
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2140      	movs	r1, #64	@ 0x40
 8000f98:	4825      	ldr	r0, [pc, #148]	@ (8001030 <initializeA7738Board+0xa0>)
 8000f9a:	f004 fed3 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)resetSequence, 5, HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	4923      	ldr	r1, [pc, #140]	@ (8001034 <initializeA7738Board+0xa4>)
 8000fa6:	4824      	ldr	r0, [pc, #144]	@ (8001038 <initializeA7738Board+0xa8>)
 8000fa8:	f007 faf4 	bl	8008594 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2140      	movs	r1, #64	@ 0x40
 8000fb0:	481f      	ldr	r0, [pc, #124]	@ (8001030 <initializeA7738Board+0xa0>)
 8000fb2:	f004 fec7 	bl	8005d44 <HAL_GPIO_WritePin>

	// CHECK FOR FUNCTIONALITY
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2140      	movs	r1, #64	@ 0x40
 8000fba:	481d      	ldr	r0, [pc, #116]	@ (8001030 <initializeA7738Board+0xa0>)
 8000fbc:	f004 fec2 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)checkTransmit, 1, HAL_MAX_DELAY);
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	491d      	ldr	r1, [pc, #116]	@ (800103c <initializeA7738Board+0xac>)
 8000fc8:	481b      	ldr	r0, [pc, #108]	@ (8001038 <initializeA7738Board+0xa8>)
 8000fca:	f007 fae3 	bl	8008594 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)checkReceive, 1, HAL_MAX_DELAY);
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	491a      	ldr	r1, [pc, #104]	@ (8001040 <initializeA7738Board+0xb0>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <initializeA7738Board+0xa8>)
 8000fd8:	f007 fcca 	bl	8008970 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2140      	movs	r1, #64	@ 0x40
 8000fe0:	4813      	ldr	r0, [pc, #76]	@ (8001030 <initializeA7738Board+0xa0>)
 8000fe2:	f004 feaf 	bl	8005d44 <HAL_GPIO_WritePin>
	} else {
	  // do something\-- blink light?
	}

	// DEVICE SETUP
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2140      	movs	r1, #64	@ 0x40
 8000fea:	4811      	ldr	r0, [pc, #68]	@ (8001030 <initializeA7738Board+0xa0>)
 8000fec:	f004 feaa 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)setupSequence, 26, HAL_MAX_DELAY);
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff4:	221a      	movs	r2, #26
 8000ff6:	4913      	ldr	r1, [pc, #76]	@ (8001044 <initializeA7738Board+0xb4>)
 8000ff8:	480f      	ldr	r0, [pc, #60]	@ (8001038 <initializeA7738Board+0xa8>)
 8000ffa:	f007 facb 	bl	8008594 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	480b      	ldr	r0, [pc, #44]	@ (8001030 <initializeA7738Board+0xa0>)
 8001004:	f004 fe9e 	bl	8005d44 <HAL_GPIO_WritePin>

	// START CONTINUOUS CONVERSION MODE
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2140      	movs	r1, #64	@ 0x40
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <initializeA7738Board+0xa0>)
 800100e:	f004 fe99 	bl	8005d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)startContConversionSequence, 2, HAL_MAX_DELAY); // The device now enters CC mode, starting from AIN0
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001016:	2202      	movs	r2, #2
 8001018:	490b      	ldr	r1, [pc, #44]	@ (8001048 <initializeA7738Board+0xb8>)
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <initializeA7738Board+0xa8>)
 800101c:	f007 faba 	bl	8008594 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2140      	movs	r1, #64	@ 0x40
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <initializeA7738Board+0xa0>)
 8001026:	f004 fe8d 	bl	8005d44 <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	58020400 	.word	0x58020400
 8001034:	24004984 	.word	0x24004984
 8001038:	24004d1c 	.word	0x24004d1c
 800103c:	2400498c 	.word	0x2400498c
 8001040:	24005bc8 	.word	0x24005bc8
 8001044:	24004990 	.word	0x24004990
 8001048:	240049ac 	.word	0x240049ac

0800104c <HAL_GPIO_EXTI_Callback>:

// EXTI Line8 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_8) // If The INT Source Is EXTI Line8 (PB8 Pin)
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800105c:	d10f      	bne.n	800107e <HAL_GPIO_EXTI_Callback+0x32>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	@ 0x40
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001064:	f004 fe6e 	bl	8005d44 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txBuffer24bit, (uint8_t *)rxBuffer24bit, 30); //txBuffer24bit, rxBuffer24bit, 24
 8001068:	231e      	movs	r3, #30
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_GPIO_EXTI_Callback+0x40>)
 800106c:	4908      	ldr	r1, [pc, #32]	@ (8001090 <HAL_GPIO_EXTI_Callback+0x44>)
 800106e:	4809      	ldr	r0, [pc, #36]	@ (8001094 <HAL_GPIO_EXTI_Callback+0x48>)
 8001070:	f007 fef0 	bl	8008e54 <HAL_SPI_TransmitReceive_IT>
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_GPIO_EXTI_Callback+0x50>)
 800107c:	6013      	str	r3, [r2, #0]
    }
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58020400 	.word	0x58020400
 800108c:	24005bcc 	.word	0x24005bcc
 8001090:	240049b0 	.word	0x240049b0
 8001094:	24004d1c 	.word	0x24004d1c
 8001098:	240050a4 	.word	0x240050a4
 800109c:	24005c08 	.word	0x24005c08

080010a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// MAKE SURE TO DELETE ANY "MX_LWIP_Init()" ABOVE
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f00a fe0b 	bl	800bcc4 <osDelay>
 80010ae:	e7fb      	b.n	80010a8 <StartDefaultTask+0x8>

080010b0 <startEthernetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEthernetTask */
void startEthernetTask(void const * argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 80010b8:	f009 ff2a 	bl	800af10 <MX_LWIP_Init>

	osDelay(100); // let LWIP be initialized
 80010bc:	2064      	movs	r0, #100	@ 0x64
 80010be:	f00a fe01 	bl	800bcc4 <osDelay>

	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 3);
 80010c2:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <startEthernetTask+0xcc>)
 80010c4:	60fb      	str	r3, [r7, #12]

	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 80010c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <startEthernetTask+0xd0>)
 80010c8:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 80010ca:	f015 fe41 	bl	8016d50 <udp_new>
 80010ce:	6178      	str	r0, [r7, #20]
	udp_bind(my_udp, &myIPaddr, 8);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2208      	movs	r2, #8
 80010d6:	4619      	mov	r1, r3
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f015 fd43 	bl	8016b64 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 55151);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	f24d 726f 	movw	r2, #55151	@ 0xd76f
 80010e6:	4619      	mov	r1, r3
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f015 fdc3 	bl	8016c74 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]

//	// Set PG12 to high to select 'transmit' on Arduino RS422 shield
//	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, 1);

	/* Start Timer 5 */
	HAL_TIM_Base_Start(&htim23);
 80010f2:	4824      	ldr	r0, [pc, #144]	@ (8001184 <startEthernetTask+0xd4>)
 80010f4:	f008 fc24 	bl	8009940 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 80010f8:	4823      	ldr	r0, [pc, #140]	@ (8001188 <startEthernetTask+0xd8>)
 80010fa:	f008 fc21 	bl	8009940 <HAL_TIM_Base_Start>

	// Start Timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <startEthernetTask+0xdc>)
 8001100:	f008 fc9c 	bl	8009a3c <HAL_TIM_Base_Start_IT>

	initializeA7738Board();
 8001104:	f7ff ff44 	bl	8000f90 <initializeA7738Board>

	for(;;)
	{
//	  osDelay(1);
	  // Wait for the notification to send data
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800110c:	2001      	movs	r0, #1
 800110e:	f00d f811 	bl	800e134 <ulTaskNotifyTake>

	  // Copy samples from spiData to tempBuffer
	  memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 8001112:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <startEthernetTask+0xe0>)
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <startEthernetTask+0xe4>)
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f240 5302 	movw	r3, #1282	@ 0x502
 800111e:	461a      	mov	r2, r3
 8001120:	f018 fc07 	bl	8019932 <memcpy>


	  // Send the data over Ethernet
	  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 8001124:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001128:	f240 5102 	movw	r1, #1282	@ 0x502
 800112c:	2036      	movs	r0, #54	@ 0x36
 800112e:	f00f f903 	bl	8010338 <pbuf_alloc>
 8001132:	6138      	str	r0, [r7, #16]
	  if (udp_buffer != NULL)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00e      	beq.n	8001158 <startEthernetTask+0xa8>
	  {
		  memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f240 5202 	movw	r2, #1282	@ 0x502
 8001142:	4913      	ldr	r1, [pc, #76]	@ (8001190 <startEthernetTask+0xe0>)
 8001144:	4618      	mov	r0, r3
 8001146:	f018 fbf4 	bl	8019932 <memcpy>
		  udp_send(my_udp, udp_buffer);
 800114a:	6939      	ldr	r1, [r7, #16]
 800114c:	6978      	ldr	r0, [r7, #20]
 800114e:	f015 fb1f 	bl	8016790 <udp_send>
		  pbuf_free(udp_buffer);
 8001152:	6938      	ldr	r0, [r7, #16]
 8001154:	f00f fbd8 	bl	8010908 <pbuf_free>
	  }

	  // Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
	  memmove(spiData, &spiData[641], sizeof(spiData) - sizeof(tempBuffer));
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <startEthernetTask+0xe4>)
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <startEthernetTask+0xe8>)
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	23c6      	movs	r3, #198	@ 0xc6
 8001162:	461a      	mov	r2, r3
 8001164:	f018 fbe5 	bl	8019932 <memcpy>

	  // Update spiIndex to reflect the new starting position
	  spiIndex -= 641;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <startEthernetTask+0xec>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	f2a3 2381 	subw	r3, r3, #641	@ 0x281
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <startEthernetTask+0xec>)
 8001176:	801a      	strh	r2, [r3, #0]
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001178:	e7c6      	b.n	8001108 <startEthernetTask+0x58>
 800117a:	bf00      	nop
 800117c:	0303140a 	.word	0x0303140a
 8001180:	0301140a 	.word	0x0301140a
 8001184:	240050a4 	.word	0x240050a4
 8001188:	2400500c 	.word	0x2400500c
 800118c:	24005058 	.word	0x24005058
 8001190:	240056c0 	.word	0x240056c0
 8001194:	240050f8 	.word	0x240050f8
 8001198:	240055fa 	.word	0x240055fa
 800119c:	24005bc2 	.word	0x24005bc2

080011a0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80011b2:	f000 ff47 	bl	8002044 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80011b6:	2301      	movs	r3, #1
 80011b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011c2:	231f      	movs	r3, #31
 80011c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80011c6:	2387      	movs	r3, #135	@ 0x87
 80011c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011d6:	2301      	movs	r3, #1
 80011d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011e2:	463b      	mov	r3, r7
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 ff65 	bl	80020b4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80011ee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80011f2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 80011f4:	2309      	movs	r3, #9
 80011f6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011fc:	2303      	movs	r3, #3
 80011fe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001204:	463b      	mov	r3, r7
 8001206:	4618      	mov	r0, r3
 8001208:	f000 ff54 	bl	80020b4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800120c:	2302      	movs	r3, #2
 800120e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <MPU_Config+0x9c>)
 8001212:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001214:	230f      	movs	r3, #15
 8001216:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001218:	2301      	movs	r3, #1
 800121a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001224:	463b      	mov	r3, r7
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ff44 	bl	80020b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800122c:	2004      	movs	r0, #4
 800122e:	f000 ff21 	bl	8002074 <HAL_MPU_Enable>

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	30000200 	.word	0x30000200

08001240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001252:	f000 fde3 	bl	8001e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40001000 	.word	0x40001000

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_MspInit+0x38>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <HAL_MspInit+0x38>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_MspInit+0x38>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	210f      	movs	r1, #15
 8001298:	f06f 0001 	mvn.w	r0, #1
 800129c:	f000 feaa 	bl	8001ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0bc      	sub	sp, #240	@ 0xf0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	22b8      	movs	r2, #184	@ 0xb8
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f018 faab 	bl	8019828 <memset>
  if(hspi->Instance==SPI1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a69      	ldr	r2, [pc, #420]	@ (800147c <HAL_SPI_MspInit+0x1d0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 80df 	bne.w	800149c <HAL_SPI_MspInit+0x1f0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fd26 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012fe:	f7ff ffb1 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b5f      	ldr	r3, [pc, #380]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001308:	4a5d      	ldr	r2, [pc, #372]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 800130a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001312:	4b5b      	ldr	r3, [pc, #364]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b57      	ldr	r3, [pc, #348]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	4a56      	ldr	r2, [pc, #344]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	4a4e      	ldr	r2, [pc, #312]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134e:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <HAL_SPI_MspInit+0x1d4>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800135c:	2360      	movs	r3, #96	@ 0x60
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001374:	2305      	movs	r3, #5
 8001376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800137e:	4619      	mov	r1, r3
 8001380:	4840      	ldr	r0, [pc, #256]	@ (8001484 <HAL_SPI_MspInit+0x1d8>)
 8001382:	f004 fb37 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001386:	2380      	movs	r3, #128	@ 0x80
 8001388:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139e:	2305      	movs	r3, #5
 80013a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013a8:	4619      	mov	r1, r3
 80013aa:	4837      	ldr	r0, [pc, #220]	@ (8001488 <HAL_SPI_MspInit+0x1dc>)
 80013ac:	f004 fb22 	bl	80059f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream2;
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013b2:	4a37      	ldr	r2, [pc, #220]	@ (8001490 <HAL_SPI_MspInit+0x1e4>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80013b6:	4b35      	ldr	r3, [pc, #212]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013b8:	2225      	movs	r2, #37	@ 0x25
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b33      	ldr	r3, [pc, #204]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b32      	ldr	r3, [pc, #200]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ea:	4b28      	ldr	r3, [pc, #160]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f0:	4826      	ldr	r0, [pc, #152]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 80013f2:	f000 fe9f 	bl	8002134 <HAL_DMA_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <HAL_SPI_MspInit+0x154>
    {
      Error_Handler();
 80013fc:	f7ff ff32 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a22      	ldr	r2, [pc, #136]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 8001404:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001406:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_SPI_MspInit+0x1e0>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 800140e:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_SPI_MspInit+0x1ec>)
 8001410:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001414:	2226      	movs	r2, #38	@ 0x26
 8001416:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001440:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001444:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 800144e:	f000 fe71 	bl	8002134 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 8001458:	f7ff ff04 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001460:	679a      	str	r2, [r3, #120]	@ 0x78
 8001462:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <HAL_SPI_MspInit+0x1e8>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2105      	movs	r1, #5
 800146c:	2023      	movs	r0, #35	@ 0x23
 800146e:	f000 fdc1 	bl	8001ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001472:	2023      	movs	r0, #35	@ 0x23
 8001474:	f000 fdd8 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001478:	e0c1      	b.n	80015fe <HAL_SPI_MspInit+0x352>
 800147a:	bf00      	nop
 800147c:	40013000 	.word	0x40013000
 8001480:	58024400 	.word	0x58024400
 8001484:	58020000 	.word	0x58020000
 8001488:	58020c00 	.word	0x58020c00
 800148c:	24004e2c 	.word	0x24004e2c
 8001490:	40020040 	.word	0x40020040
 8001494:	24004ea4 	.word	0x24004ea4
 8001498:	40020058 	.word	0x40020058
  else if(hspi->Instance==SPI4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a59      	ldr	r2, [pc, #356]	@ (8001608 <HAL_SPI_MspInit+0x35c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	f040 80ab 	bne.w	80015fe <HAL_SPI_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80014a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fc40 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80014ca:	f7ff fecb 	bl	8001264 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014ce:	4b4f      	ldr	r3, [pc, #316]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014d4:	4a4d      	ldr	r2, [pc, #308]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014de:	4b4b      	ldr	r3, [pc, #300]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ec:	4b47      	ldr	r3, [pc, #284]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	4a46      	ldr	r2, [pc, #280]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014f4:	f043 0310 	orr.w	r3, r3, #16
 80014f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fc:	4b43      	ldr	r3, [pc, #268]	@ (800160c <HAL_SPI_MspInit+0x360>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800150a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800150e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001524:	2305      	movs	r3, #5
 8001526:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800152e:	4619      	mov	r1, r3
 8001530:	4837      	ldr	r0, [pc, #220]	@ (8001610 <HAL_SPI_MspInit+0x364>)
 8001532:	f004 fa5f 	bl	80059f4 <HAL_GPIO_Init>
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001538:	4a37      	ldr	r2, [pc, #220]	@ (8001618 <HAL_SPI_MspInit+0x36c>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800153c:	4b35      	ldr	r3, [pc, #212]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800153e:	2254      	movs	r2, #84	@ 0x54
 8001540:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001542:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001544:	2240      	movs	r2, #64	@ 0x40
 8001546:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b32      	ldr	r3, [pc, #200]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800156a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800156e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001570:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001576:	4827      	ldr	r0, [pc, #156]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 8001578:	f000 fddc 	bl	8002134 <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_SPI_MspInit+0x2da>
      Error_Handler();
 8001582:	f7ff fe6f 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800158a:	679a      	str	r2, [r3, #120]	@ 0x78
 800158c:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_SPI_MspInit+0x368>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_rx.Instance = DMA1_Stream1;
 8001592:	4b22      	ldr	r3, [pc, #136]	@ (800161c <HAL_SPI_MspInit+0x370>)
 8001594:	4a22      	ldr	r2, [pc, #136]	@ (8001620 <HAL_SPI_MspInit+0x374>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <HAL_SPI_MspInit+0x370>)
 800159a:	2253      	movs	r2, #83	@ 0x53
 800159c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80015d2:	4812      	ldr	r0, [pc, #72]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015d4:	f000 fdae 	bl	8002134 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_SPI_MspInit+0x336>
      Error_Handler();
 80015de:	f7ff fe41 	bl	8001264 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <HAL_SPI_MspInit+0x370>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	2054      	movs	r0, #84	@ 0x54
 80015f4:	f000 fcfe 	bl	8001ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80015f8:	2054      	movs	r0, #84	@ 0x54
 80015fa:	f000 fd15 	bl	8002028 <HAL_NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	37f0      	adds	r7, #240	@ 0xf0
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40013400 	.word	0x40013400
 800160c:	58024400 	.word	0x58024400
 8001610:	58021000 	.word	0x58021000
 8001614:	24004f1c 	.word	0x24004f1c
 8001618:	40020010 	.word	0x40020010
 800161c:	24004f94 	.word	0x24004f94
 8001620:	40020028 	.word	0x40020028

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a23      	ldr	r2, [pc, #140]	@ (80016c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10f      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163c:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001654:	e030      	b.n	80016b8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165e:	d117      	bne.n	8001690 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2105      	movs	r1, #5
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fcb6 	bl	8001ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f000 fccd 	bl	8002028 <HAL_NVIC_EnableIRQ>
}
 800168e:	e013      	b.n	80016b8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <HAL_TIM_Base_MspInit+0xa4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10e      	bne.n	80016b8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 800169c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016a0:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_TIM_Base_MspInit+0xa0>)
 80016ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010000 	.word	0x40010000
 80016c4:	58024400 	.word	0x58024400
 80016c8:	4000e000 	.word	0x4000e000

080016cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	@ 0x40
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d827      	bhi.n	800172a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80016da:	2200      	movs	r2, #0
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	2036      	movs	r0, #54	@ 0x36
 80016e0:	f000 fc88 	bl	8001ff4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016e4:	2036      	movs	r0, #54	@ 0x36
 80016e6:	f000 fc9f 	bl	8002028 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016ea:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <HAL_InitTick+0xc4>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <HAL_InitTick+0xc8>)
 80016f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f6:	4a27      	ldr	r2, [pc, #156]	@ (8001794 <HAL_InitTick+0xc8>)
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_InitTick+0xc8>)
 8001702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170e:	f107 0210 	add.w	r2, r7, #16
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f005 fad1 	bl	8006cc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001724:	2b00      	cmp	r3, #0
 8001726:	d106      	bne.n	8001736 <HAL_InitTick+0x6a>
 8001728:	e001      	b.n	800172e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e02b      	b.n	8001786 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800172e:	f005 fab1 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 8001732:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001734:	e004      	b.n	8001740 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001736:	f005 faad 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800173a:	4603      	mov	r3, r0
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001742:	4a15      	ldr	r2, [pc, #84]	@ (8001798 <HAL_InitTick+0xcc>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	3b01      	subs	r3, #1
 800174c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <HAL_InitTick+0xd0>)
 8001750:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <HAL_InitTick+0xd4>)
 8001752:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_InitTick+0xd0>)
 8001756:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800175a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <HAL_InitTick+0xd0>)
 800175e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001760:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_InitTick+0xd0>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_InitTick+0xd0>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800176e:	480b      	ldr	r0, [pc, #44]	@ (800179c <HAL_InitTick+0xd0>)
 8001770:	f008 f88f 	bl	8009892 <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d104      	bne.n	8001784 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800177a:	4808      	ldr	r0, [pc, #32]	@ (800179c <HAL_InitTick+0xd0>)
 800177c:	f008 f95e 	bl	8009a3c <HAL_TIM_Base_Start_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	e000      	b.n	8001786 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	3740      	adds	r7, #64	@ 0x40
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	240049d8 	.word	0x240049d8
 8001794:	58024400 	.word	0x58024400
 8001798:	431bde83 	.word	0x431bde83
 800179c:	24005c0c 	.word	0x24005c0c
 80017a0:	40001000 	.word	0x40001000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Stream0_IRQHandler+0x10>)
 80017e2:	f001 fa45 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24004f1c 	.word	0x24004f1c

080017f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Stream1_IRQHandler+0x10>)
 80017f6:	f001 fa3b 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24004f94 	.word	0x24004f94

08001804 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Stream2_IRQHandler+0x10>)
 800180a:	f001 fa31 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24004e2c 	.word	0x24004e2c

08001818 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Stream3_IRQHandler+0x10>)
 800181e:	f001 fa27 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24004ea4 	.word	0x24004ea4

0800182c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001830:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001834:	f004 fa9f 	bl	8005d76 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM2_IRQHandler+0x10>)
 8001842:	f008 fa43 	bl	8009ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24005058 	.word	0x24005058

08001850 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <SPI1_IRQHandler+0x10>)
 8001856:	f007 fc0f 	bl	8009078 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24004d1c 	.word	0x24004d1c

08001864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM6_DAC_IRQHandler+0x10>)
 800186a:	f008 fa2f 	bl	8009ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24005c0c 	.word	0x24005c0c

08001878 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <ETH_IRQHandler+0x10>)
 800187e:	f002 ff31 	bl	80046e4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	24005cbc 	.word	0x24005cbc

0800188c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <SPI4_IRQHandler+0x10>)
 8001892:	f007 fbf1 	bl	8009078 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24004da4 	.word	0x24004da4

080018a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_kill>:

int _kill(int pid, int sig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ba:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <_kill+0x20>)
 80018bc:	2216      	movs	r2, #22
 80018be:	601a      	str	r2, [r3, #0]
  return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	24010884 	.word	0x24010884

080018d4 <_exit>:

void _exit (int status)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe5 	bl	80018b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <_exit+0x12>

080018ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e00a      	b.n	8001912 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fc:	f3af 8000 	nop.w
 8001900:	4601      	mov	r1, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf0      	blt.n	80018fc <_read+0x12>
  }

  return len;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e009      	b.n	800194a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbf1      	blt.n	8001936 <_write+0x12>
  }
  return len;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_close>:

int _close(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001984:	605a      	str	r2, [r3, #4]
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_isatty>:

int _isatty(int file)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	@ (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d205      	bcs.n	8001a00 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <_sbrk+0x6c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a06      	ldr	r2, [pc, #24]	@ (8001a28 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	24050000 	.word	0x24050000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	24005c58 	.word	0x24005c58
 8001a2c:	24010898 	.word	0x24010898
 8001a30:	24010884 	.word	0x24010884

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <SystemInit+0xf0>)
 8001a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a40:	4a38      	ldr	r2, [pc, #224]	@ (8001b24 <SystemInit+0xf0>)
 8001a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <SystemInit+0xf4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d807      	bhi.n	8001a66 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <SystemInit+0xf4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 030f 	bic.w	r3, r3, #15
 8001a5e:	4a32      	ldr	r2, [pc, #200]	@ (8001b28 <SystemInit+0xf4>)
 8001a60:	f043 0307 	orr.w	r3, r3, #7
 8001a64:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a66:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <SystemInit+0xf8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a30      	ldr	r2, [pc, #192]	@ (8001b2c <SystemInit+0xf8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a72:	4b2e      	ldr	r3, [pc, #184]	@ (8001b2c <SystemInit+0xf8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a78:	4b2c      	ldr	r3, [pc, #176]	@ (8001b2c <SystemInit+0xf8>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	492b      	ldr	r1, [pc, #172]	@ (8001b2c <SystemInit+0xf8>)
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b30 <SystemInit+0xfc>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a84:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <SystemInit+0xf4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <SystemInit+0xf4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 030f 	bic.w	r3, r3, #15
 8001a98:	4a23      	ldr	r2, [pc, #140]	@ (8001b28 <SystemInit+0xf4>)
 8001a9a:	f043 0307 	orr.w	r3, r3, #7
 8001a9e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <SystemInit+0xf8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <SystemInit+0xf8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <SystemInit+0xf8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <SystemInit+0xf8>)
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <SystemInit+0x100>)
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <SystemInit+0xf8>)
 8001aba:	4a1f      	ldr	r2, [pc, #124]	@ (8001b38 <SystemInit+0x104>)
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <SystemInit+0xf8>)
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <SystemInit+0x108>)
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <SystemInit+0xf8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <SystemInit+0xf8>)
 8001acc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <SystemInit+0x108>)
 8001ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <SystemInit+0xf8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <SystemInit+0xf8>)
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <SystemInit+0x108>)
 8001ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <SystemInit+0xf8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <SystemInit+0xf8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <SystemInit+0xf8>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <SystemInit+0xf8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <SystemInit+0xf8>)
 8001af6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001afa:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <SystemInit+0xf8>)
 8001afc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001b00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <SystemInit+0xf8>)
 8001b06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b0a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <SystemInit+0x10c>)
 8001b10:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	52002000 	.word	0x52002000
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b34:	02020200 	.word	0x02020200
 8001b38:	01ff0000 	.word	0x01ff0000
 8001b3c:	01010280 	.word	0x01010280
 8001b40:	52004000 	.word	0x52004000

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b48:	f7ff ff74 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4e:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b54:	e002      	b.n	8001b5c <LoopCopyDataInit>

08001b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5a:	3304      	adds	r3, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b60:	d3f9      	bcc.n	8001b56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b64:	4c0a      	ldr	r4, [pc, #40]	@ (8001b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b68:	e001      	b.n	8001b6e <LoopFillZerobss>

08001b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b6c:	3204      	adds	r2, #4

08001b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b70:	d3fb      	bcc.n	8001b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b72:	f017 feb7 	bl	80198e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7fe fc35 	bl	80003e4 <main>
  bx  lr
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b80:	24004984 	.word	0x24004984
  ldr r1, =_edata
 8001b84:	24004a60 	.word	0x24004a60
  ldr r2, =_sidata
 8001b88:	0801d47c 	.word	0x0801d47c
  ldr r2, =_sbss
 8001b8c:	24004a60 	.word	0x24004a60
  ldr r4, =_ebss
 8001b90:	24010894 	.word	0x24010894

08001b94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC3_IRQHandler>

08001b96 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <LAN8742_RegisterBusIO+0x28>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <LAN8742_RegisterBusIO+0x28>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <LAN8742_RegisterBusIO+0x28>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc2:	e014      	b.n	8001bee <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d139      	bne.n	8001c8a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e01c      	b.n	8001c6a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f107 020c 	add.w	r2, r7, #12
 8001c38:	2112      	movs	r1, #18
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	4798      	blx	r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da03      	bge.n	8001c4c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001c44:	f06f 0304 	mvn.w	r3, #4
 8001c48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001c4a:	e00b      	b.n	8001c64 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d105      	bne.n	8001c64 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
         break;
 8001c62:	e005      	b.n	8001c70 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b1f      	cmp	r3, #31
 8001c6e:	d9df      	bls.n	8001c30 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b1f      	cmp	r3, #31
 8001c76:	d902      	bls.n	8001c7e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c78:	f06f 0302 	mvn.w	r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 }
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6810      	ldr	r0, [r2, #0]
 8001ca8:	f107 020c 	add.w	r2, r7, #12
 8001cac:	2101      	movs	r1, #1
 8001cae:	4798      	blx	r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da02      	bge.n	8001cbc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cb6:	f06f 0304 	mvn.w	r3, #4
 8001cba:	e06e      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6810      	ldr	r0, [r2, #0]
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4798      	blx	r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da02      	bge.n	8001cd8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cd2:	f06f 0304 	mvn.w	r3, #4
 8001cd6:	e060      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e059      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6810      	ldr	r0, [r2, #0]
 8001cee:	f107 020c 	add.w	r2, r7, #12
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4798      	blx	r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da02      	bge.n	8001d02 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cfc:	f06f 0304 	mvn.w	r3, #4
 8001d00:	e04b      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11b      	bne.n	8001d44 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <LAN8742_GetLinkState+0x90>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d20:	2302      	movs	r3, #2
 8001d22:	e03a      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e033      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e02c      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d40:	2305      	movs	r3, #5
 8001d42:	e02a      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6810      	ldr	r0, [r2, #0]
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	211f      	movs	r1, #31
 8001d52:	4798      	blx	r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da02      	bge.n	8001d60 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d5a:	f06f 0304 	mvn.w	r3, #4
 8001d5e:	e01c      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e015      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 031c 	and.w	r3, r3, #28
 8001d74:	2b18      	cmp	r3, #24
 8001d76:	d101      	bne.n	8001d7c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00e      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 031c 	and.w	r3, r3, #28
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d101      	bne.n	8001d8a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e007      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 031c 	and.w	r3, r3, #28
 8001d90:	2b14      	cmp	r3, #20
 8001d92:	d101      	bne.n	8001d98 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d94:	2304      	movs	r3, #4
 8001d96:	e000      	b.n	8001d9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d98:	2305      	movs	r3, #5
    }
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 f917 	bl	8001fde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001db0:	f004 fdc6 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_Init+0x68>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	4913      	ldr	r1, [pc, #76]	@ (8001e10 <HAL_Init+0x6c>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_Init+0x68>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_Init+0x6c>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_Init+0x70>)
 8001de6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e18 <HAL_Init+0x74>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dee:	200f      	movs	r0, #15
 8001df0:	f7ff fc6c 	bl	80016cc <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e002      	b.n	8001e04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfe:	f7ff fa37 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	58024400 	.word	0x58024400
 8001e10:	0801d23c 	.word	0x0801d23c
 8001e14:	240049d4 	.word	0x240049d4
 8001e18:	240049d0 	.word	0x240049d0

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	240049dc 	.word	0x240049dc
 8001e40:	24005c5c 	.word	0x24005c5c

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	24005c5c 	.word	0x24005c5c

08001e5c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001e6c:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	58000400 	.word	0x58000400

08001e84 <__NVIC_SetPriorityGrouping>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	05fa0000 	.word	0x05fa0000

08001ecc <__NVIC_GetPriorityGrouping>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	@ (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	@ (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	@ 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff4c 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002002:	f7ff ff63 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002006:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f7ff ffb3 	bl	8001f78 <NVIC_EncodePriority>
 8002012:	4602      	mov	r2, r0
 8002014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff82 	bl	8001f24 <__NVIC_SetPriority>
}
 8002020:	bf00      	nop
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff56 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002048:	f3bf 8f5f 	dmb	sy
}
 800204c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800204e:	4b07      	ldr	r3, [pc, #28]	@ (800206c <HAL_MPU_Disable+0x28>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	4a06      	ldr	r2, [pc, #24]	@ (800206c <HAL_MPU_Disable+0x28>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002058:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <HAL_MPU_Disable+0x2c>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	e000ed90 	.word	0xe000ed90

08002074 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800207c:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <HAL_MPU_Enable+0x38>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002086:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_MPU_Enable+0x3c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_MPU_Enable+0x3c>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002092:	f3bf 8f4f 	dsb	sy
}
 8002096:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002098:	f3bf 8f6f 	isb	sy
}
 800209c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed90 	.word	0xe000ed90
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	785a      	ldrb	r2, [r3, #1]
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_MPU_ConfigRegion+0x7c>)
 80020c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <HAL_MPU_ConfigRegion+0x7c>)
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_MPU_ConfigRegion+0x7c>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80020d0:	4a17      	ldr	r2, [pc, #92]	@ (8002130 <HAL_MPU_ConfigRegion+0x7c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7b1b      	ldrb	r3, [r3, #12]
 80020dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7adb      	ldrb	r3, [r3, #11]
 80020e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7a9b      	ldrb	r3, [r3, #10]
 80020ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7b5b      	ldrb	r3, [r3, #13]
 80020f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b9b      	ldrb	r3, [r3, #14]
 80020fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7bdb      	ldrb	r3, [r3, #15]
 8002102:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7a5b      	ldrb	r3, [r3, #9]
 800210a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800210c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002114:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800211e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002120:	6113      	str	r3, [r2, #16]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed90 	.word	0xe000ed90

08002134 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff fe82 	bl	8001e44 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e312      	b.n	8002772 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a66      	ldr	r2, [pc, #408]	@ (80022ec <HAL_DMA_Init+0x1b8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d04a      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_DMA_Init+0x1bc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d045      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a63      	ldr	r2, [pc, #396]	@ (80022f4 <HAL_DMA_Init+0x1c0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d040      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a62      	ldr	r2, [pc, #392]	@ (80022f8 <HAL_DMA_Init+0x1c4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d03b      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_DMA_Init+0x1c8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d036      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5f      	ldr	r2, [pc, #380]	@ (8002300 <HAL_DMA_Init+0x1cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d031      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_DMA_Init+0x1d0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d02c      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5c      	ldr	r2, [pc, #368]	@ (8002308 <HAL_DMA_Init+0x1d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d027      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HAL_DMA_Init+0x1d8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d022      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a59      	ldr	r2, [pc, #356]	@ (8002310 <HAL_DMA_Init+0x1dc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d01d      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a57      	ldr	r2, [pc, #348]	@ (8002314 <HAL_DMA_Init+0x1e0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d018      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a56      	ldr	r2, [pc, #344]	@ (8002318 <HAL_DMA_Init+0x1e4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a54      	ldr	r2, [pc, #336]	@ (800231c <HAL_DMA_Init+0x1e8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00e      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a53      	ldr	r2, [pc, #332]	@ (8002320 <HAL_DMA_Init+0x1ec>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d009      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a51      	ldr	r2, [pc, #324]	@ (8002324 <HAL_DMA_Init+0x1f0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_DMA_Init+0xb8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a50      	ldr	r2, [pc, #320]	@ (8002328 <HAL_DMA_Init+0x1f4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Init+0xbc>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_Init+0xbe>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 813c 	beq.w	8002470 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a37      	ldr	r2, [pc, #220]	@ (80022ec <HAL_DMA_Init+0x1b8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <HAL_DMA_Init+0x1bc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d045      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a34      	ldr	r2, [pc, #208]	@ (80022f4 <HAL_DMA_Init+0x1c0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d040      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a33      	ldr	r2, [pc, #204]	@ (80022f8 <HAL_DMA_Init+0x1c4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d03b      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <HAL_DMA_Init+0x1c8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d036      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a30      	ldr	r2, [pc, #192]	@ (8002300 <HAL_DMA_Init+0x1cc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d031      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2e      	ldr	r2, [pc, #184]	@ (8002304 <HAL_DMA_Init+0x1d0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02c      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2d      	ldr	r2, [pc, #180]	@ (8002308 <HAL_DMA_Init+0x1d4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d027      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <HAL_DMA_Init+0x1d8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2a      	ldr	r2, [pc, #168]	@ (8002310 <HAL_DMA_Init+0x1dc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d01d      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a28      	ldr	r2, [pc, #160]	@ (8002314 <HAL_DMA_Init+0x1e0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a27      	ldr	r2, [pc, #156]	@ (8002318 <HAL_DMA_Init+0x1e4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a25      	ldr	r2, [pc, #148]	@ (800231c <HAL_DMA_Init+0x1e8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_DMA_Init+0x1ec>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a22      	ldr	r2, [pc, #136]	@ (8002324 <HAL_DMA_Init+0x1f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Init+0x174>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a21      	ldr	r2, [pc, #132]	@ (8002328 <HAL_DMA_Init+0x1f4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d108      	bne.n	80022ba <HAL_DMA_Init+0x186>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_DMA_Init+0x196>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022ca:	e02f      	b.n	800232c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022cc:	f7ff fdba 	bl	8001e44 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d928      	bls.n	800232c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2203      	movs	r2, #3
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e242      	b.n	8002772 <HAL_DMA_Init+0x63e>
 80022ec:	40020010 	.word	0x40020010
 80022f0:	40020028 	.word	0x40020028
 80022f4:	40020040 	.word	0x40020040
 80022f8:	40020058 	.word	0x40020058
 80022fc:	40020070 	.word	0x40020070
 8002300:	40020088 	.word	0x40020088
 8002304:	400200a0 	.word	0x400200a0
 8002308:	400200b8 	.word	0x400200b8
 800230c:	40020410 	.word	0x40020410
 8002310:	40020428 	.word	0x40020428
 8002314:	40020440 	.word	0x40020440
 8002318:	40020458 	.word	0x40020458
 800231c:	40020470 	.word	0x40020470
 8002320:	40020488 	.word	0x40020488
 8002324:	400204a0 	.word	0x400204a0
 8002328:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1c8      	bne.n	80022cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4b83      	ldr	r3, [pc, #524]	@ (8002554 <HAL_DMA_Init+0x420>)
 8002346:	4013      	ands	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002352:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b28      	cmp	r3, #40	@ 0x28
 8002396:	d903      	bls.n	80023a0 <HAL_DMA_Init+0x26c>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b2e      	cmp	r3, #46	@ 0x2e
 800239e:	d91f      	bls.n	80023e0 <HAL_DMA_Init+0x2ac>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80023a6:	d903      	bls.n	80023b0 <HAL_DMA_Init+0x27c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b42      	cmp	r3, #66	@ 0x42
 80023ae:	d917      	bls.n	80023e0 <HAL_DMA_Init+0x2ac>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b46      	cmp	r3, #70	@ 0x46
 80023b6:	d903      	bls.n	80023c0 <HAL_DMA_Init+0x28c>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b48      	cmp	r3, #72	@ 0x48
 80023be:	d90f      	bls.n	80023e0 <HAL_DMA_Init+0x2ac>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80023c6:	d903      	bls.n	80023d0 <HAL_DMA_Init+0x29c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b52      	cmp	r3, #82	@ 0x52
 80023ce:	d907      	bls.n	80023e0 <HAL_DMA_Init+0x2ac>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b73      	cmp	r3, #115	@ 0x73
 80023d6:	d905      	bls.n	80023e4 <HAL_DMA_Init+0x2b0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b77      	cmp	r3, #119	@ 0x77
 80023de:	d801      	bhi.n	80023e4 <HAL_DMA_Init+0x2b0>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_Init+0x2b2>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 0307 	bic.w	r3, r3, #7
 8002408:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	2b04      	cmp	r3, #4
 800241a:	d117      	bne.n	800244c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00e      	beq.n	800244c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f001 fbfa 	bl	8003c28 <DMA_CheckFifoParam>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2240      	movs	r2, #64	@ 0x40
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e192      	b.n	8002772 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f001 fb35 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
 800245a:	4603      	mov	r3, r0
 800245c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	223f      	movs	r2, #63	@ 0x3f
 8002468:	409a      	lsls	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	e0c8      	b.n	8002602 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a38      	ldr	r2, [pc, #224]	@ (8002558 <HAL_DMA_Init+0x424>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d022      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_DMA_Init+0x428>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d01d      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <HAL_DMA_Init+0x42c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d018      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_DMA_Init+0x430>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a32      	ldr	r2, [pc, #200]	@ (8002568 <HAL_DMA_Init+0x434>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00e      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_DMA_Init+0x438>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002570 <HAL_DMA_Init+0x43c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Init+0x38c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_DMA_Init+0x440>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_DMA_Init+0x390>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_DMA_Init+0x392>
 80024c4:	2300      	movs	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8092 	beq.w	80025f0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a21      	ldr	r2, [pc, #132]	@ (8002558 <HAL_DMA_Init+0x424>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d021      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a20      	ldr	r2, [pc, #128]	@ (800255c <HAL_DMA_Init+0x428>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d01c      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002560 <HAL_DMA_Init+0x42c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d017      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <HAL_DMA_Init+0x430>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d012      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002568 <HAL_DMA_Init+0x434>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <HAL_DMA_Init+0x438>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d008      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <HAL_DMA_Init+0x43c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d003      	beq.n	800251a <HAL_DMA_Init+0x3e6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_DMA_Init+0x440>)
 8002518:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_DMA_Init+0x444>)
 8002536:	4013      	ands	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b40      	cmp	r3, #64	@ 0x40
 8002540:	d01c      	beq.n	800257c <HAL_DMA_Init+0x448>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b80      	cmp	r3, #128	@ 0x80
 8002548:	d102      	bne.n	8002550 <HAL_DMA_Init+0x41c>
 800254a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800254e:	e016      	b.n	800257e <HAL_DMA_Init+0x44a>
 8002550:	2300      	movs	r3, #0
 8002552:	e014      	b.n	800257e <HAL_DMA_Init+0x44a>
 8002554:	fe10803f 	.word	0xfe10803f
 8002558:	58025408 	.word	0x58025408
 800255c:	5802541c 	.word	0x5802541c
 8002560:	58025430 	.word	0x58025430
 8002564:	58025444 	.word	0x58025444
 8002568:	58025458 	.word	0x58025458
 800256c:	5802546c 	.word	0x5802546c
 8002570:	58025480 	.word	0x58025480
 8002574:	58025494 	.word	0x58025494
 8002578:	fffe000f 	.word	0xfffe000f
 800257c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800258c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800259c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b6e      	ldr	r3, [pc, #440]	@ (800277c <HAL_DMA_Init+0x648>)
 80025c4:	4413      	add	r3, r2
 80025c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002780 <HAL_DMA_Init+0x64c>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f001 fa75 	bl	8003ac4 <DMA_CalcBaseAndBitshift>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e008      	b.n	8002602 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0b7      	b.n	8002772 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5f      	ldr	r2, [pc, #380]	@ (8002784 <HAL_DMA_Init+0x650>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d072      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_DMA_Init+0x654>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d06d      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a5c      	ldr	r2, [pc, #368]	@ (800278c <HAL_DMA_Init+0x658>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d068      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5a      	ldr	r2, [pc, #360]	@ (8002790 <HAL_DMA_Init+0x65c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d063      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a59      	ldr	r2, [pc, #356]	@ (8002794 <HAL_DMA_Init+0x660>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a57      	ldr	r2, [pc, #348]	@ (8002798 <HAL_DMA_Init+0x664>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d059      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a56      	ldr	r2, [pc, #344]	@ (800279c <HAL_DMA_Init+0x668>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d054      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a54      	ldr	r2, [pc, #336]	@ (80027a0 <HAL_DMA_Init+0x66c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04f      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a53      	ldr	r2, [pc, #332]	@ (80027a4 <HAL_DMA_Init+0x670>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d04a      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a51      	ldr	r2, [pc, #324]	@ (80027a8 <HAL_DMA_Init+0x674>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d045      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a50      	ldr	r2, [pc, #320]	@ (80027ac <HAL_DMA_Init+0x678>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d040      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a4e      	ldr	r2, [pc, #312]	@ (80027b0 <HAL_DMA_Init+0x67c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d03b      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a4d      	ldr	r2, [pc, #308]	@ (80027b4 <HAL_DMA_Init+0x680>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d036      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_DMA_Init+0x684>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d031      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4a      	ldr	r2, [pc, #296]	@ (80027bc <HAL_DMA_Init+0x688>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d02c      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a48      	ldr	r2, [pc, #288]	@ (80027c0 <HAL_DMA_Init+0x68c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d027      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a47      	ldr	r2, [pc, #284]	@ (80027c4 <HAL_DMA_Init+0x690>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a45      	ldr	r2, [pc, #276]	@ (80027c8 <HAL_DMA_Init+0x694>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01d      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a44      	ldr	r2, [pc, #272]	@ (80027cc <HAL_DMA_Init+0x698>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d018      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a42      	ldr	r2, [pc, #264]	@ (80027d0 <HAL_DMA_Init+0x69c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a41      	ldr	r2, [pc, #260]	@ (80027d4 <HAL_DMA_Init+0x6a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00e      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3f      	ldr	r2, [pc, #252]	@ (80027d8 <HAL_DMA_Init+0x6a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3e      	ldr	r2, [pc, #248]	@ (80027dc <HAL_DMA_Init+0x6a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_DMA_Init+0x5be>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3c      	ldr	r2, [pc, #240]	@ (80027e0 <HAL_DMA_Init+0x6ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_DMA_Init+0x5c2>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_DMA_Init+0x5c4>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d032      	beq.n	8002762 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f001 fb0f 	bl	8003d20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b80      	cmp	r3, #128	@ 0x80
 8002708:	d102      	bne.n	8002710 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002724:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <HAL_DMA_Init+0x61c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b08      	cmp	r3, #8
 8002734:	d80c      	bhi.n	8002750 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f001 fb8c 	bl	8003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e008      	b.n	8002762 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	a7fdabf8 	.word	0xa7fdabf8
 8002780:	cccccccd 	.word	0xcccccccd
 8002784:	40020010 	.word	0x40020010
 8002788:	40020028 	.word	0x40020028
 800278c:	40020040 	.word	0x40020040
 8002790:	40020058 	.word	0x40020058
 8002794:	40020070 	.word	0x40020070
 8002798:	40020088 	.word	0x40020088
 800279c:	400200a0 	.word	0x400200a0
 80027a0:	400200b8 	.word	0x400200b8
 80027a4:	40020410 	.word	0x40020410
 80027a8:	40020428 	.word	0x40020428
 80027ac:	40020440 	.word	0x40020440
 80027b0:	40020458 	.word	0x40020458
 80027b4:	40020470 	.word	0x40020470
 80027b8:	40020488 	.word	0x40020488
 80027bc:	400204a0 	.word	0x400204a0
 80027c0:	400204b8 	.word	0x400204b8
 80027c4:	58025408 	.word	0x58025408
 80027c8:	5802541c 	.word	0x5802541c
 80027cc:	58025430 	.word	0x58025430
 80027d0:	58025444 	.word	0x58025444
 80027d4:	58025458 	.word	0x58025458
 80027d8:	5802546c 	.word	0x5802546c
 80027dc:	58025480 	.word	0x58025480
 80027e0:	58025494 	.word	0x58025494

080027e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e237      	b.n	8002c66 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d004      	beq.n	800280c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2280      	movs	r2, #128	@ 0x80
 8002806:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e22c      	b.n	8002c66 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5c      	ldr	r2, [pc, #368]	@ (8002984 <HAL_DMA_Abort_IT+0x1a0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d04a      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5b      	ldr	r2, [pc, #364]	@ (8002988 <HAL_DMA_Abort_IT+0x1a4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d045      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a59      	ldr	r2, [pc, #356]	@ (800298c <HAL_DMA_Abort_IT+0x1a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d040      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a58      	ldr	r2, [pc, #352]	@ (8002990 <HAL_DMA_Abort_IT+0x1ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d03b      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a56      	ldr	r2, [pc, #344]	@ (8002994 <HAL_DMA_Abort_IT+0x1b0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d036      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a55      	ldr	r2, [pc, #340]	@ (8002998 <HAL_DMA_Abort_IT+0x1b4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d031      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a53      	ldr	r2, [pc, #332]	@ (800299c <HAL_DMA_Abort_IT+0x1b8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d02c      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a52      	ldr	r2, [pc, #328]	@ (80029a0 <HAL_DMA_Abort_IT+0x1bc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d027      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a50      	ldr	r2, [pc, #320]	@ (80029a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d022      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4f      	ldr	r2, [pc, #316]	@ (80029a8 <HAL_DMA_Abort_IT+0x1c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d01d      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_DMA_Abort_IT+0x1c8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d018      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a4c      	ldr	r2, [pc, #304]	@ (80029b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4a      	ldr	r2, [pc, #296]	@ (80029b4 <HAL_DMA_Abort_IT+0x1d0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00e      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a49      	ldr	r2, [pc, #292]	@ (80029b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a47      	ldr	r2, [pc, #284]	@ (80029bc <HAL_DMA_Abort_IT+0x1d8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_DMA_Abort_IT+0xc8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a46      	ldr	r2, [pc, #280]	@ (80029c0 <HAL_DMA_Abort_IT+0x1dc>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Abort_IT+0xcc>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_DMA_Abort_IT+0xce>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8086 	beq.w	80029c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2204      	movs	r2, #4
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <HAL_DMA_Abort_IT+0x1a0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <HAL_DMA_Abort_IT+0x1a4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_DMA_Abort_IT+0x1a8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002990 <HAL_DMA_Abort_IT+0x1ac>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_DMA_Abort_IT+0x1b0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <HAL_DMA_Abort_IT+0x1b4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a26      	ldr	r2, [pc, #152]	@ (800299c <HAL_DMA_Abort_IT+0x1b8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a25      	ldr	r2, [pc, #148]	@ (80029a0 <HAL_DMA_Abort_IT+0x1bc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	@ (80029a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <HAL_DMA_Abort_IT+0x1c4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	@ (80029ac <HAL_DMA_Abort_IT+0x1c8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1f      	ldr	r2, [pc, #124]	@ (80029b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_DMA_Abort_IT+0x1d0>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_DMA_Abort_IT+0x1d8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Abort_IT+0x17c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <HAL_DMA_Abort_IT+0x1dc>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <HAL_DMA_Abort_IT+0x18e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e178      	b.n	8002c64 <HAL_DMA_Abort_IT+0x480>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e16f      	b.n	8002c64 <HAL_DMA_Abort_IT+0x480>
 8002984:	40020010 	.word	0x40020010
 8002988:	40020028 	.word	0x40020028
 800298c:	40020040 	.word	0x40020040
 8002990:	40020058 	.word	0x40020058
 8002994:	40020070 	.word	0x40020070
 8002998:	40020088 	.word	0x40020088
 800299c:	400200a0 	.word	0x400200a0
 80029a0:	400200b8 	.word	0x400200b8
 80029a4:	40020410 	.word	0x40020410
 80029a8:	40020428 	.word	0x40020428
 80029ac:	40020440 	.word	0x40020440
 80029b0:	40020458 	.word	0x40020458
 80029b4:	40020470 	.word	0x40020470
 80029b8:	40020488 	.word	0x40020488
 80029bc:	400204a0 	.word	0x400204a0
 80029c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 020e 	bic.w	r2, r2, #14
 80029d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6c      	ldr	r2, [pc, #432]	@ (8002b8c <HAL_DMA_Abort_IT+0x3a8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04a      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b90 <HAL_DMA_Abort_IT+0x3ac>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d045      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a69      	ldr	r2, [pc, #420]	@ (8002b94 <HAL_DMA_Abort_IT+0x3b0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d040      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a68      	ldr	r2, [pc, #416]	@ (8002b98 <HAL_DMA_Abort_IT+0x3b4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d03b      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a66      	ldr	r2, [pc, #408]	@ (8002b9c <HAL_DMA_Abort_IT+0x3b8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d036      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a63      	ldr	r2, [pc, #396]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3c0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02c      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a62      	ldr	r2, [pc, #392]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3c4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a60      	ldr	r2, [pc, #384]	@ (8002bac <HAL_DMA_Abort_IT+0x3c8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d022      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d01d      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3d0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3d4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5a      	ldr	r2, [pc, #360]	@ (8002bbc <HAL_DMA_Abort_IT+0x3d8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a59      	ldr	r2, [pc, #356]	@ (8002bc0 <HAL_DMA_Abort_IT+0x3dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a57      	ldr	r2, [pc, #348]	@ (8002bc4 <HAL_DMA_Abort_IT+0x3e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x290>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a56      	ldr	r2, [pc, #344]	@ (8002bc8 <HAL_DMA_Abort_IT+0x3e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d108      	bne.n	8002a86 <HAL_DMA_Abort_IT+0x2a2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	e007      	b.n	8002a96 <HAL_DMA_Abort_IT+0x2b2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b8c <HAL_DMA_Abort_IT+0x3a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d072      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8002b90 <HAL_DMA_Abort_IT+0x3ac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d06d      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a39      	ldr	r2, [pc, #228]	@ (8002b94 <HAL_DMA_Abort_IT+0x3b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d068      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a37      	ldr	r2, [pc, #220]	@ (8002b98 <HAL_DMA_Abort_IT+0x3b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d063      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a36      	ldr	r2, [pc, #216]	@ (8002b9c <HAL_DMA_Abort_IT+0x3b8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d05e      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_DMA_Abort_IT+0x3bc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d059      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <HAL_DMA_Abort_IT+0x3c0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d054      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a31      	ldr	r2, [pc, #196]	@ (8002ba8 <HAL_DMA_Abort_IT+0x3c4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d04f      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a30      	ldr	r2, [pc, #192]	@ (8002bac <HAL_DMA_Abort_IT+0x3c8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <HAL_DMA_Abort_IT+0x3cc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <HAL_DMA_Abort_IT+0x3d0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <HAL_DMA_Abort_IT+0x3d4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_DMA_Abort_IT+0x3d8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_DMA_Abort_IT+0x3dc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a27      	ldr	r2, [pc, #156]	@ (8002bc4 <HAL_DMA_Abort_IT+0x3e0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <HAL_DMA_Abort_IT+0x3e4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a24      	ldr	r2, [pc, #144]	@ (8002bcc <HAL_DMA_Abort_IT+0x3e8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a22      	ldr	r2, [pc, #136]	@ (8002bd0 <HAL_DMA_Abort_IT+0x3ec>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a21      	ldr	r2, [pc, #132]	@ (8002bd4 <HAL_DMA_Abort_IT+0x3f0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd8 <HAL_DMA_Abort_IT+0x3f4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <HAL_DMA_Abort_IT+0x3f8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002be0 <HAL_DMA_Abort_IT+0x3fc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <HAL_DMA_Abort_IT+0x400>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x3a2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_DMA_Abort_IT+0x404>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d132      	bne.n	8002bec <HAL_DMA_Abort_IT+0x408>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e031      	b.n	8002bee <HAL_DMA_Abort_IT+0x40a>
 8002b8a:	bf00      	nop
 8002b8c:	40020010 	.word	0x40020010
 8002b90:	40020028 	.word	0x40020028
 8002b94:	40020040 	.word	0x40020040
 8002b98:	40020058 	.word	0x40020058
 8002b9c:	40020070 	.word	0x40020070
 8002ba0:	40020088 	.word	0x40020088
 8002ba4:	400200a0 	.word	0x400200a0
 8002ba8:	400200b8 	.word	0x400200b8
 8002bac:	40020410 	.word	0x40020410
 8002bb0:	40020428 	.word	0x40020428
 8002bb4:	40020440 	.word	0x40020440
 8002bb8:	40020458 	.word	0x40020458
 8002bbc:	40020470 	.word	0x40020470
 8002bc0:	40020488 	.word	0x40020488
 8002bc4:	400204a0 	.word	0x400204a0
 8002bc8:	400204b8 	.word	0x400204b8
 8002bcc:	58025408 	.word	0x58025408
 8002bd0:	5802541c 	.word	0x5802541c
 8002bd4:	58025430 	.word	0x58025430
 8002bd8:	58025444 	.word	0x58025444
 8002bdc:	58025458 	.word	0x58025458
 8002be0:	5802546c 	.word	0x5802546c
 8002be4:	58025480 	.word	0x58025480
 8002be8:	58025494 	.word	0x58025494
 8002bec:	2300      	movs	r3, #0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2201      	movs	r2, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00c      	beq.n	8002c44 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop

08002c70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c7c:	4b67      	ldr	r3, [pc, #412]	@ (8002e1c <HAL_DMA_IRQHandler+0x1ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a67      	ldr	r2, [pc, #412]	@ (8002e20 <HAL_DMA_IRQHandler+0x1b0>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e24 <HAL_DMA_IRQHandler+0x1b4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002e28 <HAL_DMA_IRQHandler+0x1b8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5c      	ldr	r2, [pc, #368]	@ (8002e2c <HAL_DMA_IRQHandler+0x1bc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e30 <HAL_DMA_IRQHandler+0x1c0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a59      	ldr	r2, [pc, #356]	@ (8002e34 <HAL_DMA_IRQHandler+0x1c4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a57      	ldr	r2, [pc, #348]	@ (8002e38 <HAL_DMA_IRQHandler+0x1c8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a56      	ldr	r2, [pc, #344]	@ (8002e3c <HAL_DMA_IRQHandler+0x1cc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a54      	ldr	r2, [pc, #336]	@ (8002e40 <HAL_DMA_IRQHandler+0x1d0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a53      	ldr	r2, [pc, #332]	@ (8002e44 <HAL_DMA_IRQHandler+0x1d4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_DMA_IRQHandler+0x1d8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_DMA_IRQHandler+0x1dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <HAL_DMA_IRQHandler+0x1e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_DMA_IRQHandler+0x1e4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <HAL_DMA_IRQHandler+0x1e8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4a      	ldr	r2, [pc, #296]	@ (8002e5c <HAL_DMA_IRQHandler+0x1ec>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xd2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a48      	ldr	r2, [pc, #288]	@ (8002e60 <HAL_DMA_IRQHandler+0x1f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_DMA_IRQHandler+0xd6>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_DMA_IRQHandler+0xd8>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 842b 	beq.w	80035a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2208      	movs	r2, #8
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80a2 	beq.w	8002ea8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2e      	ldr	r2, [pc, #184]	@ (8002e24 <HAL_DMA_IRQHandler+0x1b4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <HAL_DMA_IRQHandler+0x1b8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e2c <HAL_DMA_IRQHandler+0x1bc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2a      	ldr	r2, [pc, #168]	@ (8002e30 <HAL_DMA_IRQHandler+0x1c0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a28      	ldr	r2, [pc, #160]	@ (8002e34 <HAL_DMA_IRQHandler+0x1c4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a27      	ldr	r2, [pc, #156]	@ (8002e38 <HAL_DMA_IRQHandler+0x1c8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <HAL_DMA_IRQHandler+0x1cc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <HAL_DMA_IRQHandler+0x1d0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_DMA_IRQHandler+0x1d4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_DMA_IRQHandler+0x1d8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_DMA_IRQHandler+0x1dc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_DMA_IRQHandler+0x1e0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_DMA_IRQHandler+0x1e4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_DMA_IRQHandler+0x1e8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_DMA_IRQHandler+0x1ec>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x194>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	@ (8002e60 <HAL_DMA_IRQHandler+0x1f0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12f      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x1f4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e02e      	b.n	8002e78 <HAL_DMA_IRQHandler+0x208>
 8002e1a:	bf00      	nop
 8002e1c:	240049d0 	.word	0x240049d0
 8002e20:	1b4e81b5 	.word	0x1b4e81b5
 8002e24:	40020010 	.word	0x40020010
 8002e28:	40020028 	.word	0x40020028
 8002e2c:	40020040 	.word	0x40020040
 8002e30:	40020058 	.word	0x40020058
 8002e34:	40020070 	.word	0x40020070
 8002e38:	40020088 	.word	0x40020088
 8002e3c:	400200a0 	.word	0x400200a0
 8002e40:	400200b8 	.word	0x400200b8
 8002e44:	40020410 	.word	0x40020410
 8002e48:	40020428 	.word	0x40020428
 8002e4c:	40020440 	.word	0x40020440
 8002e50:	40020458 	.word	0x40020458
 8002e54:	40020470 	.word	0x40020470
 8002e58:	40020488 	.word	0x40020488
 8002e5c:	400204a0 	.word	0x400204a0
 8002e60:	400204b8 	.word	0x400204b8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2208      	movs	r2, #8
 8002e96:	409a      	lsls	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d06e      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a69      	ldr	r2, [pc, #420]	@ (8003068 <HAL_DMA_IRQHandler+0x3f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04a      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	@ (800306c <HAL_DMA_IRQHandler+0x3fc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d045      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a66      	ldr	r2, [pc, #408]	@ (8003070 <HAL_DMA_IRQHandler+0x400>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d040      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a64      	ldr	r2, [pc, #400]	@ (8003074 <HAL_DMA_IRQHandler+0x404>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a63      	ldr	r2, [pc, #396]	@ (8003078 <HAL_DMA_IRQHandler+0x408>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d036      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a61      	ldr	r2, [pc, #388]	@ (800307c <HAL_DMA_IRQHandler+0x40c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a60      	ldr	r2, [pc, #384]	@ (8003080 <HAL_DMA_IRQHandler+0x410>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d02c      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5e      	ldr	r2, [pc, #376]	@ (8003084 <HAL_DMA_IRQHandler+0x414>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d027      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_DMA_IRQHandler+0x418>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5b      	ldr	r2, [pc, #364]	@ (800308c <HAL_DMA_IRQHandler+0x41c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5a      	ldr	r2, [pc, #360]	@ (8003090 <HAL_DMA_IRQHandler+0x420>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a58      	ldr	r2, [pc, #352]	@ (8003094 <HAL_DMA_IRQHandler+0x424>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a57      	ldr	r2, [pc, #348]	@ (8003098 <HAL_DMA_IRQHandler+0x428>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a55      	ldr	r2, [pc, #340]	@ (800309c <HAL_DMA_IRQHandler+0x42c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a54      	ldr	r2, [pc, #336]	@ (80030a0 <HAL_DMA_IRQHandler+0x430>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x2ee>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a52      	ldr	r2, [pc, #328]	@ (80030a4 <HAL_DMA_IRQHandler+0x434>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10a      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x304>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e003      	b.n	8002f7c <HAL_DMA_IRQHandler+0x30c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	f043 0202 	orr.w	r2, r3, #2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 808f 	beq.w	80030d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003068 <HAL_DMA_IRQHandler+0x3f8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800306c <HAL_DMA_IRQHandler+0x3fc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a29      	ldr	r2, [pc, #164]	@ (8003070 <HAL_DMA_IRQHandler+0x400>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d040      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <HAL_DMA_IRQHandler+0x404>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d03b      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <HAL_DMA_IRQHandler+0x408>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d036      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a24      	ldr	r2, [pc, #144]	@ (800307c <HAL_DMA_IRQHandler+0x40c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a23      	ldr	r2, [pc, #140]	@ (8003080 <HAL_DMA_IRQHandler+0x410>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d02c      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_DMA_IRQHandler+0x414>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d027      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a20      	ldr	r2, [pc, #128]	@ (8003088 <HAL_DMA_IRQHandler+0x418>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_DMA_IRQHandler+0x41c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1d      	ldr	r2, [pc, #116]	@ (8003090 <HAL_DMA_IRQHandler+0x420>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_DMA_IRQHandler+0x424>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1a      	ldr	r2, [pc, #104]	@ (8003098 <HAL_DMA_IRQHandler+0x428>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a18      	ldr	r2, [pc, #96]	@ (800309c <HAL_DMA_IRQHandler+0x42c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_DMA_IRQHandler+0x430>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x3e2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <HAL_DMA_IRQHandler+0x434>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12a      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x438>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e023      	b.n	80030b0 <HAL_DMA_IRQHandler+0x440>
 8003068:	40020010 	.word	0x40020010
 800306c:	40020028 	.word	0x40020028
 8003070:	40020040 	.word	0x40020040
 8003074:	40020058 	.word	0x40020058
 8003078:	40020070 	.word	0x40020070
 800307c:	40020088 	.word	0x40020088
 8003080:	400200a0 	.word	0x400200a0
 8003084:	400200b8 	.word	0x400200b8
 8003088:	40020410 	.word	0x40020410
 800308c:	40020428 	.word	0x40020428
 8003090:	40020440 	.word	0x40020440
 8003094:	40020458 	.word	0x40020458
 8003098:	40020470 	.word	0x40020470
 800309c:	40020488 	.word	0x40020488
 80030a0:	400204a0 	.word	0x400204a0
 80030a4:	400204b8 	.word	0x400204b8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2204      	movs	r2, #4
 80030be:	409a      	lsls	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0204 	orr.w	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80a6 	beq.w	8003232 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a85      	ldr	r2, [pc, #532]	@ (8003300 <HAL_DMA_IRQHandler+0x690>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04a      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	@ (8003304 <HAL_DMA_IRQHandler+0x694>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d045      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a82      	ldr	r2, [pc, #520]	@ (8003308 <HAL_DMA_IRQHandler+0x698>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a80      	ldr	r2, [pc, #512]	@ (800330c <HAL_DMA_IRQHandler+0x69c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d03b      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7f      	ldr	r2, [pc, #508]	@ (8003310 <HAL_DMA_IRQHandler+0x6a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d036      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a7d      	ldr	r2, [pc, #500]	@ (8003314 <HAL_DMA_IRQHandler+0x6a4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7c      	ldr	r2, [pc, #496]	@ (8003318 <HAL_DMA_IRQHandler+0x6a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d02c      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a7a      	ldr	r2, [pc, #488]	@ (800331c <HAL_DMA_IRQHandler+0x6ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d027      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	@ (8003320 <HAL_DMA_IRQHandler+0x6b0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d022      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a77      	ldr	r2, [pc, #476]	@ (8003324 <HAL_DMA_IRQHandler+0x6b4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01d      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a76      	ldr	r2, [pc, #472]	@ (8003328 <HAL_DMA_IRQHandler+0x6b8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d018      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a74      	ldr	r2, [pc, #464]	@ (800332c <HAL_DMA_IRQHandler+0x6bc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	@ (8003330 <HAL_DMA_IRQHandler+0x6c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00e      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a71      	ldr	r2, [pc, #452]	@ (8003334 <HAL_DMA_IRQHandler+0x6c4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a70      	ldr	r2, [pc, #448]	@ (8003338 <HAL_DMA_IRQHandler+0x6c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d004      	beq.n	8003186 <HAL_DMA_IRQHandler+0x516>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6e      	ldr	r2, [pc, #440]	@ (800333c <HAL_DMA_IRQHandler+0x6cc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10a      	bne.n	800319c <HAL_DMA_IRQHandler+0x52c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e009      	b.n	80031b0 <HAL_DMA_IRQHandler+0x540>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03e      	beq.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2210      	movs	r2, #16
 80031be:	409a      	lsls	r2, r3
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d024      	beq.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
 80031f0:	e01f      	b.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01b      	beq.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e016      	b.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0208 	bic.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2220      	movs	r2, #32
 800323c:	409a      	lsls	r2, r3
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8110 	beq.w	8003468 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <HAL_DMA_IRQHandler+0x690>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04a      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2b      	ldr	r2, [pc, #172]	@ (8003304 <HAL_DMA_IRQHandler+0x694>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d045      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <HAL_DMA_IRQHandler+0x698>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a28      	ldr	r2, [pc, #160]	@ (800330c <HAL_DMA_IRQHandler+0x69c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <HAL_DMA_IRQHandler+0x6a0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d036      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a25      	ldr	r2, [pc, #148]	@ (8003314 <HAL_DMA_IRQHandler+0x6a4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <HAL_DMA_IRQHandler+0x6a8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a22      	ldr	r2, [pc, #136]	@ (800331c <HAL_DMA_IRQHandler+0x6ac>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a20      	ldr	r2, [pc, #128]	@ (8003320 <HAL_DMA_IRQHandler+0x6b0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003324 <HAL_DMA_IRQHandler+0x6b4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_DMA_IRQHandler+0x6b8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <HAL_DMA_IRQHandler+0x6bc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003330 <HAL_DMA_IRQHandler+0x6c0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a19      	ldr	r2, [pc, #100]	@ (8003334 <HAL_DMA_IRQHandler+0x6c4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <HAL_DMA_IRQHandler+0x6c8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x678>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a16      	ldr	r2, [pc, #88]	@ (800333c <HAL_DMA_IRQHandler+0x6cc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d12b      	bne.n	8003340 <HAL_DMA_IRQHandler+0x6d0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e02a      	b.n	8003354 <HAL_DMA_IRQHandler+0x6e4>
 80032fe:	bf00      	nop
 8003300:	40020010 	.word	0x40020010
 8003304:	40020028 	.word	0x40020028
 8003308:	40020040 	.word	0x40020040
 800330c:	40020058 	.word	0x40020058
 8003310:	40020070 	.word	0x40020070
 8003314:	40020088 	.word	0x40020088
 8003318:	400200a0 	.word	0x400200a0
 800331c:	400200b8 	.word	0x400200b8
 8003320:	40020410 	.word	0x40020410
 8003324:	40020428 	.word	0x40020428
 8003328:	40020440 	.word	0x40020440
 800332c:	40020458 	.word	0x40020458
 8003330:	40020470 	.word	0x40020470
 8003334:	40020488 	.word	0x40020488
 8003338:	400204a0 	.word	0x400204a0
 800333c:	400204b8 	.word	0x400204b8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8087 	beq.w	8003468 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2220      	movs	r2, #32
 8003364:	409a      	lsls	r2, r3
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b04      	cmp	r3, #4
 8003374:	d139      	bne.n	80033ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0216 	bic.w	r2, r2, #22
 8003384:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003394:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x736>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0208 	bic.w	r2, r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	223f      	movs	r2, #63	@ 0x3f
 80033c0:	409a      	lsls	r2, r3
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 834a 	beq.w	8003a74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	4798      	blx	r3
          }
          return;
 80033e8:	e344      	b.n	8003a74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d018      	beq.n	800342a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d108      	bne.n	8003418 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02c      	beq.n	8003468 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	4798      	blx	r3
 8003416:	e027      	b.n	8003468 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d023      	beq.n	8003468 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
 8003428:	e01e      	b.n	8003468 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10f      	bne.n	8003458 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0210 	bic.w	r2, r2, #16
 8003446:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8306 	beq.w	8003a7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8088 	beq.w	8003590 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7a      	ldr	r2, [pc, #488]	@ (8003678 <HAL_DMA_IRQHandler+0xa08>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a79      	ldr	r2, [pc, #484]	@ (800367c <HAL_DMA_IRQHandler+0xa0c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d045      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a77      	ldr	r2, [pc, #476]	@ (8003680 <HAL_DMA_IRQHandler+0xa10>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d040      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a76      	ldr	r2, [pc, #472]	@ (8003684 <HAL_DMA_IRQHandler+0xa14>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a74      	ldr	r2, [pc, #464]	@ (8003688 <HAL_DMA_IRQHandler+0xa18>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d036      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a73      	ldr	r2, [pc, #460]	@ (800368c <HAL_DMA_IRQHandler+0xa1c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a71      	ldr	r2, [pc, #452]	@ (8003690 <HAL_DMA_IRQHandler+0xa20>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a70      	ldr	r2, [pc, #448]	@ (8003694 <HAL_DMA_IRQHandler+0xa24>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003698 <HAL_DMA_IRQHandler+0xa28>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6d      	ldr	r2, [pc, #436]	@ (800369c <HAL_DMA_IRQHandler+0xa2c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01d      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6b      	ldr	r2, [pc, #428]	@ (80036a0 <HAL_DMA_IRQHandler+0xa30>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6a      	ldr	r2, [pc, #424]	@ (80036a4 <HAL_DMA_IRQHandler+0xa34>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a68      	ldr	r2, [pc, #416]	@ (80036a8 <HAL_DMA_IRQHandler+0xa38>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a67      	ldr	r2, [pc, #412]	@ (80036ac <HAL_DMA_IRQHandler+0xa3c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	@ (80036b0 <HAL_DMA_IRQHandler+0xa40>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_DMA_IRQHandler+0x8b8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a64      	ldr	r2, [pc, #400]	@ (80036b4 <HAL_DMA_IRQHandler+0xa44>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <HAL_DMA_IRQHandler+0x8ca>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e007      	b.n	800354a <HAL_DMA_IRQHandler+0x8da>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3301      	adds	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d307      	bcc.n	8003566 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f2      	bne.n	800354a <HAL_DMA_IRQHandler+0x8da>
 8003564:	e000      	b.n	8003568 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003566:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2203      	movs	r2, #3
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800357e:	e003      	b.n	8003588 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8272 	beq.w	8003a7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	e26c      	b.n	8003a7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a43      	ldr	r2, [pc, #268]	@ (80036b8 <HAL_DMA_IRQHandler+0xa48>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a42      	ldr	r2, [pc, #264]	@ (80036bc <HAL_DMA_IRQHandler+0xa4c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <HAL_DMA_IRQHandler+0xa50>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a3f      	ldr	r2, [pc, #252]	@ (80036c4 <HAL_DMA_IRQHandler+0xa54>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3d      	ldr	r2, [pc, #244]	@ (80036c8 <HAL_DMA_IRQHandler+0xa58>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a3c      	ldr	r2, [pc, #240]	@ (80036cc <HAL_DMA_IRQHandler+0xa5c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3a      	ldr	r2, [pc, #232]	@ (80036d0 <HAL_DMA_IRQHandler+0xa60>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x984>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a39      	ldr	r2, [pc, #228]	@ (80036d4 <HAL_DMA_IRQHandler+0xa64>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x988>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_DMA_IRQHandler+0x98a>
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 823f 	beq.w	8003a7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2204      	movs	r2, #4
 8003612:	409a      	lsls	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80cd 	beq.w	80037b8 <HAL_DMA_IRQHandler+0xb48>
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80c7 	beq.w	80037b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2204      	movs	r2, #4
 8003634:	409a      	lsls	r2, r3
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d049      	beq.n	80036d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8210 	beq.w	8003a78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003660:	e20a      	b.n	8003a78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8206 	beq.w	8003a78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003674:	e200      	b.n	8003a78 <HAL_DMA_IRQHandler+0xe08>
 8003676:	bf00      	nop
 8003678:	40020010 	.word	0x40020010
 800367c:	40020028 	.word	0x40020028
 8003680:	40020040 	.word	0x40020040
 8003684:	40020058 	.word	0x40020058
 8003688:	40020070 	.word	0x40020070
 800368c:	40020088 	.word	0x40020088
 8003690:	400200a0 	.word	0x400200a0
 8003694:	400200b8 	.word	0x400200b8
 8003698:	40020410 	.word	0x40020410
 800369c:	40020428 	.word	0x40020428
 80036a0:	40020440 	.word	0x40020440
 80036a4:	40020458 	.word	0x40020458
 80036a8:	40020470 	.word	0x40020470
 80036ac:	40020488 	.word	0x40020488
 80036b0:	400204a0 	.word	0x400204a0
 80036b4:	400204b8 	.word	0x400204b8
 80036b8:	58025408 	.word	0x58025408
 80036bc:	5802541c 	.word	0x5802541c
 80036c0:	58025430 	.word	0x58025430
 80036c4:	58025444 	.word	0x58025444
 80036c8:	58025458 	.word	0x58025458
 80036cc:	5802546c 	.word	0x5802546c
 80036d0:	58025480 	.word	0x58025480
 80036d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d160      	bne.n	80037a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7f      	ldr	r2, [pc, #508]	@ (80038e4 <HAL_DMA_IRQHandler+0xc74>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04a      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a7d      	ldr	r2, [pc, #500]	@ (80038e8 <HAL_DMA_IRQHandler+0xc78>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d045      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7c      	ldr	r2, [pc, #496]	@ (80038ec <HAL_DMA_IRQHandler+0xc7c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a7a      	ldr	r2, [pc, #488]	@ (80038f0 <HAL_DMA_IRQHandler+0xc80>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d03b      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a79      	ldr	r2, [pc, #484]	@ (80038f4 <HAL_DMA_IRQHandler+0xc84>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d036      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a77      	ldr	r2, [pc, #476]	@ (80038f8 <HAL_DMA_IRQHandler+0xc88>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a76      	ldr	r2, [pc, #472]	@ (80038fc <HAL_DMA_IRQHandler+0xc8c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d02c      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a74      	ldr	r2, [pc, #464]	@ (8003900 <HAL_DMA_IRQHandler+0xc90>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a73      	ldr	r2, [pc, #460]	@ (8003904 <HAL_DMA_IRQHandler+0xc94>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a71      	ldr	r2, [pc, #452]	@ (8003908 <HAL_DMA_IRQHandler+0xc98>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a70      	ldr	r2, [pc, #448]	@ (800390c <HAL_DMA_IRQHandler+0xc9c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6e      	ldr	r2, [pc, #440]	@ (8003910 <HAL_DMA_IRQHandler+0xca0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6d      	ldr	r2, [pc, #436]	@ (8003914 <HAL_DMA_IRQHandler+0xca4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6b      	ldr	r2, [pc, #428]	@ (8003918 <HAL_DMA_IRQHandler+0xca8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6a      	ldr	r2, [pc, #424]	@ (800391c <HAL_DMA_IRQHandler+0xcac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_IRQHandler+0xb12>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a68      	ldr	r2, [pc, #416]	@ (8003920 <HAL_DMA_IRQHandler+0xcb0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <HAL_DMA_IRQHandler+0xb24>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0208 	bic.w	r2, r2, #8
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e007      	b.n	80037a4 <HAL_DMA_IRQHandler+0xb34>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8165 	beq.w	8003a78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037b6:	e15f      	b.n	8003a78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2202      	movs	r2, #2
 80037c2:	409a      	lsls	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80c5 	beq.w	8003958 <HAL_DMA_IRQHandler+0xce8>
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80bf 	beq.w	8003958 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2202      	movs	r2, #2
 80037e4:	409a      	lsls	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 813a 	beq.w	8003a7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003810:	e134      	b.n	8003a7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8130 	beq.w	8003a7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003824:	e12a      	b.n	8003a7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 8089 	bne.w	8003944 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <HAL_DMA_IRQHandler+0xc74>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d04a      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a29      	ldr	r2, [pc, #164]	@ (80038e8 <HAL_DMA_IRQHandler+0xc78>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d045      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a28      	ldr	r2, [pc, #160]	@ (80038ec <HAL_DMA_IRQHandler+0xc7c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d040      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a26      	ldr	r2, [pc, #152]	@ (80038f0 <HAL_DMA_IRQHandler+0xc80>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d03b      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a25      	ldr	r2, [pc, #148]	@ (80038f4 <HAL_DMA_IRQHandler+0xc84>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d036      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a23      	ldr	r2, [pc, #140]	@ (80038f8 <HAL_DMA_IRQHandler+0xc88>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d031      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <HAL_DMA_IRQHandler+0xc8c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02c      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a20      	ldr	r2, [pc, #128]	@ (8003900 <HAL_DMA_IRQHandler+0xc90>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d027      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <HAL_DMA_IRQHandler+0xc94>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d022      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <HAL_DMA_IRQHandler+0xc98>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01d      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_DMA_IRQHandler+0xc9c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003910 <HAL_DMA_IRQHandler+0xca0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a19      	ldr	r2, [pc, #100]	@ (8003914 <HAL_DMA_IRQHandler+0xca4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a17      	ldr	r2, [pc, #92]	@ (8003918 <HAL_DMA_IRQHandler+0xca8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a16      	ldr	r2, [pc, #88]	@ (800391c <HAL_DMA_IRQHandler+0xcac>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_DMA_IRQHandler+0xc62>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_DMA_IRQHandler+0xcb0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d128      	bne.n	8003924 <HAL_DMA_IRQHandler+0xcb4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0214 	bic.w	r2, r2, #20
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e027      	b.n	8003934 <HAL_DMA_IRQHandler+0xcc4>
 80038e4:	40020010 	.word	0x40020010
 80038e8:	40020028 	.word	0x40020028
 80038ec:	40020040 	.word	0x40020040
 80038f0:	40020058 	.word	0x40020058
 80038f4:	40020070 	.word	0x40020070
 80038f8:	40020088 	.word	0x40020088
 80038fc:	400200a0 	.word	0x400200a0
 8003900:	400200b8 	.word	0x400200b8
 8003904:	40020410 	.word	0x40020410
 8003908:	40020428 	.word	0x40020428
 800390c:	40020440 	.word	0x40020440
 8003910:	40020458 	.word	0x40020458
 8003914:	40020470 	.word	0x40020470
 8003918:	40020488 	.word	0x40020488
 800391c:	400204a0 	.word	0x400204a0
 8003920:	400204b8 	.word	0x400204b8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020a 	bic.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003956:	e091      	b.n	8003a7c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2208      	movs	r2, #8
 8003962:	409a      	lsls	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8088 	beq.w	8003a7e <HAL_DMA_IRQHandler+0xe0e>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8082 	beq.w	8003a7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a41      	ldr	r2, [pc, #260]	@ (8003a84 <HAL_DMA_IRQHandler+0xe14>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d04a      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a3f      	ldr	r2, [pc, #252]	@ (8003a88 <HAL_DMA_IRQHandler+0xe18>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d045      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3e      	ldr	r2, [pc, #248]	@ (8003a8c <HAL_DMA_IRQHandler+0xe1c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d040      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a90 <HAL_DMA_IRQHandler+0xe20>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d03b      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003a94 <HAL_DMA_IRQHandler+0xe24>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d036      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a39      	ldr	r2, [pc, #228]	@ (8003a98 <HAL_DMA_IRQHandler+0xe28>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d031      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a38      	ldr	r2, [pc, #224]	@ (8003a9c <HAL_DMA_IRQHandler+0xe2c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d02c      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a36      	ldr	r2, [pc, #216]	@ (8003aa0 <HAL_DMA_IRQHandler+0xe30>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d027      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a35      	ldr	r2, [pc, #212]	@ (8003aa4 <HAL_DMA_IRQHandler+0xe34>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a33      	ldr	r2, [pc, #204]	@ (8003aa8 <HAL_DMA_IRQHandler+0xe38>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01d      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a32      	ldr	r2, [pc, #200]	@ (8003aac <HAL_DMA_IRQHandler+0xe3c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a30      	ldr	r2, [pc, #192]	@ (8003ab0 <HAL_DMA_IRQHandler+0xe40>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab4 <HAL_DMA_IRQHandler+0xe44>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab8 <HAL_DMA_IRQHandler+0xe48>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003abc <HAL_DMA_IRQHandler+0xe4c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xdaa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac0 <HAL_DMA_IRQHandler+0xe50>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <HAL_DMA_IRQHandler+0xdbc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 021c 	bic.w	r2, r2, #28
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e007      	b.n	8003a3c <HAL_DMA_IRQHandler+0xdcc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 020e 	bic.w	r2, r2, #14
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2201      	movs	r2, #1
 8003a46:	409a      	lsls	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e004      	b.n	8003a7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a7e:	3728      	adds	r7, #40	@ 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8

08003ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <DMA_CalcBaseAndBitshift+0x118>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d04a      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	@ (8003be0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d045      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3f      	ldr	r2, [pc, #252]	@ (8003be4 <DMA_CalcBaseAndBitshift+0x120>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d040      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3e      	ldr	r2, [pc, #248]	@ (8003be8 <DMA_CalcBaseAndBitshift+0x124>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d03b      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bec <DMA_CalcBaseAndBitshift+0x128>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d036      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d031      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a39      	ldr	r2, [pc, #228]	@ (8003bf4 <DMA_CalcBaseAndBitshift+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d02c      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a38      	ldr	r2, [pc, #224]	@ (8003bf8 <DMA_CalcBaseAndBitshift+0x134>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d027      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <DMA_CalcBaseAndBitshift+0x138>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d022      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a35      	ldr	r2, [pc, #212]	@ (8003c00 <DMA_CalcBaseAndBitshift+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01d      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <DMA_CalcBaseAndBitshift+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d018      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <DMA_CalcBaseAndBitshift+0x144>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <DMA_CalcBaseAndBitshift+0x148>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00e      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a2f      	ldr	r2, [pc, #188]	@ (8003c10 <DMA_CalcBaseAndBitshift+0x14c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d009      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <DMA_CalcBaseAndBitshift+0x150>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <DMA_CalcBaseAndBitshift+0xa8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <DMA_CalcBaseAndBitshift+0x154>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <DMA_CalcBaseAndBitshift+0xac>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <DMA_CalcBaseAndBitshift+0xae>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d024      	beq.n	8003bc0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3b10      	subs	r3, #16
 8003b7e:	4a27      	ldr	r2, [pc, #156]	@ (8003c1c <DMA_CalcBaseAndBitshift+0x158>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	4a24      	ldr	r2, [pc, #144]	@ (8003c20 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d908      	bls.n	8003bb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x160>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bae:	e00d      	b.n	8003bcc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x160>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bbe:	e005      	b.n	8003bcc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	aaaaaaab 	.word	0xaaaaaaab
 8003c20:	0801d24c 	.word	0x0801d24c
 8003c24:	fffffc00 	.word	0xfffffc00

08003c28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d120      	bne.n	8003c7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d858      	bhi.n	8003cf6 <DMA_CheckFifoParam+0xce>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <DMA_CheckFifoParam+0x24>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c5d 	.word	0x08003c5d
 8003c58:	08003cf7 	.word	0x08003cf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d048      	beq.n	8003cfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c6c:	e045      	b.n	8003cfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c76:	d142      	bne.n	8003cfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c7c:	e03f      	b.n	8003cfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c86:	d123      	bne.n	8003cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d838      	bhi.n	8003d02 <DMA_CheckFifoParam+0xda>
 8003c90:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <DMA_CheckFifoParam+0x70>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003ca9 	.word	0x08003ca9
 8003c9c:	08003caf 	.word	0x08003caf
 8003ca0:	08003ca9 	.word	0x08003ca9
 8003ca4:	08003cc1 	.word	0x08003cc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
        break;
 8003cac:	e030      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d025      	beq.n	8003d06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cbe:	e022      	b.n	8003d06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cc8:	d11f      	bne.n	8003d0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cce:	e01c      	b.n	8003d0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d902      	bls.n	8003cde <DMA_CheckFifoParam+0xb6>
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d003      	beq.n	8003ce4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003cdc:	e018      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce2:	e015      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8003cf4:	e00b      	b.n	8003d0e <DMA_CheckFifoParam+0xe6>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e00a      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e008      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003cfe:	bf00      	nop
 8003d00:	e006      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d02:	bf00      	nop
 8003d04:	e004      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <DMA_CheckFifoParam+0xe8>
    break;
 8003d0e:	bf00      	nop
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a35      	ldr	r2, [pc, #212]	@ (8003e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a30      	ldr	r2, [pc, #192]	@ (8003e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01a      	beq.n	8003dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	4a28      	ldr	r2, [pc, #160]	@ (8003e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4b26      	ldr	r3, [pc, #152]	@ (8003e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a24      	ldr	r2, [pc, #144]	@ (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003dac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003dbc:	e024      	b.n	8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	3b10      	subs	r3, #16
 8003dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d806      	bhi.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d902      	bls.n	8003de6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3308      	adds	r3, #8
 8003de4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	461a      	mov	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003df8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	58025408 	.word	0x58025408
 8003e18:	5802541c 	.word	0x5802541c
 8003e1c:	58025430 	.word	0x58025430
 8003e20:	58025444 	.word	0x58025444
 8003e24:	58025458 	.word	0x58025458
 8003e28:	5802546c 	.word	0x5802546c
 8003e2c:	58025480 	.word	0x58025480
 8003e30:	58025494 	.word	0x58025494
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	16009600 	.word	0x16009600
 8003e3c:	58025880 	.word	0x58025880
 8003e40:	aaaaaaab 	.word	0xaaaaaaab
 8003e44:	400204b8 	.word	0x400204b8
 8003e48:	4002040f 	.word	0x4002040f
 8003e4c:	10008200 	.word	0x10008200
 8003e50:	40020880 	.word	0x40020880

08003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04a      	beq.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d847      	bhi.n	8003f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a25      	ldr	r2, [pc, #148]	@ (8003f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d022      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	@ (8003f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d01d      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	@ (8003f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d018      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00e      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d009      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003edc:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ede:	e009      	b.n	8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4b14      	ldr	r3, [pc, #80]	@ (8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a11      	ldr	r2, [pc, #68]	@ (8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ef2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	58025408 	.word	0x58025408
 8003f10:	5802541c 	.word	0x5802541c
 8003f14:	58025430 	.word	0x58025430
 8003f18:	58025444 	.word	0x58025444
 8003f1c:	58025458 	.word	0x58025458
 8003f20:	5802546c 	.word	0x5802546c
 8003f24:	58025480 	.word	0x58025480
 8003f28:	58025494 	.word	0x58025494
 8003f2c:	1600963f 	.word	0x1600963f
 8003f30:	58025940 	.word	0x58025940
 8003f34:	1000823f 	.word	0x1000823f
 8003f38:	40020940 	.word	0x40020940

08003f3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0e3      	b.n	8004116 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2223      	movs	r2, #35	@ 0x23
 8003f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f007 fbcd 	bl	800b700 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	4b6e      	ldr	r3, [pc, #440]	@ (8004120 <HAL_ETH_Init+0x1e4>)
 8003f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8004120 <HAL_ETH_Init+0x1e4>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f76:	4b6a      	ldr	r3, [pc, #424]	@ (8004120 <HAL_ETH_Init+0x1e4>)
 8003f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7a1b      	ldrb	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fd ff65 	bl	8001e5c <HAL_SYSCFG_ETHInterfaceSelect>
 8003f92:	e003      	b.n	8003f9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f94:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003f98:	f7fd ff60 	bl	8001e5c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f9c:	4b61      	ldr	r3, [pc, #388]	@ (8004124 <HAL_ETH_Init+0x1e8>)
 8003f9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7fd ff44 	bl	8001e44 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fbe:	e011      	b.n	8003fe4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003fc0:	f7fd ff40 	bl	8001e44 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003fce:	d909      	bls.n	8003fe4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	22e0      	movs	r2, #224	@ 0xe0
 8003fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e098      	b.n	8004116 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e4      	bne.n	8003fc0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 ff1c 	bl	8004e34 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003ffc:	f002 fe1a 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8004000:	4603      	mov	r3, r0
 8004002:	4a49      	ldr	r2, [pc, #292]	@ (8004128 <HAL_ETH_Init+0x1ec>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	0c9a      	lsrs	r2, r3, #18
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3a01      	subs	r2, #1
 8004010:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 f90d 	bl	8005234 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004022:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004026:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004032:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004036:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	22e0      	movs	r2, #224	@ 0xe0
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e05d      	b.n	8004116 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004062:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004066:	4b31      	ldr	r3, [pc, #196]	@ (800412c <HAL_ETH_Init+0x1f0>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6952      	ldr	r2, [r2, #20]
 800406e:	0051      	lsls	r1, r2, #1
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	430b      	orrs	r3, r1
 8004076:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800407a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f001 f975 	bl	800536e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f001 f9bb 	bl	8005400 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	3305      	adds	r3, #5
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	021a      	lsls	r2, r3, #8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	3303      	adds	r3, #3
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	061a      	lsls	r2, r3, #24
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	3302      	adds	r3, #2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80040d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80040d8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_ETH_Init+0x1f4>)
 80040ea:	430b      	orrs	r3, r1
 80040ec:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <HAL_ETH_Init+0x1f8>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2210      	movs	r2, #16
 8004110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	58024400 	.word	0x58024400
 8004124:	58000400 	.word	0x58000400
 8004128:	431bde83 	.word	0x431bde83
 800412c:	ffff8001 	.word	0xffff8001
 8004130:	0c020060 	.word	0x0c020060
 8004134:	0c20c000 	.word	0x0c20c000

08004138 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004146:	2b10      	cmp	r3, #16
 8004148:	d165      	bne.n	8004216 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2223      	movs	r2, #35	@ 0x23
 800414e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2204      	movs	r2, #4
 800415c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9e4 	bl	800452c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800417c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004188:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004198:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80041b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041b4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0202 	orr.w	r2, r2, #2
 80041da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8004200:	430b      	orrs	r3, r1
 8004202:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004206:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2223      	movs	r2, #35	@ 0x23
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800422e:	2b23      	cmp	r3, #35	@ 0x23
 8004230:	d165      	bne.n	80042fe <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2223      	movs	r2, #35	@ 0x23
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004242:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b30      	ldr	r3, [pc, #192]	@ (800430c <HAL_ETH_Stop_IT+0xec>)
 800424c:	400b      	ands	r3, r1
 800424e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004252:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800425e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800426e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800427a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800428a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0202 	bic.w	r2, r2, #2
 80042c0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e00e      	b.n	80042e6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	3212      	adds	r2, #18
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d9ed      	bls.n	80042c8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2210      	movs	r2, #16
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	ffff2f3e 	.word	0xffff2f3e

08004310 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e03a      	b.n	80043aa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433a:	2b23      	cmp	r3, #35	@ 0x23
 800433c:	d134      	bne.n	80043a8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004346:	2201      	movs	r2, #1
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 f8b6 	bl	80054bc <ETH_Prepare_Tx_Descriptors>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f043 0202 	orr.w	r2, r3, #2
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e01f      	b.n	80043aa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800436a:	f3bf 8f4f 	dsb	sy
}
 800436e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	629a      	str	r2, [r3, #40]	@ 0x28
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	2b03      	cmp	r3, #3
 8004380:	d904      	bls.n	800438c <HAL_ETH_Transmit_IT+0x7c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	1f1a      	subs	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3106      	adds	r1, #6
 8004398:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800439c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e000      	b.n	80043aa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
  }
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b088      	sub	sp, #32
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0a2      	b.n	8004524 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043e4:	2b23      	cmp	r3, #35	@ 0x23
 80043e6:	d001      	beq.n	80043ec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e09b      	b.n	8004524 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	3212      	adds	r2, #18
 80043f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004402:	f1c3 0304 	rsb	r3, r3, #4
 8004406:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004408:	e064      	b.n	80044d4 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_ETH_ReadData+0x88>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d03a      	beq.n	80044b0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f007 fb18 	bl	800bac4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3301      	adds	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d902      	bls.n	80044c2 <HAL_ETH_ReadData+0x110>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3b04      	subs	r3, #4
 80044c0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	3212      	adds	r2, #18
 80044c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044cc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3301      	adds	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80044d8:	2b00      	cmp	r3, #0
 80044da:	db06      	blt.n	80044ea <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d202      	bcs.n	80044ea <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d08f      	beq.n	800440a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f814 	bl	800452c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004540:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	3212      	adds	r2, #18
 8004548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004552:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004554:	e038      	b.n	80045c8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d112      	bne.n	8004584 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800455e:	f107 0308 	add.w	r3, r7, #8
 8004562:	4618      	mov	r0, r3
 8004564:	f007 fa7e 	bl	800ba64 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	74fb      	strb	r3, [r7, #19]
 8004572:	e007      	b.n	8004584 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	461a      	mov	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	461a      	mov	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01e      	beq.n	80045c8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	2b00      	cmp	r3, #0
 8004590:	d004      	beq.n	800459c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e003      	b.n	80045a4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80045a2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d902      	bls.n	80045b6 <ETH_UpdateDescriptor+0x8a>
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3b04      	subs	r3, #4
 80045b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	3212      	adds	r2, #18
 80045bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c0:	617b      	str	r3, [r7, #20]
      desccount--;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <ETH_UpdateDescriptor+0xa8>
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1c0      	bne.n	8004556 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d01b      	beq.n	8004616 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80045e8:	f3bf 8f5f 	dmb	sy
}
 80045ec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6919      	ldr	r1, [r3, #16]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	18ca      	adds	r2, r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004606:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004616:	bf00      	nop
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3318      	adds	r3, #24
 800462a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800463c:	e047      	b.n	80046ce <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800463e:	2301      	movs	r3, #1
 8004640:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3b01      	subs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3304      	adds	r3, #4
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3301      	adds	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d902      	bls.n	800466a <HAL_ETH_ReleaseTxPacket+0x4c>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3b04      	subs	r3, #4
 8004668:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02c      	beq.n	80046ce <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68d9      	ldr	r1, [r3, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db1f      	blt.n	80046ca <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3304      	adds	r3, #4
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	f007 fa7c 	bl	800bb94 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3304      	adds	r3, #4
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	2200      	movs	r2, #0
 80046a8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3301      	adds	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d902      	bls.n	80046bc <HAL_ETH_ReleaseTxPacket+0x9e>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046c8:	e001      	b.n	80046ce <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_ETH_ReleaseTxPacket+0xbc>
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1b1      	bne.n	800463e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004712:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <HAL_ETH_IRQHandler+0x1e4>)
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <HAL_ETH_IRQHandler+0x60>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004734:	461a      	mov	r2, r3
 8004736:	f248 0340 	movw	r3, #32832	@ 0x8040
 800473a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f006 fd28 	bl	800b194 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_ETH_IRQHandler+0x8c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004760:	461a      	mov	r2, r3
 8004762:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004766:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f006 fd22 	bl	800b1b4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d047      	beq.n	800480a <HAL_ETH_IRQHandler+0x126>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d042      	beq.n	800480a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f043 0208 	orr.w	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01e      	beq.n	80047dc <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80047aa:	f241 1302 	movw	r3, #4354	@ 0x1102
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047be:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80047ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047ce:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	22e0      	movs	r2, #224	@ 0xe0
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80047da:	e013      	b.n	8004804 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80047e8:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047fa:	461a      	mov	r2, r3
 80047fc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004800:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f006 fce5 	bl	800b1d4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d104      	bne.n	800481e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f043 0210 	orr.w	r2, r3, #16
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	22e0      	movs	r2, #224	@ 0xe0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f006 fcc5 	bl	800b1d4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00f      	beq.n	800487c <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004864:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f82c 	bl	80048cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f821 	bl	80048e0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80048b0:	4b05      	ldr	r3, [pc, #20]	@ (80048c8 <HAL_ETH_IRQHandler+0x1e4>)
 80048b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f81b 	bl	80048f4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58000080 	.word	0x58000080

080048cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e03e      	b.n	80049a8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004932:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	055b      	lsls	r3, r3, #21
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f043 030c 	orr.w	r3, r3, #12
 8004956:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800496a:	f7fd fa6b 	bl	8001e44 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004970:	e009      	b.n	8004986 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004972:	f7fd fa67 	bl	8001e44 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004980:	d901      	bls.n	8004986 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e010      	b.n	80049a8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ed      	bne.n	8004972 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800499e:	b29b      	uxth	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e03c      	b.n	8004a4c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049da:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	055b      	lsls	r3, r3, #21
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f023 030c 	bic.w	r3, r3, #12
 80049fe:	f043 0304 	orr.w	r3, r3, #4
 8004a02:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a12:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004a16:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8004a1e:	f7fd fa11 	bl	8001e44 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a24:	e009      	b.n	8004a3a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004a26:	f7fd fa0d 	bl	8001e44 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a34:	d901      	bls.n	8004a3a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e008      	b.n	8004a4c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ed      	bne.n	8004a26 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40028000 	.word	0x40028000

08004a58 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e1c3      	b.n	8004df4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 020c 	and.w	r2, r3, #12
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0e5b      	lsrs	r3, r3, #25
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	0c1b      	lsrs	r3, r3, #16
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004d80:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004d90:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e00b      	b.n	8004e2c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d105      	bne.n	8004e2a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f865 	bl	8004ef0 <ETH_SetMACConfig>

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e4e:	f001 fef1 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8004e52:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d804      	bhi.n	8004e66 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e022      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a16      	ldr	r2, [pc, #88]	@ (8004ec4 <HAL_ETH_SetMDIOClockRange+0x90>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d204      	bcs.n	8004e78 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e019      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <HAL_ETH_SetMDIOClockRange+0x94>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d915      	bls.n	8004eac <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <HAL_ETH_SetMDIOClockRange+0x98>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d804      	bhi.n	8004e92 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e00c      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d804      	bhi.n	8004ea4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e003      	b.n	8004eac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8004eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	02160ebf 	.word	0x02160ebf
 8004ec4:	03938700 	.word	0x03938700
 8004ec8:	05f5e0ff 	.word	0x05f5e0ff
 8004ecc:	08f0d17f 	.word	0x08f0d17f
 8004ed0:	0ee6b27f 	.word	0x0ee6b27f

08004ed4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	791b      	ldrb	r3, [r3, #4]
 8004f08:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	7b1b      	ldrb	r3, [r3, #12]
 8004f10:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	7b5b      	ldrb	r3, [r3, #13]
 8004f18:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	7b9b      	ldrb	r3, [r3, #14]
 8004f20:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	7bdb      	ldrb	r3, [r3, #15]
 8004f28:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	7c12      	ldrb	r2, [r2, #16]
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d102      	bne.n	8004f3a <ETH_SetMACConfig+0x4a>
 8004f34:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004f38:	e000      	b.n	8004f3c <ETH_SetMACConfig+0x4c>
 8004f3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	7c52      	ldrb	r2, [r2, #17]
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	d102      	bne.n	8004f4c <ETH_SetMACConfig+0x5c>
 8004f46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f4a:	e000      	b.n	8004f4e <ETH_SetMACConfig+0x5e>
 8004f4c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	7c9b      	ldrb	r3, [r3, #18]
 8004f54:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f56:	431a      	orrs	r2, r3
               macconf->Speed |
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f5c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004f62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7f1b      	ldrb	r3, [r3, #28]
 8004f68:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004f6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	7f5b      	ldrb	r3, [r3, #29]
 8004f70:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	7f92      	ldrb	r2, [r2, #30]
 8004f78:	2a00      	cmp	r2, #0
 8004f7a:	d102      	bne.n	8004f82 <ETH_SetMACConfig+0x92>
 8004f7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f80:	e000      	b.n	8004f84 <ETH_SetMACConfig+0x94>
 8004f82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004f84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7fdb      	ldrb	r3, [r3, #31]
 8004f8a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004f8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f94:	2a00      	cmp	r2, #0
 8004f96:	d102      	bne.n	8004f9e <ETH_SetMACConfig+0xae>
 8004f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f9c:	e000      	b.n	8004fa0 <ETH_SetMACConfig+0xb0>
 8004f9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fa0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004fb0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b56      	ldr	r3, [pc, #344]	@ (800511c <ETH_SetMACConfig+0x22c>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	68f9      	ldr	r1, [r7, #12]
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fda:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004fdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fe4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004fe6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ff0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d102      	bne.n	8005002 <ETH_SetMACConfig+0x112>
 8004ffc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005000:	e000      	b.n	8005004 <ETH_SetMACConfig+0x114>
 8005002:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005004:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <ETH_SetMACConfig+0x230>)
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	430b      	orrs	r3, r1
 8005020:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005028:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4b3a      	ldr	r3, [pc, #232]	@ (8005124 <ETH_SetMACConfig+0x234>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	68f9      	ldr	r1, [r7, #12]
 8005042:	430b      	orrs	r3, r1
 8005044:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800504c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005052:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800505a:	2a00      	cmp	r2, #0
 800505c:	d101      	bne.n	8005062 <ETH_SetMACConfig+0x172>
 800505e:	2280      	movs	r2, #128	@ 0x80
 8005060:	e000      	b.n	8005064 <ETH_SetMACConfig+0x174>
 8005062:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005064:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800506a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005076:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800507a:	4013      	ands	r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	68f9      	ldr	r1, [r7, #12]
 8005082:	430b      	orrs	r3, r1
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800508c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005094:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a2:	f023 0103 	bic.w	r1, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80050ba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d101      	bne.n	80050de <ETH_SetMACConfig+0x1ee>
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0x1f0>
 80050de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80050e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80050e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80050f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005100:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	430a      	orrs	r2, r1
 800510c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	00048083 	.word	0x00048083
 8005120:	c0f88000 	.word	0xc0f88000
 8005124:	fffffef0 	.word	0xfffffef0

08005128 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b38      	ldr	r3, [pc, #224]	@ (8005220 <ETH_SetDMAConfig+0xf8>)
 800513e:	4013      	ands	r3, r2
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	6811      	ldr	r1, [r2, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	430b      	orrs	r3, r1
 800514a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800514e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	791b      	ldrb	r3, [r3, #4]
 8005154:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800515a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	7b1b      	ldrb	r3, [r3, #12]
 8005160:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4b2c      	ldr	r3, [pc, #176]	@ (8005224 <ETH_SetDMAConfig+0xfc>)
 8005172:	4013      	ands	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	68f9      	ldr	r1, [r7, #12]
 800517a:	430b      	orrs	r3, r1
 800517c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005180:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	7b5b      	ldrb	r3, [r3, #13]
 8005186:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005198:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800519c:	4b22      	ldr	r3, [pc, #136]	@ (8005228 <ETH_SetDMAConfig+0x100>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6812      	ldr	r2, [r2, #0]
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	430b      	orrs	r3, r1
 80051a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051ac:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7d1b      	ldrb	r3, [r3, #20]
 80051b8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80051ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	7f5b      	ldrb	r3, [r3, #29]
 80051c0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80051d2:	4b16      	ldr	r3, [pc, #88]	@ (800522c <ETH_SetDMAConfig+0x104>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	430b      	orrs	r3, r1
 80051de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051e2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	7f1b      	ldrb	r3, [r3, #28]
 80051ea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <ETH_SetDMAConfig+0x108>)
 8005202:	4013      	ands	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	430b      	orrs	r3, r1
 800520c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005210:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	ffff87fd 	.word	0xffff87fd
 8005224:	ffff2ffe 	.word	0xffff2ffe
 8005228:	fffec000 	.word	0xfffec000
 800522c:	ffc0efef 	.word	0xffc0efef
 8005230:	7fc0ffff 	.word	0x7fc0ffff

08005234 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b0a4      	sub	sp, #144	@ 0x90
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005242:	2300      	movs	r3, #0
 8005244:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005246:	2300      	movs	r3, #0
 8005248:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005274:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800527c:	2300      	movs	r3, #0
 800527e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800528c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005290:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005298:	2300      	movs	r3, #0
 800529a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80052ae:	2300      	movs	r3, #0
 80052b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80052b6:	2300      	movs	r3, #0
 80052b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80052cc:	2320      	movs	r3, #32
 80052ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80052d8:	2300      	movs	r3, #0
 80052da:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80052de:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052e8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80052f0:	2302      	movs	r3, #2
 80052f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800530e:	2300      	movs	r3, #0
 8005310:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005318:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fde6 	bl	8004ef0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005324:	2301      	movs	r3, #1
 8005326:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005328:	2301      	movs	r3, #1
 800532a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005336:	2300      	movs	r3, #0
 8005338:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800533a:	2300      	movs	r3, #0
 800533c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800533e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005342:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005344:	2300      	movs	r3, #0
 8005346:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800534c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005354:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fee1 	bl	8005128 <ETH_SetDMAConfig>
}
 8005366:	bf00      	nop
 8005368:	3790      	adds	r7, #144	@ 0x90
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e01d      	b.n	80053b8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68d9      	ldr	r1, [r3, #12]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2200      	movs	r2, #0
 8005398:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2200      	movs	r2, #0
 800539e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	3206      	adds	r2, #6
 80053ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d9de      	bls.n	800537c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053cc:	461a      	mov	r2, r3
 80053ce:	2303      	movs	r3, #3
 80053d0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053e0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e023      	b.n	8005456 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6919      	ldr	r1, [r3, #16]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2200      	movs	r2, #0
 800543c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	3212      	adds	r2, #18
 800544c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d9d8      	bls.n	800540e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005482:	461a      	mov	r2, r3
 8005484:	2303      	movs	r3, #3
 8005486:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005496:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054aa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80054bc:	b480      	push	{r7}
 80054be:	b091      	sub	sp, #68	@ 0x44
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3318      	adds	r3, #24
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054fe:	d007      	beq.n	8005510 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	3304      	adds	r3, #4
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005510:	2302      	movs	r3, #2
 8005512:	e266      	b.n	80059e2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d044      	beq.n	80055aa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	4b75      	ldr	r3, [pc, #468]	@ (80056fc <ETH_Prepare_Tx_Descriptors+0x240>)
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800552c:	431a      	orrs	r2, r3
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800554c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d027      	beq.n	80055aa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	b29a      	uxth	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005584:	431a      	orrs	r2, r3
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005598:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80055a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00e      	beq.n	80055d4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	4b51      	ldr	r3, [pc, #324]	@ (8005700 <ETH_Prepare_Tx_Descriptors+0x244>)
 80055bc:	4013      	ands	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	6992      	ldr	r2, [r2, #24]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d105      	bne.n	80055ec <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d036      	beq.n	800565a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80055f8:	f3bf 8f5f 	dmb	sy
}
 80055fc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800560a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560c:	3301      	adds	r3, #1
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	2b03      	cmp	r3, #3
 8005614:	d902      	bls.n	800561c <ETH_Prepare_Tx_Descriptors+0x160>
 8005616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005618:	3b04      	subs	r3, #4
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005624:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8005626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005628:	3301      	adds	r3, #1
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005634:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005638:	d10f      	bne.n	800565a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005644:	f3bf 8f5f 	dmb	sy
}
 8005648:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	e1c3      	b.n	80059e2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	3301      	adds	r3, #1
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	4b24      	ldr	r3, [pc, #144]	@ (8005700 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005670:	4013      	ands	r3, r2
 8005672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005674:	6852      	ldr	r2, [r2, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800567c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8005684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4b1a      	ldr	r3, [pc, #104]	@ (8005704 <ETH_Prepare_Tx_Descriptors+0x248>)
 800569a:	4013      	ands	r3, r2
 800569c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800569e:	6852      	ldr	r2, [r2, #4]
 80056a0:	0412      	lsls	r2, r2, #16
 80056a2:	431a      	orrs	r2, r3
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	e008      	b.n	80056bc <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <ETH_Prepare_Tx_Descriptors+0x248>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ba:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d021      	beq.n	800570c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	04db      	lsls	r3, r3, #19
 80056d6:	431a      	orrs	r2, r3
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	69d2      	ldr	r2, [r2, #28]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	e02e      	b.n	800575a <ETH_Prepare_Tx_Descriptors+0x29e>
 80056fc:	ffff0000 	.word	0xffff0000
 8005700:	ffffc000 	.word	0xffffc000
 8005704:	c000ffff 	.word	0xc000ffff
 8005708:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	4b7b      	ldr	r3, [pc, #492]	@ (8005900 <ETH_Prepare_Tx_Descriptors+0x444>)
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	6852      	ldr	r2, [r2, #4]
 8005718:	431a      	orrs	r2, r3
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d008      	beq.n	800573c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	431a      	orrs	r2, r3
 8005738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d008      	beq.n	8005778 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	431a      	orrs	r2, r3
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005790:	f3bf 8f5f 	dmb	sy
}
 8005794:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80da 	beq.w	8005964 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	431a      	orrs	r2, r3
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80057c2:	e0cf      	b.n	8005964 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d2:	3301      	adds	r3, #1
 80057d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d902      	bls.n	80057e2 <ETH_Prepare_Tx_Descriptors+0x326>
 80057dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057de:	3b04      	subs	r3, #4
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005804:	d007      	beq.n	8005816 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580a:	3304      	adds	r3, #4
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d029      	beq.n	800586a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005824:	2300      	movs	r3, #0
 8005826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005828:	e019      	b.n	800585e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800582a:	f3bf 8f5f 	dmb	sy
}
 800582e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	3301      	adds	r3, #1
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005844:	2b03      	cmp	r3, #3
 8005846:	d902      	bls.n	800584e <ETH_Prepare_Tx_Descriptors+0x392>
 8005848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800584a:	3b04      	subs	r3, #4
 800584c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	3301      	adds	r3, #1
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800585e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005862:	429a      	cmp	r2, r3
 8005864:	d3e1      	bcc.n	800582a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005866:	2302      	movs	r3, #2
 8005868:	e0bb      	b.n	80059e2 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800586a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586c:	3301      	adds	r3, #1
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b1f      	ldr	r3, [pc, #124]	@ (8005904 <ETH_Prepare_Tx_Descriptors+0x448>)
 8005886:	4013      	ands	r3, r2
 8005888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800588a:	6852      	ldr	r2, [r2, #4]
 800588c:	431a      	orrs	r2, r3
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d012      	beq.n	80058c0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b16      	ldr	r3, [pc, #88]	@ (8005908 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b4:	6852      	ldr	r2, [r2, #4]
 80058b6:	0412      	lsls	r2, r2, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	e008      	b.n	80058d2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <ETH_Prepare_Tx_Descriptors+0x450>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	69d2      	ldr	r2, [r2, #28]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	e020      	b.n	8005940 <ETH_Prepare_Tx_Descriptors+0x484>
 80058fe:	bf00      	nop
 8005900:	ffff8000 	.word	0xffff8000
 8005904:	ffffc000 	.word	0xffffc000
 8005908:	c000ffff 	.word	0xc000ffff
 800590c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <ETH_Prepare_Tx_Descriptors+0x534>)
 8005916:	4013      	ands	r3, r2
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	431a      	orrs	r2, r3
 800591e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005920:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	431a      	orrs	r2, r3
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	3301      	adds	r3, #1
 8005944:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005946:	f3bf 8f5f 	dmb	sy
}
 800594a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f af2b 	bne.w	80057c4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	609a      	str	r2, [r3, #8]
 8005980:	e005      	b.n	800598e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800599e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a2:	3304      	adds	r3, #4
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80059ae:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b0:	f3ef 8310 	mrs	r3, PRIMASK
 80059b4:	613b      	str	r3, [r7, #16]
  return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	4413      	add	r3, r2
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3744      	adds	r7, #68	@ 0x44
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	ffff8000 	.word	0xffff8000

080059f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a02:	4b86      	ldr	r3, [pc, #536]	@ (8005c1c <HAL_GPIO_Init+0x228>)
 8005a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a06:	e18c      	b.n	8005d22 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	fa01 f303 	lsl.w	r3, r1, r3
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 817e 	beq.w	8005d1c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d005      	beq.n	8005a38 <HAL_GPIO_Init+0x44>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d130      	bne.n	8005a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a6e:	2201      	movs	r2, #1
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0201 	and.w	r2, r3, #1
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d017      	beq.n	8005ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d123      	bne.n	8005b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	08da      	lsrs	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3208      	adds	r2, #8
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	08da      	lsrs	r2, r3, #3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3208      	adds	r2, #8
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	2203      	movs	r2, #3
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 0203 	and.w	r2, r3, #3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80d8 	beq.w	8005d1c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <HAL_GPIO_Init+0x22c>)
 8005b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b72:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <HAL_GPIO_Init+0x22c>)
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b7c:	4b28      	ldr	r3, [pc, #160]	@ (8005c20 <HAL_GPIO_Init+0x22c>)
 8005b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b8a:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <HAL_GPIO_Init+0x230>)
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	3302      	adds	r3, #2
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <HAL_GPIO_Init+0x234>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d04a      	beq.n	8005c4c <HAL_GPIO_Init+0x258>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <HAL_GPIO_Init+0x238>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d02b      	beq.n	8005c16 <HAL_GPIO_Init+0x222>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_GPIO_Init+0x23c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d025      	beq.n	8005c12 <HAL_GPIO_Init+0x21e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_GPIO_Init+0x240>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01f      	beq.n	8005c0e <HAL_GPIO_Init+0x21a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	@ (8005c38 <HAL_GPIO_Init+0x244>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d019      	beq.n	8005c0a <HAL_GPIO_Init+0x216>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <HAL_GPIO_Init+0x248>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_GPIO_Init+0x212>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a17      	ldr	r2, [pc, #92]	@ (8005c40 <HAL_GPIO_Init+0x24c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00d      	beq.n	8005c02 <HAL_GPIO_Init+0x20e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <HAL_GPIO_Init+0x250>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <HAL_GPIO_Init+0x20a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <HAL_GPIO_Init+0x254>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <HAL_GPIO_Init+0x206>
 8005bf6:	2309      	movs	r3, #9
 8005bf8:	e029      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005bfa:	230a      	movs	r3, #10
 8005bfc:	e027      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005bfe:	2307      	movs	r3, #7
 8005c00:	e025      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c02:	2306      	movs	r3, #6
 8005c04:	e023      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c06:	2305      	movs	r3, #5
 8005c08:	e021      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c0a:	2304      	movs	r3, #4
 8005c0c:	e01f      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e01d      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e01b      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e019      	b.n	8005c4e <HAL_GPIO_Init+0x25a>
 8005c1a:	bf00      	nop
 8005c1c:	58000080 	.word	0x58000080
 8005c20:	58024400 	.word	0x58024400
 8005c24:	58000400 	.word	0x58000400
 8005c28:	58020000 	.word	0x58020000
 8005c2c:	58020400 	.word	0x58020400
 8005c30:	58020800 	.word	0x58020800
 8005c34:	58020c00 	.word	0x58020c00
 8005c38:	58021000 	.word	0x58021000
 8005c3c:	58021400 	.word	0x58021400
 8005c40:	58021800 	.word	0x58021800
 8005c44:	58021c00 	.word	0x58021c00
 8005c48:	58022400 	.word	0x58022400
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f002 0203 	and.w	r2, r2, #3
 8005c54:	0092      	lsls	r2, r2, #2
 8005c56:	4093      	lsls	r3, r2
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c5e:	4938      	ldr	r1, [pc, #224]	@ (8005d40 <HAL_GPIO_Init+0x34c>)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	3302      	adds	r3, #2
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f ae6b 	bne.w	8005a08 <HAL_GPIO_Init+0x14>
  }
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	3724      	adds	r7, #36	@ 0x24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	58000400 	.word	0x58000400

08005d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
 8005d50:	4613      	mov	r3, r2
 8005d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d54:	787b      	ldrb	r3, [r7, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d60:	e003      	b.n	8005d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	041a      	lsls	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fb f955 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005db4:	4b19      	ldr	r3, [pc, #100]	@ (8005e1c <HAL_PWREx_ConfigSupply+0x70>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dc0:	4b16      	ldr	r3, [pc, #88]	@ (8005e1c <HAL_PWREx_ConfigSupply+0x70>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d001      	beq.n	8005dd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e01f      	b.n	8005e12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e01d      	b.n	8005e12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dd6:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_PWREx_ConfigSupply+0x70>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 0207 	bic.w	r2, r3, #7
 8005dde:	490f      	ldr	r1, [pc, #60]	@ (8005e1c <HAL_PWREx_ConfigSupply+0x70>)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005de6:	f7fc f82d 	bl	8001e44 <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dec:	e009      	b.n	8005e02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dee:	f7fc f829 	bl	8001e44 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dfc:	d901      	bls.n	8005e02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e007      	b.n	8005e12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e02:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <HAL_PWREx_ConfigSupply+0x70>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0e:	d1ee      	bne.n	8005dee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	58024800 	.word	0x58024800

08005e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	@ 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e3c8      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8087 	beq.w	8005f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e40:	4b88      	ldr	r3, [pc, #544]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e4a:	4b86      	ldr	r3, [pc, #536]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d007      	beq.n	8005e66 <HAL_RCC_OscConfig+0x46>
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	2b18      	cmp	r3, #24
 8005e5a:	d110      	bne.n	8005e7e <HAL_RCC_OscConfig+0x5e>
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d10b      	bne.n	8005e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e66:	4b7f      	ldr	r3, [pc, #508]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d06c      	beq.n	8005f4c <HAL_RCC_OscConfig+0x12c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d168      	bne.n	8005f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e3a2      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_OscConfig+0x76>
 8005e88:	4b76      	ldr	r3, [pc, #472]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a75      	ldr	r2, [pc, #468]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e02e      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd4>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x98>
 8005e9e:	4b71      	ldr	r3, [pc, #452]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a70      	ldr	r2, [pc, #448]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6d      	ldr	r2, [pc, #436]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e01d      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCC_OscConfig+0xbc>
 8005ec2:	4b68      	ldr	r3, [pc, #416]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a67      	ldr	r2, [pc, #412]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4b65      	ldr	r3, [pc, #404]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a64      	ldr	r2, [pc, #400]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e00b      	b.n	8005ef4 <HAL_RCC_OscConfig+0xd4>
 8005edc:	4b61      	ldr	r3, [pc, #388]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a60      	ldr	r2, [pc, #384]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5d      	ldr	r2, [pc, #372]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d013      	beq.n	8005f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fb ffa2 	bl	8001e44 <HAL_GetTick>
 8005f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f04:	f7fb ff9e 	bl	8001e44 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	@ 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e356      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f16:	4b53      	ldr	r3, [pc, #332]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0xe4>
 8005f22:	e014      	b.n	8005f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fb ff8e 	bl	8001e44 <HAL_GetTick>
 8005f28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f2c:	f7fb ff8a 	bl	8001e44 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b64      	cmp	r3, #100	@ 0x64
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e342      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f3e:	4b49      	ldr	r3, [pc, #292]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x10c>
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 808c 	beq.w	8006074 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5c:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f66:	4b3f      	ldr	r3, [pc, #252]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <HAL_RCC_OscConfig+0x162>
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b18      	cmp	r3, #24
 8005f76:	d137      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c8>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d132      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f82:	4b38      	ldr	r3, [pc, #224]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x17a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e314      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f9a:	4b32      	ldr	r3, [pc, #200]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 0219 	bic.w	r2, r3, #25
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	492f      	ldr	r1, [pc, #188]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fb ff4a 	bl	8001e44 <HAL_GetTick>
 8005fb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb4:	f7fb ff46 	bl	8001e44 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e2fe      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc6:	4b27      	ldr	r3, [pc, #156]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd2:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	4920      	ldr	r1, [pc, #128]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe6:	e045      	b.n	8006074 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d026      	beq.n	800603e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f023 0219 	bic.w	r2, r3, #25
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4919      	ldr	r1, [pc, #100]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006002:	f7fb ff1f 	bl	8001e44 <HAL_GetTick>
 8006006:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600a:	f7fb ff1b 	bl	8001e44 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e2d3      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800601c:	4b11      	ldr	r3, [pc, #68]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006028:	4b0e      	ldr	r3, [pc, #56]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	061b      	lsls	r3, r3, #24
 8006036:	490b      	ldr	r1, [pc, #44]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8006038:	4313      	orrs	r3, r2
 800603a:	604b      	str	r3, [r1, #4]
 800603c:	e01a      	b.n	8006074 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800603e:	4b09      	ldr	r3, [pc, #36]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <HAL_RCC_OscConfig+0x244>)
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fb fefb 	bl	8001e44 <HAL_GetTick>
 800604e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006050:	e00a      	b.n	8006068 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006052:	f7fb fef7 	bl	8001e44 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d903      	bls.n	8006068 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e2af      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
 8006064:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006068:	4b96      	ldr	r3, [pc, #600]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1ee      	bne.n	8006052 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d06a      	beq.n	8006156 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006080:	4b90      	ldr	r3, [pc, #576]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006088:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800608a:	4b8e      	ldr	r3, [pc, #568]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800608c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b08      	cmp	r3, #8
 8006094:	d007      	beq.n	80060a6 <HAL_RCC_OscConfig+0x286>
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b18      	cmp	r3, #24
 800609a:	d11b      	bne.n	80060d4 <HAL_RCC_OscConfig+0x2b4>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d116      	bne.n	80060d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060a6:	4b87      	ldr	r3, [pc, #540]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_RCC_OscConfig+0x29e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d001      	beq.n	80060be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e282      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060be:	4b81      	ldr	r3, [pc, #516]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	497d      	ldr	r1, [pc, #500]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d2:	e040      	b.n	8006156 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d023      	beq.n	8006124 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060dc:	4b79      	ldr	r3, [pc, #484]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a78      	ldr	r2, [pc, #480]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80060e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fb feac 	bl	8001e44 <HAL_GetTick>
 80060ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060f0:	f7fb fea8 	bl	8001e44 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e260      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006102:	4b70      	ldr	r3, [pc, #448]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800610e:	4b6d      	ldr	r3, [pc, #436]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	4969      	ldr	r1, [pc, #420]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	60cb      	str	r3, [r1, #12]
 8006122:	e018      	b.n	8006156 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006124:	4b67      	ldr	r3, [pc, #412]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a66      	ldr	r2, [pc, #408]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800612a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800612e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fb fe88 	bl	8001e44 <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006138:	f7fb fe84 	bl	8001e44 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e23c      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800614a:	4b5e      	ldr	r3, [pc, #376]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d036      	beq.n	80061d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616a:	4b56      	ldr	r3, [pc, #344]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800616c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616e:	4a55      	ldr	r2, [pc, #340]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006176:	f7fb fe65 	bl	8001e44 <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800617e:	f7fb fe61 	bl	8001e44 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e219      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006190:	4b4c      	ldr	r3, [pc, #304]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x35e>
 800619c:	e018      	b.n	80061d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619e:	4b49      	ldr	r3, [pc, #292]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80061a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a2:	4a48      	ldr	r2, [pc, #288]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061aa:	f7fb fe4b 	bl	8001e44 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b2:	f7fb fe47 	bl	8001e44 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e1ff      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061c4:	4b3f      	ldr	r3, [pc, #252]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80061c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d036      	beq.n	800624a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061e4:	4b37      	ldr	r3, [pc, #220]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a36      	ldr	r2, [pc, #216]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80061ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061f0:	f7fb fe28 	bl	8001e44 <HAL_GetTick>
 80061f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f8:	f7fb fe24 	bl	8001e44 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e1dc      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800620a:	4b2e      	ldr	r3, [pc, #184]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x3d8>
 8006216:	e018      	b.n	800624a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006218:	4b2a      	ldr	r3, [pc, #168]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a29      	ldr	r2, [pc, #164]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 800621e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006222:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006224:	f7fb fe0e 	bl	8001e44 <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800622c:	f7fb fe0a 	bl	8001e44 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e1c2      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800623e:	4b21      	ldr	r3, [pc, #132]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8086 	beq.w	8006364 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006258:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x4a8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1a      	ldr	r2, [pc, #104]	@ (80062c8 <HAL_RCC_OscConfig+0x4a8>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006264:	f7fb fdee 	bl	8001e44 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626c:	f7fb fdea 	bl	8001e44 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	@ 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1a2      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <HAL_RCC_OscConfig+0x4a8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d106      	bne.n	80062a0 <HAL_RCC_OscConfig+0x480>
 8006292:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	4a0b      	ldr	r2, [pc, #44]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6713      	str	r3, [r2, #112]	@ 0x70
 800629e:	e032      	b.n	8006306 <HAL_RCC_OscConfig+0x4e6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d111      	bne.n	80062cc <HAL_RCC_OscConfig+0x4ac>
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ac:	4a05      	ldr	r2, [pc, #20]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b4:	4b03      	ldr	r3, [pc, #12]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b8:	4a02      	ldr	r2, [pc, #8]	@ (80062c4 <HAL_RCC_OscConfig+0x4a4>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c0:	e021      	b.n	8006306 <HAL_RCC_OscConfig+0x4e6>
 80062c2:	bf00      	nop
 80062c4:	58024400 	.word	0x58024400
 80062c8:	58024800 	.word	0x58024800
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d10c      	bne.n	80062ee <HAL_RCC_OscConfig+0x4ce>
 80062d4:	4b83      	ldr	r3, [pc, #524]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d8:	4a82      	ldr	r2, [pc, #520]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e0:	4b80      	ldr	r3, [pc, #512]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e4:	4a7f      	ldr	r2, [pc, #508]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ec:	e00b      	b.n	8006306 <HAL_RCC_OscConfig+0x4e6>
 80062ee:	4b7d      	ldr	r3, [pc, #500]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	4a7c      	ldr	r2, [pc, #496]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fa:	4b7a      	ldr	r3, [pc, #488]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fe:	4a79      	ldr	r2, [pc, #484]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006300:	f023 0304 	bic.w	r3, r3, #4
 8006304:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d015      	beq.n	800633a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630e:	f7fb fd99 	bl	8001e44 <HAL_GetTick>
 8006312:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006314:	e00a      	b.n	800632c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fb fd95 	bl	8001e44 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e14b      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632c:	4b6d      	ldr	r3, [pc, #436]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ee      	beq.n	8006316 <HAL_RCC_OscConfig+0x4f6>
 8006338:	e014      	b.n	8006364 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633a:	f7fb fd83 	bl	8001e44 <HAL_GetTick>
 800633e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006340:	e00a      	b.n	8006358 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006342:	f7fb fd7f 	bl	8001e44 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e135      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006358:	4b62      	ldr	r3, [pc, #392]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ee      	bne.n	8006342 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 812a 	beq.w	80065c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800636e:	4b5d      	ldr	r3, [pc, #372]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006376:	2b18      	cmp	r3, #24
 8006378:	f000 80ba 	beq.w	80064f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	2b02      	cmp	r3, #2
 8006382:	f040 8095 	bne.w	80064b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006386:	4b57      	ldr	r3, [pc, #348]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a56      	ldr	r2, [pc, #344]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800638c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fb fd57 	bl	8001e44 <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800639a:	f7fb fd53 	bl	8001e44 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e10b      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ac:	4b4d      	ldr	r3, [pc, #308]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b8:	4b4a      	ldr	r3, [pc, #296]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80063ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063bc:	4b4a      	ldr	r3, [pc, #296]	@ (80064e8 <HAL_RCC_OscConfig+0x6c8>)
 80063be:	4013      	ands	r3, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	430a      	orrs	r2, r1
 80063cc:	4945      	ldr	r1, [pc, #276]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e0:	3b01      	subs	r3, #1
 80063e2:	025b      	lsls	r3, r3, #9
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	3b01      	subs	r3, #1
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	3b01      	subs	r3, #1
 80063fc:	061b      	lsls	r3, r3, #24
 80063fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006402:	4938      	ldr	r1, [pc, #224]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006408:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	4a35      	ldr	r2, [pc, #212]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006414:	4b33      	ldr	r3, [pc, #204]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006418:	4b34      	ldr	r3, [pc, #208]	@ (80064ec <HAL_RCC_OscConfig+0x6cc>)
 800641a:	4013      	ands	r3, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006420:	00d2      	lsls	r2, r2, #3
 8006422:	4930      	ldr	r1, [pc, #192]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006424:	4313      	orrs	r3, r2
 8006426:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006428:	4b2e      	ldr	r3, [pc, #184]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800642a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642c:	f023 020c 	bic.w	r2, r3, #12
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	492b      	ldr	r1, [pc, #172]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800643a:	4b2a      	ldr	r3, [pc, #168]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	f023 0202 	bic.w	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006446:	4927      	ldr	r1, [pc, #156]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006448:	4313      	orrs	r3, r2
 800644a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	4a24      	ldr	r2, [pc, #144]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b22      	ldr	r3, [pc, #136]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800645a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645c:	4a21      	ldr	r2, [pc, #132]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006464:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a1e      	ldr	r2, [pc, #120]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800646a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006470:	4b1c      	ldr	r3, [pc, #112]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	4a1b      	ldr	r2, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800647c:	4b19      	ldr	r3, [pc, #100]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 8006482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006488:	f7fb fcdc 	bl	8001e44 <HAL_GetTick>
 800648c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006490:	f7fb fcd8 	bl	8001e44 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e090      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a2:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f0      	beq.n	8006490 <HAL_RCC_OscConfig+0x670>
 80064ae:	e088      	b.n	80065c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0b      	ldr	r2, [pc, #44]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80064b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fb fcc2 	bl	8001e44 <HAL_GetTick>
 80064c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c4:	f7fb fcbe 	bl	8001e44 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e076      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064d6:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <HAL_RCC_OscConfig+0x6c4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x6a4>
 80064e2:	e06e      	b.n	80065c2 <HAL_RCC_OscConfig+0x7a2>
 80064e4:	58024400 	.word	0x58024400
 80064e8:	fffffc0c 	.word	0xfffffc0c
 80064ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064f0:	4b36      	ldr	r3, [pc, #216]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80064f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064f6:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	2b01      	cmp	r3, #1
 8006502:	d031      	beq.n	8006568 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f003 0203 	and.w	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650e:	429a      	cmp	r2, r3
 8006510:	d12a      	bne.n	8006568 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651e:	429a      	cmp	r2, r3
 8006520:	d122      	bne.n	8006568 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800652e:	429a      	cmp	r2, r3
 8006530:	d11a      	bne.n	8006568 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	0a5b      	lsrs	r3, r3, #9
 8006536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006540:	429a      	cmp	r2, r3
 8006542:	d111      	bne.n	8006568 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	0c1b      	lsrs	r3, r3, #16
 8006548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d108      	bne.n	8006568 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	0e1b      	lsrs	r3, r3, #24
 800655a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e02b      	b.n	80065c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800656c:	4b17      	ldr	r3, [pc, #92]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 800656e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006570:	08db      	lsrs	r3, r3, #3
 8006572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006576:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d01f      	beq.n	80065c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006582:	4b12      	ldr	r3, [pc, #72]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 8006584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006586:	4a11      	ldr	r2, [pc, #68]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800658e:	f7fb fc59 	bl	8001e44 <HAL_GetTick>
 8006592:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006594:	bf00      	nop
 8006596:	f7fb fc55 	bl	8001e44 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659e:	4293      	cmp	r3, r2
 80065a0:	d0f9      	beq.n	8006596 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065a2:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80065a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065a6:	4b0a      	ldr	r3, [pc, #40]	@ (80065d0 <HAL_RCC_OscConfig+0x7b0>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065ae:	00d2      	lsls	r2, r2, #3
 80065b0:	4906      	ldr	r1, [pc, #24]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065b6:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	4a04      	ldr	r2, [pc, #16]	@ (80065cc <HAL_RCC_OscConfig+0x7ac>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3730      	adds	r7, #48	@ 0x30
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	58024400 	.word	0x58024400
 80065d0:	ffff0007 	.word	0xffff0007

080065d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e19c      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d910      	bls.n	8006618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b87      	ldr	r3, [pc, #540]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 020f 	bic.w	r2, r3, #15
 80065fe:	4985      	ldr	r1, [pc, #532]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b83      	ldr	r3, [pc, #524]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e184      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d010      	beq.n	8006646 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	4b7b      	ldr	r3, [pc, #492]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006630:	429a      	cmp	r2, r3
 8006632:	d908      	bls.n	8006646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006634:	4b78      	ldr	r3, [pc, #480]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	4975      	ldr	r1, [pc, #468]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006642:	4313      	orrs	r3, r2
 8006644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	4b70      	ldr	r3, [pc, #448]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800665e:	429a      	cmp	r2, r3
 8006660:	d908      	bls.n	8006674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006662:	4b6d      	ldr	r3, [pc, #436]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	496a      	ldr	r1, [pc, #424]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006670:	4313      	orrs	r3, r2
 8006672:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b00      	cmp	r3, #0
 800667e:	d010      	beq.n	80066a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	4b64      	ldr	r3, [pc, #400]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800668c:	429a      	cmp	r2, r3
 800668e:	d908      	bls.n	80066a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006690:	4b61      	ldr	r3, [pc, #388]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	495e      	ldr	r1, [pc, #376]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d010      	beq.n	80066d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	4b59      	ldr	r3, [pc, #356]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d908      	bls.n	80066d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066be:	4b56      	ldr	r3, [pc, #344]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4953      	ldr	r1, [pc, #332]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d908      	bls.n	80066fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066ec:	4b4a      	ldr	r3, [pc, #296]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	f023 020f 	bic.w	r2, r3, #15
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4947      	ldr	r1, [pc, #284]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d055      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800670a:	4b43      	ldr	r3, [pc, #268]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	4940      	ldr	r1, [pc, #256]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006718:	4313      	orrs	r3, r2
 800671a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d107      	bne.n	8006734 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006724:	4b3c      	ldr	r3, [pc, #240]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d121      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0f6      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d107      	bne.n	800674c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800673c:	4b36      	ldr	r3, [pc, #216]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d115      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0ea      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d107      	bne.n	8006764 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006754:	4b30      	ldr	r3, [pc, #192]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0de      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006764:	4b2c      	ldr	r3, [pc, #176]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0d6      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006774:	4b28      	ldr	r3, [pc, #160]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f023 0207 	bic.w	r2, r3, #7
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4925      	ldr	r1, [pc, #148]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 8006782:	4313      	orrs	r3, r2
 8006784:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006786:	f7fb fb5d 	bl	8001e44 <HAL_GetTick>
 800678a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678c:	e00a      	b.n	80067a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800678e:	f7fb fb59 	bl	8001e44 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800679c:	4293      	cmp	r3, r2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e0be      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d1eb      	bne.n	800678e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d208      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d2:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	f023 020f 	bic.w	r2, r3, #15
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	490e      	ldr	r1, [pc, #56]	@ (8006818 <HAL_RCC_ClockConfig+0x244>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d214      	bcs.n	800681c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 020f 	bic.w	r2, r3, #15
 80067fa:	4906      	ldr	r1, [pc, #24]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <HAL_RCC_ClockConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d005      	beq.n	800681c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e086      	b.n	8006922 <HAL_RCC_ClockConfig+0x34e>
 8006814:	52002000 	.word	0x52002000
 8006818:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d010      	beq.n	800684a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	4b3f      	ldr	r3, [pc, #252]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006834:	429a      	cmp	r2, r3
 8006836:	d208      	bcs.n	800684a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006838:	4b3c      	ldr	r3, [pc, #240]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4939      	ldr	r1, [pc, #228]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 8006846:	4313      	orrs	r3, r2
 8006848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	4b34      	ldr	r3, [pc, #208]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006862:	429a      	cmp	r2, r3
 8006864:	d208      	bcs.n	8006878 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006866:	4b31      	ldr	r3, [pc, #196]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	492e      	ldr	r1, [pc, #184]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 8006874:	4313      	orrs	r3, r2
 8006876:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b00      	cmp	r3, #0
 8006882:	d010      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	4b28      	ldr	r3, [pc, #160]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006890:	429a      	cmp	r2, r3
 8006892:	d208      	bcs.n	80068a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006894:	4b25      	ldr	r3, [pc, #148]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4922      	ldr	r1, [pc, #136]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d010      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068be:	429a      	cmp	r2, r3
 80068c0:	d208      	bcs.n	80068d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068c2:	4b1a      	ldr	r3, [pc, #104]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4917      	ldr	r1, [pc, #92]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068d4:	f000 f834 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80068d8:	4602      	mov	r2, r0
 80068da:	4b14      	ldr	r3, [pc, #80]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	4912      	ldr	r1, [pc, #72]	@ (8006930 <HAL_RCC_ClockConfig+0x35c>)
 80068e6:	5ccb      	ldrb	r3, [r1, r3]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068f2:	4b0e      	ldr	r3, [pc, #56]	@ (800692c <HAL_RCC_ClockConfig+0x358>)
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006930 <HAL_RCC_ClockConfig+0x35c>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	4a0a      	ldr	r2, [pc, #40]	@ (8006934 <HAL_RCC_ClockConfig+0x360>)
 800690a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800690c:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <HAL_RCC_ClockConfig+0x364>)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_RCC_ClockConfig+0x368>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fa fed8 	bl	80016cc <HAL_InitTick>
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
 8006930:	0801d23c 	.word	0x0801d23c
 8006934:	240049d4 	.word	0x240049d4
 8006938:	240049d0 	.word	0x240049d0
 800693c:	240049d8 	.word	0x240049d8

08006940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006940:	b480      	push	{r7}
 8006942:	b089      	sub	sp, #36	@ 0x24
 8006944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006946:	4bb3      	ldr	r3, [pc, #716]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800694e:	2b18      	cmp	r3, #24
 8006950:	f200 8155 	bhi.w	8006bfe <HAL_RCC_GetSysClockFreq+0x2be>
 8006954:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	080069c1 	.word	0x080069c1
 8006960:	08006bff 	.word	0x08006bff
 8006964:	08006bff 	.word	0x08006bff
 8006968:	08006bff 	.word	0x08006bff
 800696c:	08006bff 	.word	0x08006bff
 8006970:	08006bff 	.word	0x08006bff
 8006974:	08006bff 	.word	0x08006bff
 8006978:	08006bff 	.word	0x08006bff
 800697c:	080069e7 	.word	0x080069e7
 8006980:	08006bff 	.word	0x08006bff
 8006984:	08006bff 	.word	0x08006bff
 8006988:	08006bff 	.word	0x08006bff
 800698c:	08006bff 	.word	0x08006bff
 8006990:	08006bff 	.word	0x08006bff
 8006994:	08006bff 	.word	0x08006bff
 8006998:	08006bff 	.word	0x08006bff
 800699c:	080069ed 	.word	0x080069ed
 80069a0:	08006bff 	.word	0x08006bff
 80069a4:	08006bff 	.word	0x08006bff
 80069a8:	08006bff 	.word	0x08006bff
 80069ac:	08006bff 	.word	0x08006bff
 80069b0:	08006bff 	.word	0x08006bff
 80069b4:	08006bff 	.word	0x08006bff
 80069b8:	08006bff 	.word	0x08006bff
 80069bc:	080069f3 	.word	0x080069f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c0:	4b94      	ldr	r3, [pc, #592]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d009      	beq.n	80069e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069cc:	4b91      	ldr	r3, [pc, #580]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	4a90      	ldr	r2, [pc, #576]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069de:	e111      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069e2:	61bb      	str	r3, [r7, #24]
      break;
 80069e4:	e10e      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069e6:	4b8d      	ldr	r3, [pc, #564]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069e8:	61bb      	str	r3, [r7, #24]
      break;
 80069ea:	e10b      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069ee:	61bb      	str	r3, [r7, #24]
      break;
 80069f0:	e108      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f2:	4b88      	ldr	r3, [pc, #544]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069fc:	4b85      	ldr	r3, [pc, #532]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a08:	4b82      	ldr	r3, [pc, #520]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a12:	4b80      	ldr	r3, [pc, #512]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	08db      	lsrs	r3, r3, #3
 8006a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80e1 	beq.w	8006bf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f000 8083 	beq.w	8006b44 <HAL_RCC_GetSysClockFreq+0x204>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	f200 80a1 	bhi.w	8006b88 <HAL_RCC_GetSysClockFreq+0x248>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x114>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d056      	beq.n	8006b00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a52:	e099      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a54:	4b6f      	ldr	r3, [pc, #444]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02d      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a60:	4b6c      	ldr	r3, [pc, #432]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	08db      	lsrs	r3, r3, #3
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8a:	4b62      	ldr	r3, [pc, #392]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006aba:	e087      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b51      	ldr	r3, [pc, #324]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006afe:	e065      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b40      	ldr	r3, [pc, #256]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b42:	e043      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b2f      	ldr	r3, [pc, #188]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b86:	e021      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bcc:	4b11      	ldr	r3, [pc, #68]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd0:	0a5b      	lsrs	r3, r3, #9
 8006bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf0:	ee17 3a90 	vmov	r3, s15
 8006bf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bf6:	e005      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61bb      	str	r3, [r7, #24]
      break;
 8006bfc:	e002      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006bfe:	4b07      	ldr	r3, [pc, #28]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c00:	61bb      	str	r3, [r7, #24]
      break;
 8006c02:	bf00      	nop
  }

  return sysclockfreq;
 8006c04:	69bb      	ldr	r3, [r7, #24]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3724      	adds	r7, #36	@ 0x24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	58024400 	.word	0x58024400
 8006c18:	03d09000 	.word	0x03d09000
 8006c1c:	003d0900 	.word	0x003d0900
 8006c20:	007a1200 	.word	0x007a1200
 8006c24:	46000000 	.word	0x46000000
 8006c28:	4c742400 	.word	0x4c742400
 8006c2c:	4a742400 	.word	0x4a742400
 8006c30:	4af42400 	.word	0x4af42400

08006c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c3a:	f7ff fe81 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	0a1b      	lsrs	r3, r3, #8
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	490f      	ldr	r1, [pc, #60]	@ (8006c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c4c:	5ccb      	ldrb	r3, [r1, r3]
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	fa22 f303 	lsr.w	r3, r2, r3
 8006c56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c58:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	4a09      	ldr	r2, [pc, #36]	@ (8006c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c62:	5cd3      	ldrb	r3, [r2, r3]
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6e:	4a07      	ldr	r2, [pc, #28]	@ (8006c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c72:	4a07      	ldr	r2, [pc, #28]	@ (8006c90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c78:	4b04      	ldr	r3, [pc, #16]	@ (8006c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	58024400 	.word	0x58024400
 8006c88:	0801d23c 	.word	0x0801d23c
 8006c8c:	240049d4 	.word	0x240049d4
 8006c90:	240049d0 	.word	0x240049d0

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c98:	f7ff ffcc 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	091b      	lsrs	r3, r3, #4
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4904      	ldr	r1, [pc, #16]	@ (8006cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	0801d23c 	.word	0x0801d23c

08006cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	223f      	movs	r2, #63	@ 0x3f
 8006cce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f003 0207 	and.w	r2, r3, #7
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006cdc:	4b17      	ldr	r3, [pc, #92]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006cf4:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006d00:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006d18:	4b08      	ldr	r3, [pc, #32]	@ (8006d3c <HAL_RCC_GetClockConfig+0x7c>)
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d24:	4b06      	ldr	r3, [pc, #24]	@ (8006d40 <HAL_RCC_GetClockConfig+0x80>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	601a      	str	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	52002000 	.word	0x52002000

08006d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0c6      	sub	sp, #280	@ 0x118
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d68:	2500      	movs	r5, #0
 8006d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d6e:	d049      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d80:	d828      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d86:	d01a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d8c:	d822      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d007      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d98:	e01c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d9a:	4bab      	ldr	r3, [pc, #684]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	4aaa      	ldr	r2, [pc, #680]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006da6:	e01a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dac:	3308      	adds	r3, #8
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f967 	bl	8008084 <RCCEx_PLL2_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dbc:	e00f      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	3328      	adds	r3, #40	@ 0x28
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa0e 	bl	80081e8 <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dd2:	e004      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006de6:	4b98      	ldr	r3, [pc, #608]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006df4:	4a94      	ldr	r2, [pc, #592]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	ea58 0309 	orrs.w	r3, r8, r9
 8006e18:	d047      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d82a      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e41 	.word	0x08006e41
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e83 	.word	0x08006e83
 8006e3c:	08006e83 	.word	0x08006e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b81      	ldr	r3, [pc, #516]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a80      	ldr	r2, [pc, #512]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e01a      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	3308      	adds	r3, #8
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f914 	bl	8008084 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e62:	e00f      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	3328      	adds	r3, #40	@ 0x28
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 f9bb 	bl	80081e8 <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e78:	e004      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	f023 0107 	bic.w	r1, r3, #7
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006eb6:	f04f 0b00 	mov.w	fp, #0
 8006eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ebe:	d05b      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ec8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ecc:	d03b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ece:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ed2:	d834      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ed8:	d037      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ede:	d82e      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ee4:	d033      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006eea:	d828      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ef0:	d01a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ef6:	d822      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f00:	d007      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006f02:	e01c      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f04:	4b50      	ldr	r3, [pc, #320]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	4a4f      	ldr	r2, [pc, #316]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f10:	e01e      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f16:	3308      	adds	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f8b2 	bl	8008084 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f26:	e013      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	3328      	adds	r3, #40	@ 0x28
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f959 	bl	80081e8 <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f3c:	e008      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f44:	e004      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f46:	bf00      	nop
 8006f48:	e002      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f58:	4b3b      	ldr	r3, [pc, #236]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f68:	4a37      	ldr	r2, [pc, #220]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d05d      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fa0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006fa4:	d03b      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006fa6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006faa:	d834      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fb0:	d037      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fb6:	d82e      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fbc:	d033      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc2:	d828      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fc8:	d01a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fce:	d822      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fd8:	d007      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006fda:	e01c      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	4a19      	ldr	r2, [pc, #100]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e01e      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fee:	3308      	adds	r3, #8
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f846 	bl	8008084 <RCCEx_PLL2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ffe:	e013      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	3328      	adds	r3, #40	@ 0x28
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f8ed 	bl	80081e8 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007014:	e008      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800701c:	e004      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800701e:	bf00      	nop
 8007020:	e002      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007022:	bf00      	nop
 8007024:	e000      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007034:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007040:	4a01      	ldr	r2, [pc, #4]	@ (8007048 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007042:	430b      	orrs	r3, r1
 8007044:	6593      	str	r3, [r2, #88]	@ 0x58
 8007046:	e005      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007060:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007064:	2300      	movs	r3, #0
 8007066:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800706a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800706e:	460b      	mov	r3, r1
 8007070:	4313      	orrs	r3, r2
 8007072:	d03a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707a:	2b30      	cmp	r3, #48	@ 0x30
 800707c:	d01f      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800707e:	2b30      	cmp	r3, #48	@ 0x30
 8007080:	d819      	bhi.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007082:	2b20      	cmp	r3, #32
 8007084:	d00c      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007086:	2b20      	cmp	r3, #32
 8007088:	d815      	bhi.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d019      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800708e:	2b10      	cmp	r3, #16
 8007090:	d111      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007092:	4baa      	ldr	r3, [pc, #680]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007096:	4aa9      	ldr	r2, [pc, #676]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800709c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800709e:	e011      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	3308      	adds	r3, #8
 80070a6:	2102      	movs	r1, #2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 ffeb 	bl	8008084 <RCCEx_PLL2_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80070b4:	e006      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070bc:	e002      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80070be:	bf00      	nop
 80070c0:	e000      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80070c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80070cc:	4b9b      	ldr	r3, [pc, #620]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070da:	4a98      	ldr	r2, [pc, #608]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070e0:	e003      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80070f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070fa:	2300      	movs	r3, #0
 80070fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007104:	460b      	mov	r3, r1
 8007106:	4313      	orrs	r3, r2
 8007108:	d051      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007114:	d035      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800711a:	d82e      	bhi.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800711c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007120:	d031      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007126:	d828      	bhi.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712c:	d01a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007132:	d822      	bhi.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713c:	d007      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800713e:	e01c      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	4a7d      	ldr	r2, [pc, #500]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800714c:	e01c      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	3308      	adds	r3, #8
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f000 ff94 	bl	8008084 <RCCEx_PLL2_Config>
 800715c:	4603      	mov	r3, r0
 800715e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007162:	e011      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	3328      	adds	r3, #40	@ 0x28
 800716a:	2100      	movs	r1, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f001 f83b 	bl	80081e8 <RCCEx_PLL3_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007178:	e006      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007180:	e002      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007182:	bf00      	nop
 8007184:	e000      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007190:	4b6a      	ldr	r3, [pc, #424]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007194:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719e:	4a67      	ldr	r2, [pc, #412]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071a0:	430b      	orrs	r3, r1
 80071a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80071a4:	e003      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4313      	orrs	r3, r2
 80071cc:	d053      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071d8:	d033      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80071da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071de:	d82c      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071e4:	d02f      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80071e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ea:	d826      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071f0:	d02b      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80071f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071f6:	d820      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80071f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071fc:	d012      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80071fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007202:	d81a      	bhi.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d022      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720c:	d115      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007212:	3308      	adds	r3, #8
 8007214:	2101      	movs	r1, #1
 8007216:	4618      	mov	r0, r3
 8007218:	f000 ff34 	bl	8008084 <RCCEx_PLL2_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007222:	e015      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	3328      	adds	r3, #40	@ 0x28
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f000 ffdb 	bl	80081e8 <RCCEx_PLL3_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007238:	e00a      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007242:	bf00      	nop
 8007244:	e004      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800724e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007258:	4b38      	ldr	r3, [pc, #224]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800725a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007266:	4a35      	ldr	r2, [pc, #212]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6513      	str	r3, [r2, #80]	@ 0x50
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007272:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007286:	2300      	movs	r3, #0
 8007288:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800728c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007290:	460b      	mov	r3, r1
 8007292:	4313      	orrs	r3, r2
 8007294:	d058      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800729e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a2:	d033      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a8:	d82c      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d02f      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b4:	d826      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ba:	d02b      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80072bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072c0:	d820      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c6:	d012      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80072c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072cc:	d81a      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d022      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d6:	d115      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072dc:	3308      	adds	r3, #8
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fecf 	bl	8008084 <RCCEx_PLL2_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80072ec:	e015      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	3328      	adds	r3, #40	@ 0x28
 80072f4:	2101      	movs	r1, #1
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ff76 	bl	80081e8 <RCCEx_PLL3_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007302:	e00a      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800730a:	e006      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800730c:	bf00      	nop
 800730e:	e004      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10e      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007322:	4b06      	ldr	r3, [pc, #24]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800732a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007332:	4a02      	ldr	r2, [pc, #8]	@ (800733c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007334:	430b      	orrs	r3, r1
 8007336:	6593      	str	r3, [r2, #88]	@ 0x58
 8007338:	e006      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800733a:	bf00      	nop
 800733c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800735e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007362:	460b      	mov	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	d037      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800736e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007372:	d00e      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007378:	d816      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800737e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007382:	d111      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	4bc4      	ldr	r3, [pc, #784]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4ac3      	ldr	r2, [pc, #780]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800738a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007390:	e00f      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007396:	3308      	adds	r3, #8
 8007398:	2101      	movs	r1, #1
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fe72 	bl	8008084 <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073a6:	e004      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073ae:	e000      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80073b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073ba:	4bb7      	ldr	r3, [pc, #732]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c8:	4ab3      	ldr	r2, [pc, #716]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073ca:	430b      	orrs	r3, r1
 80073cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80073ce:	e003      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80073e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e8:	2300      	movs	r3, #0
 80073ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80073f2:	460b      	mov	r3, r1
 80073f4:	4313      	orrs	r3, r2
 80073f6:	d039      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d81c      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007402:	a201      	add	r2, pc, #4	@ (adr r2, 8007408 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007445 	.word	0x08007445
 800740c:	08007419 	.word	0x08007419
 8007410:	08007427 	.word	0x08007427
 8007414:	08007445 	.word	0x08007445
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007418:	4b9f      	ldr	r3, [pc, #636]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	4a9e      	ldr	r2, [pc, #632]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800741e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007424:	e00f      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742a:	3308      	adds	r3, #8
 800742c:	2102      	movs	r1, #2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fe28 	bl	8008084 <RCCEx_PLL2_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800743a:	e004      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007442:	e000      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800744e:	4b92      	ldr	r3, [pc, #584]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007452:	f023 0103 	bic.w	r1, r3, #3
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745c:	4a8e      	ldr	r2, [pc, #568]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800745e:	430b      	orrs	r3, r1
 8007460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007462:	e003      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007482:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	f000 8099 	beq.w	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800748e:	4b83      	ldr	r3, [pc, #524]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a82      	ldr	r2, [pc, #520]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800749a:	f7fa fcd3 	bl	8001e44 <HAL_GetTick>
 800749e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a2:	e00b      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a4:	f7fa fcce 	bl	8001e44 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b64      	cmp	r3, #100	@ 0x64
 80074b2:	d903      	bls.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074ba:	e005      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074bc:	4b77      	ldr	r3, [pc, #476]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0ed      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80074c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d173      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074d0:	4b71      	ldr	r3, [pc, #452]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074dc:	4053      	eors	r3, r2
 80074de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d015      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074e6:	4b6c      	ldr	r3, [pc, #432]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074f2:	4b69      	ldr	r3, [pc, #420]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f6:	4a68      	ldr	r2, [pc, #416]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074fe:	4b66      	ldr	r3, [pc, #408]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007502:	4a65      	ldr	r2, [pc, #404]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007508:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800750a:	4a63      	ldr	r2, [pc, #396]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800750c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007510:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d118      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fa fc90 	bl	8001e44 <HAL_GetTick>
 8007524:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007528:	e00d      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800752a:	f7fa fc8b 	bl	8001e44 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007534:	1ad2      	subs	r2, r2, r3
 8007536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800753a:	429a      	cmp	r2, r3
 800753c:	d903      	bls.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007544:	e005      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007546:	4b54      	ldr	r3, [pc, #336]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0eb      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007556:	2b00      	cmp	r3, #0
 8007558:	d129      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756a:	d10e      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800756c:	4b4a      	ldr	r3, [pc, #296]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800757c:	091a      	lsrs	r2, r3, #4
 800757e:	4b48      	ldr	r3, [pc, #288]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007580:	4013      	ands	r3, r2
 8007582:	4a45      	ldr	r2, [pc, #276]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007584:	430b      	orrs	r3, r1
 8007586:	6113      	str	r3, [r2, #16]
 8007588:	e005      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800758a:	4b43      	ldr	r3, [pc, #268]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	4a42      	ldr	r2, [pc, #264]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007590:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007594:	6113      	str	r3, [r2, #16]
 8007596:	4b40      	ldr	r3, [pc, #256]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007598:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800759a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007698 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075a8:	430b      	orrs	r3, r1
 80075aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ac:	e008      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80075b6:	e003      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f002 0301 	and.w	r3, r2, #1
 80075cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075d0:	2300      	movs	r3, #0
 80075d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075da:	460b      	mov	r3, r1
 80075dc:	4313      	orrs	r3, r2
 80075de:	f000 808f 	beq.w	8007700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075e8:	2b28      	cmp	r3, #40	@ 0x28
 80075ea:	d871      	bhi.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80075ec:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	080076d9 	.word	0x080076d9
 80075f8:	080076d1 	.word	0x080076d1
 80075fc:	080076d1 	.word	0x080076d1
 8007600:	080076d1 	.word	0x080076d1
 8007604:	080076d1 	.word	0x080076d1
 8007608:	080076d1 	.word	0x080076d1
 800760c:	080076d1 	.word	0x080076d1
 8007610:	080076d1 	.word	0x080076d1
 8007614:	080076a5 	.word	0x080076a5
 8007618:	080076d1 	.word	0x080076d1
 800761c:	080076d1 	.word	0x080076d1
 8007620:	080076d1 	.word	0x080076d1
 8007624:	080076d1 	.word	0x080076d1
 8007628:	080076d1 	.word	0x080076d1
 800762c:	080076d1 	.word	0x080076d1
 8007630:	080076d1 	.word	0x080076d1
 8007634:	080076bb 	.word	0x080076bb
 8007638:	080076d1 	.word	0x080076d1
 800763c:	080076d1 	.word	0x080076d1
 8007640:	080076d1 	.word	0x080076d1
 8007644:	080076d1 	.word	0x080076d1
 8007648:	080076d1 	.word	0x080076d1
 800764c:	080076d1 	.word	0x080076d1
 8007650:	080076d1 	.word	0x080076d1
 8007654:	080076d9 	.word	0x080076d9
 8007658:	080076d1 	.word	0x080076d1
 800765c:	080076d1 	.word	0x080076d1
 8007660:	080076d1 	.word	0x080076d1
 8007664:	080076d1 	.word	0x080076d1
 8007668:	080076d1 	.word	0x080076d1
 800766c:	080076d1 	.word	0x080076d1
 8007670:	080076d1 	.word	0x080076d1
 8007674:	080076d9 	.word	0x080076d9
 8007678:	080076d1 	.word	0x080076d1
 800767c:	080076d1 	.word	0x080076d1
 8007680:	080076d1 	.word	0x080076d1
 8007684:	080076d1 	.word	0x080076d1
 8007688:	080076d1 	.word	0x080076d1
 800768c:	080076d1 	.word	0x080076d1
 8007690:	080076d1 	.word	0x080076d1
 8007694:	080076d9 	.word	0x080076d9
 8007698:	58024400 	.word	0x58024400
 800769c:	58024800 	.word	0x58024800
 80076a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a8:	3308      	adds	r3, #8
 80076aa:	2101      	movs	r1, #1
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fce9 	bl	8008084 <RCCEx_PLL2_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076b8:	e00f      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	3328      	adds	r3, #40	@ 0x28
 80076c0:	2101      	movs	r1, #1
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fd90 	bl	80081e8 <RCCEx_PLL3_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076ce:	e004      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076d6:	e000      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80076d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076e2:	4bbf      	ldr	r3, [pc, #764]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076f0:	4abb      	ldr	r2, [pc, #748]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80076f6:	e003      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f002 0302 	and.w	r3, r2, #2
 800770c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007710:	2300      	movs	r3, #0
 8007712:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007716:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800771a:	460b      	mov	r3, r1
 800771c:	4313      	orrs	r3, r2
 800771e:	d041      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007726:	2b05      	cmp	r3, #5
 8007728:	d824      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	0800777d 	.word	0x0800777d
 8007734:	08007749 	.word	0x08007749
 8007738:	0800775f 	.word	0x0800775f
 800773c:	0800777d 	.word	0x0800777d
 8007740:	0800777d 	.word	0x0800777d
 8007744:	0800777d 	.word	0x0800777d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	3308      	adds	r3, #8
 800774e:	2101      	movs	r1, #1
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fc97 	bl	8008084 <RCCEx_PLL2_Config>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800775c:	e00f      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007762:	3328      	adds	r3, #40	@ 0x28
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fd3e 	bl	80081e8 <RCCEx_PLL3_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007772:	e004      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800777a:	e000      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800777c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007786:	4b96      	ldr	r3, [pc, #600]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778a:	f023 0107 	bic.w	r1, r3, #7
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007794:	4a92      	ldr	r2, [pc, #584]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007796:	430b      	orrs	r3, r1
 8007798:	6553      	str	r3, [r2, #84]	@ 0x54
 800779a:	e003      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f002 0304 	and.w	r3, r2, #4
 80077b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077be:	460b      	mov	r3, r1
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d044      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d825      	bhi.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007825 	.word	0x08007825
 80077dc:	080077f1 	.word	0x080077f1
 80077e0:	08007807 	.word	0x08007807
 80077e4:	08007825 	.word	0x08007825
 80077e8:	08007825 	.word	0x08007825
 80077ec:	08007825 	.word	0x08007825
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	3308      	adds	r3, #8
 80077f6:	2101      	movs	r1, #1
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fc43 	bl	8008084 <RCCEx_PLL2_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007804:	e00f      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780a:	3328      	adds	r3, #40	@ 0x28
 800780c:	2101      	movs	r1, #1
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fcea 	bl	80081e8 <RCCEx_PLL3_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800781a:	e004      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007822:	e000      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007826:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800782e:	4b6c      	ldr	r3, [pc, #432]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007832:	f023 0107 	bic.w	r1, r3, #7
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783e:	4a68      	ldr	r2, [pc, #416]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007840:	430b      	orrs	r3, r1
 8007842:	6593      	str	r3, [r2, #88]	@ 0x58
 8007844:	e003      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800784a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800784e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f002 0320 	and.w	r3, r2, #32
 800785a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007864:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007868:	460b      	mov	r3, r1
 800786a:	4313      	orrs	r3, r2
 800786c:	d055      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800787a:	d033      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800787c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007880:	d82c      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d02f      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788c:	d826      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800788e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007892:	d02b      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007894:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007898:	d820      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800789a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800789e:	d012      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80078a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a4:	d81a      	bhi.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d022      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80078aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ae:	d115      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b4:	3308      	adds	r3, #8
 80078b6:	2100      	movs	r1, #0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fbe3 	bl	8008084 <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078c4:	e015      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ca:	3328      	adds	r3, #40	@ 0x28
 80078cc:	2102      	movs	r1, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fc8a 	bl	80081e8 <RCCEx_PLL3_Config>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078da:	e00a      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078e2:	e006      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078e4:	bf00      	nop
 80078e6:	e004      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078e8:	bf00      	nop
 80078ea:	e002      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80078f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fa:	4b39      	ldr	r3, [pc, #228]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790a:	4a35      	ldr	r2, [pc, #212]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800790c:	430b      	orrs	r3, r1
 800790e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007910:	e003      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007916:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007926:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800792a:	2300      	movs	r3, #0
 800792c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007930:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007934:	460b      	mov	r3, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	d058      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007942:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007946:	d033      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007948:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800794c:	d82c      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007952:	d02f      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007958:	d826      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800795a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800795e:	d02b      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007960:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007964:	d820      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796a:	d012      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007970:	d81a      	bhi.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d022      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797a:	d115      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	3308      	adds	r3, #8
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fb7d 	bl	8008084 <RCCEx_PLL2_Config>
 800798a:	4603      	mov	r3, r0
 800798c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007990:	e015      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	3328      	adds	r3, #40	@ 0x28
 8007998:	2102      	movs	r1, #2
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fc24 	bl	80081e8 <RCCEx_PLL3_Config>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079a6:	e00a      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079ae:	e006      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079b0:	bf00      	nop
 80079b2:	e004      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80079bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10e      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079c6:	4b06      	ldr	r3, [pc, #24]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079d6:	4a02      	ldr	r2, [pc, #8]	@ (80079e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80079d8:	430b      	orrs	r3, r1
 80079da:	6593      	str	r3, [r2, #88]	@ 0x58
 80079dc:	e006      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80079de:	bf00      	nop
 80079e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80079f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a06:	460b      	mov	r3, r1
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	d055      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a14:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a18:	d033      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007a1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a1e:	d82c      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a24:	d02f      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a2a:	d826      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a2c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a30:	d02b      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007a32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a36:	d820      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a3c:	d012      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a42:	d81a      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d022      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a4c:	d115      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	3308      	adds	r3, #8
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fb14 	bl	8008084 <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a62:	e015      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	3328      	adds	r3, #40	@ 0x28
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fbbb 	bl	80081e8 <RCCEx_PLL3_Config>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a78:	e00a      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a80:	e006      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a82:	bf00      	nop
 8007a84:	e004      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a86:	bf00      	nop
 8007a88:	e002      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e000      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a98:	4ba0      	ldr	r3, [pc, #640]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aae:	e003      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f002 0308 	and.w	r3, r2, #8
 8007ac4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ace:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	d01e      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae4:	d10c      	bne.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aea:	3328      	adds	r3, #40	@ 0x28
 8007aec:	2102      	movs	r1, #2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fb7a 	bl	80081e8 <RCCEx_PLL3_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007b00:	4b86      	ldr	r3, [pc, #536]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b10:	4a82      	ldr	r2, [pc, #520]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f002 0310 	and.w	r3, r2, #16
 8007b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b26:	2300      	movs	r3, #0
 8007b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b30:	460b      	mov	r3, r1
 8007b32:	4313      	orrs	r3, r2
 8007b34:	d01e      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b42:	d10c      	bne.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b48:	3328      	adds	r3, #40	@ 0x28
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fb4b 	bl	80081e8 <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b70:	430b      	orrs	r3, r1
 8007b72:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b82:	2300      	movs	r3, #0
 8007b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	d03e      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b9c:	d022      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007b9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba2:	d81b      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bac:	d00b      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007bae:	e015      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fa63 	bl	8008084 <RCCEx_PLL2_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bc4:	e00f      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	3328      	adds	r3, #40	@ 0x28
 8007bcc:	2102      	movs	r1, #2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fb0a 	bl	80081e8 <RCCEx_PLL3_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bda:	e004      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007be2:	e000      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bee:	4b4b      	ldr	r3, [pc, #300]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bfe:	4a47      	ldr	r2, [pc, #284]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c04:	e003      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c24:	460b      	mov	r3, r1
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d03b      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c36:	d01f      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007c38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c3c:	d818      	bhi.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c42:	d003      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007c44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c48:	d007      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007c4a:	e011      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4c:	4b33      	ldr	r3, [pc, #204]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4a32      	ldr	r2, [pc, #200]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c58:	e00f      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	3328      	adds	r3, #40	@ 0x28
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fac0 	bl	80081e8 <RCCEx_PLL3_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c6e:	e004      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c76:	e000      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c82:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c92:	4a22      	ldr	r2, [pc, #136]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c94:	430b      	orrs	r3, r1
 8007c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c98:	e003      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cb4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	d034      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ccc:	d007      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007cce:	e011      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd0:	4b12      	ldr	r3, [pc, #72]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	4a11      	ldr	r2, [pc, #68]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cdc:	e00e      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f9cc 	bl	8008084 <RCCEx_PLL2_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cf2:	e003      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d12:	4a02      	ldr	r2, [pc, #8]	@ (8007d1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d14:	430b      	orrs	r3, r1
 8007d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d18:	e006      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007d1a:	bf00      	nop
 8007d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d36:	2300      	movs	r3, #0
 8007d38:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d00c      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d48:	3328      	adds	r3, #40	@ 0x28
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fa4b 	bl	80081e8 <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d74:	460b      	mov	r3, r1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	d036      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d84:	d018      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d8a:	d811      	bhi.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d90:	d014      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d96:	d80b      	bhi.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d011      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007da0:	d106      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da2:	4bb7      	ldr	r3, [pc, #732]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4ab6      	ldr	r2, [pc, #728]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007dae:	e008      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007db6:	e004      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007db8:	bf00      	nop
 8007dba:	e002      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007dbc:	bf00      	nop
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dca:	4bad      	ldr	r3, [pc, #692]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007dd8:	4aa9      	ldr	r2, [pc, #676]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007dda:	430b      	orrs	r3, r1
 8007ddc:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dde:	e003      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007df6:	2300      	movs	r3, #0
 8007df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4313      	orrs	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e04:	4b9e      	ldr	r3, [pc, #632]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e12:	4a9b      	ldr	r2, [pc, #620]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e14:	430b      	orrs	r3, r1
 8007e16:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e26:	2300      	movs	r3, #0
 8007e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4313      	orrs	r3, r2
 8007e32:	d009      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e34:	4b92      	ldr	r3, [pc, #584]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e38:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e42:	4a8f      	ldr	r2, [pc, #572]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e56:	2300      	movs	r3, #0
 8007e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e64:	4b86      	ldr	r3, [pc, #536]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	4a85      	ldr	r2, [pc, #532]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e6e:	6113      	str	r3, [r2, #16]
 8007e70:	4b83      	ldr	r3, [pc, #524]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e72:	6919      	ldr	r1, [r3, #16]
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e7c:	4a80      	ldr	r2, [pc, #512]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e9e:	4b78      	ldr	r3, [pc, #480]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eac:	4a74      	ldr	r2, [pc, #464]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ec4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d00a      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ece:	4b6c      	ldr	r3, [pc, #432]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ede:	4a68      	ldr	r2, [pc, #416]	@ (8008080 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	2100      	movs	r1, #0
 8007eee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ef6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007efa:	460b      	mov	r3, r1
 8007efc:	4313      	orrs	r3, r2
 8007efe:	d011      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f04:	3308      	adds	r3, #8
 8007f06:	2100      	movs	r1, #0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f8bb 	bl	8008084 <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6239      	str	r1, [r7, #32]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	d011      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f44:	3308      	adds	r3, #8
 8007f46:	2101      	movs	r1, #1
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f89b 	bl	8008084 <RCCEx_PLL2_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	61b9      	str	r1, [r7, #24]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	d011      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f84:	3308      	adds	r3, #8
 8007f86:	2102      	movs	r1, #2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f87b 	bl	8008084 <RCCEx_PLL2_Config>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	2100      	movs	r1, #0
 8007fae:	6139      	str	r1, [r7, #16]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d011      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc4:	3328      	adds	r3, #40	@ 0x28
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f90d 	bl	80081e8 <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	2100      	movs	r1, #0
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	d011      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008004:	3328      	adds	r3, #40	@ 0x28
 8008006:	2101      	movs	r1, #1
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f8ed 	bl	80081e8 <RCCEx_PLL3_Config>
 800800e:	4603      	mov	r3, r0
 8008010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	2100      	movs	r1, #0
 800802e:	6039      	str	r1, [r7, #0]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	e9d7 1200 	ldrd	r1, r2, [r7]
 800803a:	460b      	mov	r3, r1
 800803c:	4313      	orrs	r3, r2
 800803e:	d011      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	3328      	adds	r3, #40	@ 0x28
 8008046:	2102      	movs	r1, #2
 8008048:	4618      	mov	r0, r3
 800804a:	f000 f8cd 	bl	80081e8 <RCCEx_PLL3_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8008064:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	e000      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
}
 8008072:	4618      	mov	r0, r3
 8008074:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008078:	46bd      	mov	sp, r7
 800807a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400

08008084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008092:	4b53      	ldr	r3, [pc, #332]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b03      	cmp	r3, #3
 800809c:	d101      	bne.n	80080a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e099      	b.n	80081d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080a2:	4b4f      	ldr	r3, [pc, #316]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a4e      	ldr	r2, [pc, #312]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ae:	f7f9 fec9 	bl	8001e44 <HAL_GetTick>
 80080b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b4:	e008      	b.n	80080c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080b6:	f7f9 fec5 	bl	8001e44 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e086      	b.n	80081d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080c8:	4b45      	ldr	r3, [pc, #276]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f0      	bne.n	80080b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080d4:	4b42      	ldr	r3, [pc, #264]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	031b      	lsls	r3, r3, #12
 80080e2:	493f      	ldr	r1, [pc, #252]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	025b      	lsls	r3, r3, #9
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	3b01      	subs	r3, #1
 8008104:	041b      	lsls	r3, r3, #16
 8008106:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	3b01      	subs	r3, #1
 8008112:	061b      	lsls	r3, r3, #24
 8008114:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008118:	4931      	ldr	r1, [pc, #196]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800811e:	4b30      	ldr	r3, [pc, #192]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	492d      	ldr	r1, [pc, #180]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800812c:	4313      	orrs	r3, r2
 800812e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008130:	4b2b      	ldr	r3, [pc, #172]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	f023 0220 	bic.w	r2, r3, #32
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	4928      	ldr	r1, [pc, #160]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800813e:	4313      	orrs	r3, r2
 8008140:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008142:	4b27      	ldr	r3, [pc, #156]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008146:	4a26      	ldr	r2, [pc, #152]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008148:	f023 0310 	bic.w	r3, r3, #16
 800814c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800814e:	4b24      	ldr	r3, [pc, #144]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008150:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008152:	4b24      	ldr	r3, [pc, #144]	@ (80081e4 <RCCEx_PLL2_Config+0x160>)
 8008154:	4013      	ands	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	69d2      	ldr	r2, [r2, #28]
 800815a:	00d2      	lsls	r2, r2, #3
 800815c:	4920      	ldr	r1, [pc, #128]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800815e:	4313      	orrs	r3, r2
 8008160:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008162:	4b1f      	ldr	r3, [pc, #124]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008166:	4a1e      	ldr	r2, [pc, #120]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008168:	f043 0310 	orr.w	r3, r3, #16
 800816c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008174:	4b1a      	ldr	r3, [pc, #104]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	4a19      	ldr	r2, [pc, #100]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800817a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800817e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008180:	e00f      	b.n	80081a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d106      	bne.n	8008196 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008188:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	4a14      	ldr	r2, [pc, #80]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800818e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008192:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008194:	e005      	b.n	80081a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008196:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 800819c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081a2:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a0e      	ldr	r2, [pc, #56]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ae:	f7f9 fe49 	bl	8001e44 <HAL_GetTick>
 80081b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b4:	e008      	b.n	80081c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081b6:	f7f9 fe45 	bl	8001e44 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e006      	b.n	80081d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <RCCEx_PLL2_Config+0x15c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0f0      	beq.n	80081b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	58024400 	.word	0x58024400
 80081e4:	ffff0007 	.word	0xffff0007

080081e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081f6:	4b53      	ldr	r3, [pc, #332]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80081f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d101      	bne.n	8008206 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e099      	b.n	800833a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008206:	4b4f      	ldr	r3, [pc, #316]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a4e      	ldr	r2, [pc, #312]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800820c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008212:	f7f9 fe17 	bl	8001e44 <HAL_GetTick>
 8008216:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008218:	e008      	b.n	800822c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800821a:	f7f9 fe13 	bl	8001e44 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e086      	b.n	800833a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800822c:	4b45      	ldr	r3, [pc, #276]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1f0      	bne.n	800821a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008238:	4b42      	ldr	r3, [pc, #264]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	051b      	lsls	r3, r3, #20
 8008246:	493f      	ldr	r1, [pc, #252]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	628b      	str	r3, [r1, #40]	@ 0x28
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	3b01      	subs	r3, #1
 8008252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	3b01      	subs	r3, #1
 800825c:	025b      	lsls	r3, r3, #9
 800825e:	b29b      	uxth	r3, r3
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	3b01      	subs	r3, #1
 8008268:	041b      	lsls	r3, r3, #16
 800826a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	3b01      	subs	r3, #1
 8008276:	061b      	lsls	r3, r3, #24
 8008278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800827c:	4931      	ldr	r1, [pc, #196]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008282:	4b30      	ldr	r3, [pc, #192]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008286:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	492d      	ldr	r1, [pc, #180]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008290:	4313      	orrs	r3, r2
 8008292:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008294:	4b2b      	ldr	r3, [pc, #172]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008298:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	4928      	ldr	r1, [pc, #160]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082a6:	4b27      	ldr	r3, [pc, #156]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082b2:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b6:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <RCCEx_PLL3_Config+0x160>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	69d2      	ldr	r2, [r2, #28]
 80082be:	00d2      	lsls	r2, r2, #3
 80082c0:	4920      	ldr	r1, [pc, #128]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082dc:	4a19      	ldr	r2, [pc, #100]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082e4:	e00f      	b.n	8008306 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d106      	bne.n	80082fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082ec:	4b15      	ldr	r3, [pc, #84]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	4a14      	ldr	r2, [pc, #80]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082f8:	e005      	b.n	8008306 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082fa:	4b12      	ldr	r3, [pc, #72]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	4a11      	ldr	r2, [pc, #68]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008304:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a0e      	ldr	r2, [pc, #56]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800830c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008312:	f7f9 fd97 	bl	8001e44 <HAL_GetTick>
 8008316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008318:	e008      	b.n	800832c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800831a:	f7f9 fd93 	bl	8001e44 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d901      	bls.n	800832c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e006      	b.n	800833a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800832c:	4b05      	ldr	r3, [pc, #20]	@ (8008344 <RCCEx_PLL3_Config+0x15c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0f0      	beq.n	800831a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	58024400 	.word	0x58024400
 8008348:	ffff0007 	.word	0xffff0007

0800834c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e10f      	b.n	800857e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a87      	ldr	r2, [pc, #540]	@ (8008588 <HAL_SPI_Init+0x23c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00f      	beq.n	800838e <HAL_SPI_Init+0x42>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a86      	ldr	r2, [pc, #536]	@ (800858c <HAL_SPI_Init+0x240>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00a      	beq.n	800838e <HAL_SPI_Init+0x42>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a84      	ldr	r2, [pc, #528]	@ (8008590 <HAL_SPI_Init+0x244>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d005      	beq.n	800838e <HAL_SPI_Init+0x42>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	2b0f      	cmp	r3, #15
 8008388:	d901      	bls.n	800838e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0f7      	b.n	800857e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fa64 	bl	800985c <SPI_GetPacketSize>
 8008394:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a7b      	ldr	r2, [pc, #492]	@ (8008588 <HAL_SPI_Init+0x23c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00c      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a79      	ldr	r2, [pc, #484]	@ (800858c <HAL_SPI_Init+0x240>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d007      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a78      	ldr	r2, [pc, #480]	@ (8008590 <HAL_SPI_Init+0x244>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d002      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d811      	bhi.n	80083de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083be:	4a72      	ldr	r2, [pc, #456]	@ (8008588 <HAL_SPI_Init+0x23c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d009      	beq.n	80083d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a70      	ldr	r2, [pc, #448]	@ (800858c <HAL_SPI_Init+0x240>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d004      	beq.n	80083d8 <HAL_SPI_Init+0x8c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008590 <HAL_SPI_Init+0x244>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d104      	bne.n	80083e2 <HAL_SPI_Init+0x96>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d901      	bls.n	80083e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e0cd      	b.n	800857e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 ff58 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800841e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008428:	d119      	bne.n	800845e <HAL_SPI_Init+0x112>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008432:	d103      	bne.n	800843c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10c      	bne.n	800845e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844c:	d107      	bne.n	800845e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800845c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00f      	beq.n	800848a <HAL_SPI_Init+0x13e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b06      	cmp	r3, #6
 8008470:	d90b      	bls.n	800848a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	e007      	b.n	800849a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008498:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a2:	431a      	orrs	r2, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ac:	ea42 0103 	orr.w	r1, r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fa:	ea42 0103 	orr.w	r1, r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d113      	bne.n	800853a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008524:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008538:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40013000 	.word	0x40013000
 800858c:	40003800 	.word	0x40003800
 8008590:	40003c00 	.word	0x40003c00

08008594 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	4613      	mov	r3, r2
 80085a2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3320      	adds	r3, #32
 80085aa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085ac:	f7f9 fc4a 	bl	8001e44 <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d001      	beq.n	80085c2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80085be:	2302      	movs	r3, #2
 80085c0:	e1d1      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_SPI_Transmit+0x3a>
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e1c9      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_SPI_Transmit+0x4c>
 80085dc:	2302      	movs	r3, #2
 80085de:	e1c2      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2203      	movs	r2, #3
 80085ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	88fa      	ldrh	r2, [r7, #6]
 8008602:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	88fa      	ldrh	r2, [r7, #6]
 800860a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008638:	d108      	bne.n	800864c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e009      	b.n	8008660 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800865e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b96      	ldr	r3, [pc, #600]	@ (80088c0 <HAL_SPI_Transmit+0x32c>)
 8008668:	4013      	ands	r3, r2
 800866a:	88f9      	ldrh	r1, [r7, #6]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	430b      	orrs	r3, r1
 8008672:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0201 	orr.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800868c:	d107      	bne.n	800869e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800869c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d947      	bls.n	8008736 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086a6:	e03f      	b.n	8008728 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d114      	bne.n	80086e0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	3b01      	subs	r3, #1
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80086de:	e023      	b.n	8008728 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086e0:	f7f9 fbb0 	bl	8001e44 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d803      	bhi.n	80086f8 <HAL_SPI_Transmit+0x164>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086f6:	d102      	bne.n	80086fe <HAL_SPI_Transmit+0x16a>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d114      	bne.n	8008728 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 ffde 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800870a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e11e      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1b9      	bne.n	80086a8 <HAL_SPI_Transmit+0x114>
 8008734:	e0f1      	b.n	800891a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b07      	cmp	r3, #7
 800873c:	f240 80e6 	bls.w	800890c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008740:	e05d      	b.n	80087fe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b02      	cmp	r3, #2
 800874e:	d132      	bne.n	80087b6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b01      	cmp	r3, #1
 800875a:	d918      	bls.n	800878e <HAL_SPI_Transmit+0x1fa>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d014      	beq.n	800878e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008774:	1d1a      	adds	r2, r3, #4
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008780:	b29b      	uxth	r3, r3
 8008782:	3b02      	subs	r3, #2
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800878c:	e037      	b.n	80087fe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008792:	881a      	ldrh	r2, [r3, #0]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800879c:	1c9a      	adds	r2, r3, #2
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80087b4:	e023      	b.n	80087fe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b6:	f7f9 fb45 	bl	8001e44 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d803      	bhi.n	80087ce <HAL_SPI_Transmit+0x23a>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087cc:	d102      	bne.n	80087d4 <HAL_SPI_Transmit+0x240>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d114      	bne.n	80087fe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 ff73 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e0b3      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d19b      	bne.n	8008742 <HAL_SPI_Transmit+0x1ae>
 800880a:	e086      	b.n	800891a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b02      	cmp	r3, #2
 8008818:	d154      	bne.n	80088c4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008820:	b29b      	uxth	r3, r3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d918      	bls.n	8008858 <HAL_SPI_Transmit+0x2c4>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882a:	2b40      	cmp	r3, #64	@ 0x40
 800882c:	d914      	bls.n	8008858 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800883e:	1d1a      	adds	r2, r3, #4
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800884a:	b29b      	uxth	r3, r3
 800884c:	3b04      	subs	r3, #4
 800884e:	b29a      	uxth	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008856:	e059      	b.n	800890c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b01      	cmp	r3, #1
 8008862:	d917      	bls.n	8008894 <HAL_SPI_Transmit+0x300>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d013      	beq.n	8008894 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008870:	881a      	ldrh	r2, [r3, #0]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800887a:	1c9a      	adds	r2, r3, #2
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b02      	subs	r3, #2
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008892:	e03b      	b.n	800890c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3320      	adds	r3, #32
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088be:	e025      	b.n	800890c <HAL_SPI_Transmit+0x378>
 80088c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088c4:	f7f9 fabe 	bl	8001e44 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d803      	bhi.n	80088dc <HAL_SPI_Transmit+0x348>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088da:	d102      	bne.n	80088e2 <HAL_SPI_Transmit+0x34e>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d114      	bne.n	800890c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 feec 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e02c      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f af79 	bne.w	800880c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2200      	movs	r2, #0
 8008922:	2108      	movs	r1, #8
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 ff6b 	bl	8009800 <SPI_WaitOnFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008936:	f043 0220 	orr.w	r2, r3, #32
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 febd 	bl	80096c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008964:	2300      	movs	r3, #0
  }
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	4613      	mov	r3, r2
 800897e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008984:	095b      	lsrs	r3, r3, #5
 8008986:	b29b      	uxth	r3, r3
 8008988:	3301      	adds	r3, #1
 800898a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3330      	adds	r3, #48	@ 0x30
 8008992:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008994:	f7f9 fa56 	bl	8001e44 <HAL_GetTick>
 8008998:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d001      	beq.n	80089aa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80089a6:	2302      	movs	r3, #2
 80089a8:	e250      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_SPI_Receive+0x46>
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e248      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_SPI_Receive+0x58>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e241      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2204      	movs	r2, #4
 80089d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	88fa      	ldrh	r2, [r7, #6]
 80089f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a20:	d108      	bne.n	8008a34 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e009      	b.n	8008a48 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4b95      	ldr	r3, [pc, #596]	@ (8008ca4 <HAL_SPI_Receive+0x334>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	88f9      	ldrh	r1, [r7, #6]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a74:	d107      	bne.n	8008a86 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d96c      	bls.n	8008b68 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008a8e:	e064      	b.n	8008b5a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d114      	bne.n	8008ad0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ab0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008ace:	e044      	b.n	8008b5a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8bfa      	ldrh	r2, [r7, #30]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d919      	bls.n	8008b12 <HAL_SPI_Receive+0x1a2>
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d014      	beq.n	8008b12 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008af2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	3b01      	subs	r3, #1
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008b10:	e023      	b.n	8008b5a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b12:	f7f9 f997 	bl	8001e44 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d803      	bhi.n	8008b2a <HAL_SPI_Receive+0x1ba>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b28:	d102      	bne.n	8008b30 <HAL_SPI_Receive+0x1c0>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d114      	bne.n	8008b5a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fdc5 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e178      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d194      	bne.n	8008a90 <HAL_SPI_Receive+0x120>
 8008b66:	e15e      	b.n	8008e26 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b07      	cmp	r3, #7
 8008b6e:	f240 8153 	bls.w	8008e18 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b72:	e08f      	b.n	8008c94 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d114      	bne.n	8008bb4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	8812      	ldrh	r2, [r2, #0]
 8008b92:	b292      	uxth	r2, r2
 8008b94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b9a:	1c9a      	adds	r2, r3, #2
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bb2:	e06f      	b.n	8008c94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	8bfa      	ldrh	r2, [r7, #30]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d924      	bls.n	8008c0c <HAL_SPI_Receive+0x29c>
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01f      	beq.n	8008c0c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	8812      	ldrh	r2, [r2, #0]
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	8812      	ldrh	r2, [r2, #0]
 8008bea:	b292      	uxth	r2, r2
 8008bec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	3b02      	subs	r3, #2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c0a:	e043      	b.n	8008c94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d119      	bne.n	8008c4c <HAL_SPI_Receive+0x2dc>
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d014      	beq.n	8008c4c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	8812      	ldrh	r2, [r2, #0]
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c32:	1c9a      	adds	r2, r3, #2
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c4a:	e023      	b.n	8008c94 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c4c:	f7f9 f8fa 	bl	8001e44 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d803      	bhi.n	8008c64 <HAL_SPI_Receive+0x2f4>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c62:	d102      	bne.n	8008c6a <HAL_SPI_Receive+0x2fa>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d114      	bne.n	8008c94 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fd28 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e0db      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f af69 	bne.w	8008b74 <HAL_SPI_Receive+0x204>
 8008ca2:	e0c0      	b.n	8008e26 <HAL_SPI_Receive+0x4b6>
 8008ca4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d117      	bne.n	8008cee <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cca:	7812      	ldrb	r2, [r2, #0]
 8008ccc:	b2d2      	uxtb	r2, r2
 8008cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008cec:	e094      	b.n	8008e18 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	8bfa      	ldrh	r2, [r7, #30]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d946      	bls.n	8008d8a <HAL_SPI_Receive+0x41a>
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d041      	beq.n	8008d8a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2e:	7812      	ldrb	r2, [r2, #0]
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008d88:	e046      	b.n	8008e18 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d81c      	bhi.n	8008dd0 <HAL_SPI_Receive+0x460>
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d017      	beq.n	8008dd0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dac:	7812      	ldrb	r2, [r2, #0]
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008dce:	e023      	b.n	8008e18 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dd0:	f7f9 f838 	bl	8001e44 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d803      	bhi.n	8008de8 <HAL_SPI_Receive+0x478>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008de6:	d102      	bne.n	8008dee <HAL_SPI_Receive+0x47e>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d114      	bne.n	8008e18 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 fc66 	bl	80096c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e019      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f47f af41 	bne.w	8008ca8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 fc4a 	bl	80096c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
  }
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3320      	adds	r3, #32
 8008e68:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d001      	beq.n	8008e7a <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
 8008e78:	e0e9      	b.n	800904e <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <HAL_SPI_TransmitReceive_IT+0x38>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_SPI_TransmitReceive_IT+0x38>
 8008e86:	887b      	ldrh	r3, [r7, #2]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e0de      	b.n	800904e <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_SPI_TransmitReceive_IT+0x4a>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e0d7      	b.n	800904e <HAL_SPI_TransmitReceive_IT+0x1fa>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2205      	movs	r2, #5
 8008eaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	887a      	ldrh	r2, [r7, #2]
 8008ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	887a      	ldrh	r2, [r7, #2]
 8008ec8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	887a      	ldrh	r2, [r7, #2]
 8008ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	887a      	ldrh	r2, [r7, #2]
 8008ede:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b0f      	cmp	r3, #15
 8008ef2:	d906      	bls.n	8008f02 <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4a59      	ldr	r2, [pc, #356]	@ (800905c <HAL_SPI_TransmitReceive_IT+0x208>)
 8008ef8:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4a58      	ldr	r2, [pc, #352]	@ (8009060 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8008efe:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f00:	e010      	b.n	8008f24 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b07      	cmp	r3, #7
 8008f08:	d906      	bls.n	8008f18 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4a55      	ldr	r2, [pc, #340]	@ (8009064 <HAL_SPI_TransmitReceive_IT+0x210>)
 8008f0e:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4a55      	ldr	r2, [pc, #340]	@ (8009068 <HAL_SPI_TransmitReceive_IT+0x214>)
 8008f14:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f16:	e005      	b.n	8008f24 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a54      	ldr	r2, [pc, #336]	@ (800906c <HAL_SPI_TransmitReceive_IT+0x218>)
 8008f1c:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a53      	ldr	r2, [pc, #332]	@ (8009070 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8008f22:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008f32:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8009074 <HAL_SPI_TransmitReceive_IT+0x220>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	8879      	ldrh	r1, [r7, #2]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	6812      	ldr	r2, [r2, #0]
 8008f44:	430b      	orrs	r3, r1
 8008f46:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0201 	orr.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8008f58:	e054      	b.n	8009004 <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	2b0f      	cmp	r3, #15
 8008f60:	d919      	bls.n	8008f96 <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6812      	ldr	r2, [r2, #0]
 8008f6c:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e036      	b.n	8009004 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	2b07      	cmp	r3, #7
 8008f9c:	d918      	bls.n	8008fd0 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa2:	881a      	ldrh	r2, [r3, #0]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	1c9a      	adds	r2, r3, #2
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e019      	b.n	8009004 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3320      	adds	r3, #32
 8008fda:	7812      	ldrb	r2, [r2, #0]
 8008fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009000:	b29b      	uxth	r3, r3
 8009002:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b02      	cmp	r3, #2
 8009010:	d102      	bne.n	8009018 <HAL_SPI_TransmitReceive_IT+0x1c4>
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1a0      	bne.n	8008f5a <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6919      	ldr	r1, [r3, #16]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	f240 736c 	movw	r3, #1900	@ 0x76c
 800902e:	430b      	orrs	r3, r1
 8009030:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800903a:	d107      	bne.n	800904c <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800904a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	08009667 	.word	0x08009667
 8009060:	08009557 	.word	0x08009557
 8009064:	080094f7 	.word	0x080094f7
 8009068:	08009609 	.word	0x08009609
 800906c:	08009499 	.word	0x08009499
 8009070:	080095af 	.word	0x080095af
 8009074:	ffff0000 	.word	0xffff0000

08009078 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	@ 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4013      	ands	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80090aa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3330      	adds	r3, #48	@ 0x30
 80090b2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d010      	beq.n	80090e0 <HAL_SPI_IRQHandler+0x68>
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f003 0308 	and.w	r3, r3, #8
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9b9 	bl	8009450 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80090de:	e192      	b.n	8009406 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d113      	bne.n	8009112 <HAL_SPI_IRQHandler+0x9a>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10e      	bne.n	8009112 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d009      	beq.n	8009112 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
    handled = 1UL;
 800910e:	2301      	movs	r3, #1
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10f      	bne.n	800913c <HAL_SPI_IRQHandler+0xc4>
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800912c:	2b00      	cmp	r3, #0
 800912e:	d105      	bne.n	800913c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
    handled = 1UL;
 8009138:	2301      	movs	r3, #1
 800913a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10f      	bne.n	8009166 <HAL_SPI_IRQHandler+0xee>
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009156:	2b00      	cmp	r3, #0
 8009158:	d105      	bne.n	8009166 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
    handled = 1UL;
 8009162:	2301      	movs	r3, #1
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	2b00      	cmp	r3, #0
 800916a:	f040 8147 	bne.w	80093fc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 808b 	beq.w	8009290 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f042 0208 	orr.w	r2, r2, #8
 8009188:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	699a      	ldr	r2, [r3, #24]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0210 	orr.w	r2, r2, #16
 8009198:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699a      	ldr	r2, [r3, #24]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	691a      	ldr	r2, [r3, #16]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0208 	bic.w	r2, r2, #8
 80091b8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d13d      	bne.n	8009244 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80091c8:	e036      	b.n	8009238 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	2b0f      	cmp	r3, #15
 80091d0:	d90b      	bls.n	80091ea <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80091dc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	665a      	str	r2, [r3, #100]	@ 0x64
 80091e8:	e01d      	b.n	8009226 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	2b07      	cmp	r3, #7
 80091f0:	d90b      	bls.n	800920a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	8812      	ldrh	r2, [r2, #0]
 80091fa:	b292      	uxth	r2, r2
 80091fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009202:	1c9a      	adds	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	665a      	str	r2, [r3, #100]	@ 0x64
 8009208:	e00d      	b.n	8009226 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800923e:	b29b      	uxth	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1c2      	bne.n	80091ca <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fa3b 	bl	80096c0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f8ed 	bl	800943c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009262:	e0d0      	b.n	8009406 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009264:	7cfb      	ldrb	r3, [r7, #19]
 8009266:	2b05      	cmp	r3, #5
 8009268:	d103      	bne.n	8009272 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7f7 fcd0 	bl	8000c10 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009270:	e0c6      	b.n	8009400 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009272:	7cfb      	ldrb	r3, [r7, #19]
 8009274:	2b04      	cmp	r3, #4
 8009276:	d103      	bne.n	8009280 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f8d5 	bl	8009428 <HAL_SPI_RxCpltCallback>
    return;
 800927e:	e0bf      	b.n	8009400 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009280:	7cfb      	ldrb	r3, [r7, #19]
 8009282:	2b03      	cmp	r3, #3
 8009284:	f040 80bc 	bne.w	8009400 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8c3 	bl	8009414 <HAL_SPI_TxCpltCallback>
    return;
 800928e:	e0b7      	b.n	8009400 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 80b5 	beq.w	8009406 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00f      	beq.n	80092c6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ac:	f043 0204 	orr.w	r2, r3, #4
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	699a      	ldr	r2, [r3, #24]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00f      	beq.n	80092f0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092d6:	f043 0201 	orr.w	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00f      	beq.n	800931a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009300:	f043 0208 	orr.w	r2, r3, #8
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	699a      	ldr	r2, [r3, #24]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009318:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00f      	beq.n	8009344 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800932a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699a      	ldr	r2, [r3, #24]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0220 	orr.w	r2, r2, #32
 8009342:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800934a:	2b00      	cmp	r3, #0
 800934c:	d05a      	beq.n	8009404 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0201 	bic.w	r2, r2, #1
 800935c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6919      	ldr	r1, [r3, #16]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	4b28      	ldr	r3, [pc, #160]	@ (800940c <HAL_SPI_IRQHandler+0x394>)
 800936a:	400b      	ands	r3, r1
 800936c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009374:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009378:	d138      	bne.n	80093ec <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009388:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d013      	beq.n	80093ba <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009396:	4a1e      	ldr	r2, [pc, #120]	@ (8009410 <HAL_SPI_IRQHandler+0x398>)
 8009398:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800939e:	4618      	mov	r0, r3
 80093a0:	f7f9 fa20 	bl	80027e4 <HAL_DMA_Abort_IT>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d020      	beq.n	8009404 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093c6:	4a12      	ldr	r2, [pc, #72]	@ (8009410 <HAL_SPI_IRQHandler+0x398>)
 80093c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f9 fa08 	bl	80027e4 <HAL_DMA_Abort_IT>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d014      	beq.n	8009404 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093ea:	e00b      	b.n	8009404 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f821 	bl	800943c <HAL_SPI_ErrorCallback>
    return;
 80093fa:	e003      	b.n	8009404 <HAL_SPI_IRQHandler+0x38c>
    return;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009404:	bf00      	nop
  }
}
 8009406:	3728      	adds	r7, #40	@ 0x28
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	fffffc94 	.word	0xfffffc94
 8009410:	08009465 	.word	0x08009465

08009414 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7ff ffd6 	bl	800943c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009490:	bf00      	nop
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d107      	bne.n	80094ea <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3330      	adds	r3, #48	@ 0x30
 8009504:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	8812      	ldrh	r2, [r2, #0]
 800950e:	b292      	uxth	r2, r2
 8009510:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009516:	1c9a      	adds	r2, r3, #2
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d107      	bne.n	800954a <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f022 0201 	bic.w	r2, r2, #1
 8009548:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800954a:	bf00      	nop
 800954c:	3714      	adds	r7, #20
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009566:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009568:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956e:	1d1a      	adds	r2, r3, #4
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0201 	bic.w	r2, r2, #1
 80095a0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3320      	adds	r3, #32
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d107      	bne.n	80095fc <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0202 	bic.w	r2, r2, #2
 80095fa:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3320      	adds	r3, #32
 8009616:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800961c:	881a      	ldrh	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009626:	1c9a      	adds	r2, r3, #2
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009644:	b29b      	uxth	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d107      	bne.n	800965a <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0202 	bic.w	r2, r2, #2
 8009658:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6812      	ldr	r2, [r2, #0]
 8009678:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800968a:	b29b      	uxth	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d107      	bne.n	80096b2 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0202 	bic.w	r2, r2, #2
 80096b0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
	...

080096c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	699a      	ldr	r2, [r3, #24]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0208 	orr.w	r2, r2, #8
 80096de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699a      	ldr	r2, [r3, #24]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0210 	orr.w	r2, r2, #16
 80096ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6919      	ldr	r1, [r3, #16]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b3c      	ldr	r3, [pc, #240]	@ (80097fc <SPI_CloseTransfer+0x13c>)
 800970c:	400b      	ands	r3, r1
 800970e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800971e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b04      	cmp	r3, #4
 800972a:	d014      	beq.n	8009756 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00f      	beq.n	8009756 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800973c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0220 	orr.w	r2, r2, #32
 8009754:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d014      	beq.n	800978c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00f      	beq.n	800978c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009772:	f043 0204 	orr.w	r2, r3, #4
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800978a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800979c:	f043 0201 	orr.w	r2, r3, #1
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699a      	ldr	r2, [r3, #24]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00f      	beq.n	80097e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c6:	f043 0208 	orr.w	r2, r3, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80097f0:	bf00      	nop
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	fffffc90 	.word	0xfffffc90

08009800 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009810:	e010      	b.n	8009834 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009812:	f7f8 fb17 	bl	8001e44 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d803      	bhi.n	800982a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009828:	d102      	bne.n	8009830 <SPI_WaitOnFlagUntilTimeout+0x30>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e00f      	b.n	8009854 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4013      	ands	r3, r2
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	429a      	cmp	r2, r3
 8009850:	d0df      	beq.n	8009812 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	3301      	adds	r3, #1
 8009874:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3307      	adds	r3, #7
 800987a:	08db      	lsrs	r3, r3, #3
 800987c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	fb02 f303 	mul.w	r3, r2, r3
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e049      	b.n	8009938 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f7 feb3 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2202      	movs	r2, #2
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4619      	mov	r1, r3
 80098d0:	4610      	mov	r0, r2
 80098d2:	f000 fdb1 	bl	800a438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	d001      	beq.n	8009958 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e056      	b.n	8009a06 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2b      	ldr	r2, [pc, #172]	@ (8009a14 <HAL_TIM_Base_Start+0xd4>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d02c      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009972:	d027      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a27      	ldr	r2, [pc, #156]	@ (8009a18 <HAL_TIM_Base_Start+0xd8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d022      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a26      	ldr	r2, [pc, #152]	@ (8009a1c <HAL_TIM_Base_Start+0xdc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d01d      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a24      	ldr	r2, [pc, #144]	@ (8009a20 <HAL_TIM_Base_Start+0xe0>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d018      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a23      	ldr	r2, [pc, #140]	@ (8009a24 <HAL_TIM_Base_Start+0xe4>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a21      	ldr	r2, [pc, #132]	@ (8009a28 <HAL_TIM_Base_Start+0xe8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00e      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a20      	ldr	r2, [pc, #128]	@ (8009a2c <HAL_TIM_Base_Start+0xec>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d009      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1e      	ldr	r2, [pc, #120]	@ (8009a30 <HAL_TIM_Base_Start+0xf0>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d004      	beq.n	80099c4 <HAL_TIM_Base_Start+0x84>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1d      	ldr	r2, [pc, #116]	@ (8009a34 <HAL_TIM_Base_Start+0xf4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d115      	bne.n	80099f0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009a38 <HAL_TIM_Base_Start+0xf8>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b06      	cmp	r3, #6
 80099d4:	d015      	beq.n	8009a02 <HAL_TIM_Base_Start+0xc2>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099dc:	d011      	beq.n	8009a02 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ee:	e008      	b.n	8009a02 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0201 	orr.w	r2, r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	e000      	b.n	8009a04 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40010000 	.word	0x40010000
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40010400 	.word	0x40010400
 8009a28:	40001800 	.word	0x40001800
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	4000e000 	.word	0x4000e000
 8009a34:	4000e400 	.word	0x4000e400
 8009a38:	00010007 	.word	0x00010007

08009a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d001      	beq.n	8009a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e05e      	b.n	8009b12 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a2b      	ldr	r2, [pc, #172]	@ (8009b20 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d02c      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7e:	d027      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a27      	ldr	r2, [pc, #156]	@ (8009b24 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d022      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a26      	ldr	r2, [pc, #152]	@ (8009b28 <HAL_TIM_Base_Start_IT+0xec>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d01d      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a24      	ldr	r2, [pc, #144]	@ (8009b2c <HAL_TIM_Base_Start_IT+0xf0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d018      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a23      	ldr	r2, [pc, #140]	@ (8009b30 <HAL_TIM_Base_Start_IT+0xf4>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a21      	ldr	r2, [pc, #132]	@ (8009b34 <HAL_TIM_Base_Start_IT+0xf8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00e      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a20      	ldr	r2, [pc, #128]	@ (8009b38 <HAL_TIM_Base_Start_IT+0xfc>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8009b3c <HAL_TIM_Base_Start_IT+0x100>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x94>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a1d      	ldr	r2, [pc, #116]	@ (8009b40 <HAL_TIM_Base_Start_IT+0x104>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d115      	bne.n	8009afc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b44 <HAL_TIM_Base_Start_IT+0x108>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d015      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0xd2>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae8:	d011      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0201 	orr.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009afa:	e008      	b.n	8009b0e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	e000      	b.n	8009b10 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40010000 	.word	0x40010000
 8009b24:	40000400 	.word	0x40000400
 8009b28:	40000800 	.word	0x40000800
 8009b2c:	40000c00 	.word	0x40000c00
 8009b30:	40010400 	.word	0x40010400
 8009b34:	40001800 	.word	0x40001800
 8009b38:	40014000 	.word	0x40014000
 8009b3c:	4000e000 	.word	0x4000e000
 8009b40:	4000e400 	.word	0x4000e400
 8009b44:	00010007 	.word	0x00010007

08009b48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e049      	b.n	8009bee <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d106      	bne.n	8009b74 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f841 	bl	8009bf6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4619      	mov	r1, r3
 8009b86:	4610      	mov	r0, r2
 8009b88:	f000 fc56 	bl	800a438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e049      	b.n	8009cb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f841 	bl	8009cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f000 fbf5 	bl	800a438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d020      	beq.n	8009d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01b      	beq.n	8009d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0202 	mvn.w	r2, #2
 8009d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fb70 	bl	800a3fc <HAL_TIM_IC_CaptureCallback>
 8009d1c:	e005      	b.n	8009d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fb62 	bl	800a3e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb73 	bl	800a410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d020      	beq.n	8009d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01b      	beq.n	8009d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0204 	mvn.w	r2, #4
 8009d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2202      	movs	r2, #2
 8009d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb4a 	bl	800a3fc <HAL_TIM_IC_CaptureCallback>
 8009d68:	e005      	b.n	8009d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb3c 	bl	800a3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fb4d 	bl	800a410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f003 0308 	and.w	r3, r3, #8
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d020      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d01b      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0208 	mvn.w	r2, #8
 8009d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fb24 	bl	800a3fc <HAL_TIM_IC_CaptureCallback>
 8009db4:	e005      	b.n	8009dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb16 	bl	800a3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fb27 	bl	800a410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d020      	beq.n	8009e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01b      	beq.n	8009e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0210 	mvn.w	r2, #16
 8009de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2208      	movs	r2, #8
 8009dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fafe 	bl	800a3fc <HAL_TIM_IC_CaptureCallback>
 8009e00:	e005      	b.n	8009e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 faf0 	bl	800a3e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb01 	bl	800a410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00c      	beq.n	8009e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0201 	mvn.w	r2, #1
 8009e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7f7 fa04 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d104      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f841 	bl	800aee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f839 	bl	800aefc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00c      	beq.n	8009eae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fabb 	bl	800a424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f003 0320 	and.w	r3, r3, #32
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00c      	beq.n	8009ed2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d007      	beq.n	8009ed2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f06f 0220 	mvn.w	r2, #32
 8009eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f801 	bl	800aed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_TIM_OC_ConfigChannel+0x1e>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e066      	b.n	8009fc8 <HAL_TIM_OC_ConfigChannel+0xec>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b14      	cmp	r3, #20
 8009f06:	d857      	bhi.n	8009fb8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009f08:	a201      	add	r2, pc, #4	@ (adr r2, 8009f10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fb9 	.word	0x08009fb9
 8009f1c:	08009fb9 	.word	0x08009fb9
 8009f20:	08009f73 	.word	0x08009f73
 8009f24:	08009fb9 	.word	0x08009fb9
 8009f28:	08009fb9 	.word	0x08009fb9
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009f81 	.word	0x08009f81
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	08009fb9 	.word	0x08009fb9
 8009f3c:	08009fb9 	.word	0x08009fb9
 8009f40:	08009f8f 	.word	0x08009f8f
 8009f44:	08009fb9 	.word	0x08009fb9
 8009f48:	08009fb9 	.word	0x08009fb9
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	08009f9d 	.word	0x08009f9d
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fb9 	.word	0x08009fb9
 8009f5c:	08009fb9 	.word	0x08009fb9
 8009f60:	08009fab 	.word	0x08009fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 fb16 	bl	800a59c <TIM_OC1_SetConfig>
      break;
 8009f70:	e025      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68b9      	ldr	r1, [r7, #8]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 fb9f 	bl	800a6bc <TIM_OC2_SetConfig>
      break;
 8009f7e:	e01e      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fc22 	bl	800a7d0 <TIM_OC3_SetConfig>
      break;
 8009f8c:	e017      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f000 fca3 	bl	800a8e0 <TIM_OC4_SetConfig>
      break;
 8009f9a:	e010      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68b9      	ldr	r1, [r7, #8]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fd06 	bl	800a9b4 <TIM_OC5_SetConfig>
      break;
 8009fa8:	e009      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fd63 	bl	800aa7c <TIM_OC6_SetConfig>
      break;
 8009fb6:	e002      	b.n	8009fbe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e0ff      	b.n	800a1ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b14      	cmp	r3, #20
 8009ffa:	f200 80f0 	bhi.w	800a1de <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ffe:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a059 	.word	0x0800a059
 800a008:	0800a1df 	.word	0x0800a1df
 800a00c:	0800a1df 	.word	0x0800a1df
 800a010:	0800a1df 	.word	0x0800a1df
 800a014:	0800a099 	.word	0x0800a099
 800a018:	0800a1df 	.word	0x0800a1df
 800a01c:	0800a1df 	.word	0x0800a1df
 800a020:	0800a1df 	.word	0x0800a1df
 800a024:	0800a0db 	.word	0x0800a0db
 800a028:	0800a1df 	.word	0x0800a1df
 800a02c:	0800a1df 	.word	0x0800a1df
 800a030:	0800a1df 	.word	0x0800a1df
 800a034:	0800a11b 	.word	0x0800a11b
 800a038:	0800a1df 	.word	0x0800a1df
 800a03c:	0800a1df 	.word	0x0800a1df
 800a040:	0800a1df 	.word	0x0800a1df
 800a044:	0800a15d 	.word	0x0800a15d
 800a048:	0800a1df 	.word	0x0800a1df
 800a04c:	0800a1df 	.word	0x0800a1df
 800a050:	0800a1df 	.word	0x0800a1df
 800a054:	0800a19d 	.word	0x0800a19d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fa9c 	bl	800a59c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0208 	orr.w	r2, r2, #8
 800a072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0204 	bic.w	r2, r2, #4
 800a082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6999      	ldr	r1, [r3, #24]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	691a      	ldr	r2, [r3, #16]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	619a      	str	r2, [r3, #24]
      break;
 800a096:	e0a5      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fb0c 	bl	800a6bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6999      	ldr	r1, [r3, #24]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	021a      	lsls	r2, r3, #8
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	619a      	str	r2, [r3, #24]
      break;
 800a0d8:	e084      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fb75 	bl	800a7d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0208 	orr.w	r2, r2, #8
 800a0f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0204 	bic.w	r2, r2, #4
 800a104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69d9      	ldr	r1, [r3, #28]
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	691a      	ldr	r2, [r3, #16]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	61da      	str	r2, [r3, #28]
      break;
 800a118:	e064      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fbdd 	bl	800a8e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69d9      	ldr	r1, [r3, #28]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	021a      	lsls	r2, r3, #8
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	61da      	str	r2, [r3, #28]
      break;
 800a15a:	e043      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fc26 	bl	800a9b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0208 	orr.w	r2, r2, #8
 800a176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f022 0204 	bic.w	r2, r2, #4
 800a186:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a19a:	e023      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fc6a 	bl	800aa7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	021a      	lsls	r2, r3, #8
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1dc:	e002      	b.n	800a1e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop

0800a1f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_TIM_ConfigClockSource+0x1c>
 800a210:	2302      	movs	r3, #2
 800a212:	e0dc      	b.n	800a3ce <HAL_TIM_ConfigClockSource+0x1d6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	4b6a      	ldr	r3, [pc, #424]	@ (800a3d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a230:	4013      	ands	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a23a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a64      	ldr	r2, [pc, #400]	@ (800a3dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	f000 80a9 	beq.w	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a250:	4a62      	ldr	r2, [pc, #392]	@ (800a3dc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	f200 80ae 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a258:	4a61      	ldr	r2, [pc, #388]	@ (800a3e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	f000 80a1 	beq.w	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a260:	4a5f      	ldr	r2, [pc, #380]	@ (800a3e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a262:	4293      	cmp	r3, r2
 800a264:	f200 80a6 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a268:	4a5e      	ldr	r2, [pc, #376]	@ (800a3e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	f000 8099 	beq.w	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a270:	4a5c      	ldr	r2, [pc, #368]	@ (800a3e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a272:	4293      	cmp	r3, r2
 800a274:	f200 809e 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a278:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a27c:	f000 8091 	beq.w	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a280:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a284:	f200 8096 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a28c:	f000 8089 	beq.w	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a294:	f200 808e 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29c:	d03e      	beq.n	800a31c <HAL_TIM_ConfigClockSource+0x124>
 800a29e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2a2:	f200 8087 	bhi.w	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2aa:	f000 8086 	beq.w	800a3ba <HAL_TIM_ConfigClockSource+0x1c2>
 800a2ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b2:	d87f      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b4:	2b70      	cmp	r3, #112	@ 0x70
 800a2b6:	d01a      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0xf6>
 800a2b8:	2b70      	cmp	r3, #112	@ 0x70
 800a2ba:	d87b      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2bc:	2b60      	cmp	r3, #96	@ 0x60
 800a2be:	d050      	beq.n	800a362 <HAL_TIM_ConfigClockSource+0x16a>
 800a2c0:	2b60      	cmp	r3, #96	@ 0x60
 800a2c2:	d877      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c4:	2b50      	cmp	r3, #80	@ 0x50
 800a2c6:	d03c      	beq.n	800a342 <HAL_TIM_ConfigClockSource+0x14a>
 800a2c8:	2b50      	cmp	r3, #80	@ 0x50
 800a2ca:	d873      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2cc:	2b40      	cmp	r3, #64	@ 0x40
 800a2ce:	d058      	beq.n	800a382 <HAL_TIM_ConfigClockSource+0x18a>
 800a2d0:	2b40      	cmp	r3, #64	@ 0x40
 800a2d2:	d86f      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d4:	2b30      	cmp	r3, #48	@ 0x30
 800a2d6:	d064      	beq.n	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	2b30      	cmp	r3, #48	@ 0x30
 800a2da:	d86b      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	d060      	beq.n	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	d867      	bhi.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d05c      	beq.n	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e8:	2b10      	cmp	r3, #16
 800a2ea:	d05a      	beq.n	800a3a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a2ec:	e062      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2fe:	f000 fca1 	bl	800ac44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	609a      	str	r2, [r3, #8]
      break;
 800a31a:	e04f      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a32c:	f000 fc8a 	bl	800ac44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689a      	ldr	r2, [r3, #8]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a33e:	609a      	str	r2, [r3, #8]
      break;
 800a340:	e03c      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a34e:	461a      	mov	r2, r3
 800a350:	f000 fbfa 	bl	800ab48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2150      	movs	r1, #80	@ 0x50
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fc54 	bl	800ac08 <TIM_ITRx_SetConfig>
      break;
 800a360:	e02c      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a36e:	461a      	mov	r2, r3
 800a370:	f000 fc19 	bl	800aba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2160      	movs	r1, #96	@ 0x60
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fc44 	bl	800ac08 <TIM_ITRx_SetConfig>
      break;
 800a380:	e01c      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a38e:	461a      	mov	r2, r3
 800a390:	f000 fbda 	bl	800ab48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2140      	movs	r1, #64	@ 0x40
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fc34 	bl	800ac08 <TIM_ITRx_SetConfig>
      break;
 800a3a0:	e00c      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	f000 fc2b 	bl	800ac08 <TIM_ITRx_SetConfig>
      break;
 800a3b2:	e003      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b8:	e000      	b.n	800a3bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a3ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	ffceff88 	.word	0xffceff88
 800a3dc:	00100040 	.word	0x00100040
 800a3e0:	00100030 	.word	0x00100030
 800a3e4:	00100020 	.word	0x00100020

0800a3e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a4a      	ldr	r2, [pc, #296]	@ (800a574 <TIM_Base_SetConfig+0x13c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d013      	beq.n	800a478 <TIM_Base_SetConfig+0x40>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a456:	d00f      	beq.n	800a478 <TIM_Base_SetConfig+0x40>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a47      	ldr	r2, [pc, #284]	@ (800a578 <TIM_Base_SetConfig+0x140>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00b      	beq.n	800a478 <TIM_Base_SetConfig+0x40>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a46      	ldr	r2, [pc, #280]	@ (800a57c <TIM_Base_SetConfig+0x144>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d007      	beq.n	800a478 <TIM_Base_SetConfig+0x40>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a45      	ldr	r2, [pc, #276]	@ (800a580 <TIM_Base_SetConfig+0x148>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d003      	beq.n	800a478 <TIM_Base_SetConfig+0x40>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a44      	ldr	r2, [pc, #272]	@ (800a584 <TIM_Base_SetConfig+0x14c>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d108      	bne.n	800a48a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a39      	ldr	r2, [pc, #228]	@ (800a574 <TIM_Base_SetConfig+0x13c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d027      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a498:	d023      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a36      	ldr	r2, [pc, #216]	@ (800a578 <TIM_Base_SetConfig+0x140>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d01f      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a35      	ldr	r2, [pc, #212]	@ (800a57c <TIM_Base_SetConfig+0x144>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d01b      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a34      	ldr	r2, [pc, #208]	@ (800a580 <TIM_Base_SetConfig+0x148>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d017      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a33      	ldr	r2, [pc, #204]	@ (800a584 <TIM_Base_SetConfig+0x14c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d013      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a32      	ldr	r2, [pc, #200]	@ (800a588 <TIM_Base_SetConfig+0x150>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d00f      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a31      	ldr	r2, [pc, #196]	@ (800a58c <TIM_Base_SetConfig+0x154>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d00b      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a30      	ldr	r2, [pc, #192]	@ (800a590 <TIM_Base_SetConfig+0x158>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d007      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a2f      	ldr	r2, [pc, #188]	@ (800a594 <TIM_Base_SetConfig+0x15c>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d003      	beq.n	800a4e2 <TIM_Base_SetConfig+0xaa>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a598 <TIM_Base_SetConfig+0x160>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d108      	bne.n	800a4f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <TIM_Base_SetConfig+0x13c>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d00f      	beq.n	800a540 <TIM_Base_SetConfig+0x108>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a18      	ldr	r2, [pc, #96]	@ (800a584 <TIM_Base_SetConfig+0x14c>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d00b      	beq.n	800a540 <TIM_Base_SetConfig+0x108>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a17      	ldr	r2, [pc, #92]	@ (800a588 <TIM_Base_SetConfig+0x150>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d007      	beq.n	800a540 <TIM_Base_SetConfig+0x108>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a16      	ldr	r2, [pc, #88]	@ (800a58c <TIM_Base_SetConfig+0x154>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d003      	beq.n	800a540 <TIM_Base_SetConfig+0x108>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a15      	ldr	r2, [pc, #84]	@ (800a590 <TIM_Base_SetConfig+0x158>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d103      	bne.n	800a548 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	691a      	ldr	r2, [r3, #16]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b01      	cmp	r3, #1
 800a558:	d105      	bne.n	800a566 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f023 0201 	bic.w	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	611a      	str	r2, [r3, #16]
  }
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	40010000 	.word	0x40010000
 800a578:	40000400 	.word	0x40000400
 800a57c:	40000800 	.word	0x40000800
 800a580:	40000c00 	.word	0x40000c00
 800a584:	40010400 	.word	0x40010400
 800a588:	40014000 	.word	0x40014000
 800a58c:	40014400 	.word	0x40014400
 800a590:	40014800 	.word	0x40014800
 800a594:	4000e000 	.word	0x4000e000
 800a598:	4000e400 	.word	0x4000e400

0800a59c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	f023 0201 	bic.w	r2, r3, #1
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4b37      	ldr	r3, [pc, #220]	@ (800a6a4 <TIM_OC1_SetConfig+0x108>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f023 0302 	bic.w	r3, r3, #2
 800a5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a2d      	ldr	r2, [pc, #180]	@ (800a6a8 <TIM_OC1_SetConfig+0x10c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d00f      	beq.n	800a618 <TIM_OC1_SetConfig+0x7c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <TIM_OC1_SetConfig+0x110>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d00b      	beq.n	800a618 <TIM_OC1_SetConfig+0x7c>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a2b      	ldr	r2, [pc, #172]	@ (800a6b0 <TIM_OC1_SetConfig+0x114>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d007      	beq.n	800a618 <TIM_OC1_SetConfig+0x7c>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b4 <TIM_OC1_SetConfig+0x118>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d003      	beq.n	800a618 <TIM_OC1_SetConfig+0x7c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a29      	ldr	r2, [pc, #164]	@ (800a6b8 <TIM_OC1_SetConfig+0x11c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d10c      	bne.n	800a632 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f023 0308 	bic.w	r3, r3, #8
 800a61e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 0304 	bic.w	r3, r3, #4
 800a630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a8 <TIM_OC1_SetConfig+0x10c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00f      	beq.n	800a65a <TIM_OC1_SetConfig+0xbe>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ac <TIM_OC1_SetConfig+0x110>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00b      	beq.n	800a65a <TIM_OC1_SetConfig+0xbe>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1a      	ldr	r2, [pc, #104]	@ (800a6b0 <TIM_OC1_SetConfig+0x114>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d007      	beq.n	800a65a <TIM_OC1_SetConfig+0xbe>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a19      	ldr	r2, [pc, #100]	@ (800a6b4 <TIM_OC1_SetConfig+0x118>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d003      	beq.n	800a65a <TIM_OC1_SetConfig+0xbe>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a18      	ldr	r2, [pc, #96]	@ (800a6b8 <TIM_OC1_SetConfig+0x11c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d111      	bne.n	800a67e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	621a      	str	r2, [r3, #32]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	fffeff8f 	.word	0xfffeff8f
 800a6a8:	40010000 	.word	0x40010000
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800

0800a6bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f023 0210 	bic.w	r2, r3, #16
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4b34      	ldr	r3, [pc, #208]	@ (800a7b8 <TIM_OC2_SetConfig+0xfc>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 0320 	bic.w	r3, r3, #32
 800a706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a29      	ldr	r2, [pc, #164]	@ (800a7bc <TIM_OC2_SetConfig+0x100>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d003      	beq.n	800a724 <TIM_OC2_SetConfig+0x68>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a28      	ldr	r2, [pc, #160]	@ (800a7c0 <TIM_OC2_SetConfig+0x104>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d10d      	bne.n	800a740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	011b      	lsls	r3, r3, #4
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a73e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1e      	ldr	r2, [pc, #120]	@ (800a7bc <TIM_OC2_SetConfig+0x100>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00f      	beq.n	800a768 <TIM_OC2_SetConfig+0xac>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c0 <TIM_OC2_SetConfig+0x104>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00b      	beq.n	800a768 <TIM_OC2_SetConfig+0xac>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c4 <TIM_OC2_SetConfig+0x108>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d007      	beq.n	800a768 <TIM_OC2_SetConfig+0xac>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7c8 <TIM_OC2_SetConfig+0x10c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d003      	beq.n	800a768 <TIM_OC2_SetConfig+0xac>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1a      	ldr	r2, [pc, #104]	@ (800a7cc <TIM_OC2_SetConfig+0x110>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d113      	bne.n	800a790 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a76e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	4313      	orrs	r3, r2
 800a782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	feff8fff 	.word	0xfeff8fff
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40010400 	.word	0x40010400
 800a7c4:	40014000 	.word	0x40014000
 800a7c8:	40014400 	.word	0x40014400
 800a7cc:	40014800 	.word	0x40014800

0800a7d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	4b33      	ldr	r3, [pc, #204]	@ (800a8c8 <TIM_OC3_SetConfig+0xf8>)
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4313      	orrs	r3, r2
 800a824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a28      	ldr	r2, [pc, #160]	@ (800a8cc <TIM_OC3_SetConfig+0xfc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d003      	beq.n	800a836 <TIM_OC3_SetConfig+0x66>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a27      	ldr	r2, [pc, #156]	@ (800a8d0 <TIM_OC3_SetConfig+0x100>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d10d      	bne.n	800a852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a83c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	021b      	lsls	r3, r3, #8
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a1d      	ldr	r2, [pc, #116]	@ (800a8cc <TIM_OC3_SetConfig+0xfc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00f      	beq.n	800a87a <TIM_OC3_SetConfig+0xaa>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a1c      	ldr	r2, [pc, #112]	@ (800a8d0 <TIM_OC3_SetConfig+0x100>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00b      	beq.n	800a87a <TIM_OC3_SetConfig+0xaa>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a1b      	ldr	r2, [pc, #108]	@ (800a8d4 <TIM_OC3_SetConfig+0x104>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d007      	beq.n	800a87a <TIM_OC3_SetConfig+0xaa>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d8 <TIM_OC3_SetConfig+0x108>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d003      	beq.n	800a87a <TIM_OC3_SetConfig+0xaa>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a19      	ldr	r2, [pc, #100]	@ (800a8dc <TIM_OC3_SetConfig+0x10c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d113      	bne.n	800a8a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	621a      	str	r2, [r3, #32]
}
 800a8bc:	bf00      	nop
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	fffeff8f 	.word	0xfffeff8f
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40010400 	.word	0x40010400
 800a8d4:	40014000 	.word	0x40014000
 800a8d8:	40014400 	.word	0x40014400
 800a8dc:	40014800 	.word	0x40014800

0800a8e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4b24      	ldr	r3, [pc, #144]	@ (800a99c <TIM_OC4_SetConfig+0xbc>)
 800a90c:	4013      	ands	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	021b      	lsls	r3, r3, #8
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4313      	orrs	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a92a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	031b      	lsls	r3, r3, #12
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a19      	ldr	r2, [pc, #100]	@ (800a9a0 <TIM_OC4_SetConfig+0xc0>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d00f      	beq.n	800a960 <TIM_OC4_SetConfig+0x80>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a18      	ldr	r2, [pc, #96]	@ (800a9a4 <TIM_OC4_SetConfig+0xc4>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00b      	beq.n	800a960 <TIM_OC4_SetConfig+0x80>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a17      	ldr	r2, [pc, #92]	@ (800a9a8 <TIM_OC4_SetConfig+0xc8>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d007      	beq.n	800a960 <TIM_OC4_SetConfig+0x80>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a16      	ldr	r2, [pc, #88]	@ (800a9ac <TIM_OC4_SetConfig+0xcc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_OC4_SetConfig+0x80>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a15      	ldr	r2, [pc, #84]	@ (800a9b0 <TIM_OC4_SetConfig+0xd0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d109      	bne.n	800a974 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	019b      	lsls	r3, r3, #6
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	621a      	str	r2, [r3, #32]
}
 800a98e:	bf00      	nop
 800a990:	371c      	adds	r7, #28
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	feff8fff 	.word	0xfeff8fff
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40010400 	.word	0x40010400
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	40014800 	.word	0x40014800

0800a9b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4b21      	ldr	r3, [pc, #132]	@ (800aa64 <TIM_OC5_SetConfig+0xb0>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	041b      	lsls	r3, r3, #16
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a18      	ldr	r2, [pc, #96]	@ (800aa68 <TIM_OC5_SetConfig+0xb4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d00f      	beq.n	800aa2a <TIM_OC5_SetConfig+0x76>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a17      	ldr	r2, [pc, #92]	@ (800aa6c <TIM_OC5_SetConfig+0xb8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00b      	beq.n	800aa2a <TIM_OC5_SetConfig+0x76>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a16      	ldr	r2, [pc, #88]	@ (800aa70 <TIM_OC5_SetConfig+0xbc>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d007      	beq.n	800aa2a <TIM_OC5_SetConfig+0x76>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a15      	ldr	r2, [pc, #84]	@ (800aa74 <TIM_OC5_SetConfig+0xc0>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d003      	beq.n	800aa2a <TIM_OC5_SetConfig+0x76>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a14      	ldr	r2, [pc, #80]	@ (800aa78 <TIM_OC5_SetConfig+0xc4>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d109      	bne.n	800aa3e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	621a      	str	r2, [r3, #32]
}
 800aa58:	bf00      	nop
 800aa5a:	371c      	adds	r7, #28
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	fffeff8f 	.word	0xfffeff8f
 800aa68:	40010000 	.word	0x40010000
 800aa6c:	40010400 	.word	0x40010400
 800aa70:	40014000 	.word	0x40014000
 800aa74:	40014400 	.word	0x40014400
 800aa78:	40014800 	.word	0x40014800

0800aa7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4b22      	ldr	r3, [pc, #136]	@ (800ab30 <TIM_OC6_SetConfig+0xb4>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aabe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	051b      	lsls	r3, r3, #20
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a19      	ldr	r2, [pc, #100]	@ (800ab34 <TIM_OC6_SetConfig+0xb8>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00f      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x78>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a18      	ldr	r2, [pc, #96]	@ (800ab38 <TIM_OC6_SetConfig+0xbc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00b      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x78>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a17      	ldr	r2, [pc, #92]	@ (800ab3c <TIM_OC6_SetConfig+0xc0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d007      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x78>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a16      	ldr	r2, [pc, #88]	@ (800ab40 <TIM_OC6_SetConfig+0xc4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d003      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x78>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a15      	ldr	r2, [pc, #84]	@ (800ab44 <TIM_OC6_SetConfig+0xc8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d109      	bne.n	800ab08 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aafa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	029b      	lsls	r3, r3, #10
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	621a      	str	r2, [r3, #32]
}
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	feff8fff 	.word	0xfeff8fff
 800ab34:	40010000 	.word	0x40010000
 800ab38:	40010400 	.word	0x40010400
 800ab3c:	40014000 	.word	0x40014000
 800ab40:	40014400 	.word	0x40014400
 800ab44:	40014800 	.word	0x40014800

0800ab48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	f023 0201 	bic.w	r2, r3, #1
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f023 030a 	bic.w	r3, r3, #10
 800ab84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	621a      	str	r2, [r3, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b087      	sub	sp, #28
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f023 0210 	bic.w	r2, r3, #16
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800abd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	031b      	lsls	r3, r3, #12
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4313      	orrs	r3, r2
 800abda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800abe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
	...

0800ac08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4b09      	ldr	r3, [pc, #36]	@ (800ac40 <TIM_ITRx_SetConfig+0x38>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f043 0307 	orr.w	r3, r3, #7
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	609a      	str	r2, [r3, #8]
}
 800ac32:	bf00      	nop
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	ffcfff8f 	.word	0xffcfff8f

0800ac44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	021a      	lsls	r2, r3, #8
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	431a      	orrs	r2, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	609a      	str	r2, [r3, #8]
}
 800ac78:	bf00      	nop
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d101      	bne.n	800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e077      	b.n	800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a35      	ldr	r2, [pc, #212]	@ (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d004      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a34      	ldr	r2, [pc, #208]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d108      	bne.n	800ace2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800acd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ace8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a25      	ldr	r2, [pc, #148]	@ (800ad98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d02c      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad0e:	d027      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a22      	ldr	r2, [pc, #136]	@ (800ada0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d022      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a21      	ldr	r2, [pc, #132]	@ (800ada4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d01d      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a1f      	ldr	r2, [pc, #124]	@ (800ada8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d018      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a1a      	ldr	r2, [pc, #104]	@ (800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d013      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a1b      	ldr	r2, [pc, #108]	@ (800adac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00e      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a1a      	ldr	r2, [pc, #104]	@ (800adb0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d009      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a18      	ldr	r2, [pc, #96]	@ (800adb4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d004      	beq.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	@ (800adb8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d10c      	bne.n	800ad7a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	40010000 	.word	0x40010000
 800ad9c:	40010400 	.word	0x40010400
 800ada0:	40000400 	.word	0x40000400
 800ada4:	40000800 	.word	0x40000800
 800ada8:	40000c00 	.word	0x40000c00
 800adac:	40001800 	.word	0x40001800
 800adb0:	40014000 	.word	0x40014000
 800adb4:	4000e000 	.word	0x4000e000
 800adb8:	4000e400 	.word	0x4000e400

0800adbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800add4:	2302      	movs	r3, #2
 800add6:	e073      	b.n	800aec0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a19      	ldr	r2, [pc, #100]	@ (800aecc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a18      	ldr	r2, [pc, #96]	@ (800aed0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d11c      	bne.n	800aeae <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7e:	051b      	lsls	r3, r3, #20
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	40010000 	.word	0x40010000
 800aed0:	40010400 	.word	0x40010400

0800aed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800af10:	b5b0      	push	{r4, r5, r7, lr}
 800af12:	b08c      	sub	sp, #48	@ 0x30
 800af14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800af16:	4b8f      	ldr	r3, [pc, #572]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af18:	220a      	movs	r2, #10
 800af1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800af1c:	4b8d      	ldr	r3, [pc, #564]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af1e:	2214      	movs	r2, #20
 800af20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800af22:	4b8c      	ldr	r3, [pc, #560]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af24:	2203      	movs	r2, #3
 800af26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 800af28:	4b8a      	ldr	r3, [pc, #552]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af2a:	2203      	movs	r2, #3
 800af2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800af2e:	4b8a      	ldr	r3, [pc, #552]	@ (800b158 <MX_LWIP_Init+0x248>)
 800af30:	22ff      	movs	r2, #255	@ 0xff
 800af32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800af34:	4b88      	ldr	r3, [pc, #544]	@ (800b158 <MX_LWIP_Init+0x248>)
 800af36:	22ff      	movs	r2, #255	@ 0xff
 800af38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800af3a:	4b87      	ldr	r3, [pc, #540]	@ (800b158 <MX_LWIP_Init+0x248>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800af40:	4b85      	ldr	r3, [pc, #532]	@ (800b158 <MX_LWIP_Init+0x248>)
 800af42:	2200      	movs	r2, #0
 800af44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800af46:	4b85      	ldr	r3, [pc, #532]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800af48:	220a      	movs	r2, #10
 800af4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800af4c:	4b83      	ldr	r3, [pc, #524]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800af4e:	2214      	movs	r2, #20
 800af50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800af52:	4b82      	ldr	r3, [pc, #520]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800af54:	2201      	movs	r2, #1
 800af56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800af58:	4b80      	ldr	r3, [pc, #512]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800af5e:	2100      	movs	r1, #0
 800af60:	2000      	movs	r0, #0
 800af62:	f003 ffc9 	bl	800eef8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800af66:	4b7b      	ldr	r3, [pc, #492]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	061a      	lsls	r2, r3, #24
 800af6c:	4b79      	ldr	r3, [pc, #484]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	041b      	lsls	r3, r3, #16
 800af72:	431a      	orrs	r2, r3
 800af74:	4b77      	ldr	r3, [pc, #476]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af76:	789b      	ldrb	r3, [r3, #2]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	4313      	orrs	r3, r2
 800af7c:	4a75      	ldr	r2, [pc, #468]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af7e:	78d2      	ldrb	r2, [r2, #3]
 800af80:	4313      	orrs	r3, r2
 800af82:	061a      	lsls	r2, r3, #24
 800af84:	4b73      	ldr	r3, [pc, #460]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	0619      	lsls	r1, r3, #24
 800af8a:	4b72      	ldr	r3, [pc, #456]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	041b      	lsls	r3, r3, #16
 800af90:	4319      	orrs	r1, r3
 800af92:	4b70      	ldr	r3, [pc, #448]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af94:	789b      	ldrb	r3, [r3, #2]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	430b      	orrs	r3, r1
 800af9a:	496e      	ldr	r1, [pc, #440]	@ (800b154 <MX_LWIP_Init+0x244>)
 800af9c:	78c9      	ldrb	r1, [r1, #3]
 800af9e:	430b      	orrs	r3, r1
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800afa6:	431a      	orrs	r2, r3
 800afa8:	4b6a      	ldr	r3, [pc, #424]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	0619      	lsls	r1, r3, #24
 800afae:	4b69      	ldr	r3, [pc, #420]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	041b      	lsls	r3, r3, #16
 800afb4:	4319      	orrs	r1, r3
 800afb6:	4b67      	ldr	r3, [pc, #412]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afb8:	789b      	ldrb	r3, [r3, #2]
 800afba:	021b      	lsls	r3, r3, #8
 800afbc:	430b      	orrs	r3, r1
 800afbe:	4965      	ldr	r1, [pc, #404]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afc0:	78c9      	ldrb	r1, [r1, #3]
 800afc2:	430b      	orrs	r3, r1
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800afca:	431a      	orrs	r2, r3
 800afcc:	4b61      	ldr	r3, [pc, #388]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	0619      	lsls	r1, r3, #24
 800afd2:	4b60      	ldr	r3, [pc, #384]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	041b      	lsls	r3, r3, #16
 800afd8:	4319      	orrs	r1, r3
 800afda:	4b5e      	ldr	r3, [pc, #376]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afdc:	789b      	ldrb	r3, [r3, #2]
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	430b      	orrs	r3, r1
 800afe2:	495c      	ldr	r1, [pc, #368]	@ (800b154 <MX_LWIP_Init+0x244>)
 800afe4:	78c9      	ldrb	r1, [r1, #3]
 800afe6:	430b      	orrs	r3, r1
 800afe8:	0e1b      	lsrs	r3, r3, #24
 800afea:	4313      	orrs	r3, r2
 800afec:	4a5c      	ldr	r2, [pc, #368]	@ (800b160 <MX_LWIP_Init+0x250>)
 800afee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800aff0:	4b59      	ldr	r3, [pc, #356]	@ (800b158 <MX_LWIP_Init+0x248>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	061a      	lsls	r2, r3, #24
 800aff6:	4b58      	ldr	r3, [pc, #352]	@ (800b158 <MX_LWIP_Init+0x248>)
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	041b      	lsls	r3, r3, #16
 800affc:	431a      	orrs	r2, r3
 800affe:	4b56      	ldr	r3, [pc, #344]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b000:	789b      	ldrb	r3, [r3, #2]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	4313      	orrs	r3, r2
 800b006:	4a54      	ldr	r2, [pc, #336]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b008:	78d2      	ldrb	r2, [r2, #3]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	061a      	lsls	r2, r3, #24
 800b00e:	4b52      	ldr	r3, [pc, #328]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	0619      	lsls	r1, r3, #24
 800b014:	4b50      	ldr	r3, [pc, #320]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b016:	785b      	ldrb	r3, [r3, #1]
 800b018:	041b      	lsls	r3, r3, #16
 800b01a:	4319      	orrs	r1, r3
 800b01c:	4b4e      	ldr	r3, [pc, #312]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b01e:	789b      	ldrb	r3, [r3, #2]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	430b      	orrs	r3, r1
 800b024:	494c      	ldr	r1, [pc, #304]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b026:	78c9      	ldrb	r1, [r1, #3]
 800b028:	430b      	orrs	r3, r1
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b030:	431a      	orrs	r2, r3
 800b032:	4b49      	ldr	r3, [pc, #292]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	0619      	lsls	r1, r3, #24
 800b038:	4b47      	ldr	r3, [pc, #284]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b03a:	785b      	ldrb	r3, [r3, #1]
 800b03c:	041b      	lsls	r3, r3, #16
 800b03e:	4319      	orrs	r1, r3
 800b040:	4b45      	ldr	r3, [pc, #276]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b042:	789b      	ldrb	r3, [r3, #2]
 800b044:	021b      	lsls	r3, r3, #8
 800b046:	430b      	orrs	r3, r1
 800b048:	4943      	ldr	r1, [pc, #268]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b04a:	78c9      	ldrb	r1, [r1, #3]
 800b04c:	430b      	orrs	r3, r1
 800b04e:	0a1b      	lsrs	r3, r3, #8
 800b050:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b054:	431a      	orrs	r2, r3
 800b056:	4b40      	ldr	r3, [pc, #256]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	0619      	lsls	r1, r3, #24
 800b05c:	4b3e      	ldr	r3, [pc, #248]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b05e:	785b      	ldrb	r3, [r3, #1]
 800b060:	041b      	lsls	r3, r3, #16
 800b062:	4319      	orrs	r1, r3
 800b064:	4b3c      	ldr	r3, [pc, #240]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b066:	789b      	ldrb	r3, [r3, #2]
 800b068:	021b      	lsls	r3, r3, #8
 800b06a:	430b      	orrs	r3, r1
 800b06c:	493a      	ldr	r1, [pc, #232]	@ (800b158 <MX_LWIP_Init+0x248>)
 800b06e:	78c9      	ldrb	r1, [r1, #3]
 800b070:	430b      	orrs	r3, r1
 800b072:	0e1b      	lsrs	r3, r3, #24
 800b074:	4313      	orrs	r3, r2
 800b076:	4a3b      	ldr	r2, [pc, #236]	@ (800b164 <MX_LWIP_Init+0x254>)
 800b078:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b07a:	4b38      	ldr	r3, [pc, #224]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	061a      	lsls	r2, r3, #24
 800b080:	4b36      	ldr	r3, [pc, #216]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	041b      	lsls	r3, r3, #16
 800b086:	431a      	orrs	r2, r3
 800b088:	4b34      	ldr	r3, [pc, #208]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b08a:	789b      	ldrb	r3, [r3, #2]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	4313      	orrs	r3, r2
 800b090:	4a32      	ldr	r2, [pc, #200]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b092:	78d2      	ldrb	r2, [r2, #3]
 800b094:	4313      	orrs	r3, r2
 800b096:	061a      	lsls	r2, r3, #24
 800b098:	4b30      	ldr	r3, [pc, #192]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	0619      	lsls	r1, r3, #24
 800b09e:	4b2f      	ldr	r3, [pc, #188]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	041b      	lsls	r3, r3, #16
 800b0a4:	4319      	orrs	r1, r3
 800b0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0a8:	789b      	ldrb	r3, [r3, #2]
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	492b      	ldr	r1, [pc, #172]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0b0:	78c9      	ldrb	r1, [r1, #3]
 800b0b2:	430b      	orrs	r3, r1
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	4b27      	ldr	r3, [pc, #156]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	0619      	lsls	r1, r3, #24
 800b0c2:	4b26      	ldr	r3, [pc, #152]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0c4:	785b      	ldrb	r3, [r3, #1]
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	4319      	orrs	r1, r3
 800b0ca:	4b24      	ldr	r3, [pc, #144]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	021b      	lsls	r3, r3, #8
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	4922      	ldr	r1, [pc, #136]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0d4:	78c9      	ldrb	r1, [r1, #3]
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	0a1b      	lsrs	r3, r3, #8
 800b0da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	4b1e      	ldr	r3, [pc, #120]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	0619      	lsls	r1, r3, #24
 800b0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	4319      	orrs	r1, r3
 800b0ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0f0:	789b      	ldrb	r3, [r3, #2]
 800b0f2:	021b      	lsls	r3, r3, #8
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	4919      	ldr	r1, [pc, #100]	@ (800b15c <MX_LWIP_Init+0x24c>)
 800b0f8:	78c9      	ldrb	r1, [r1, #3]
 800b0fa:	430b      	orrs	r3, r1
 800b0fc:	0e1b      	lsrs	r3, r3, #24
 800b0fe:	4313      	orrs	r3, r2
 800b100:	4a19      	ldr	r2, [pc, #100]	@ (800b168 <MX_LWIP_Init+0x258>)
 800b102:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b104:	4b19      	ldr	r3, [pc, #100]	@ (800b16c <MX_LWIP_Init+0x25c>)
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	4b19      	ldr	r3, [pc, #100]	@ (800b170 <MX_LWIP_Init+0x260>)
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	2300      	movs	r3, #0
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4b15      	ldr	r3, [pc, #84]	@ (800b168 <MX_LWIP_Init+0x258>)
 800b112:	4a14      	ldr	r2, [pc, #80]	@ (800b164 <MX_LWIP_Init+0x254>)
 800b114:	4912      	ldr	r1, [pc, #72]	@ (800b160 <MX_LWIP_Init+0x250>)
 800b116:	4817      	ldr	r0, [pc, #92]	@ (800b174 <MX_LWIP_Init+0x264>)
 800b118:	f004 fd80 	bl	800fc1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b11c:	4815      	ldr	r0, [pc, #84]	@ (800b174 <MX_LWIP_Init+0x264>)
 800b11e:	f004 ff2f 	bl	800ff80 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b122:	4814      	ldr	r0, [pc, #80]	@ (800b174 <MX_LWIP_Init+0x264>)
 800b124:	f004 ff3c 	bl	800ffa0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b128:	4913      	ldr	r1, [pc, #76]	@ (800b178 <MX_LWIP_Init+0x268>)
 800b12a:	4812      	ldr	r0, [pc, #72]	@ (800b174 <MX_LWIP_Init+0x264>)
 800b12c:	f005 f83a 	bl	80101a4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800b130:	4b12      	ldr	r3, [pc, #72]	@ (800b17c <MX_LWIP_Init+0x26c>)
 800b132:	1d3c      	adds	r4, r7, #4
 800b134:	461d      	mov	r5, r3
 800b136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b13a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b13e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800b142:	1d3b      	adds	r3, r7, #4
 800b144:	490b      	ldr	r1, [pc, #44]	@ (800b174 <MX_LWIP_Init+0x264>)
 800b146:	4618      	mov	r0, r3
 800b148:	f000 fd70 	bl	800bc2c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b14c:	bf00      	nop
 800b14e:	3720      	adds	r7, #32
 800b150:	46bd      	mov	sp, r7
 800b152:	bdb0      	pop	{r4, r5, r7, pc}
 800b154:	24005ca0 	.word	0x24005ca0
 800b158:	24005ca4 	.word	0x24005ca4
 800b15c:	24005ca8 	.word	0x24005ca8
 800b160:	24005c94 	.word	0x24005c94
 800b164:	24005c98 	.word	0x24005c98
 800b168:	24005c9c 	.word	0x24005c9c
 800b16c:	0800ee35 	.word	0x0800ee35
 800b170:	0800b655 	.word	0x0800b655
 800b174:	24005c60 	.word	0x24005c60
 800b178:	0800b181 	.word	0x0800b181
 800b17c:	0801a718 	.word	0x0801a718

0800b180 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b19c:	4b04      	ldr	r3, [pc, #16]	@ (800b1b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 febf 	bl	800bf24 <osSemaphoreRelease>
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	24005cb4 	.word	0x24005cb4

0800b1b4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b1bc:	4b04      	ldr	r3, [pc, #16]	@ (800b1d0 <HAL_ETH_TxCpltCallback+0x1c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 feaf 	bl	800bf24 <osSemaphoreRelease>
}
 800b1c6:	bf00      	nop
 800b1c8:	3708      	adds	r7, #8
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	24005cb8 	.word	0x24005cb8

0800b1d4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f7f9 fe79 	bl	8004ed4 <HAL_ETH_GetDMAError>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ea:	d104      	bne.n	800b1f6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b1ec:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <HAL_ETH_ErrorCallback+0x2c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 fe97 	bl	800bf24 <osSemaphoreRelease>
  }
}
 800b1f6:	bf00      	nop
 800b1f8:	3708      	adds	r7, #8
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	24005cb4 	.word	0x24005cb4

0800b204 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b204:	b5b0      	push	{r4, r5, r7, lr}
 800b206:	b0ac      	sub	sp, #176	@ 0xb0
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 800b21e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b222:	2264      	movs	r2, #100	@ 0x64
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f00e fafe 	bl	8019828 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b22c:	4b8f      	ldr	r3, [pc, #572]	@ (800b46c <low_level_init+0x268>)
 800b22e:	4a90      	ldr	r2, [pc, #576]	@ (800b470 <low_level_init+0x26c>)
 800b230:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b232:	2300      	movs	r3, #0
 800b234:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 800b238:	2380      	movs	r3, #128	@ 0x80
 800b23a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 800b23e:	23e1      	movs	r3, #225	@ 0xe1
 800b240:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 800b244:	2300      	movs	r3, #0
 800b246:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 800b24a:	2300      	movs	r3, #0
 800b24c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 800b250:	2300      	movs	r3, #0
 800b252:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800b256:	4a85      	ldr	r2, [pc, #532]	@ (800b46c <low_level_init+0x268>)
 800b258:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b25c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b25e:	4b83      	ldr	r3, [pc, #524]	@ (800b46c <low_level_init+0x268>)
 800b260:	2201      	movs	r2, #1
 800b262:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b264:	4b81      	ldr	r3, [pc, #516]	@ (800b46c <low_level_init+0x268>)
 800b266:	4a83      	ldr	r2, [pc, #524]	@ (800b474 <low_level_init+0x270>)
 800b268:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b26a:	4b80      	ldr	r3, [pc, #512]	@ (800b46c <low_level_init+0x268>)
 800b26c:	4a82      	ldr	r2, [pc, #520]	@ (800b478 <low_level_init+0x274>)
 800b26e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b270:	4b7e      	ldr	r3, [pc, #504]	@ (800b46c <low_level_init+0x268>)
 800b272:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b276:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b278:	487c      	ldr	r0, [pc, #496]	@ (800b46c <low_level_init+0x268>)
 800b27a:	f7f8 fe5f 	bl	8003f3c <HAL_ETH_Init>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b284:	2238      	movs	r2, #56	@ 0x38
 800b286:	2100      	movs	r1, #0
 800b288:	487c      	ldr	r0, [pc, #496]	@ (800b47c <low_level_init+0x278>)
 800b28a:	f00e facd 	bl	8019828 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b28e:	4b7b      	ldr	r3, [pc, #492]	@ (800b47c <low_level_init+0x278>)
 800b290:	2221      	movs	r2, #33	@ 0x21
 800b292:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b294:	4b79      	ldr	r3, [pc, #484]	@ (800b47c <low_level_init+0x278>)
 800b296:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800b29a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b29c:	4b77      	ldr	r3, [pc, #476]	@ (800b47c <low_level_init+0x278>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b2a2:	4877      	ldr	r0, [pc, #476]	@ (800b480 <low_level_init+0x27c>)
 800b2a4:	f004 fb74 	bl	800f990 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2206      	movs	r2, #6
 800b2ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b2b0:	4b6e      	ldr	r3, [pc, #440]	@ (800b46c <low_level_init+0x268>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b2bc:	4b6b      	ldr	r3, [pc, #428]	@ (800b46c <low_level_init+0x268>)
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	785a      	ldrb	r2, [r3, #1]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b2c8:	4b68      	ldr	r3, [pc, #416]	@ (800b46c <low_level_init+0x268>)
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	789a      	ldrb	r2, [r3, #2]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b2d4:	4b65      	ldr	r3, [pc, #404]	@ (800b46c <low_level_init+0x268>)
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	78da      	ldrb	r2, [r3, #3]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b2e0:	4b62      	ldr	r3, [pc, #392]	@ (800b46c <low_level_init+0x268>)
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	791a      	ldrb	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b2ec:	4b5f      	ldr	r3, [pc, #380]	@ (800b46c <low_level_init+0x268>)
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	795a      	ldrb	r2, [r3, #5]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b2fe:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b306:	f043 030a 	orr.w	r3, r3, #10
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800b312:	2300      	movs	r3, #0
 800b314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b316:	2300      	movs	r3, #0
 800b318:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800b31a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b31e:	2101      	movs	r1, #1
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fd7f 	bl	800be24 <osSemaphoreCreate>
 800b326:	4603      	mov	r3, r0
 800b328:	4a56      	ldr	r2, [pc, #344]	@ (800b484 <low_level_init+0x280>)
 800b32a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800b32c:	2300      	movs	r3, #0
 800b32e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b330:	2300      	movs	r3, #0
 800b332:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800b334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b338:	2101      	movs	r1, #1
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fd72 	bl	800be24 <osSemaphoreCreate>
 800b340:	4603      	mov	r3, r0
 800b342:	4a51      	ldr	r2, [pc, #324]	@ (800b488 <low_level_init+0x284>)
 800b344:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800b346:	4b4f      	ldr	r3, [pc, #316]	@ (800b484 <low_level_init+0x280>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fd9b 	bl	800be88 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800b352:	4b4d      	ldr	r3, [pc, #308]	@ (800b488 <low_level_init+0x284>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2100      	movs	r1, #0
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fd95 	bl	800be88 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b35e:	4b4b      	ldr	r3, [pc, #300]	@ (800b48c <low_level_init+0x288>)
 800b360:	f107 0408 	add.w	r4, r7, #8
 800b364:	461d      	mov	r5, r3
 800b366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b36a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b36e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b372:	f107 0308 	add.w	r3, r7, #8
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fc57 	bl	800bc2c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b37e:	4944      	ldr	r1, [pc, #272]	@ (800b490 <low_level_init+0x28c>)
 800b380:	4844      	ldr	r0, [pc, #272]	@ (800b494 <low_level_init+0x290>)
 800b382:	f7f6 fc08 	bl	8001b96 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b386:	4843      	ldr	r0, [pc, #268]	@ (800b494 <low_level_init+0x290>)
 800b388:	f7f6 fc37 	bl	8001bfa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b38c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800b390:	2b00      	cmp	r3, #0
 800b392:	d164      	bne.n	800b45e <low_level_init+0x25a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b394:	483f      	ldr	r0, [pc, #252]	@ (800b494 <low_level_init+0x290>)
 800b396:	f7f6 fc7d 	bl	8001c94 <LAN8742_GetLinkState>
 800b39a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b39e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	dc06      	bgt.n	800b3b4 <low_level_init+0x1b0>
    {
      netif_set_link_down(netif);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f004 fecc 	bl	8010144 <netif_set_link_down>
      netif_set_down(netif);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f004 fe63 	bl	8010078 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b3b2:	e056      	b.n	800b462 <low_level_init+0x25e>
      switch (PHYLinkState)
 800b3b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3b8:	3b02      	subs	r3, #2
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d82a      	bhi.n	800b414 <low_level_init+0x210>
 800b3be:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <low_level_init+0x1c0>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b3d5 	.word	0x0800b3d5
 800b3c8:	0800b3e7 	.word	0x0800b3e7
 800b3cc:	0800b3f7 	.word	0x0800b3f7
 800b3d0:	0800b407 	.word	0x0800b407
        duplex = ETH_FULLDUPLEX_MODE;
 800b3d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b3d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800b3dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800b3e4:	e01f      	b.n	800b426 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800b3ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800b3f4:	e017      	b.n	800b426 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 800b3f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b3fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800b3fe:	2300      	movs	r3, #0
 800b400:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800b404:	e00f      	b.n	800b426 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 800b406:	2300      	movs	r3, #0
 800b408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800b40c:	2300      	movs	r3, #0
 800b40e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800b412:	e008      	b.n	800b426 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 800b414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800b41c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800b424:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b426:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b42a:	4619      	mov	r1, r3
 800b42c:	480f      	ldr	r0, [pc, #60]	@ (800b46c <low_level_init+0x268>)
 800b42e:	f7f9 fb13 	bl	8004a58 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b436:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 800b438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b43c:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b43e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b442:	4619      	mov	r1, r3
 800b444:	4809      	ldr	r0, [pc, #36]	@ (800b46c <low_level_init+0x268>)
 800b446:	f7f9 fcdb 	bl	8004e00 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b44a:	4808      	ldr	r0, [pc, #32]	@ (800b46c <low_level_init+0x268>)
 800b44c:	f7f8 fe74 	bl	8004138 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f004 fda5 	bl	800ffa0 <netif_set_up>
    netif_set_link_up(netif);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f004 fe40 	bl	80100dc <netif_set_link_up>
}
 800b45c:	e001      	b.n	800b462 <low_level_init+0x25e>
    Error_Handler();
 800b45e:	f7f5 ff01 	bl	8001264 <Error_Handler>
}
 800b462:	bf00      	nop
 800b464:	37b0      	adds	r7, #176	@ 0xb0
 800b466:	46bd      	mov	sp, r7
 800b468:	bdb0      	pop	{r4, r5, r7, pc}
 800b46a:	bf00      	nop
 800b46c:	24005cbc 	.word	0x24005cbc
 800b470:	40028000 	.word	0x40028000
 800b474:	30000100 	.word	0x30000100
 800b478:	30000000 	.word	0x30000000
 800b47c:	24005d6c 	.word	0x24005d6c
 800b480:	0801d254 	.word	0x0801d254
 800b484:	24005cb4 	.word	0x24005cb4
 800b488:	24005cb8 	.word	0x24005cb8
 800b48c:	0801a73c 	.word	0x0801a73c
 800b490:	240049e0 	.word	0x240049e0
 800b494:	24005da4 	.word	0x24005da4

0800b498 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b092      	sub	sp, #72	@ 0x48
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b4b0:	f107 030c 	add.w	r3, r7, #12
 800b4b4:	2230      	movs	r2, #48	@ 0x30
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f00e f9b5 	bl	8019828 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b4be:	f107 030c 	add.w	r3, r7, #12
 800b4c2:	2230      	movs	r2, #48	@ 0x30
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f00e f9ae 	bl	8019828 <memset>

  for(q = p; q != NULL; q = q->next)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4d0:	e045      	b.n	800b55e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b4d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	d902      	bls.n	800b4de <low_level_output+0x46>
      return ERR_IF;
 800b4d8:	f06f 030b 	mvn.w	r3, #11
 800b4dc:	e06c      	b.n	800b5b8 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800b4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4e0:	6859      	ldr	r1, [r3, #4]
 800b4e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	4413      	add	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	3348      	adds	r3, #72	@ 0x48
 800b4ee:	443b      	add	r3, r7
 800b4f0:	3b3c      	subs	r3, #60	@ 0x3c
 800b4f2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4f6:	895b      	ldrh	r3, [r3, #10]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	4413      	add	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	3348      	adds	r3, #72	@ 0x48
 800b506:	443b      	add	r3, r7
 800b508:	3b38      	subs	r3, #56	@ 0x38
 800b50a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d011      	beq.n	800b536 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b514:	1e5a      	subs	r2, r3, #1
 800b516:	f107 000c 	add.w	r0, r7, #12
 800b51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b51c:	460b      	mov	r3, r1
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	440b      	add	r3, r1
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	18c1      	adds	r1, r0, r3
 800b526:	4613      	mov	r3, r2
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	3348      	adds	r3, #72	@ 0x48
 800b530:	443b      	add	r3, r7
 800b532:	3b34      	subs	r3, #52	@ 0x34
 800b534:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b540:	4613      	mov	r3, r2
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	3348      	adds	r3, #72	@ 0x48
 800b54a:	443b      	add	r3, r7
 800b54c:	3b34      	subs	r3, #52	@ 0x34
 800b54e:	2200      	movs	r2, #0
 800b550:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b554:	3301      	adds	r3, #1
 800b556:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1b6      	bne.n	800b4d2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	891b      	ldrh	r3, [r3, #8]
 800b568:	461a      	mov	r2, r3
 800b56a:	4b15      	ldr	r3, [pc, #84]	@ (800b5c0 <low_level_output+0x128>)
 800b56c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b56e:	4a14      	ldr	r2, [pc, #80]	@ (800b5c0 <low_level_output+0x128>)
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b576:	4a12      	ldr	r2, [pc, #72]	@ (800b5c0 <low_level_output+0x128>)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800b57c:	6838      	ldr	r0, [r7, #0]
 800b57e:	f005 fa69 	bl	8010a54 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800b582:	490f      	ldr	r1, [pc, #60]	@ (800b5c0 <low_level_output+0x128>)
 800b584:	480f      	ldr	r0, [pc, #60]	@ (800b5c4 <low_level_output+0x12c>)
 800b586:	f7f8 fec3 	bl	8004310 <HAL_ETH_Transmit_IT>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10e      	bne.n	800b5ae <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b590:	bf00      	nop
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <low_level_output+0x130>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 fc74 	bl	800be88 <osSemaphoreWait>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f5      	bne.n	800b592 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800b5a6:	4807      	ldr	r0, [pc, #28]	@ (800b5c4 <low_level_output+0x12c>)
 800b5a8:	f7f9 f839 	bl	800461e <HAL_ETH_ReleaseTxPacket>
 800b5ac:	e002      	b.n	800b5b4 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800b5ae:	6838      	ldr	r0, [r7, #0]
 800b5b0:	f005 f9aa 	bl	8010908 <pbuf_free>
  }

  return errval;
 800b5b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3748      	adds	r7, #72	@ 0x48
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	24005d6c 	.word	0x24005d6c
 800b5c4:	24005cbc 	.word	0x24005cbc
 800b5c8:	24005cb8 	.word	0x24005cb8

0800b5cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b5d8:	4b07      	ldr	r3, [pc, #28]	@ (800b5f8 <low_level_input+0x2c>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d105      	bne.n	800b5ec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b5e0:	f107 030c 	add.w	r3, r7, #12
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4805      	ldr	r0, [pc, #20]	@ (800b5fc <low_level_input+0x30>)
 800b5e8:	f7f8 fee3 	bl	80043b2 <HAL_ETH_ReadData>
  }

  return p;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	24005cb0 	.word	0x24005cb0
 800b5fc:	24005cbc 	.word	0x24005cbc

0800b600 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b610:	4b0f      	ldr	r3, [pc, #60]	@ (800b650 <ethernetif_input+0x50>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fc35 	bl	800be88 <osSemaphoreWait>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1f5      	bne.n	800b610 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800b624:	68b8      	ldr	r0, [r7, #8]
 800b626:	f7ff ffd1 	bl	800b5cc <low_level_input>
 800b62a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00a      	beq.n	800b648 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	4798      	blx	r3
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f005 f960 	bl	8010908 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1ea      	bne.n	800b624 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b64e:	e7df      	b.n	800b610 <ethernetif_input+0x10>
 800b650:	24005cb4 	.word	0x24005cb4

0800b654 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <ethernetif_init+0x1c>
 800b662:	4b0e      	ldr	r3, [pc, #56]	@ (800b69c <ethernetif_init+0x48>)
 800b664:	f240 2203 	movw	r2, #515	@ 0x203
 800b668:	490d      	ldr	r1, [pc, #52]	@ (800b6a0 <ethernetif_init+0x4c>)
 800b66a:	480e      	ldr	r0, [pc, #56]	@ (800b6a4 <ethernetif_init+0x50>)
 800b66c:	f00e f8ba 	bl	80197e4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2273      	movs	r2, #115	@ 0x73
 800b674:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2274      	movs	r2, #116	@ 0x74
 800b67c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a09      	ldr	r2, [pc, #36]	@ (800b6a8 <ethernetif_init+0x54>)
 800b684:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a08      	ldr	r2, [pc, #32]	@ (800b6ac <ethernetif_init+0x58>)
 800b68a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff fdb9 	bl	800b204 <low_level_init>

  return ERR_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	0801a758 	.word	0x0801a758
 800b6a0:	0801a774 	.word	0x0801a774
 800b6a4:	0801a784 	.word	0x0801a784
 800b6a8:	08017679 	.word	0x08017679
 800b6ac:	0800b499 	.word	0x0800b499

0800b6b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b6bc:	68f9      	ldr	r1, [r7, #12]
 800b6be:	4809      	ldr	r0, [pc, #36]	@ (800b6e4 <pbuf_free_custom+0x34>)
 800b6c0:	f004 fa56 	bl	800fb70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b6c4:	4b08      	ldr	r3, [pc, #32]	@ (800b6e8 <pbuf_free_custom+0x38>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d107      	bne.n	800b6dc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <pbuf_free_custom+0x38>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b6d2:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <pbuf_free_custom+0x3c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 fc24 	bl	800bf24 <osSemaphoreRelease>
  }
}
 800b6dc:	bf00      	nop
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	0801d254 	.word	0x0801d254
 800b6e8:	24005cb0 	.word	0x24005cb0
 800b6ec:	24005cb4 	.word	0x24005cb4

0800b6f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b6f4:	f7f6 fba6 	bl	8001e44 <HAL_GetTick>
 800b6f8:	4603      	mov	r3, r0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08e      	sub	sp, #56	@ 0x38
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	605a      	str	r2, [r3, #4]
 800b712:	609a      	str	r2, [r3, #8]
 800b714:	60da      	str	r2, [r3, #12]
 800b716:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a5d      	ldr	r2, [pc, #372]	@ (800b894 <HAL_ETH_MspInit+0x194>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	f040 80b3 	bne.w	800b88a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b724:	4b5c      	ldr	r3, [pc, #368]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b72a:	4a5b      	ldr	r2, [pc, #364]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b72c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b730:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b734:	4b58      	ldr	r3, [pc, #352]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b73a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b73e:	623b      	str	r3, [r7, #32]
 800b740:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b742:	4b55      	ldr	r3, [pc, #340]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b748:	4a53      	ldr	r2, [pc, #332]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b74a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b74e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b752:	4b51      	ldr	r3, [pc, #324]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b754:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b75c:	61fb      	str	r3, [r7, #28]
 800b75e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b760:	4b4d      	ldr	r3, [pc, #308]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b766:	4a4c      	ldr	r2, [pc, #304]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b76c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800b770:	4b49      	ldr	r3, [pc, #292]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b77e:	4b46      	ldr	r3, [pc, #280]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b784:	4a44      	ldr	r2, [pc, #272]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b786:	f043 0304 	orr.w	r3, r3, #4
 800b78a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b78e:	4b42      	ldr	r3, [pc, #264]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b79c:	4b3e      	ldr	r3, [pc, #248]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b79e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7a2:	4a3d      	ldr	r2, [pc, #244]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7a4:	f043 0301 	orr.w	r3, r3, #1
 800b7a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7ac:	4b3a      	ldr	r3, [pc, #232]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7ba:	4b37      	ldr	r3, [pc, #220]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7c0:	4a35      	ldr	r2, [pc, #212]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7c2:	f043 0302 	orr.w	r3, r3, #2
 800b7c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7ca:	4b33      	ldr	r3, [pc, #204]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b7d8:	4b2f      	ldr	r3, [pc, #188]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7de:	4a2e      	ldr	r2, [pc, #184]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b898 <HAL_ETH_MspInit+0x198>)
 800b7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f2:	60bb      	str	r3, [r7, #8]
 800b7f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b7f6:	2332      	movs	r3, #50	@ 0x32
 800b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b802:	2303      	movs	r3, #3
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b806:	230b      	movs	r3, #11
 800b808:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b80a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b80e:	4619      	mov	r1, r3
 800b810:	4822      	ldr	r0, [pc, #136]	@ (800b89c <HAL_ETH_MspInit+0x19c>)
 800b812:	f7fa f8ef 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b816:	2386      	movs	r3, #134	@ 0x86
 800b818:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b81a:	2302      	movs	r3, #2
 800b81c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b81e:	2300      	movs	r3, #0
 800b820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b822:	2303      	movs	r3, #3
 800b824:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b826:	230b      	movs	r3, #11
 800b828:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b82a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b82e:	4619      	mov	r1, r3
 800b830:	481b      	ldr	r0, [pc, #108]	@ (800b8a0 <HAL_ETH_MspInit+0x1a0>)
 800b832:	f7fa f8df 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b83a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b83c:	2302      	movs	r3, #2
 800b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b840:	2300      	movs	r3, #0
 800b842:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b844:	2303      	movs	r3, #3
 800b846:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b848:	230b      	movs	r3, #11
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b84c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b850:	4619      	mov	r1, r3
 800b852:	4814      	ldr	r0, [pc, #80]	@ (800b8a4 <HAL_ETH_MspInit+0x1a4>)
 800b854:	f7fa f8ce 	bl	80059f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b858:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800b85c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85e:	2302      	movs	r3, #2
 800b860:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b862:	2300      	movs	r3, #0
 800b864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b866:	2303      	movs	r3, #3
 800b868:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b86a:	230b      	movs	r3, #11
 800b86c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b86e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b872:	4619      	mov	r1, r3
 800b874:	480c      	ldr	r0, [pc, #48]	@ (800b8a8 <HAL_ETH_MspInit+0x1a8>)
 800b876:	f7fa f8bd 	bl	80059f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b87a:	2200      	movs	r2, #0
 800b87c:	2105      	movs	r1, #5
 800b87e:	203d      	movs	r0, #61	@ 0x3d
 800b880:	f7f6 fbb8 	bl	8001ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b884:	203d      	movs	r0, #61	@ 0x3d
 800b886:	f7f6 fbcf 	bl	8002028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b88a:	bf00      	nop
 800b88c:	3738      	adds	r7, #56	@ 0x38
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	40028000 	.word	0x40028000
 800b898:	58024400 	.word	0x58024400
 800b89c:	58020800 	.word	0x58020800
 800b8a0:	58020000 	.word	0x58020000
 800b8a4:	58020400 	.word	0x58020400
 800b8a8:	58021800 	.word	0x58021800

0800b8ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b8b0:	4802      	ldr	r0, [pc, #8]	@ (800b8bc <ETH_PHY_IO_Init+0x10>)
 800b8b2:	f7f9 fabf 	bl	8004e34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	24005cbc 	.word	0x24005cbc

0800b8c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	af00      	add	r7, sp, #0
  return 0;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	68f9      	ldr	r1, [r7, #12]
 800b8e2:	4807      	ldr	r0, [pc, #28]	@ (800b900 <ETH_PHY_IO_ReadReg+0x30>)
 800b8e4:	f7f9 f810 	bl	8004908 <HAL_ETH_ReadPHYRegister>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8f2:	e000      	b.n	800b8f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	24005cbc 	.word	0x24005cbc

0800b904 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	68f9      	ldr	r1, [r7, #12]
 800b916:	4807      	ldr	r0, [pc, #28]	@ (800b934 <ETH_PHY_IO_WriteReg+0x30>)
 800b918:	f7f9 f84a 	bl	80049b0 <HAL_ETH_WritePHYRegister>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b926:	e000      	b.n	800b92a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	24005cbc 	.word	0x24005cbc

0800b938 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b93c:	f7f6 fa82 	bl	8001e44 <HAL_GetTick>
 800b940:	4603      	mov	r3, r0
}
 800b942:	4618      	mov	r0, r3
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b0a0      	sub	sp, #128	@ 0x80
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b950:	f107 0308 	add.w	r3, r7, #8
 800b954:	2264      	movs	r2, #100	@ 0x64
 800b956:	2100      	movs	r1, #0
 800b958:	4618      	mov	r0, r3
 800b95a:	f00d ff65 	bl	8019828 <memset>
  int32_t PHYLinkState = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b966:	2300      	movs	r3, #0
 800b968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b96a:	2300      	movs	r3, #0
 800b96c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b972:	483a      	ldr	r0, [pc, #232]	@ (800ba5c <ethernet_link_thread+0x114>)
 800b974:	f7f6 f98e 	bl	8001c94 <LAN8742_GetLinkState>
 800b978:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b980:	089b      	lsrs	r3, r3, #2
 800b982:	f003 0301 	and.w	r3, r3, #1
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00c      	beq.n	800b9a6 <ethernet_link_thread+0x5e>
 800b98c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b98e:	2b01      	cmp	r3, #1
 800b990:	dc09      	bgt.n	800b9a6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b992:	4833      	ldr	r0, [pc, #204]	@ (800ba60 <ethernet_link_thread+0x118>)
 800b994:	f7f8 fc44 	bl	8004220 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b998:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b99a:	f004 fb6d 	bl	8010078 <netif_set_down>
    netif_set_link_down(netif);
 800b99e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b9a0:	f004 fbd0 	bl	8010144 <netif_set_link_down>
 800b9a4:	e055      	b.n	800ba52 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b9a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d14e      	bne.n	800ba52 <ethernet_link_thread+0x10a>
 800b9b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	dd4b      	ble.n	800ba52 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b9ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9bc:	3b02      	subs	r3, #2
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d82a      	bhi.n	800ba18 <ethernet_link_thread+0xd0>
 800b9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c8 <ethernet_link_thread+0x80>)
 800b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c8:	0800b9d9 	.word	0x0800b9d9
 800b9cc:	0800b9eb 	.word	0x0800b9eb
 800b9d0:	0800b9fb 	.word	0x0800b9fb
 800b9d4:	0800ba0b 	.word	0x0800ba0b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b9d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b9de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9e8:	e017      	b.n	800ba1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b9ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b9f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b9f8:	e00f      	b.n	800ba1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b9fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9fe:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ba00:	2300      	movs	r3, #0
 800ba02:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba04:	2301      	movs	r3, #1
 800ba06:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba08:	e007      	b.n	800ba1a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ba12:	2301      	movs	r3, #1
 800ba14:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ba16:	e000      	b.n	800ba1a <ethernet_link_thread+0xd2>
    default:
      break;
 800ba18:	bf00      	nop
    }

    if(linkchanged)
 800ba1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d018      	beq.n	800ba52 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ba20:	f107 0308 	add.w	r3, r7, #8
 800ba24:	4619      	mov	r1, r3
 800ba26:	480e      	ldr	r0, [pc, #56]	@ (800ba60 <ethernet_link_thread+0x118>)
 800ba28:	f7f9 f816 	bl	8004a58 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ba2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba2e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ba30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba32:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ba34:	f107 0308 	add.w	r3, r7, #8
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4809      	ldr	r0, [pc, #36]	@ (800ba60 <ethernet_link_thread+0x118>)
 800ba3c:	f7f9 f9e0 	bl	8004e00 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ba40:	4807      	ldr	r0, [pc, #28]	@ (800ba60 <ethernet_link_thread+0x118>)
 800ba42:	f7f8 fb79 	bl	8004138 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ba46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba48:	f004 faaa 	bl	800ffa0 <netif_set_up>
      netif_set_link_up(netif);
 800ba4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba4e:	f004 fb45 	bl	80100dc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ba52:	2064      	movs	r0, #100	@ 0x64
 800ba54:	f000 f936 	bl	800bcc4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ba58:	e78b      	b.n	800b972 <ethernet_link_thread+0x2a>
 800ba5a:	bf00      	nop
 800ba5c:	24005da4 	.word	0x24005da4
 800ba60:	24005cbc 	.word	0x24005cbc

0800ba64 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ba6c:	4812      	ldr	r0, [pc, #72]	@ (800bab8 <HAL_ETH_RxAllocateCallback+0x54>)
 800ba6e:	f004 f80b 	bl	800fa88 <memp_malloc_pool>
 800ba72:	60f8      	str	r0, [r7, #12]
  if (p)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d014      	beq.n	800baa4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f103 0220 	add.w	r2, r3, #32
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	4a0d      	ldr	r2, [pc, #52]	@ (800babc <HAL_ETH_RxAllocateCallback+0x58>)
 800ba88:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ba92:	9201      	str	r2, [sp, #4]
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2241      	movs	r2, #65	@ 0x41
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	f004 fd79 	bl	8010594 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800baa2:	e005      	b.n	800bab0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800baa4:	4b06      	ldr	r3, [pc, #24]	@ (800bac0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	0801d254 	.word	0x0801d254
 800babc:	0800b6b1 	.word	0x0800b6b1
 800bac0:	24005cb0 	.word	0x24005cb0

0800bac4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b08d      	sub	sp, #52	@ 0x34
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
 800bad0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800bada:	2300      	movs	r3, #0
 800badc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3b20      	subs	r3, #32
 800bae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800bae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800baea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baec:	2200      	movs	r2, #0
 800baee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	887a      	ldrh	r2, [r7, #2]
 800baf4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800baf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d103      	bne.n	800bb06 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e003      	b.n	800bb0e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb0c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb12:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb1a:	e009      	b.n	800bb30 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb1e:	891a      	ldrh	r2, [r3, #8]
 800bb20:	887b      	ldrh	r3, [r7, #2]
 800bb22:	4413      	add	r3, r2
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb28:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1f2      	bne.n	800bb1c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bb36:	887b      	ldrh	r3, [r7, #2]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	623a      	str	r2, [r7, #32]
 800bb3c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dd1d      	ble.n	800bb80 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	f003 021f 	and.w	r2, r3, #31
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb54:	f3bf 8f4f 	dsb	sy
}
 800bb58:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800bb5a:	4a0d      	ldr	r2, [pc, #52]	@ (800bb90 <HAL_ETH_RxLinkCallback+0xcc>)
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	3320      	adds	r3, #32
 800bb66:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	3b20      	subs	r3, #32
 800bb6c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dcf2      	bgt.n	800bb5a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb74:	f3bf 8f4f 	dsb	sy
}
 800bb78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb7a:	f3bf 8f6f 	isb	sy
}
 800bb7e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800bb80:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bb82:	bf00      	nop
 800bb84:	3734      	adds	r7, #52	@ 0x34
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	e000ed00 	.word	0xe000ed00

0800bb94 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f004 feb3 	bl	8010908 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b085      	sub	sp, #20
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbbc:	2b84      	cmp	r3, #132	@ 0x84
 800bbbe:	d005      	beq.n	800bbcc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	3303      	adds	r3, #3
 800bbca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbe0:	f3ef 8305 	mrs	r3, IPSR
 800bbe4:	607b      	str	r3, [r7, #4]
  return(result);
 800bbe6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bf14      	ite	ne
 800bbec:	2301      	movne	r3, #1
 800bbee:	2300      	moveq	r3, #0
 800bbf0:	b2db      	uxtb	r3, r3
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc02:	f001 fc95 	bl	800d530 <vTaskStartScheduler>
  
  return osOK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc10:	f7ff ffe3 	bl	800bbda <inHandlerMode>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc1a:	f001 fdaf 	bl	800d77c <xTaskGetTickCountFromISR>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	e002      	b.n	800bc28 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc22:	f001 fd9b 	bl	800d75c <xTaskGetTickCount>
 800bc26:	4603      	mov	r3, r0
  }
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2e:	b089      	sub	sp, #36	@ 0x24
 800bc30:	af04      	add	r7, sp, #16
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d020      	beq.n	800bc80 <osThreadCreate+0x54>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d01c      	beq.n	800bc80 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685c      	ldr	r4, [r3, #4]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	691e      	ldr	r6, [r3, #16]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff ffa6 	bl	800bbaa <makeFreeRtosPriority>
 800bc5e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc68:	9202      	str	r2, [sp, #8]
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	9100      	str	r1, [sp, #0]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	4632      	mov	r2, r6
 800bc72:	4629      	mov	r1, r5
 800bc74:	4620      	mov	r0, r4
 800bc76:	f001 fa75 	bl	800d164 <xTaskCreateStatic>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	e01c      	b.n	800bcba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685c      	ldr	r4, [r3, #4]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc8c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7ff ff88 	bl	800bbaa <makeFreeRtosPriority>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	f107 030c 	add.w	r3, r7, #12
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	9200      	str	r2, [sp, #0]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	4632      	mov	r2, r6
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f001 faba 	bl	800d224 <xTaskCreate>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d001      	beq.n	800bcba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e000      	b.n	800bcbc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3714      	adds	r7, #20
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcc4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <osDelay+0x16>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	e000      	b.n	800bcdc <osDelay+0x18>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fbf1 	bl	800d4c4 <vTaskDelay>
  
  return osOK;
 800bce2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d007      	beq.n	800bd0c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	4619      	mov	r1, r3
 800bd02:	2001      	movs	r0, #1
 800bd04:	f000 fc47 	bl	800c596 <xQueueCreateMutexStatic>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	e003      	b.n	800bd14 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	f000 fc2a 	bl	800c566 <xQueueCreateMutex>
 800bd12:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd26:	2300      	movs	r3, #0
 800bd28:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <osMutexWait+0x18>
    return osErrorParameter;
 800bd30:	2380      	movs	r3, #128	@ 0x80
 800bd32:	e03a      	b.n	800bdaa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd3e:	d103      	bne.n	800bd48 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e009      	b.n	800bd5c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d006      	beq.n	800bd5c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <osMutexWait+0x40>
      ticks = 1;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd5c:	f7ff ff3d 	bl	800bbda <inHandlerMode>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d017      	beq.n	800bd96 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 f84e 	bl	800ce10 <xQueueReceiveFromISR>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d001      	beq.n	800bd7e <osMutexWait+0x62>
      return osErrorOS;
 800bd7a:	23ff      	movs	r3, #255	@ 0xff
 800bd7c:	e015      	b.n	800bdaa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d011      	beq.n	800bda8 <osMutexWait+0x8c>
 800bd84:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb4 <osMutexWait+0x98>)
 800bd86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	e008      	b.n	800bda8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bd96:	68f9      	ldr	r1, [r7, #12]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 ff29 	bl	800cbf0 <xQueueSemaphoreTake>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d001      	beq.n	800bda8 <osMutexWait+0x8c>
    return osErrorOS;
 800bda4:	23ff      	movs	r3, #255	@ 0xff
 800bda6:	e000      	b.n	800bdaa <osMutexWait+0x8e>
  }
  
  return osOK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed04 	.word	0xe000ed04

0800bdb8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bdc8:	f7ff ff07 	bl	800bbda <inHandlerMode>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d016      	beq.n	800be00 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bdd2:	f107 0308 	add.w	r3, r7, #8
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fd97 	bl	800c90c <xQueueGiveFromISR>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d001      	beq.n	800bde8 <osMutexRelease+0x30>
      return osErrorOS;
 800bde4:	23ff      	movs	r3, #255	@ 0xff
 800bde6:	e017      	b.n	800be18 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d013      	beq.n	800be16 <osMutexRelease+0x5e>
 800bdee:	4b0c      	ldr	r3, [pc, #48]	@ (800be20 <osMutexRelease+0x68>)
 800bdf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	e00a      	b.n	800be16 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800be00:	2300      	movs	r3, #0
 800be02:	2200      	movs	r2, #0
 800be04:	2100      	movs	r1, #0
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fbe0 	bl	800c5cc <xQueueGenericSend>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d001      	beq.n	800be16 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800be12:	23ff      	movs	r3, #255	@ 0xff
 800be14:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800be16:	68fb      	ldr	r3, [r7, #12]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af02      	add	r7, sp, #8
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00f      	beq.n	800be56 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d10a      	bne.n	800be52 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2203      	movs	r2, #3
 800be42:	9200      	str	r2, [sp, #0]
 800be44:	2200      	movs	r2, #0
 800be46:	2100      	movs	r1, #0
 800be48:	2001      	movs	r0, #1
 800be4a:	f000 fa9b 	bl	800c384 <xQueueGenericCreateStatic>
 800be4e:	4603      	mov	r3, r0
 800be50:	e016      	b.n	800be80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	e014      	b.n	800be80 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d110      	bne.n	800be7e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800be5c:	2203      	movs	r2, #3
 800be5e:	2100      	movs	r1, #0
 800be60:	2001      	movs	r0, #1
 800be62:	f000 fb0c 	bl	800c47e <xQueueGenericCreate>
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d005      	beq.n	800be7a <osSemaphoreCreate+0x56>
 800be6e:	2300      	movs	r3, #0
 800be70:	2200      	movs	r2, #0
 800be72:	2100      	movs	r1, #0
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 fba9 	bl	800c5cc <xQueueGenericSend>
      return sema;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	e000      	b.n	800be80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800be7e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800be92:	2300      	movs	r3, #0
 800be94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800be9c:	2380      	movs	r3, #128	@ 0x80
 800be9e:	e03a      	b.n	800bf16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800beaa:	d103      	bne.n	800beb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800beac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	e009      	b.n	800bec8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <osSemaphoreWait+0x40>
      ticks = 1;
 800bec4:	2301      	movs	r3, #1
 800bec6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bec8:	f7ff fe87 	bl	800bbda <inHandlerMode>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d017      	beq.n	800bf02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bed2:	f107 0308 	add.w	r3, r7, #8
 800bed6:	461a      	mov	r2, r3
 800bed8:	2100      	movs	r1, #0
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 ff98 	bl	800ce10 <xQueueReceiveFromISR>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d001      	beq.n	800beea <osSemaphoreWait+0x62>
      return osErrorOS;
 800bee6:	23ff      	movs	r3, #255	@ 0xff
 800bee8:	e015      	b.n	800bf16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d011      	beq.n	800bf14 <osSemaphoreWait+0x8c>
 800bef0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <osSemaphoreWait+0x98>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	e008      	b.n	800bf14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf02:	68f9      	ldr	r1, [r7, #12]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fe73 	bl	800cbf0 <xQueueSemaphoreTake>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d001      	beq.n	800bf14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf10:	23ff      	movs	r3, #255	@ 0xff
 800bf12:	e000      	b.n	800bf16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf30:	2300      	movs	r3, #0
 800bf32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf34:	f7ff fe51 	bl	800bbda <inHandlerMode>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d016      	beq.n	800bf6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf3e:	f107 0308 	add.w	r3, r7, #8
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fce1 	bl	800c90c <xQueueGiveFromISR>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d001      	beq.n	800bf54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf50:	23ff      	movs	r3, #255	@ 0xff
 800bf52:	e017      	b.n	800bf84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d013      	beq.n	800bf82 <osSemaphoreRelease+0x5e>
 800bf5a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf8c <osSemaphoreRelease+0x68>)
 800bf5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	e00a      	b.n	800bf82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2100      	movs	r1, #0
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fb2a 	bl	800c5cc <xQueueGenericSend>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d001      	beq.n	800bf82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bf7e:	23ff      	movs	r3, #255	@ 0xff
 800bf80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bf82:	68fb      	ldr	r3, [r7, #12]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	e000ed04 	.word	0xe000ed04

0800bf90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af02      	add	r7, sp, #8
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d011      	beq.n	800bfc6 <osMessageCreate+0x36>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00d      	beq.n	800bfc6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6859      	ldr	r1, [r3, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689a      	ldr	r2, [r3, #8]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	2400      	movs	r4, #0
 800bfbc:	9400      	str	r4, [sp, #0]
 800bfbe:	f000 f9e1 	bl	800c384 <xQueueGenericCreateStatic>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	e008      	b.n	800bfd8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	f000 fa54 	bl	800c47e <xQueueGenericCreate>
 800bfd6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd90      	pop	{r4, r7, pc}

0800bfe0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <osMessagePut+0x1e>
    ticks = 1;
 800bffa:	2301      	movs	r3, #1
 800bffc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bffe:	f7ff fdec 	bl	800bbda <inHandlerMode>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d018      	beq.n	800c03a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c008:	f107 0210 	add.w	r2, r7, #16
 800c00c:	f107 0108 	add.w	r1, r7, #8
 800c010:	2300      	movs	r3, #0
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f000 fbdc 	bl	800c7d0 <xQueueGenericSendFromISR>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d001      	beq.n	800c022 <osMessagePut+0x42>
      return osErrorOS;
 800c01e:	23ff      	movs	r3, #255	@ 0xff
 800c020:	e018      	b.n	800c054 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d014      	beq.n	800c052 <osMessagePut+0x72>
 800c028:	4b0c      	ldr	r3, [pc, #48]	@ (800c05c <osMessagePut+0x7c>)
 800c02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	e00b      	b.n	800c052 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c03a:	f107 0108 	add.w	r1, r7, #8
 800c03e:	2300      	movs	r3, #0
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f000 fac2 	bl	800c5cc <xQueueGenericSend>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d001      	beq.n	800c052 <osMessagePut+0x72>
      return osErrorOS;
 800c04e:	23ff      	movs	r3, #255	@ 0xff
 800c050:	e000      	b.n	800c054 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	e000ed04 	.word	0xe000ed04

0800c060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b08b      	sub	sp, #44	@ 0x2c
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10a      	bne.n	800c090 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c07a:	2380      	movs	r3, #128	@ 0x80
 800c07c:	617b      	str	r3, [r7, #20]
    return event;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	461c      	mov	r4, r3
 800c082:	f107 0314 	add.w	r3, r7, #20
 800c086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c08a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c08e:	e054      	b.n	800c13a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c09e:	d103      	bne.n	800c0a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a6:	e009      	b.n	800c0bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d006      	beq.n	800c0bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800c0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <osMessageGet+0x5c>
      ticks = 1;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c0bc:	f7ff fd8d 	bl	800bbda <inHandlerMode>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d01c      	beq.n	800c100 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c0c6:	f107 0220 	add.w	r2, r7, #32
 800c0ca:	f107 0314 	add.w	r3, r7, #20
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	68b8      	ldr	r0, [r7, #8]
 800c0d4:	f000 fe9c 	bl	800ce10 <xQueueReceiveFromISR>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d102      	bne.n	800c0e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c0de:	2310      	movs	r3, #16
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e001      	b.n	800c0e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d01d      	beq.n	800c12a <osMessageGet+0xca>
 800c0ee:	4b15      	ldr	r3, [pc, #84]	@ (800c144 <osMessageGet+0xe4>)
 800c0f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	e014      	b.n	800c12a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c100:	f107 0314 	add.w	r3, r7, #20
 800c104:	3304      	adds	r3, #4
 800c106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c108:	4619      	mov	r1, r3
 800c10a:	68b8      	ldr	r0, [r7, #8]
 800c10c:	f000 fc8e 	bl	800ca2c <xQueueReceive>
 800c110:	4603      	mov	r3, r0
 800c112:	2b01      	cmp	r3, #1
 800c114:	d102      	bne.n	800c11c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c116:	2310      	movs	r3, #16
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	e006      	b.n	800c12a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <osMessageGet+0xc6>
 800c122:	2300      	movs	r3, #0
 800c124:	e000      	b.n	800c128 <osMessageGet+0xc8>
 800c126:	2340      	movs	r3, #64	@ 0x40
 800c128:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	461c      	mov	r4, r3
 800c12e:	f107 0314 	add.w	r3, r7, #20
 800c132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	372c      	adds	r7, #44	@ 0x2c
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd90      	pop	{r4, r7, pc}
 800c142:	bf00      	nop
 800c144:	e000ed04 	.word	0xe000ed04

0800c148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f103 0208 	add.w	r2, r3, #8
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f103 0208 	add.w	r2, r3, #8
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f103 0208 	add.w	r2, r3, #8
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c200:	d103      	bne.n	800c20a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e00c      	b.n	800c224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3308      	adds	r3, #8
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	e002      	b.n	800c218 <vListInsert+0x2e>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	d2f6      	bcs.n	800c212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	601a      	str	r2, [r3, #0]
}
 800c250:	bf00      	nop
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	6892      	ldr	r2, [r2, #8]
 800c272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6852      	ldr	r2, [r2, #4]
 800c27c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d103      	bne.n	800c290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689a      	ldr	r2, [r3, #8]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	1e5a      	subs	r2, r3, #1
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10b      	bne.n	800c2dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c2dc:	f002 f9a4 	bl	800e628 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2e8:	68f9      	ldr	r1, [r7, #12]
 800c2ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c2ec:	fb01 f303 	mul.w	r3, r1, r3
 800c2f0:	441a      	add	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c30c:	3b01      	subs	r3, #1
 800c30e:	68f9      	ldr	r1, [r7, #12]
 800c310:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c312:	fb01 f303 	mul.w	r3, r1, r3
 800c316:	441a      	add	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	22ff      	movs	r2, #255	@ 0xff
 800c320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	22ff      	movs	r2, #255	@ 0xff
 800c328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d114      	bne.n	800c35c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d01a      	beq.n	800c370 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3310      	adds	r3, #16
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fb72 	bl	800da28 <xTaskRemoveFromEventList>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d012      	beq.n	800c370 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c34a:	4b0d      	ldr	r3, [pc, #52]	@ (800c380 <xQueueGenericReset+0xd0>)
 800c34c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	e009      	b.n	800c370 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3310      	adds	r3, #16
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fef1 	bl	800c148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3324      	adds	r3, #36	@ 0x24
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff feec 	bl	800c148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c370:	f002 f98c 	bl	800e68c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c374:	2301      	movs	r3, #1
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08e      	sub	sp, #56	@ 0x38
 800c388:	af02      	add	r7, sp, #8
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	e7fd      	b.n	800c3ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10b      	bne.n	800c3ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3c8:	bf00      	nop
 800c3ca:	bf00      	nop
 800c3cc:	e7fd      	b.n	800c3ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <xQueueGenericCreateStatic+0x56>
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <xQueueGenericCreateStatic+0x5a>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <xQueueGenericCreateStatic+0x5c>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10b      	bne.n	800c3fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	623b      	str	r3, [r7, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	e7fd      	b.n	800c3f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <xQueueGenericCreateStatic+0x84>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <xQueueGenericCreateStatic+0x88>
 800c408:	2301      	movs	r3, #1
 800c40a:	e000      	b.n	800c40e <xQueueGenericCreateStatic+0x8a>
 800c40c:	2300      	movs	r3, #0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10b      	bne.n	800c42a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	61fb      	str	r3, [r7, #28]
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop
 800c428:	e7fd      	b.n	800c426 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c42a:	2348      	movs	r3, #72	@ 0x48
 800c42c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b48      	cmp	r3, #72	@ 0x48
 800c432:	d00b      	beq.n	800c44c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	61bb      	str	r3, [r7, #24]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c44c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00d      	beq.n	800c474 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c460:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	4613      	mov	r3, r2
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	68b9      	ldr	r1, [r7, #8]
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 f840 	bl	800c4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c476:	4618      	mov	r0, r3
 800c478:	3730      	adds	r7, #48	@ 0x30
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b08a      	sub	sp, #40	@ 0x28
 800c482:	af02      	add	r7, sp, #8
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	60b9      	str	r1, [r7, #8]
 800c488:	4613      	mov	r3, r2
 800c48a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <xQueueGenericCreate+0x2c>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	613b      	str	r3, [r7, #16]
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	fb02 f303 	mul.w	r3, r2, r3
 800c4b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	3348      	adds	r3, #72	@ 0x48
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f002 f9d7 	bl	800e86c <pvPortMalloc>
 800c4be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d011      	beq.n	800c4ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	3348      	adds	r3, #72	@ 0x48
 800c4ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4d8:	79fa      	ldrb	r2, [r7, #7]
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 f805 	bl	800c4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3720      	adds	r7, #32
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	69ba      	ldr	r2, [r7, #24]
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	e002      	b.n	800c516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c522:	2101      	movs	r1, #1
 800c524:	69b8      	ldr	r0, [r7, #24]
 800c526:	f7ff fec3 	bl	800c2b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c52a:	bf00      	nop
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c532:	b580      	push	{r7, lr}
 800c534:	b082      	sub	sp, #8
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00e      	beq.n	800c55e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c552:	2300      	movs	r3, #0
 800c554:	2200      	movs	r2, #0
 800c556:	2100      	movs	r1, #0
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f837 	bl	800c5cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c55e:	bf00      	nop
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c566:	b580      	push	{r7, lr}
 800c568:	b086      	sub	sp, #24
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	4603      	mov	r3, r0
 800c56e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	2300      	movs	r3, #0
 800c576:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	461a      	mov	r2, r3
 800c57c:	6939      	ldr	r1, [r7, #16]
 800c57e:	6978      	ldr	r0, [r7, #20]
 800c580:	f7ff ff7d 	bl	800c47e <xQueueGenericCreate>
 800c584:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff ffd3 	bl	800c532 <prvInitialiseMutex>

		return xNewQueue;
 800c58c:	68fb      	ldr	r3, [r7, #12]
	}
 800c58e:	4618      	mov	r0, r3
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af02      	add	r7, sp, #8
 800c59c:	4603      	mov	r3, r0
 800c59e:	6039      	str	r1, [r7, #0]
 800c5a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	6939      	ldr	r1, [r7, #16]
 800c5b4:	6978      	ldr	r0, [r7, #20]
 800c5b6:	f7ff fee5 	bl	800c384 <xQueueGenericCreateStatic>
 800c5ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff ffb8 	bl	800c532 <prvInitialiseMutex>

		return xNewQueue;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
	}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08e      	sub	sp, #56	@ 0x38
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10b      	bne.n	800c600 <xQueueGenericSend+0x34>
	__asm volatile
 800c5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ec:	f383 8811 	msr	BASEPRI, r3
 800c5f0:	f3bf 8f6f 	isb	sy
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c5fa:	bf00      	nop
 800c5fc:	bf00      	nop
 800c5fe:	e7fd      	b.n	800c5fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d103      	bne.n	800c60e <xQueueGenericSend+0x42>
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <xQueueGenericSend+0x46>
 800c60e:	2301      	movs	r3, #1
 800c610:	e000      	b.n	800c614 <xQueueGenericSend+0x48>
 800c612:	2300      	movs	r3, #0
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10b      	bne.n	800c630 <xQueueGenericSend+0x64>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d103      	bne.n	800c63e <xQueueGenericSend+0x72>
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d101      	bne.n	800c642 <xQueueGenericSend+0x76>
 800c63e:	2301      	movs	r3, #1
 800c640:	e000      	b.n	800c644 <xQueueGenericSend+0x78>
 800c642:	2300      	movs	r3, #0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <xQueueGenericSend+0x94>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	623b      	str	r3, [r7, #32]
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	e7fd      	b.n	800c65c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c660:	f001 fba8 	bl	800ddb4 <xTaskGetSchedulerState>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <xQueueGenericSend+0xa4>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <xQueueGenericSend+0xa8>
 800c670:	2301      	movs	r3, #1
 800c672:	e000      	b.n	800c676 <xQueueGenericSend+0xaa>
 800c674:	2300      	movs	r3, #0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10b      	bne.n	800c692 <xQueueGenericSend+0xc6>
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	61fb      	str	r3, [r7, #28]
}
 800c68c:	bf00      	nop
 800c68e:	bf00      	nop
 800c690:	e7fd      	b.n	800c68e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c692:	f001 ffc9 	bl	800e628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d302      	bcc.n	800c6a8 <xQueueGenericSend+0xdc>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d129      	bne.n	800c6fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	68b9      	ldr	r1, [r7, #8]
 800c6ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6ae:	f000 fc49 	bl	800cf44 <prvCopyDataToQueue>
 800c6b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d010      	beq.n	800c6de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6be:	3324      	adds	r3, #36	@ 0x24
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f001 f9b1 	bl	800da28 <xTaskRemoveFromEventList>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d013      	beq.n	800c6f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c6cc:	4b3f      	ldr	r3, [pc, #252]	@ (800c7cc <xQueueGenericSend+0x200>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	e00a      	b.n	800c6f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c6e4:	4b39      	ldr	r3, [pc, #228]	@ (800c7cc <xQueueGenericSend+0x200>)
 800c6e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c6f4:	f001 ffca 	bl	800e68c <vPortExitCritical>
				return pdPASS;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e063      	b.n	800c7c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d103      	bne.n	800c70a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c702:	f001 ffc3 	bl	800e68c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c706:	2300      	movs	r3, #0
 800c708:	e05c      	b.n	800c7c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d106      	bne.n	800c71e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c710:	f107 0314 	add.w	r3, r7, #20
 800c714:	4618      	mov	r0, r3
 800c716:	f001 f9eb 	bl	800daf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c71a:	2301      	movs	r3, #1
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c71e:	f001 ffb5 	bl	800e68c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c722:	f000 ff6f 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c726:	f001 ff7f 	bl	800e628 <vPortEnterCritical>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c730:	b25b      	sxtb	r3, r3
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c736:	d103      	bne.n	800c740 <xQueueGenericSend+0x174>
 800c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c746:	b25b      	sxtb	r3, r3
 800c748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c74c:	d103      	bne.n	800c756 <xQueueGenericSend+0x18a>
 800c74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c750:	2200      	movs	r2, #0
 800c752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c756:	f001 ff99 	bl	800e68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c75a:	1d3a      	adds	r2, r7, #4
 800c75c:	f107 0314 	add.w	r3, r7, #20
 800c760:	4611      	mov	r1, r2
 800c762:	4618      	mov	r0, r3
 800c764:	f001 f9da 	bl	800db1c <xTaskCheckForTimeOut>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d124      	bne.n	800c7b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c76e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c770:	f000 fce0 	bl	800d134 <prvIsQueueFull>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d018      	beq.n	800c7ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77c:	3310      	adds	r3, #16
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f001 f92a 	bl	800d9dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c78a:	f000 fc6b 	bl	800d064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c78e:	f000 ff47 	bl	800d620 <xTaskResumeAll>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	f47f af7c 	bne.w	800c692 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c79a:	4b0c      	ldr	r3, [pc, #48]	@ (800c7cc <xQueueGenericSend+0x200>)
 800c79c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	f3bf 8f4f 	dsb	sy
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	e772      	b.n	800c692 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7ae:	f000 fc59 	bl	800d064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7b2:	f000 ff35 	bl	800d620 <xTaskResumeAll>
 800c7b6:	e76c      	b.n	800c692 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7ba:	f000 fc53 	bl	800d064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7be:	f000 ff2f 	bl	800d620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c7c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3738      	adds	r7, #56	@ 0x38
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	e000ed04 	.word	0xe000ed04

0800c7d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b090      	sub	sp, #64	@ 0x40
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10b      	bne.n	800c800 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7fa:	bf00      	nop
 800c7fc:	bf00      	nop
 800c7fe:	e7fd      	b.n	800c7fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <xQueueGenericSendFromISR+0x3e>
 800c806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <xQueueGenericSendFromISR+0x42>
 800c80e:	2301      	movs	r3, #1
 800c810:	e000      	b.n	800c814 <xQueueGenericSendFromISR+0x44>
 800c812:	2300      	movs	r3, #0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10b      	bne.n	800c830 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c82a:	bf00      	nop
 800c82c:	bf00      	nop
 800c82e:	e7fd      	b.n	800c82c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d103      	bne.n	800c83e <xQueueGenericSendFromISR+0x6e>
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d101      	bne.n	800c842 <xQueueGenericSendFromISR+0x72>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <xQueueGenericSendFromISR+0x74>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	623b      	str	r3, [r7, #32]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c860:	f001 ffc2 	bl	800e7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c864:	f3ef 8211 	mrs	r2, BASEPRI
 800c868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	61fa      	str	r2, [r7, #28]
 800c87a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c87c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c87e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c888:	429a      	cmp	r2, r3
 800c88a:	d302      	bcc.n	800c892 <xQueueGenericSendFromISR+0xc2>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d12f      	bne.n	800c8f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c898:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c8a8:	f000 fb4c 	bl	800cf44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8b4:	d112      	bne.n	800c8dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d016      	beq.n	800c8ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	3324      	adds	r3, #36	@ 0x24
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f001 f8b0 	bl	800da28 <xTaskRemoveFromEventList>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00e      	beq.n	800c8ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	e007      	b.n	800c8ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	b25a      	sxtb	r2, r3
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c8f0:	e001      	b.n	800c8f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c900:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c904:	4618      	mov	r0, r3
 800c906:	3740      	adds	r7, #64	@ 0x40
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08e      	sub	sp, #56	@ 0x38
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10b      	bne.n	800c938 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	623b      	str	r3, [r7, #32]
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	e7fd      	b.n	800c934 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	61fb      	str	r3, [r7, #28]
}
 800c952:	bf00      	nop
 800c954:	bf00      	nop
 800c956:	e7fd      	b.n	800c954 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <xQueueGiveFromISR+0x5c>
 800c960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <xQueueGiveFromISR+0x60>
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <xQueueGiveFromISR+0x62>
 800c96c:	2300      	movs	r3, #0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10b      	bne.n	800c98a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	61bb      	str	r3, [r7, #24]
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop
 800c988:	e7fd      	b.n	800c986 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c98a:	f001 ff2d 	bl	800e7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c98e:	f3ef 8211 	mrs	r2, BASEPRI
 800c992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	617a      	str	r2, [r7, #20]
 800c9a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c9a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d22b      	bcs.n	800ca12 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9d4:	d112      	bne.n	800c9fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d016      	beq.n	800ca0c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e0:	3324      	adds	r3, #36	@ 0x24
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f001 f820 	bl	800da28 <xTaskRemoveFromEventList>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00e      	beq.n	800ca0c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00b      	beq.n	800ca0c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	e007      	b.n	800ca0c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca00:	3301      	adds	r3, #1
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	b25a      	sxtb	r2, r3
 800ca06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca10:	e001      	b.n	800ca16 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca12:	2300      	movs	r3, #0
 800ca14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f383 8811 	msr	BASEPRI, r3
}
 800ca20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3738      	adds	r7, #56	@ 0x38
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08c      	sub	sp, #48	@ 0x30
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10b      	bne.n	800ca5e <xQueueReceive+0x32>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	623b      	str	r3, [r7, #32]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d103      	bne.n	800ca6c <xQueueReceive+0x40>
 800ca64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <xQueueReceive+0x44>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e000      	b.n	800ca72 <xQueueReceive+0x46>
 800ca70:	2300      	movs	r3, #0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10b      	bne.n	800ca8e <xQueueReceive+0x62>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	61fb      	str	r3, [r7, #28]
}
 800ca88:	bf00      	nop
 800ca8a:	bf00      	nop
 800ca8c:	e7fd      	b.n	800ca8a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca8e:	f001 f991 	bl	800ddb4 <xTaskGetSchedulerState>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <xQueueReceive+0x72>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <xQueueReceive+0x76>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <xQueueReceive+0x78>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10b      	bne.n	800cac0 <xQueueReceive+0x94>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	61bb      	str	r3, [r7, #24]
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	e7fd      	b.n	800cabc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cac0:	f001 fdb2 	bl	800e628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d01f      	beq.n	800cb10 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad4:	f000 faa0 	bl	800d018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cada:	1e5a      	subs	r2, r3, #1
 800cadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cade:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00f      	beq.n	800cb08 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caea:	3310      	adds	r3, #16
 800caec:	4618      	mov	r0, r3
 800caee:	f000 ff9b 	bl	800da28 <xTaskRemoveFromEventList>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800caf8:	4b3c      	ldr	r3, [pc, #240]	@ (800cbec <xQueueReceive+0x1c0>)
 800cafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb08:	f001 fdc0 	bl	800e68c <vPortExitCritical>
				return pdPASS;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e069      	b.n	800cbe4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d103      	bne.n	800cb1e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb16:	f001 fdb9 	bl	800e68c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e062      	b.n	800cbe4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb24:	f107 0310 	add.w	r3, r7, #16
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 ffe1 	bl	800daf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb32:	f001 fdab 	bl	800e68c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb36:	f000 fd65 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb3a:	f001 fd75 	bl	800e628 <vPortEnterCritical>
 800cb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb44:	b25b      	sxtb	r3, r3
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb4a:	d103      	bne.n	800cb54 <xQueueReceive+0x128>
 800cb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb5a:	b25b      	sxtb	r3, r3
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb60:	d103      	bne.n	800cb6a <xQueueReceive+0x13e>
 800cb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb6a:	f001 fd8f 	bl	800e68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb6e:	1d3a      	adds	r2, r7, #4
 800cb70:	f107 0310 	add.w	r3, r7, #16
 800cb74:	4611      	mov	r1, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 ffd0 	bl	800db1c <xTaskCheckForTimeOut>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d123      	bne.n	800cbca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb84:	f000 fac0 	bl	800d108 <prvIsQueueEmpty>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d017      	beq.n	800cbbe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb90:	3324      	adds	r3, #36	@ 0x24
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 ff20 	bl	800d9dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb9e:	f000 fa61 	bl	800d064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cba2:	f000 fd3d 	bl	800d620 <xTaskResumeAll>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d189      	bne.n	800cac0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cbac:	4b0f      	ldr	r3, [pc, #60]	@ (800cbec <xQueueReceive+0x1c0>)
 800cbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	e780      	b.n	800cac0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbc0:	f000 fa50 	bl	800d064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbc4:	f000 fd2c 	bl	800d620 <xTaskResumeAll>
 800cbc8:	e77a      	b.n	800cac0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbcc:	f000 fa4a 	bl	800d064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbd0:	f000 fd26 	bl	800d620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbd6:	f000 fa97 	bl	800d108 <prvIsQueueEmpty>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f43f af6f 	beq.w	800cac0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3730      	adds	r7, #48	@ 0x30
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	e000ed04 	.word	0xe000ed04

0800cbf0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08e      	sub	sp, #56	@ 0x38
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cc02:	2300      	movs	r3, #0
 800cc04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10b      	bne.n	800cc24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	623b      	str	r3, [r7, #32]
}
 800cc1e:	bf00      	nop
 800cc20:	bf00      	nop
 800cc22:	e7fd      	b.n	800cc20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00b      	beq.n	800cc44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	61fb      	str	r3, [r7, #28]
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	e7fd      	b.n	800cc40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc44:	f001 f8b6 	bl	800ddb4 <xTaskGetSchedulerState>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <xQueueSemaphoreTake+0x64>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <xQueueSemaphoreTake+0x68>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <xQueueSemaphoreTake+0x6a>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10b      	bne.n	800cc76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	61bb      	str	r3, [r7, #24]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc76:	f001 fcd7 	bl	800e628 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d024      	beq.n	800ccd0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc88:	1e5a      	subs	r2, r3, #1
 800cc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d104      	bne.n	800cca0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cc96:	f001 fa39 	bl	800e10c <pvTaskIncrementMutexHeldCount>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00f      	beq.n	800ccc8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccaa:	3310      	adds	r3, #16
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 febb 	bl	800da28 <xTaskRemoveFromEventList>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d007      	beq.n	800ccc8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccb8:	4b54      	ldr	r3, [pc, #336]	@ (800ce0c <xQueueSemaphoreTake+0x21c>)
 800ccba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccc8:	f001 fce0 	bl	800e68c <vPortExitCritical>
				return pdPASS;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e098      	b.n	800ce02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d112      	bne.n	800ccfc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00b      	beq.n	800ccf4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	617b      	str	r3, [r7, #20]
}
 800ccee:	bf00      	nop
 800ccf0:	bf00      	nop
 800ccf2:	e7fd      	b.n	800ccf0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ccf4:	f001 fcca 	bl	800e68c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e082      	b.n	800ce02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd02:	f107 030c 	add.w	r3, r7, #12
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 fef2 	bl	800daf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd10:	f001 fcbc 	bl	800e68c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd14:	f000 fc76 	bl	800d604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd18:	f001 fc86 	bl	800e628 <vPortEnterCritical>
 800cd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd22:	b25b      	sxtb	r3, r3
 800cd24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd28:	d103      	bne.n	800cd32 <xQueueSemaphoreTake+0x142>
 800cd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd38:	b25b      	sxtb	r3, r3
 800cd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd3e:	d103      	bne.n	800cd48 <xQueueSemaphoreTake+0x158>
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd48:	f001 fca0 	bl	800e68c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd4c:	463a      	mov	r2, r7
 800cd4e:	f107 030c 	add.w	r3, r7, #12
 800cd52:	4611      	mov	r1, r2
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fee1 	bl	800db1c <xTaskCheckForTimeOut>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d132      	bne.n	800cdc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd62:	f000 f9d1 	bl	800d108 <prvIsQueueEmpty>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d026      	beq.n	800cdba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d109      	bne.n	800cd88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cd74:	f001 fc58 	bl	800e628 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f001 f837 	bl	800ddf0 <xTaskPriorityInherit>
 800cd82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cd84:	f001 fc82 	bl	800e68c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	3324      	adds	r3, #36	@ 0x24
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f000 fe23 	bl	800d9dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd98:	f000 f964 	bl	800d064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd9c:	f000 fc40 	bl	800d620 <xTaskResumeAll>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f47f af67 	bne.w	800cc76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cda8:	4b18      	ldr	r3, [pc, #96]	@ (800ce0c <xQueueSemaphoreTake+0x21c>)
 800cdaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdae:	601a      	str	r2, [r3, #0]
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	e75d      	b.n	800cc76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cdba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdbc:	f000 f952 	bl	800d064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdc0:	f000 fc2e 	bl	800d620 <xTaskResumeAll>
 800cdc4:	e757      	b.n	800cc76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cdc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdc8:	f000 f94c 	bl	800d064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdcc:	f000 fc28 	bl	800d620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdd2:	f000 f999 	bl	800d108 <prvIsQueueEmpty>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f43f af4c 	beq.w	800cc76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00d      	beq.n	800ce00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cde4:	f001 fc20 	bl	800e628 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cde8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdea:	f000 f893 	bl	800cf14 <prvGetDisinheritPriorityAfterTimeout>
 800cdee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f001 f8f8 	bl	800dfec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cdfc:	f001 fc46 	bl	800e68c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3738      	adds	r7, #56	@ 0x38
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08e      	sub	sp, #56	@ 0x38
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10b      	bne.n	800ce3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	623b      	str	r3, [r7, #32]
}
 800ce38:	bf00      	nop
 800ce3a:	bf00      	nop
 800ce3c:	e7fd      	b.n	800ce3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d103      	bne.n	800ce4c <xQueueReceiveFromISR+0x3c>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <xQueueReceiveFromISR+0x40>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	e000      	b.n	800ce52 <xQueueReceiveFromISR+0x42>
 800ce50:	2300      	movs	r3, #0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10b      	bne.n	800ce6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	61fb      	str	r3, [r7, #28]
}
 800ce68:	bf00      	nop
 800ce6a:	bf00      	nop
 800ce6c:	e7fd      	b.n	800ce6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce6e:	f001 fcbb 	bl	800e7e8 <vPortValidateInterruptPriority>
	__asm volatile
 800ce72:	f3ef 8211 	mrs	r2, BASEPRI
 800ce76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	61ba      	str	r2, [r7, #24]
 800ce88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ce8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d02f      	beq.n	800cefa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cea4:	68b9      	ldr	r1, [r7, #8]
 800cea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cea8:	f000 f8b6 	bl	800d018 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceae:	1e5a      	subs	r2, r3, #1
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ceb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ceb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cebc:	d112      	bne.n	800cee4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	691b      	ldr	r3, [r3, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d016      	beq.n	800cef4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec8:	3310      	adds	r3, #16
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fdac 	bl	800da28 <xTaskRemoveFromEventList>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00e      	beq.n	800cef4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00b      	beq.n	800cef4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	e007      	b.n	800cef4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cee8:	3301      	adds	r3, #1
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	b25a      	sxtb	r2, r3
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cef4:	2301      	movs	r3, #1
 800cef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef8:	e001      	b.n	800cefe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	637b      	str	r3, [r7, #52]	@ 0x34
 800cefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf00:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	f383 8811 	msr	BASEPRI, r3
}
 800cf08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3738      	adds	r7, #56	@ 0x38
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f1c3 0307 	rsb	r3, r3, #7
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	e001      	b.n	800cf36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf36:	68fb      	ldr	r3, [r7, #12]
	}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3714      	adds	r7, #20
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10d      	bne.n	800cf7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d14d      	bne.n	800d006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 ffb4 	bl	800dedc <xTaskPriorityDisinherit>
 800cf74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	e043      	b.n	800d006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d119      	bne.n	800cfb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6858      	ldr	r0, [r3, #4]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	68b9      	ldr	r1, [r7, #8]
 800cf90:	f00c fccf 	bl	8019932 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf9c:	441a      	add	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d32b      	bcc.n	800d006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	605a      	str	r2, [r3, #4]
 800cfb6:	e026      	b.n	800d006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	68d8      	ldr	r0, [r3, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	68b9      	ldr	r1, [r7, #8]
 800cfc4:	f00c fcb5 	bl	8019932 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68da      	ldr	r2, [r3, #12]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfd0:	425b      	negs	r3, r3
 800cfd2:	441a      	add	r2, r3
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	68da      	ldr	r2, [r3, #12]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d207      	bcs.n	800cff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	689a      	ldr	r2, [r3, #8]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfec:	425b      	negs	r3, r3
 800cfee:	441a      	add	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d105      	bne.n	800d006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	3b01      	subs	r3, #1
 800d004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d00e:	697b      	ldr	r3, [r7, #20]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3718      	adds	r7, #24
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d026:	2b00      	cmp	r3, #0
 800d028:	d018      	beq.n	800d05c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d032:	441a      	add	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	68da      	ldr	r2, [r3, #12]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	429a      	cmp	r2, r3
 800d042:	d303      	bcc.n	800d04c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68d9      	ldr	r1, [r3, #12]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d054:	461a      	mov	r2, r3
 800d056:	6838      	ldr	r0, [r7, #0]
 800d058:	f00c fc6b 	bl	8019932 <memcpy>
	}
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d06c:	f001 fadc 	bl	800e628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d078:	e011      	b.n	800d09e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d012      	beq.n	800d0a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	3324      	adds	r3, #36	@ 0x24
 800d086:	4618      	mov	r0, r3
 800d088:	f000 fcce 	bl	800da28 <xTaskRemoveFromEventList>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d092:	f000 fda7 	bl	800dbe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
 800d098:	3b01      	subs	r3, #1
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	dce9      	bgt.n	800d07a <prvUnlockQueue+0x16>
 800d0a6:	e000      	b.n	800d0aa <prvUnlockQueue+0x46>
					break;
 800d0a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	22ff      	movs	r2, #255	@ 0xff
 800d0ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d0b2:	f001 faeb 	bl	800e68c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d0b6:	f001 fab7 	bl	800e628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0c2:	e011      	b.n	800d0e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d012      	beq.n	800d0f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	3310      	adds	r3, #16
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fca9 	bl	800da28 <xTaskRemoveFromEventList>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d0dc:	f000 fd82 	bl	800dbe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dce9      	bgt.n	800d0c4 <prvUnlockQueue+0x60>
 800d0f0:	e000      	b.n	800d0f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d0f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	22ff      	movs	r2, #255	@ 0xff
 800d0f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d0fc:	f001 fac6 	bl	800e68c <vPortExitCritical>
}
 800d100:	bf00      	nop
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d110:	f001 fa8a 	bl	800e628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d11c:	2301      	movs	r3, #1
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e001      	b.n	800d126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d126:	f001 fab1 	bl	800e68c <vPortExitCritical>

	return xReturn;
 800d12a:	68fb      	ldr	r3, [r7, #12]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d13c:	f001 fa74 	bl	800e628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d148:	429a      	cmp	r2, r3
 800d14a:	d102      	bne.n	800d152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d14c:	2301      	movs	r3, #1
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e001      	b.n	800d156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d156:	f001 fa99 	bl	800e68c <vPortExitCritical>

	return xReturn;
 800d15a:	68fb      	ldr	r3, [r7, #12]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08e      	sub	sp, #56	@ 0x38
 800d168:	af04      	add	r7, sp, #16
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10b      	bne.n	800d190 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	623b      	str	r3, [r7, #32]
}
 800d18a:	bf00      	nop
 800d18c:	bf00      	nop
 800d18e:	e7fd      	b.n	800d18c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10b      	bne.n	800d1ae <xTaskCreateStatic+0x4a>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	61fb      	str	r3, [r7, #28]
}
 800d1a8:	bf00      	nop
 800d1aa:	bf00      	nop
 800d1ac:	e7fd      	b.n	800d1aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1ae:	23a0      	movs	r3, #160	@ 0xa0
 800d1b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2ba0      	cmp	r3, #160	@ 0xa0
 800d1b6:	d00b      	beq.n	800d1d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	61bb      	str	r3, [r7, #24]
}
 800d1ca:	bf00      	nop
 800d1cc:	bf00      	nop
 800d1ce:	e7fd      	b.n	800d1cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d01e      	beq.n	800d216 <xTaskCreateStatic+0xb2>
 800d1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d01b      	beq.n	800d216 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	9302      	str	r3, [sp, #8]
 800d1f8:	f107 0314 	add.w	r3, r7, #20
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 f851 	bl	800d2b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d20e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d210:	f000 f8ee 	bl	800d3f0 <prvAddNewTaskToReadyList>
 800d214:	e001      	b.n	800d21a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d21a:	697b      	ldr	r3, [r7, #20]
	}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3728      	adds	r7, #40	@ 0x28
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08c      	sub	sp, #48	@ 0x30
 800d228:	af04      	add	r7, sp, #16
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	603b      	str	r3, [r7, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d234:	88fb      	ldrh	r3, [r7, #6]
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4618      	mov	r0, r3
 800d23a:	f001 fb17 	bl	800e86c <pvPortMalloc>
 800d23e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00e      	beq.n	800d264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d246:	20a0      	movs	r0, #160	@ 0xa0
 800d248:	f001 fb10 	bl	800e86c <pvPortMalloc>
 800d24c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d003      	beq.n	800d25c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	631a      	str	r2, [r3, #48]	@ 0x30
 800d25a:	e005      	b.n	800d268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d25c:	6978      	ldr	r0, [r7, #20]
 800d25e:	f001 fbd3 	bl	800ea08 <vPortFree>
 800d262:	e001      	b.n	800d268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d017      	beq.n	800d29e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d276:	88fa      	ldrh	r2, [r7, #6]
 800d278:	2300      	movs	r3, #0
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	9302      	str	r3, [sp, #8]
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	68b9      	ldr	r1, [r7, #8]
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f000 f80f 	bl	800d2b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d292:	69f8      	ldr	r0, [r7, #28]
 800d294:	f000 f8ac 	bl	800d3f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d298:	2301      	movs	r3, #1
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	e002      	b.n	800d2a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d29e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2a4:	69bb      	ldr	r3, [r7, #24]
	}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b088      	sub	sp, #32
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2c8:	440b      	add	r3, r1
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	f023 0307 	bic.w	r3, r3, #7
 800d2d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00b      	beq.n	800d2fa <prvInitialiseNewTask+0x4a>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	617b      	str	r3, [r7, #20]
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop
 800d2f8:	e7fd      	b.n	800d2f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d01f      	beq.n	800d340 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d300:	2300      	movs	r3, #0
 800d302:	61fb      	str	r3, [r7, #28]
 800d304:	e012      	b.n	800d32c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	4413      	add	r3, r2
 800d30c:	7819      	ldrb	r1, [r3, #0]
 800d30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	4413      	add	r3, r2
 800d314:	3334      	adds	r3, #52	@ 0x34
 800d316:	460a      	mov	r2, r1
 800d318:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	4413      	add	r3, r2
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d006      	beq.n	800d334 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	3301      	adds	r3, #1
 800d32a:	61fb      	str	r3, [r7, #28]
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	2b0f      	cmp	r3, #15
 800d330:	d9e9      	bls.n	800d306 <prvInitialiseNewTask+0x56>
 800d332:	e000      	b.n	800d336 <prvInitialiseNewTask+0x86>
			{
				break;
 800d334:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d33e:	e003      	b.n	800d348 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	2200      	movs	r2, #0
 800d344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34a:	2b06      	cmp	r3, #6
 800d34c:	d901      	bls.n	800d352 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d34e:	2306      	movs	r3, #6
 800d350:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d356:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d35c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	2200      	movs	r2, #0
 800d362:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	3304      	adds	r3, #4
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe ff0d 	bl	800c188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	3318      	adds	r3, #24
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe ff08 	bl	800c188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d37a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d37c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d380:	f1c3 0207 	rsb	r2, r3, #7
 800d384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d386:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d38c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d390:	2200      	movs	r2, #0
 800d392:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	2200      	movs	r2, #0
 800d39a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	334c      	adds	r3, #76	@ 0x4c
 800d3a2:	224c      	movs	r2, #76	@ 0x4c
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f00c fa3e 	bl	8019828 <memset>
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ae:	4a0d      	ldr	r2, [pc, #52]	@ (800d3e4 <prvInitialiseNewTask+0x134>)
 800d3b0:	651a      	str	r2, [r3, #80]	@ 0x50
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	4a0c      	ldr	r2, [pc, #48]	@ (800d3e8 <prvInitialiseNewTask+0x138>)
 800d3b6:	655a      	str	r2, [r3, #84]	@ 0x54
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d3ec <prvInitialiseNewTask+0x13c>)
 800d3bc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	68f9      	ldr	r1, [r7, #12]
 800d3c2:	69b8      	ldr	r0, [r7, #24]
 800d3c4:	f000 fffe 	bl	800e3c4 <pxPortInitialiseStack>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3da:	bf00      	nop
 800d3dc:	3720      	adds	r7, #32
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	24010748 	.word	0x24010748
 800d3e8:	240107b0 	.word	0x240107b0
 800d3ec:	24010818 	.word	0x24010818

0800d3f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3f8:	f001 f916 	bl	800e628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3fc:	4b2a      	ldr	r3, [pc, #168]	@ (800d4a8 <prvAddNewTaskToReadyList+0xb8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	3301      	adds	r3, #1
 800d402:	4a29      	ldr	r2, [pc, #164]	@ (800d4a8 <prvAddNewTaskToReadyList+0xb8>)
 800d404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d406:	4b29      	ldr	r3, [pc, #164]	@ (800d4ac <prvAddNewTaskToReadyList+0xbc>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d109      	bne.n	800d422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d40e:	4a27      	ldr	r2, [pc, #156]	@ (800d4ac <prvAddNewTaskToReadyList+0xbc>)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d414:	4b24      	ldr	r3, [pc, #144]	@ (800d4a8 <prvAddNewTaskToReadyList+0xb8>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d110      	bne.n	800d43e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d41c:	f000 fc06 	bl	800dc2c <prvInitialiseTaskLists>
 800d420:	e00d      	b.n	800d43e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d422:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <prvAddNewTaskToReadyList+0xc0>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d109      	bne.n	800d43e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d42a:	4b20      	ldr	r3, [pc, #128]	@ (800d4ac <prvAddNewTaskToReadyList+0xbc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d434:	429a      	cmp	r2, r3
 800d436:	d802      	bhi.n	800d43e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d438:	4a1c      	ldr	r2, [pc, #112]	@ (800d4ac <prvAddNewTaskToReadyList+0xbc>)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d43e:	4b1d      	ldr	r3, [pc, #116]	@ (800d4b4 <prvAddNewTaskToReadyList+0xc4>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	3301      	adds	r3, #1
 800d444:	4a1b      	ldr	r2, [pc, #108]	@ (800d4b4 <prvAddNewTaskToReadyList+0xc4>)
 800d446:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d44c:	2201      	movs	r2, #1
 800d44e:	409a      	lsls	r2, r3
 800d450:	4b19      	ldr	r3, [pc, #100]	@ (800d4b8 <prvAddNewTaskToReadyList+0xc8>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4313      	orrs	r3, r2
 800d456:	4a18      	ldr	r2, [pc, #96]	@ (800d4b8 <prvAddNewTaskToReadyList+0xc8>)
 800d458:	6013      	str	r3, [r2, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d45e:	4613      	mov	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	4413      	add	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4a15      	ldr	r2, [pc, #84]	@ (800d4bc <prvAddNewTaskToReadyList+0xcc>)
 800d468:	441a      	add	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3304      	adds	r3, #4
 800d46e:	4619      	mov	r1, r3
 800d470:	4610      	mov	r0, r2
 800d472:	f7fe fe96 	bl	800c1a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d476:	f001 f909 	bl	800e68c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d47a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4b0 <prvAddNewTaskToReadyList+0xc0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00e      	beq.n	800d4a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d482:	4b0a      	ldr	r3, [pc, #40]	@ (800d4ac <prvAddNewTaskToReadyList+0xbc>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d207      	bcs.n	800d4a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d490:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c0 <prvAddNewTaskToReadyList+0xd0>)
 800d492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	24005ec4 	.word	0x24005ec4
 800d4ac:	24005dc4 	.word	0x24005dc4
 800d4b0:	24005ed0 	.word	0x24005ed0
 800d4b4:	24005ee0 	.word	0x24005ee0
 800d4b8:	24005ecc 	.word	0x24005ecc
 800d4bc:	24005dc8 	.word	0x24005dc8
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d018      	beq.n	800d508 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4d6:	4b14      	ldr	r3, [pc, #80]	@ (800d528 <vTaskDelay+0x64>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <vTaskDelay+0x32>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	60bb      	str	r3, [r7, #8]
}
 800d4f0:	bf00      	nop
 800d4f2:	bf00      	nop
 800d4f4:	e7fd      	b.n	800d4f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4f6:	f000 f885 	bl	800d604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fefb 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d502:	f000 f88d 	bl	800d620 <xTaskResumeAll>
 800d506:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d107      	bne.n	800d51e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d50e:	4b07      	ldr	r3, [pc, #28]	@ (800d52c <vTaskDelay+0x68>)
 800d510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	24005eec 	.word	0x24005eec
 800d52c:	e000ed04 	.word	0xe000ed04

0800d530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08a      	sub	sp, #40	@ 0x28
 800d534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d53e:	463a      	mov	r2, r7
 800d540:	1d39      	adds	r1, r7, #4
 800d542:	f107 0308 	add.w	r3, r7, #8
 800d546:	4618      	mov	r0, r3
 800d548:	f7f2 ff32 	bl	80003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68ba      	ldr	r2, [r7, #8]
 800d552:	9202      	str	r2, [sp, #8]
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	2300      	movs	r3, #0
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	2300      	movs	r3, #0
 800d55c:	460a      	mov	r2, r1
 800d55e:	4921      	ldr	r1, [pc, #132]	@ (800d5e4 <vTaskStartScheduler+0xb4>)
 800d560:	4821      	ldr	r0, [pc, #132]	@ (800d5e8 <vTaskStartScheduler+0xb8>)
 800d562:	f7ff fdff 	bl	800d164 <xTaskCreateStatic>
 800d566:	4603      	mov	r3, r0
 800d568:	4a20      	ldr	r2, [pc, #128]	@ (800d5ec <vTaskStartScheduler+0xbc>)
 800d56a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d56c:	4b1f      	ldr	r3, [pc, #124]	@ (800d5ec <vTaskStartScheduler+0xbc>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d574:	2301      	movs	r3, #1
 800d576:	617b      	str	r3, [r7, #20]
 800d578:	e001      	b.n	800d57e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d11b      	bne.n	800d5bc <vTaskStartScheduler+0x8c>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	613b      	str	r3, [r7, #16]
}
 800d596:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d598:	4b15      	ldr	r3, [pc, #84]	@ (800d5f0 <vTaskStartScheduler+0xc0>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	334c      	adds	r3, #76	@ 0x4c
 800d59e:	4a15      	ldr	r2, [pc, #84]	@ (800d5f4 <vTaskStartScheduler+0xc4>)
 800d5a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5a2:	4b15      	ldr	r3, [pc, #84]	@ (800d5f8 <vTaskStartScheduler+0xc8>)
 800d5a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5aa:	4b14      	ldr	r3, [pc, #80]	@ (800d5fc <vTaskStartScheduler+0xcc>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5b0:	4b13      	ldr	r3, [pc, #76]	@ (800d600 <vTaskStartScheduler+0xd0>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5b6:	f000 ff93 	bl	800e4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5ba:	e00f      	b.n	800d5dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5c2:	d10b      	bne.n	800d5dc <vTaskStartScheduler+0xac>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	60fb      	str	r3, [r7, #12]
}
 800d5d6:	bf00      	nop
 800d5d8:	bf00      	nop
 800d5da:	e7fd      	b.n	800d5d8 <vTaskStartScheduler+0xa8>
}
 800d5dc:	bf00      	nop
 800d5de:	3718      	adds	r7, #24
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	0801a7ac 	.word	0x0801a7ac
 800d5e8:	0800dbfd 	.word	0x0800dbfd
 800d5ec:	24005ee8 	.word	0x24005ee8
 800d5f0:	24005dc4 	.word	0x24005dc4
 800d5f4:	24004a10 	.word	0x24004a10
 800d5f8:	24005ee4 	.word	0x24005ee4
 800d5fc:	24005ed0 	.word	0x24005ed0
 800d600:	24005ec8 	.word	0x24005ec8

0800d604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d608:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <vTaskSuspendAll+0x18>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	4a03      	ldr	r2, [pc, #12]	@ (800d61c <vTaskSuspendAll+0x18>)
 800d610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d612:	bf00      	nop
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	24005eec 	.word	0x24005eec

0800d620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d626:	2300      	movs	r3, #0
 800d628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d62e:	4b42      	ldr	r3, [pc, #264]	@ (800d738 <xTaskResumeAll+0x118>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10b      	bne.n	800d64e <xTaskResumeAll+0x2e>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	603b      	str	r3, [r7, #0]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d64e:	f000 ffeb 	bl	800e628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d652:	4b39      	ldr	r3, [pc, #228]	@ (800d738 <xTaskResumeAll+0x118>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	3b01      	subs	r3, #1
 800d658:	4a37      	ldr	r2, [pc, #220]	@ (800d738 <xTaskResumeAll+0x118>)
 800d65a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d65c:	4b36      	ldr	r3, [pc, #216]	@ (800d738 <xTaskResumeAll+0x118>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d161      	bne.n	800d728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d664:	4b35      	ldr	r3, [pc, #212]	@ (800d73c <xTaskResumeAll+0x11c>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d05d      	beq.n	800d728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d66c:	e02e      	b.n	800d6cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d66e:	4b34      	ldr	r3, [pc, #208]	@ (800d740 <xTaskResumeAll+0x120>)
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3318      	adds	r3, #24
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fdee 	bl	800c25c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	3304      	adds	r3, #4
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe fde9 	bl	800c25c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d68e:	2201      	movs	r2, #1
 800d690:	409a      	lsls	r2, r3
 800d692:	4b2c      	ldr	r3, [pc, #176]	@ (800d744 <xTaskResumeAll+0x124>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4313      	orrs	r3, r2
 800d698:	4a2a      	ldr	r2, [pc, #168]	@ (800d744 <xTaskResumeAll+0x124>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4a27      	ldr	r2, [pc, #156]	@ (800d748 <xTaskResumeAll+0x128>)
 800d6aa:	441a      	add	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f7fe fd75 	bl	800c1a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6bc:	4b23      	ldr	r3, [pc, #140]	@ (800d74c <xTaskResumeAll+0x12c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d302      	bcc.n	800d6cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d6c6:	4b22      	ldr	r3, [pc, #136]	@ (800d750 <xTaskResumeAll+0x130>)
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6cc:	4b1c      	ldr	r3, [pc, #112]	@ (800d740 <xTaskResumeAll+0x120>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1cc      	bne.n	800d66e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6da:	f000 fb4b 	bl	800dd74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6de:	4b1d      	ldr	r3, [pc, #116]	@ (800d754 <xTaskResumeAll+0x134>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d010      	beq.n	800d70c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6ea:	f000 f859 	bl	800d7a0 <xTaskIncrementTick>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d6f4:	4b16      	ldr	r3, [pc, #88]	@ (800d750 <xTaskResumeAll+0x130>)
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f1      	bne.n	800d6ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d706:	4b13      	ldr	r3, [pc, #76]	@ (800d754 <xTaskResumeAll+0x134>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d70c:	4b10      	ldr	r3, [pc, #64]	@ (800d750 <xTaskResumeAll+0x130>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d009      	beq.n	800d728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d714:	2301      	movs	r3, #1
 800d716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d718:	4b0f      	ldr	r3, [pc, #60]	@ (800d758 <xTaskResumeAll+0x138>)
 800d71a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d71e:	601a      	str	r2, [r3, #0]
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d728:	f000 ffb0 	bl	800e68c <vPortExitCritical>

	return xAlreadyYielded;
 800d72c:	68bb      	ldr	r3, [r7, #8]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	24005eec 	.word	0x24005eec
 800d73c:	24005ec4 	.word	0x24005ec4
 800d740:	24005e84 	.word	0x24005e84
 800d744:	24005ecc 	.word	0x24005ecc
 800d748:	24005dc8 	.word	0x24005dc8
 800d74c:	24005dc4 	.word	0x24005dc4
 800d750:	24005ed8 	.word	0x24005ed8
 800d754:	24005ed4 	.word	0x24005ed4
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d762:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <xTaskGetTickCount+0x1c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d768:	687b      	ldr	r3, [r7, #4]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	24005ec8 	.word	0x24005ec8

0800d77c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d782:	f001 f831 	bl	800e7e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d786:	2300      	movs	r3, #0
 800d788:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d78a:	4b04      	ldr	r3, [pc, #16]	@ (800d79c <xTaskGetTickCountFromISR+0x20>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d790:	683b      	ldr	r3, [r7, #0]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	24005ec8 	.word	0x24005ec8

0800d7a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7aa:	4b4f      	ldr	r3, [pc, #316]	@ (800d8e8 <xTaskIncrementTick+0x148>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f040 808f 	bne.w	800d8d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7b4:	4b4d      	ldr	r3, [pc, #308]	@ (800d8ec <xTaskIncrementTick+0x14c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7bc:	4a4b      	ldr	r2, [pc, #300]	@ (800d8ec <xTaskIncrementTick+0x14c>)
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d121      	bne.n	800d80c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d7c8:	4b49      	ldr	r3, [pc, #292]	@ (800d8f0 <xTaskIncrementTick+0x150>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00b      	beq.n	800d7ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800d7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	603b      	str	r3, [r7, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	bf00      	nop
 800d7e8:	e7fd      	b.n	800d7e6 <xTaskIncrementTick+0x46>
 800d7ea:	4b41      	ldr	r3, [pc, #260]	@ (800d8f0 <xTaskIncrementTick+0x150>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60fb      	str	r3, [r7, #12]
 800d7f0:	4b40      	ldr	r3, [pc, #256]	@ (800d8f4 <xTaskIncrementTick+0x154>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800d8f0 <xTaskIncrementTick+0x150>)
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	4a3e      	ldr	r2, [pc, #248]	@ (800d8f4 <xTaskIncrementTick+0x154>)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	4b3e      	ldr	r3, [pc, #248]	@ (800d8f8 <xTaskIncrementTick+0x158>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3301      	adds	r3, #1
 800d804:	4a3c      	ldr	r2, [pc, #240]	@ (800d8f8 <xTaskIncrementTick+0x158>)
 800d806:	6013      	str	r3, [r2, #0]
 800d808:	f000 fab4 	bl	800dd74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d80c:	4b3b      	ldr	r3, [pc, #236]	@ (800d8fc <xTaskIncrementTick+0x15c>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	693a      	ldr	r2, [r7, #16]
 800d812:	429a      	cmp	r2, r3
 800d814:	d348      	bcc.n	800d8a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d816:	4b36      	ldr	r3, [pc, #216]	@ (800d8f0 <xTaskIncrementTick+0x150>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d104      	bne.n	800d82a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d820:	4b36      	ldr	r3, [pc, #216]	@ (800d8fc <xTaskIncrementTick+0x15c>)
 800d822:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d826:	601a      	str	r2, [r3, #0]
					break;
 800d828:	e03e      	b.n	800d8a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d82a:	4b31      	ldr	r3, [pc, #196]	@ (800d8f0 <xTaskIncrementTick+0x150>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d203      	bcs.n	800d84a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d842:	4a2e      	ldr	r2, [pc, #184]	@ (800d8fc <xTaskIncrementTick+0x15c>)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d848:	e02e      	b.n	800d8a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	3304      	adds	r3, #4
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe fd04 	bl	800c25c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	3318      	adds	r3, #24
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fcfb 	bl	800c25c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d86a:	2201      	movs	r2, #1
 800d86c:	409a      	lsls	r2, r3
 800d86e:	4b24      	ldr	r3, [pc, #144]	@ (800d900 <xTaskIncrementTick+0x160>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4313      	orrs	r3, r2
 800d874:	4a22      	ldr	r2, [pc, #136]	@ (800d900 <xTaskIncrementTick+0x160>)
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d87c:	4613      	mov	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4a1f      	ldr	r2, [pc, #124]	@ (800d904 <xTaskIncrementTick+0x164>)
 800d886:	441a      	add	r2, r3
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fe fc87 	bl	800c1a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d898:	4b1b      	ldr	r3, [pc, #108]	@ (800d908 <xTaskIncrementTick+0x168>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d3b9      	bcc.n	800d816 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8a6:	e7b6      	b.n	800d816 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8a8:	4b17      	ldr	r3, [pc, #92]	@ (800d908 <xTaskIncrementTick+0x168>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8ae:	4915      	ldr	r1, [pc, #84]	@ (800d904 <xTaskIncrementTick+0x164>)
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4413      	add	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	440b      	add	r3, r1
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d901      	bls.n	800d8c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d8c4:	4b11      	ldr	r3, [pc, #68]	@ (800d90c <xTaskIncrementTick+0x16c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d007      	beq.n	800d8dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e004      	b.n	800d8dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d910 <xTaskIncrementTick+0x170>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	4a0d      	ldr	r2, [pc, #52]	@ (800d910 <xTaskIncrementTick+0x170>)
 800d8da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d8dc:	697b      	ldr	r3, [r7, #20]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3718      	adds	r7, #24
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	24005eec 	.word	0x24005eec
 800d8ec:	24005ec8 	.word	0x24005ec8
 800d8f0:	24005e7c 	.word	0x24005e7c
 800d8f4:	24005e80 	.word	0x24005e80
 800d8f8:	24005edc 	.word	0x24005edc
 800d8fc:	24005ee4 	.word	0x24005ee4
 800d900:	24005ecc 	.word	0x24005ecc
 800d904:	24005dc8 	.word	0x24005dc8
 800d908:	24005dc4 	.word	0x24005dc4
 800d90c:	24005ed8 	.word	0x24005ed8
 800d910:	24005ed4 	.word	0x24005ed4

0800d914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d91a:	4b2a      	ldr	r3, [pc, #168]	@ (800d9c4 <vTaskSwitchContext+0xb0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d003      	beq.n	800d92a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d922:	4b29      	ldr	r3, [pc, #164]	@ (800d9c8 <vTaskSwitchContext+0xb4>)
 800d924:	2201      	movs	r2, #1
 800d926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d928:	e045      	b.n	800d9b6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800d92a:	4b27      	ldr	r3, [pc, #156]	@ (800d9c8 <vTaskSwitchContext+0xb4>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d930:	4b26      	ldr	r3, [pc, #152]	@ (800d9cc <vTaskSwitchContext+0xb8>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	fab3 f383 	clz	r3, r3
 800d93c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d93e:	7afb      	ldrb	r3, [r7, #11]
 800d940:	f1c3 031f 	rsb	r3, r3, #31
 800d944:	617b      	str	r3, [r7, #20]
 800d946:	4922      	ldr	r1, [pc, #136]	@ (800d9d0 <vTaskSwitchContext+0xbc>)
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	4613      	mov	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	4413      	add	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	440b      	add	r3, r1
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10b      	bne.n	800d972 <vTaskSwitchContext+0x5e>
	__asm volatile
 800d95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	607b      	str	r3, [r7, #4]
}
 800d96c:	bf00      	nop
 800d96e:	bf00      	nop
 800d970:	e7fd      	b.n	800d96e <vTaskSwitchContext+0x5a>
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a14      	ldr	r2, [pc, #80]	@ (800d9d0 <vTaskSwitchContext+0xbc>)
 800d97e:	4413      	add	r3, r2
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	605a      	str	r2, [r3, #4]
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	3308      	adds	r3, #8
 800d994:	429a      	cmp	r2, r3
 800d996:	d104      	bne.n	800d9a2 <vTaskSwitchContext+0x8e>
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	685a      	ldr	r2, [r3, #4]
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d9d4 <vTaskSwitchContext+0xc0>)
 800d9aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9ac:	4b09      	ldr	r3, [pc, #36]	@ (800d9d4 <vTaskSwitchContext+0xc0>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	334c      	adds	r3, #76	@ 0x4c
 800d9b2:	4a09      	ldr	r2, [pc, #36]	@ (800d9d8 <vTaskSwitchContext+0xc4>)
 800d9b4:	6013      	str	r3, [r2, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	371c      	adds	r7, #28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	24005eec 	.word	0x24005eec
 800d9c8:	24005ed8 	.word	0x24005ed8
 800d9cc:	24005ecc 	.word	0x24005ecc
 800d9d0:	24005dc8 	.word	0x24005dc8
 800d9d4:	24005dc4 	.word	0x24005dc4
 800d9d8:	24004a10 	.word	0x24004a10

0800d9dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10b      	bne.n	800da04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	60fb      	str	r3, [r7, #12]
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	e7fd      	b.n	800da00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da04:	4b07      	ldr	r3, [pc, #28]	@ (800da24 <vTaskPlaceOnEventList+0x48>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3318      	adds	r3, #24
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7fe fbec 	bl	800c1ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da12:	2101      	movs	r1, #1
 800da14:	6838      	ldr	r0, [r7, #0]
 800da16:	f000 fc6f 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>
}
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	24005dc4 	.word	0x24005dc4

0800da28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10b      	bne.n	800da56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	60fb      	str	r3, [r7, #12]
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	e7fd      	b.n	800da52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	3318      	adds	r3, #24
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fbfe 	bl	800c25c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da60:	4b1d      	ldr	r3, [pc, #116]	@ (800dad8 <xTaskRemoveFromEventList+0xb0>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d11c      	bne.n	800daa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	3304      	adds	r3, #4
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fe fbf5 	bl	800c25c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da76:	2201      	movs	r2, #1
 800da78:	409a      	lsls	r2, r3
 800da7a:	4b18      	ldr	r3, [pc, #96]	@ (800dadc <xTaskRemoveFromEventList+0xb4>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4313      	orrs	r3, r2
 800da80:	4a16      	ldr	r2, [pc, #88]	@ (800dadc <xTaskRemoveFromEventList+0xb4>)
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da88:	4613      	mov	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4413      	add	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4a13      	ldr	r2, [pc, #76]	@ (800dae0 <xTaskRemoveFromEventList+0xb8>)
 800da92:	441a      	add	r2, r3
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	3304      	adds	r3, #4
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f7fe fb81 	bl	800c1a2 <vListInsertEnd>
 800daa0:	e005      	b.n	800daae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	3318      	adds	r3, #24
 800daa6:	4619      	mov	r1, r3
 800daa8:	480e      	ldr	r0, [pc, #56]	@ (800dae4 <xTaskRemoveFromEventList+0xbc>)
 800daaa:	f7fe fb7a 	bl	800c1a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dab2:	4b0d      	ldr	r3, [pc, #52]	@ (800dae8 <xTaskRemoveFromEventList+0xc0>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab8:	429a      	cmp	r2, r3
 800daba:	d905      	bls.n	800dac8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dabc:	2301      	movs	r3, #1
 800dabe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dac0:	4b0a      	ldr	r3, [pc, #40]	@ (800daec <xTaskRemoveFromEventList+0xc4>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	e001      	b.n	800dacc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dac8:	2300      	movs	r3, #0
 800daca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dacc:	697b      	ldr	r3, [r7, #20]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	24005eec 	.word	0x24005eec
 800dadc:	24005ecc 	.word	0x24005ecc
 800dae0:	24005dc8 	.word	0x24005dc8
 800dae4:	24005e84 	.word	0x24005e84
 800dae8:	24005dc4 	.word	0x24005dc4
 800daec:	24005ed8 	.word	0x24005ed8

0800daf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daf8:	4b06      	ldr	r3, [pc, #24]	@ (800db14 <vTaskInternalSetTimeOutState+0x24>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db00:	4b05      	ldr	r3, [pc, #20]	@ (800db18 <vTaskInternalSetTimeOutState+0x28>)
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	605a      	str	r2, [r3, #4]
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	24005edc 	.word	0x24005edc
 800db18:	24005ec8 	.word	0x24005ec8

0800db1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b088      	sub	sp, #32
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10b      	bne.n	800db44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	613b      	str	r3, [r7, #16]
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	e7fd      	b.n	800db40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10b      	bne.n	800db62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	60fb      	str	r3, [r7, #12]
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	e7fd      	b.n	800db5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800db62:	f000 fd61 	bl	800e628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db66:	4b1d      	ldr	r3, [pc, #116]	@ (800dbdc <xTaskCheckForTimeOut+0xc0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db7e:	d102      	bne.n	800db86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	e023      	b.n	800dbce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	4b15      	ldr	r3, [pc, #84]	@ (800dbe0 <xTaskCheckForTimeOut+0xc4>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d007      	beq.n	800dba2 <xTaskCheckForTimeOut+0x86>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d302      	bcc.n	800dba2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db9c:	2301      	movs	r3, #1
 800db9e:	61fb      	str	r3, [r7, #28]
 800dba0:	e015      	b.n	800dbce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d20b      	bcs.n	800dbc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	1ad2      	subs	r2, r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff ff99 	bl	800daf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e004      	b.n	800dbce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbce:	f000 fd5d 	bl	800e68c <vPortExitCritical>

	return xReturn;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	24005ec8 	.word	0x24005ec8
 800dbe0:	24005edc 	.word	0x24005edc

0800dbe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbe8:	4b03      	ldr	r3, [pc, #12]	@ (800dbf8 <vTaskMissedYield+0x14>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	601a      	str	r2, [r3, #0]
}
 800dbee:	bf00      	nop
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	24005ed8 	.word	0x24005ed8

0800dbfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc04:	f000 f852 	bl	800dcac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc08:	4b06      	ldr	r3, [pc, #24]	@ (800dc24 <prvIdleTask+0x28>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d9f9      	bls.n	800dc04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <prvIdleTask+0x2c>)
 800dc12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc20:	e7f0      	b.n	800dc04 <prvIdleTask+0x8>
 800dc22:	bf00      	nop
 800dc24:	24005dc8 	.word	0x24005dc8
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc32:	2300      	movs	r3, #0
 800dc34:	607b      	str	r3, [r7, #4]
 800dc36:	e00c      	b.n	800dc52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4a12      	ldr	r2, [pc, #72]	@ (800dc8c <prvInitialiseTaskLists+0x60>)
 800dc44:	4413      	add	r3, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fe fa7e 	bl	800c148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	607b      	str	r3, [r7, #4]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d9ef      	bls.n	800dc38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc58:	480d      	ldr	r0, [pc, #52]	@ (800dc90 <prvInitialiseTaskLists+0x64>)
 800dc5a:	f7fe fa75 	bl	800c148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc5e:	480d      	ldr	r0, [pc, #52]	@ (800dc94 <prvInitialiseTaskLists+0x68>)
 800dc60:	f7fe fa72 	bl	800c148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc64:	480c      	ldr	r0, [pc, #48]	@ (800dc98 <prvInitialiseTaskLists+0x6c>)
 800dc66:	f7fe fa6f 	bl	800c148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc6a:	480c      	ldr	r0, [pc, #48]	@ (800dc9c <prvInitialiseTaskLists+0x70>)
 800dc6c:	f7fe fa6c 	bl	800c148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc70:	480b      	ldr	r0, [pc, #44]	@ (800dca0 <prvInitialiseTaskLists+0x74>)
 800dc72:	f7fe fa69 	bl	800c148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc76:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <prvInitialiseTaskLists+0x78>)
 800dc78:	4a05      	ldr	r2, [pc, #20]	@ (800dc90 <prvInitialiseTaskLists+0x64>)
 800dc7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <prvInitialiseTaskLists+0x7c>)
 800dc7e:	4a05      	ldr	r2, [pc, #20]	@ (800dc94 <prvInitialiseTaskLists+0x68>)
 800dc80:	601a      	str	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	24005dc8 	.word	0x24005dc8
 800dc90:	24005e54 	.word	0x24005e54
 800dc94:	24005e68 	.word	0x24005e68
 800dc98:	24005e84 	.word	0x24005e84
 800dc9c:	24005e98 	.word	0x24005e98
 800dca0:	24005eb0 	.word	0x24005eb0
 800dca4:	24005e7c 	.word	0x24005e7c
 800dca8:	24005e80 	.word	0x24005e80

0800dcac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcb2:	e019      	b.n	800dce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dcb4:	f000 fcb8 	bl	800e628 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb8:	4b10      	ldr	r3, [pc, #64]	@ (800dcfc <prvCheckTasksWaitingTermination+0x50>)
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe fac9 	bl	800c25c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcca:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <prvCheckTasksWaitingTermination+0x54>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	4a0b      	ldr	r2, [pc, #44]	@ (800dd00 <prvCheckTasksWaitingTermination+0x54>)
 800dcd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	@ (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	4a0a      	ldr	r2, [pc, #40]	@ (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcde:	f000 fcd5 	bl	800e68c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f810 	bl	800dd08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce8:	4b06      	ldr	r3, [pc, #24]	@ (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e1      	bne.n	800dcb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	24005e98 	.word	0x24005e98
 800dd00:	24005ec4 	.word	0x24005ec4
 800dd04:	24005eac 	.word	0x24005eac

0800dd08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	334c      	adds	r3, #76	@ 0x4c
 800dd14:	4618      	mov	r0, r3
 800dd16:	f00b fd8f 	bl	8019838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f000 fe6d 	bl	800ea08 <vPortFree>
				vPortFree( pxTCB );
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fe6a 	bl	800ea08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd34:	e019      	b.n	800dd6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d103      	bne.n	800dd48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fe61 	bl	800ea08 <vPortFree>
	}
 800dd46:	e010      	b.n	800dd6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d00b      	beq.n	800dd6a <prvDeleteTCB+0x62>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	60fb      	str	r3, [r7, #12]
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop
 800dd68:	e7fd      	b.n	800dd66 <prvDeleteTCB+0x5e>
	}
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd7a:	4b0c      	ldr	r3, [pc, #48]	@ (800ddac <prvResetNextTaskUnblockTime+0x38>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d104      	bne.n	800dd8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd84:	4b0a      	ldr	r3, [pc, #40]	@ (800ddb0 <prvResetNextTaskUnblockTime+0x3c>)
 800dd86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd8c:	e008      	b.n	800dda0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8e:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <prvResetNextTaskUnblockTime+0x38>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	4a04      	ldr	r2, [pc, #16]	@ (800ddb0 <prvResetNextTaskUnblockTime+0x3c>)
 800dd9e:	6013      	str	r3, [r2, #0]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	24005e7c 	.word	0x24005e7c
 800ddb0:	24005ee4 	.word	0x24005ee4

0800ddb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ddba:	4b0b      	ldr	r3, [pc, #44]	@ (800dde8 <xTaskGetSchedulerState+0x34>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d102      	bne.n	800ddc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	607b      	str	r3, [r7, #4]
 800ddc6:	e008      	b.n	800ddda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddc8:	4b08      	ldr	r3, [pc, #32]	@ (800ddec <xTaskGetSchedulerState+0x38>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	607b      	str	r3, [r7, #4]
 800ddd4:	e001      	b.n	800ddda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddda:	687b      	ldr	r3, [r7, #4]
	}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr
 800dde8:	24005ed0 	.word	0x24005ed0
 800ddec:	24005eec 	.word	0x24005eec

0800ddf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d05e      	beq.n	800dec4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0a:	4b31      	ldr	r3, [pc, #196]	@ (800ded0 <xTaskPriorityInherit+0xe0>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de10:	429a      	cmp	r2, r3
 800de12:	d24e      	bcs.n	800deb2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	db06      	blt.n	800de2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de1c:	4b2c      	ldr	r3, [pc, #176]	@ (800ded0 <xTaskPriorityInherit+0xe0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	f1c3 0207 	rsb	r2, r3, #7
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	6959      	ldr	r1, [r3, #20]
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de32:	4613      	mov	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4a26      	ldr	r2, [pc, #152]	@ (800ded4 <xTaskPriorityInherit+0xe4>)
 800de3c:	4413      	add	r3, r2
 800de3e:	4299      	cmp	r1, r3
 800de40:	d12f      	bne.n	800dea2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	3304      	adds	r3, #4
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe fa08 	bl	800c25c <uxListRemove>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de56:	2201      	movs	r2, #1
 800de58:	fa02 f303 	lsl.w	r3, r2, r3
 800de5c:	43da      	mvns	r2, r3
 800de5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ded8 <xTaskPriorityInherit+0xe8>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4013      	ands	r3, r2
 800de64:	4a1c      	ldr	r2, [pc, #112]	@ (800ded8 <xTaskPriorityInherit+0xe8>)
 800de66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de68:	4b19      	ldr	r3, [pc, #100]	@ (800ded0 <xTaskPriorityInherit+0xe0>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de76:	2201      	movs	r2, #1
 800de78:	409a      	lsls	r2, r3
 800de7a:	4b17      	ldr	r3, [pc, #92]	@ (800ded8 <xTaskPriorityInherit+0xe8>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4313      	orrs	r3, r2
 800de80:	4a15      	ldr	r2, [pc, #84]	@ (800ded8 <xTaskPriorityInherit+0xe8>)
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de88:	4613      	mov	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4413      	add	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4a10      	ldr	r2, [pc, #64]	@ (800ded4 <xTaskPriorityInherit+0xe4>)
 800de92:	441a      	add	r2, r3
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	3304      	adds	r3, #4
 800de98:	4619      	mov	r1, r3
 800de9a:	4610      	mov	r0, r2
 800de9c:	f7fe f981 	bl	800c1a2 <vListInsertEnd>
 800dea0:	e004      	b.n	800deac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dea2:	4b0b      	ldr	r3, [pc, #44]	@ (800ded0 <xTaskPriorityInherit+0xe0>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800deac:	2301      	movs	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	e008      	b.n	800dec4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deb6:	4b06      	ldr	r3, [pc, #24]	@ (800ded0 <xTaskPriorityInherit+0xe0>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800debc:	429a      	cmp	r2, r3
 800debe:	d201      	bcs.n	800dec4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dec0:	2301      	movs	r3, #1
 800dec2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dec4:	68fb      	ldr	r3, [r7, #12]
	}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	24005dc4 	.word	0x24005dc4
 800ded4:	24005dc8 	.word	0x24005dc8
 800ded8:	24005ecc 	.word	0x24005ecc

0800dedc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d070      	beq.n	800dfd4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800def2:	4b3b      	ldr	r3, [pc, #236]	@ (800dfe0 <xTaskPriorityDisinherit+0x104>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	429a      	cmp	r2, r3
 800defa:	d00b      	beq.n	800df14 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60fb      	str	r3, [r7, #12]
}
 800df0e:	bf00      	nop
 800df10:	bf00      	nop
 800df12:	e7fd      	b.n	800df10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10b      	bne.n	800df34 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800df1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	60bb      	str	r3, [r7, #8]
}
 800df2e:	bf00      	nop
 800df30:	bf00      	nop
 800df32:	e7fd      	b.n	800df30 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df38:	1e5a      	subs	r2, r3, #1
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df46:	429a      	cmp	r2, r3
 800df48:	d044      	beq.n	800dfd4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d140      	bne.n	800dfd4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	3304      	adds	r3, #4
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe f980 	bl	800c25c <uxListRemove>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d115      	bne.n	800df8e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df66:	491f      	ldr	r1, [pc, #124]	@ (800dfe4 <xTaskPriorityDisinherit+0x108>)
 800df68:	4613      	mov	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	440b      	add	r3, r1
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10a      	bne.n	800df8e <xTaskPriorityDisinherit+0xb2>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7c:	2201      	movs	r2, #1
 800df7e:	fa02 f303 	lsl.w	r3, r2, r3
 800df82:	43da      	mvns	r2, r3
 800df84:	4b18      	ldr	r3, [pc, #96]	@ (800dfe8 <xTaskPriorityDisinherit+0x10c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4013      	ands	r3, r2
 800df8a:	4a17      	ldr	r2, [pc, #92]	@ (800dfe8 <xTaskPriorityDisinherit+0x10c>)
 800df8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df9a:	f1c3 0207 	rsb	r2, r3, #7
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	409a      	lsls	r2, r3
 800dfaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dfe8 <xTaskPriorityDisinherit+0x10c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	4a0d      	ldr	r2, [pc, #52]	@ (800dfe8 <xTaskPriorityDisinherit+0x10c>)
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfb8:	4613      	mov	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4a08      	ldr	r2, [pc, #32]	@ (800dfe4 <xTaskPriorityDisinherit+0x108>)
 800dfc2:	441a      	add	r2, r3
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	4619      	mov	r1, r3
 800dfca:	4610      	mov	r0, r2
 800dfcc:	f7fe f8e9 	bl	800c1a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfd4:	697b      	ldr	r3, [r7, #20]
	}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	24005dc4 	.word	0x24005dc4
 800dfe4:	24005dc8 	.word	0x24005dc8
 800dfe8:	24005ecc 	.word	0x24005ecc

0800dfec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dffa:	2301      	movs	r3, #1
 800dffc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d079      	beq.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10b      	bne.n	800e024 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	60fb      	str	r3, [r7, #12]
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	e7fd      	b.n	800e020 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d902      	bls.n	800e034 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	61fb      	str	r3, [r7, #28]
 800e032:	e002      	b.n	800e03a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e038:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	429a      	cmp	r2, r3
 800e042:	d059      	beq.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d154      	bne.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e04e:	4b2c      	ldr	r3, [pc, #176]	@ (800e100 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	429a      	cmp	r2, r3
 800e056:	d10b      	bne.n	800e070 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	60bb      	str	r3, [r7, #8]
}
 800e06a:	bf00      	nop
 800e06c:	bf00      	nop
 800e06e:	e7fd      	b.n	800e06c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e074:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	69fa      	ldr	r2, [r7, #28]
 800e07a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	2b00      	cmp	r3, #0
 800e082:	db04      	blt.n	800e08e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	f1c3 0207 	rsb	r2, r3, #7
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	6959      	ldr	r1, [r3, #20]
 800e092:	693a      	ldr	r2, [r7, #16]
 800e094:	4613      	mov	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4a19      	ldr	r2, [pc, #100]	@ (800e104 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e09e:	4413      	add	r3, r2
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d129      	bne.n	800e0f8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe f8d7 	bl	800c25c <uxListRemove>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e0be:	43da      	mvns	r2, r3
 800e0c0:	4b11      	ldr	r3, [pc, #68]	@ (800e108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	4a10      	ldr	r2, [pc, #64]	@ (800e108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e0c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	409a      	lsls	r2, r3
 800e0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800e108 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800e0da:	6013      	str	r3, [r2, #0]
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4a06      	ldr	r2, [pc, #24]	@ (800e104 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e0ea:	441a      	add	r2, r3
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	f7fe f855 	bl	800c1a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0f8:	bf00      	nop
 800e0fa:	3720      	adds	r7, #32
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	24005dc4 	.word	0x24005dc4
 800e104:	24005dc8 	.word	0x24005dc8
 800e108:	24005ecc 	.word	0x24005ecc

0800e10c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e10c:	b480      	push	{r7}
 800e10e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e110:	4b07      	ldr	r3, [pc, #28]	@ (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e118:	4b05      	ldr	r3, [pc, #20]	@ (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e11e:	3201      	adds	r2, #1
 800e120:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800e122:	4b03      	ldr	r3, [pc, #12]	@ (800e130 <pvTaskIncrementMutexHeldCount+0x24>)
 800e124:	681b      	ldr	r3, [r3, #0]
	}
 800e126:	4618      	mov	r0, r3
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	24005dc4 	.word	0x24005dc4

0800e134 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e13e:	f000 fa73 	bl	800e628 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e142:	4b20      	ldr	r3, [pc, #128]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d113      	bne.n	800e176 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e14e:	4b1d      	ldr	r3, [pc, #116]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2201      	movs	r2, #1
 800e154:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00b      	beq.n	800e176 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e15e:	2101      	movs	r1, #1
 800e160:	6838      	ldr	r0, [r7, #0]
 800e162:	f000 f8c9 	bl	800e2f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e166:	4b18      	ldr	r3, [pc, #96]	@ (800e1c8 <ulTaskNotifyTake+0x94>)
 800e168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e176:	f000 fa89 	bl	800e68c <vPortExitCritical>

		taskENTER_CRITICAL();
 800e17a:	f000 fa55 	bl	800e628 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e17e:	4b11      	ldr	r3, [pc, #68]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e186:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00e      	beq.n	800e1ac <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d005      	beq.n	800e1a0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e194:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2200      	movs	r2, #0
 800e19a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e19e:	e005      	b.n	800e1ac <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e1a0:	4b08      	ldr	r3, [pc, #32]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	3a01      	subs	r2, #1
 800e1a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1ac:	4b05      	ldr	r3, [pc, #20]	@ (800e1c4 <ulTaskNotifyTake+0x90>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800e1b6:	f000 fa69 	bl	800e68c <vPortExitCritical>

		return ulReturn;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
	}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	24005dc4 	.word	0x24005dc4
 800e1c8:	e000ed04 	.word	0xe000ed04

0800e1cc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08a      	sub	sp, #40	@ 0x28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10b      	bne.n	800e1f4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	61bb      	str	r3, [r7, #24]
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	e7fd      	b.n	800e1f0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1f4:	f000 faf8 	bl	800e7e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800e1fc:	f3ef 8211 	mrs	r2, BASEPRI
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	617a      	str	r2, [r7, #20]
 800e212:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e214:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e216:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800e21e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e222:	2202      	movs	r2, #2
 800e224:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e22e:	1c5a      	adds	r2, r3, #1
 800e230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e232:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e236:	7ffb      	ldrb	r3, [r7, #31]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d146      	bne.n	800e2ca <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00b      	beq.n	800e25c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800e244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	60fb      	str	r3, [r7, #12]
}
 800e256:	bf00      	nop
 800e258:	bf00      	nop
 800e25a:	e7fd      	b.n	800e258 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e25c:	4b20      	ldr	r3, [pc, #128]	@ (800e2e0 <vTaskNotifyGiveFromISR+0x114>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d11c      	bne.n	800e29e <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	3304      	adds	r3, #4
 800e268:	4618      	mov	r0, r3
 800e26a:	f7fd fff7 	bl	800c25c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e272:	2201      	movs	r2, #1
 800e274:	409a      	lsls	r2, r3
 800e276:	4b1b      	ldr	r3, [pc, #108]	@ (800e2e4 <vTaskNotifyGiveFromISR+0x118>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4313      	orrs	r3, r2
 800e27c:	4a19      	ldr	r2, [pc, #100]	@ (800e2e4 <vTaskNotifyGiveFromISR+0x118>)
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4a16      	ldr	r2, [pc, #88]	@ (800e2e8 <vTaskNotifyGiveFromISR+0x11c>)
 800e28e:	441a      	add	r2, r3
 800e290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e292:	3304      	adds	r3, #4
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7fd ff83 	bl	800c1a2 <vListInsertEnd>
 800e29c:	e005      	b.n	800e2aa <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	3318      	adds	r3, #24
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	4811      	ldr	r0, [pc, #68]	@ (800e2ec <vTaskNotifyGiveFromISR+0x120>)
 800e2a6:	f7fd ff7c 	bl	800c1a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ae:	4b10      	ldr	r3, [pc, #64]	@ (800e2f0 <vTaskNotifyGiveFromISR+0x124>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d908      	bls.n	800e2ca <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f4 <vTaskNotifyGiveFromISR+0x128>)
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	6a3b      	ldr	r3, [r7, #32]
 800e2cc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	f383 8811 	msr	BASEPRI, r3
}
 800e2d4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800e2d6:	bf00      	nop
 800e2d8:	3728      	adds	r7, #40	@ 0x28
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	24005eec 	.word	0x24005eec
 800e2e4:	24005ecc 	.word	0x24005ecc
 800e2e8:	24005dc8 	.word	0x24005dc8
 800e2ec:	24005e84 	.word	0x24005e84
 800e2f0:	24005dc4 	.word	0x24005dc4
 800e2f4:	24005ed8 	.word	0x24005ed8

0800e2f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e302:	4b29      	ldr	r3, [pc, #164]	@ (800e3a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e308:	4b28      	ldr	r3, [pc, #160]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fd ffa4 	bl	800c25c <uxListRemove>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10b      	bne.n	800e332 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e31a:	4b24      	ldr	r3, [pc, #144]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	2201      	movs	r2, #1
 800e322:	fa02 f303 	lsl.w	r3, r2, r3
 800e326:	43da      	mvns	r2, r3
 800e328:	4b21      	ldr	r3, [pc, #132]	@ (800e3b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4013      	ands	r3, r2
 800e32e:	4a20      	ldr	r2, [pc, #128]	@ (800e3b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e330:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e338:	d10a      	bne.n	800e350 <prvAddCurrentTaskToDelayedList+0x58>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d007      	beq.n	800e350 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e340:	4b1a      	ldr	r3, [pc, #104]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3304      	adds	r3, #4
 800e346:	4619      	mov	r1, r3
 800e348:	481a      	ldr	r0, [pc, #104]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e34a:	f7fd ff2a 	bl	800c1a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e34e:	e026      	b.n	800e39e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4413      	add	r3, r2
 800e356:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e358:	4b14      	ldr	r3, [pc, #80]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	429a      	cmp	r2, r3
 800e366:	d209      	bcs.n	800e37c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e368:	4b13      	ldr	r3, [pc, #76]	@ (800e3b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3304      	adds	r3, #4
 800e372:	4619      	mov	r1, r3
 800e374:	4610      	mov	r0, r2
 800e376:	f7fd ff38 	bl	800c1ea <vListInsert>
}
 800e37a:	e010      	b.n	800e39e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e37c:	4b0f      	ldr	r3, [pc, #60]	@ (800e3bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	3304      	adds	r3, #4
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f7fd ff2e 	bl	800c1ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e38e:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	429a      	cmp	r2, r3
 800e396:	d202      	bcs.n	800e39e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e398:	4a09      	ldr	r2, [pc, #36]	@ (800e3c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	6013      	str	r3, [r2, #0]
}
 800e39e:	bf00      	nop
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	24005ec8 	.word	0x24005ec8
 800e3ac:	24005dc4 	.word	0x24005dc4
 800e3b0:	24005ecc 	.word	0x24005ecc
 800e3b4:	24005eb0 	.word	0x24005eb0
 800e3b8:	24005e80 	.word	0x24005e80
 800e3bc:	24005e7c 	.word	0x24005e7c
 800e3c0:	24005ee4 	.word	0x24005ee4

0800e3c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3b04      	subs	r3, #4
 800e3d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3b04      	subs	r3, #4
 800e3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	f023 0201 	bic.w	r2, r3, #1
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3f4:	4a0c      	ldr	r2, [pc, #48]	@ (800e428 <pxPortInitialiseStack+0x64>)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3b14      	subs	r3, #20
 800e3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3b04      	subs	r3, #4
 800e40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f06f 0202 	mvn.w	r2, #2
 800e412:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	3b20      	subs	r3, #32
 800e418:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e41a:	68fb      	ldr	r3, [r7, #12]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	0800e42d 	.word	0x0800e42d

0800e42c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b085      	sub	sp, #20
 800e430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e436:	4b13      	ldr	r3, [pc, #76]	@ (800e484 <prvTaskExitError+0x58>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e43e:	d00b      	beq.n	800e458 <prvTaskExitError+0x2c>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	60fb      	str	r3, [r7, #12]
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	e7fd      	b.n	800e454 <prvTaskExitError+0x28>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	60bb      	str	r3, [r7, #8]
}
 800e46a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e46c:	bf00      	nop
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d0fc      	beq.n	800e46e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop
 800e478:	3714      	adds	r7, #20
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	240049f4 	.word	0x240049f4
	...

0800e490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e490:	4b07      	ldr	r3, [pc, #28]	@ (800e4b0 <pxCurrentTCBConst2>)
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f380 8809 	msr	PSP, r0
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	f380 8811 	msr	BASEPRI, r0
 800e4aa:	4770      	bx	lr
 800e4ac:	f3af 8000 	nop.w

0800e4b0 <pxCurrentTCBConst2>:
 800e4b0:	24005dc4 	.word	0x24005dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4b8:	4808      	ldr	r0, [pc, #32]	@ (800e4dc <prvPortStartFirstTask+0x24>)
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	f380 8808 	msr	MSP, r0
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	f380 8814 	msr	CONTROL, r0
 800e4ca:	b662      	cpsie	i
 800e4cc:	b661      	cpsie	f
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	df00      	svc	0
 800e4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4da:	bf00      	nop
 800e4dc:	e000ed08 	.word	0xe000ed08

0800e4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4e6:	4b47      	ldr	r3, [pc, #284]	@ (800e604 <xPortStartScheduler+0x124>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a47      	ldr	r2, [pc, #284]	@ (800e608 <xPortStartScheduler+0x128>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d10b      	bne.n	800e508 <xPortStartScheduler+0x28>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	613b      	str	r3, [r7, #16]
}
 800e502:	bf00      	nop
 800e504:	bf00      	nop
 800e506:	e7fd      	b.n	800e504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e508:	4b3e      	ldr	r3, [pc, #248]	@ (800e604 <xPortStartScheduler+0x124>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a3f      	ldr	r2, [pc, #252]	@ (800e60c <xPortStartScheduler+0x12c>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d10b      	bne.n	800e52a <xPortStartScheduler+0x4a>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60fb      	str	r3, [r7, #12]
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	e7fd      	b.n	800e526 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e52a:	4b39      	ldr	r3, [pc, #228]	@ (800e610 <xPortStartScheduler+0x130>)
 800e52c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	b2db      	uxtb	r3, r3
 800e534:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	22ff      	movs	r2, #255	@ 0xff
 800e53a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	b2db      	uxtb	r3, r3
 800e542:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	b2db      	uxtb	r3, r3
 800e548:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	4b31      	ldr	r3, [pc, #196]	@ (800e614 <xPortStartScheduler+0x134>)
 800e550:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e552:	4b31      	ldr	r3, [pc, #196]	@ (800e618 <xPortStartScheduler+0x138>)
 800e554:	2207      	movs	r2, #7
 800e556:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e558:	e009      	b.n	800e56e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e55a:	4b2f      	ldr	r3, [pc, #188]	@ (800e618 <xPortStartScheduler+0x138>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3b01      	subs	r3, #1
 800e560:	4a2d      	ldr	r2, [pc, #180]	@ (800e618 <xPortStartScheduler+0x138>)
 800e562:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	b2db      	uxtb	r3, r3
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e56e:	78fb      	ldrb	r3, [r7, #3]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e576:	2b80      	cmp	r3, #128	@ 0x80
 800e578:	d0ef      	beq.n	800e55a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e57a:	4b27      	ldr	r3, [pc, #156]	@ (800e618 <xPortStartScheduler+0x138>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f1c3 0307 	rsb	r3, r3, #7
 800e582:	2b04      	cmp	r3, #4
 800e584:	d00b      	beq.n	800e59e <xPortStartScheduler+0xbe>
	__asm volatile
 800e586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58a:	f383 8811 	msr	BASEPRI, r3
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	60bb      	str	r3, [r7, #8]
}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	e7fd      	b.n	800e59a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e59e:	4b1e      	ldr	r3, [pc, #120]	@ (800e618 <xPortStartScheduler+0x138>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	4a1c      	ldr	r2, [pc, #112]	@ (800e618 <xPortStartScheduler+0x138>)
 800e5a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5a8:	4b1b      	ldr	r3, [pc, #108]	@ (800e618 <xPortStartScheduler+0x138>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e5b0:	4a19      	ldr	r2, [pc, #100]	@ (800e618 <xPortStartScheduler+0x138>)
 800e5b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5bc:	4b17      	ldr	r3, [pc, #92]	@ (800e61c <xPortStartScheduler+0x13c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a16      	ldr	r2, [pc, #88]	@ (800e61c <xPortStartScheduler+0x13c>)
 800e5c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e5c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5c8:	4b14      	ldr	r3, [pc, #80]	@ (800e61c <xPortStartScheduler+0x13c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a13      	ldr	r2, [pc, #76]	@ (800e61c <xPortStartScheduler+0x13c>)
 800e5ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e5d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5d4:	f000 f8da 	bl	800e78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5d8:	4b11      	ldr	r3, [pc, #68]	@ (800e620 <xPortStartScheduler+0x140>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5de:	f000 f8f9 	bl	800e7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5e2:	4b10      	ldr	r3, [pc, #64]	@ (800e624 <xPortStartScheduler+0x144>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a0f      	ldr	r2, [pc, #60]	@ (800e624 <xPortStartScheduler+0x144>)
 800e5e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e5ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5ee:	f7ff ff63 	bl	800e4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5f2:	f7ff f98f 	bl	800d914 <vTaskSwitchContext>
	prvTaskExitError();
 800e5f6:	f7ff ff19 	bl	800e42c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	e000ed00 	.word	0xe000ed00
 800e608:	410fc271 	.word	0x410fc271
 800e60c:	410fc270 	.word	0x410fc270
 800e610:	e000e400 	.word	0xe000e400
 800e614:	24005ef0 	.word	0x24005ef0
 800e618:	24005ef4 	.word	0x24005ef4
 800e61c:	e000ed20 	.word	0xe000ed20
 800e620:	240049f4 	.word	0x240049f4
 800e624:	e000ef34 	.word	0xe000ef34

0800e628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	607b      	str	r3, [r7, #4]
}
 800e640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e642:	4b10      	ldr	r3, [pc, #64]	@ (800e684 <vPortEnterCritical+0x5c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	4a0e      	ldr	r2, [pc, #56]	@ (800e684 <vPortEnterCritical+0x5c>)
 800e64a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e64c:	4b0d      	ldr	r3, [pc, #52]	@ (800e684 <vPortEnterCritical+0x5c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d110      	bne.n	800e676 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e654:	4b0c      	ldr	r3, [pc, #48]	@ (800e688 <vPortEnterCritical+0x60>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00b      	beq.n	800e676 <vPortEnterCritical+0x4e>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	603b      	str	r3, [r7, #0]
}
 800e670:	bf00      	nop
 800e672:	bf00      	nop
 800e674:	e7fd      	b.n	800e672 <vPortEnterCritical+0x4a>
	}
}
 800e676:	bf00      	nop
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	240049f4 	.word	0x240049f4
 800e688:	e000ed04 	.word	0xe000ed04

0800e68c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e692:	4b12      	ldr	r3, [pc, #72]	@ (800e6dc <vPortExitCritical+0x50>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <vPortExitCritical+0x26>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	607b      	str	r3, [r7, #4]
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	e7fd      	b.n	800e6ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <vPortExitCritical+0x50>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	4a08      	ldr	r2, [pc, #32]	@ (800e6dc <vPortExitCritical+0x50>)
 800e6ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6bc:	4b07      	ldr	r3, [pc, #28]	@ (800e6dc <vPortExitCritical+0x50>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d105      	bne.n	800e6d0 <vPortExitCritical+0x44>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	f383 8811 	msr	BASEPRI, r3
}
 800e6ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	240049f4 	.word	0x240049f4

0800e6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6e0:	f3ef 8009 	mrs	r0, PSP
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4b15      	ldr	r3, [pc, #84]	@ (800e740 <pxCurrentTCBConst>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	f01e 0f10 	tst.w	lr, #16
 800e6f0:	bf08      	it	eq
 800e6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	6010      	str	r0, [r2, #0]
 800e6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e704:	f380 8811 	msr	BASEPRI, r0
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f7ff f900 	bl	800d914 <vTaskSwitchContext>
 800e714:	f04f 0000 	mov.w	r0, #0
 800e718:	f380 8811 	msr	BASEPRI, r0
 800e71c:	bc09      	pop	{r0, r3}
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	6808      	ldr	r0, [r1, #0]
 800e722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e726:	f01e 0f10 	tst.w	lr, #16
 800e72a:	bf08      	it	eq
 800e72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e730:	f380 8809 	msr	PSP, r0
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	f3af 8000 	nop.w

0800e740 <pxCurrentTCBConst>:
 800e740:	24005dc4 	.word	0x24005dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop

0800e748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e762:	f7ff f81d 	bl	800d7a0 <xTaskIncrementTick>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e76c:	4b06      	ldr	r3, [pc, #24]	@ (800e788 <SysTick_Handler+0x40>)
 800e76e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	2300      	movs	r3, #0
 800e776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	f383 8811 	msr	BASEPRI, r3
}
 800e77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e78c:	b480      	push	{r7}
 800e78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e790:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e796:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c4 <vPortSetupTimerInterrupt+0x38>)
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e79c:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c8 <vPortSetupTimerInterrupt+0x3c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a0a      	ldr	r2, [pc, #40]	@ (800e7cc <vPortSetupTimerInterrupt+0x40>)
 800e7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a6:	099b      	lsrs	r3, r3, #6
 800e7a8:	4a09      	ldr	r2, [pc, #36]	@ (800e7d0 <vPortSetupTimerInterrupt+0x44>)
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7ae:	4b04      	ldr	r3, [pc, #16]	@ (800e7c0 <vPortSetupTimerInterrupt+0x34>)
 800e7b0:	2207      	movs	r2, #7
 800e7b2:	601a      	str	r2, [r3, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	e000e010 	.word	0xe000e010
 800e7c4:	e000e018 	.word	0xe000e018
 800e7c8:	240049d0 	.word	0x240049d0
 800e7cc:	10624dd3 	.word	0x10624dd3
 800e7d0:	e000e014 	.word	0xe000e014

0800e7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e7e4 <vPortEnableVFP+0x10>
 800e7d8:	6801      	ldr	r1, [r0, #0]
 800e7da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e7de:	6001      	str	r1, [r0, #0]
 800e7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7e2:	bf00      	nop
 800e7e4:	e000ed88 	.word	0xe000ed88

0800e7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7ee:	f3ef 8305 	mrs	r3, IPSR
 800e7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d915      	bls.n	800e826 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7fa:	4a18      	ldr	r2, [pc, #96]	@ (800e85c <vPortValidateInterruptPriority+0x74>)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e804:	4b16      	ldr	r3, [pc, #88]	@ (800e860 <vPortValidateInterruptPriority+0x78>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	7afa      	ldrb	r2, [r7, #11]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d20b      	bcs.n	800e826 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	607b      	str	r3, [r7, #4]
}
 800e820:	bf00      	nop
 800e822:	bf00      	nop
 800e824:	e7fd      	b.n	800e822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e826:	4b0f      	ldr	r3, [pc, #60]	@ (800e864 <vPortValidateInterruptPriority+0x7c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e82e:	4b0e      	ldr	r3, [pc, #56]	@ (800e868 <vPortValidateInterruptPriority+0x80>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d90b      	bls.n	800e84e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	603b      	str	r3, [r7, #0]
}
 800e848:	bf00      	nop
 800e84a:	bf00      	nop
 800e84c:	e7fd      	b.n	800e84a <vPortValidateInterruptPriority+0x62>
	}
 800e84e:	bf00      	nop
 800e850:	3714      	adds	r7, #20
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	e000e3f0 	.word	0xe000e3f0
 800e860:	24005ef0 	.word	0x24005ef0
 800e864:	e000ed0c 	.word	0xe000ed0c
 800e868:	24005ef4 	.word	0x24005ef4

0800e86c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	@ 0x28
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e874:	2300      	movs	r3, #0
 800e876:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e878:	f7fe fec4 	bl	800d604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e87c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9f0 <pvPortMalloc+0x184>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e884:	f000 f924 	bl	800ead0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e888:	4b5a      	ldr	r3, [pc, #360]	@ (800e9f4 <pvPortMalloc+0x188>)
 800e88a:	681a      	ldr	r2, [r3, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4013      	ands	r3, r2
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 8095 	bne.w	800e9c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d01e      	beq.n	800e8da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e89c:	2208      	movs	r2, #8
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f003 0307 	and.w	r3, r3, #7
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d015      	beq.n	800e8da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f023 0307 	bic.w	r3, r3, #7
 800e8b4:	3308      	adds	r3, #8
 800e8b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f003 0307 	and.w	r3, r3, #7
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00b      	beq.n	800e8da <pvPortMalloc+0x6e>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	617b      	str	r3, [r7, #20]
}
 800e8d4:	bf00      	nop
 800e8d6:	bf00      	nop
 800e8d8:	e7fd      	b.n	800e8d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d06f      	beq.n	800e9c0 <pvPortMalloc+0x154>
 800e8e0:	4b45      	ldr	r3, [pc, #276]	@ (800e9f8 <pvPortMalloc+0x18c>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d86a      	bhi.n	800e9c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8ea:	4b44      	ldr	r3, [pc, #272]	@ (800e9fc <pvPortMalloc+0x190>)
 800e8ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8ee:	4b43      	ldr	r3, [pc, #268]	@ (800e9fc <pvPortMalloc+0x190>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8f4:	e004      	b.n	800e900 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	429a      	cmp	r2, r3
 800e908:	d903      	bls.n	800e912 <pvPortMalloc+0xa6>
 800e90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1f1      	bne.n	800e8f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e912:	4b37      	ldr	r3, [pc, #220]	@ (800e9f0 <pvPortMalloc+0x184>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e918:	429a      	cmp	r2, r3
 800e91a:	d051      	beq.n	800e9c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2208      	movs	r2, #8
 800e922:	4413      	add	r3, r2
 800e924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	6a3b      	ldr	r3, [r7, #32]
 800e92c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	1ad2      	subs	r2, r2, r3
 800e936:	2308      	movs	r3, #8
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d920      	bls.n	800e980 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e93e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4413      	add	r3, r2
 800e944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	f003 0307 	and.w	r3, r3, #7
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00b      	beq.n	800e968 <pvPortMalloc+0xfc>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	613b      	str	r3, [r7, #16]
}
 800e962:	bf00      	nop
 800e964:	bf00      	nop
 800e966:	e7fd      	b.n	800e964 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e97a:	69b8      	ldr	r0, [r7, #24]
 800e97c:	f000 f90a 	bl	800eb94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e980:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f8 <pvPortMalloc+0x18c>)
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	4a1b      	ldr	r2, [pc, #108]	@ (800e9f8 <pvPortMalloc+0x18c>)
 800e98c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e98e:	4b1a      	ldr	r3, [pc, #104]	@ (800e9f8 <pvPortMalloc+0x18c>)
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	4b1b      	ldr	r3, [pc, #108]	@ (800ea00 <pvPortMalloc+0x194>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	429a      	cmp	r2, r3
 800e998:	d203      	bcs.n	800e9a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e99a:	4b17      	ldr	r3, [pc, #92]	@ (800e9f8 <pvPortMalloc+0x18c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4a18      	ldr	r2, [pc, #96]	@ (800ea00 <pvPortMalloc+0x194>)
 800e9a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	4b13      	ldr	r3, [pc, #76]	@ (800e9f4 <pvPortMalloc+0x188>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	431a      	orrs	r2, r3
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ea04 <pvPortMalloc+0x198>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	4a11      	ldr	r2, [pc, #68]	@ (800ea04 <pvPortMalloc+0x198>)
 800e9be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9c0:	f7fe fe2e 	bl	800d620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00b      	beq.n	800e9e6 <pvPortMalloc+0x17a>
	__asm volatile
 800e9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	60fb      	str	r3, [r7, #12]
}
 800e9e0:	bf00      	nop
 800e9e2:	bf00      	nop
 800e9e4:	e7fd      	b.n	800e9e2 <pvPortMalloc+0x176>
	return pvReturn;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3728      	adds	r7, #40	@ 0x28
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	24009b00 	.word	0x24009b00
 800e9f4:	24009b14 	.word	0x24009b14
 800e9f8:	24009b04 	.word	0x24009b04
 800e9fc:	24009af8 	.word	0x24009af8
 800ea00:	24009b08 	.word	0x24009b08
 800ea04:	24009b0c 	.word	0x24009b0c

0800ea08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d04f      	beq.n	800eaba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea1a:	2308      	movs	r3, #8
 800ea1c:	425b      	negs	r3, r3
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	4413      	add	r3, r2
 800ea22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	685a      	ldr	r2, [r3, #4]
 800ea2c:	4b25      	ldr	r3, [pc, #148]	@ (800eac4 <vPortFree+0xbc>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4013      	ands	r3, r2
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10b      	bne.n	800ea4e <vPortFree+0x46>
	__asm volatile
 800ea36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	60fb      	str	r3, [r7, #12]
}
 800ea48:	bf00      	nop
 800ea4a:	bf00      	nop
 800ea4c:	e7fd      	b.n	800ea4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00b      	beq.n	800ea6e <vPortFree+0x66>
	__asm volatile
 800ea56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	60bb      	str	r3, [r7, #8]
}
 800ea68:	bf00      	nop
 800ea6a:	bf00      	nop
 800ea6c:	e7fd      	b.n	800ea6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	4b14      	ldr	r3, [pc, #80]	@ (800eac4 <vPortFree+0xbc>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4013      	ands	r3, r2
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d01e      	beq.n	800eaba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d11a      	bne.n	800eaba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	4b0e      	ldr	r3, [pc, #56]	@ (800eac4 <vPortFree+0xbc>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	43db      	mvns	r3, r3
 800ea8e:	401a      	ands	r2, r3
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea94:	f7fe fdb6 	bl	800d604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	@ (800eac8 <vPortFree+0xc0>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	4a09      	ldr	r2, [pc, #36]	@ (800eac8 <vPortFree+0xc0>)
 800eaa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eaa6:	6938      	ldr	r0, [r7, #16]
 800eaa8:	f000 f874 	bl	800eb94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eaac:	4b07      	ldr	r3, [pc, #28]	@ (800eacc <vPortFree+0xc4>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3301      	adds	r3, #1
 800eab2:	4a06      	ldr	r2, [pc, #24]	@ (800eacc <vPortFree+0xc4>)
 800eab4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eab6:	f7fe fdb3 	bl	800d620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eaba:	bf00      	nop
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	24009b14 	.word	0x24009b14
 800eac8:	24009b04 	.word	0x24009b04
 800eacc:	24009b10 	.word	0x24009b10

0800ead0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ead6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800eada:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eadc:	4b27      	ldr	r3, [pc, #156]	@ (800eb7c <prvHeapInit+0xac>)
 800eade:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f003 0307 	and.w	r3, r3, #7
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00c      	beq.n	800eb04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	3307      	adds	r3, #7
 800eaee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f023 0307 	bic.w	r3, r3, #7
 800eaf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	4a1f      	ldr	r2, [pc, #124]	@ (800eb7c <prvHeapInit+0xac>)
 800eb00:	4413      	add	r3, r2
 800eb02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb08:	4a1d      	ldr	r2, [pc, #116]	@ (800eb80 <prvHeapInit+0xb0>)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb0e:	4b1c      	ldr	r3, [pc, #112]	@ (800eb80 <prvHeapInit+0xb0>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb1c:	2208      	movs	r2, #8
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	1a9b      	subs	r3, r3, r2
 800eb22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f023 0307 	bic.w	r3, r3, #7
 800eb2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	4a15      	ldr	r2, [pc, #84]	@ (800eb84 <prvHeapInit+0xb4>)
 800eb30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb32:	4b14      	ldr	r3, [pc, #80]	@ (800eb84 <prvHeapInit+0xb4>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2200      	movs	r2, #0
 800eb38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb3a:	4b12      	ldr	r3, [pc, #72]	@ (800eb84 <prvHeapInit+0xb4>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	1ad2      	subs	r2, r2, r3
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb50:	4b0c      	ldr	r3, [pc, #48]	@ (800eb84 <prvHeapInit+0xb4>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb88 <prvHeapInit+0xb8>)
 800eb5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	4a09      	ldr	r2, [pc, #36]	@ (800eb8c <prvHeapInit+0xbc>)
 800eb66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb68:	4b09      	ldr	r3, [pc, #36]	@ (800eb90 <prvHeapInit+0xc0>)
 800eb6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb6e:	601a      	str	r2, [r3, #0]
}
 800eb70:	bf00      	nop
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	24005ef8 	.word	0x24005ef8
 800eb80:	24009af8 	.word	0x24009af8
 800eb84:	24009b00 	.word	0x24009b00
 800eb88:	24009b08 	.word	0x24009b08
 800eb8c:	24009b04 	.word	0x24009b04
 800eb90:	24009b14 	.word	0x24009b14

0800eb94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb9c:	4b28      	ldr	r3, [pc, #160]	@ (800ec40 <prvInsertBlockIntoFreeList+0xac>)
 800eb9e:	60fb      	str	r3, [r7, #12]
 800eba0:	e002      	b.n	800eba8 <prvInsertBlockIntoFreeList+0x14>
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d8f7      	bhi.n	800eba2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d108      	bne.n	800ebd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	441a      	add	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	441a      	add	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d118      	bne.n	800ec1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	4b15      	ldr	r3, [pc, #84]	@ (800ec44 <prvInsertBlockIntoFreeList+0xb0>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d00d      	beq.n	800ec12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	441a      	add	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	e008      	b.n	800ec24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec12:	4b0c      	ldr	r3, [pc, #48]	@ (800ec44 <prvInsertBlockIntoFreeList+0xb0>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	e003      	b.n	800ec24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d002      	beq.n	800ec32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec32:	bf00      	nop
 800ec34:	3714      	adds	r7, #20
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	24009af8 	.word	0x24009af8
 800ec44:	24009b00 	.word	0x24009b00

0800ec48 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ec52:	f007 fba3 	bl	801639c <sys_timeouts_sleeptime>
 800ec56:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec5e:	d10b      	bne.n	800ec78 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ec60:	4813      	ldr	r0, [pc, #76]	@ (800ecb0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec62:	f00a fc6e 	bl	8019542 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ec66:	2200      	movs	r2, #0
 800ec68:	6839      	ldr	r1, [r7, #0]
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f00a fbe0 	bl	8019430 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ec70:	480f      	ldr	r0, [pc, #60]	@ (800ecb0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec72:	f00a fc57 	bl	8019524 <sys_mutex_lock>
    return;
 800ec76:	e018      	b.n	800ecaa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d102      	bne.n	800ec84 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ec7e:	f007 fb53 	bl	8016328 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ec82:	e7e6      	b.n	800ec52 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ec84:	480a      	ldr	r0, [pc, #40]	@ (800ecb0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec86:	f00a fc5c 	bl	8019542 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f00a fbce 	bl	8019430 <sys_arch_mbox_fetch>
 800ec94:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ec96:	4806      	ldr	r0, [pc, #24]	@ (800ecb0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec98:	f00a fc44 	bl	8019524 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eca2:	d102      	bne.n	800ecaa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800eca4:	f007 fb40 	bl	8016328 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eca8:	e7d3      	b.n	800ec52 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	24009b24 	.word	0x24009b24

0800ecb4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ecbc:	4810      	ldr	r0, [pc, #64]	@ (800ed00 <tcpip_thread+0x4c>)
 800ecbe:	f00a fc31 	bl	8019524 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ecc2:	4b10      	ldr	r3, [pc, #64]	@ (800ed04 <tcpip_thread+0x50>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d005      	beq.n	800ecd6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ecca:	4b0e      	ldr	r3, [pc, #56]	@ (800ed04 <tcpip_thread+0x50>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a0e      	ldr	r2, [pc, #56]	@ (800ed08 <tcpip_thread+0x54>)
 800ecd0:	6812      	ldr	r2, [r2, #0]
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ecd6:	f107 030c 	add.w	r3, r7, #12
 800ecda:	4619      	mov	r1, r3
 800ecdc:	480b      	ldr	r0, [pc, #44]	@ (800ed0c <tcpip_thread+0x58>)
 800ecde:	f7ff ffb3 	bl	800ec48 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ece8:	4b09      	ldr	r3, [pc, #36]	@ (800ed10 <tcpip_thread+0x5c>)
 800ecea:	2291      	movs	r2, #145	@ 0x91
 800ecec:	4909      	ldr	r1, [pc, #36]	@ (800ed14 <tcpip_thread+0x60>)
 800ecee:	480a      	ldr	r0, [pc, #40]	@ (800ed18 <tcpip_thread+0x64>)
 800ecf0:	f00a fd78 	bl	80197e4 <iprintf>
      continue;
 800ecf4:	e003      	b.n	800ecfe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f000 f80f 	bl	800ed1c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ecfe:	e7ea      	b.n	800ecd6 <tcpip_thread+0x22>
 800ed00:	24009b24 	.word	0x24009b24
 800ed04:	24009b18 	.word	0x24009b18
 800ed08:	24009b1c 	.word	0x24009b1c
 800ed0c:	24009b20 	.word	0x24009b20
 800ed10:	0801a7b4 	.word	0x0801a7b4
 800ed14:	0801a7e4 	.word	0x0801a7e4
 800ed18:	0801a804 	.word	0x0801a804

0800ed1c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b02      	cmp	r3, #2
 800ed2a:	d026      	beq.n	800ed7a <tcpip_thread_handle_msg+0x5e>
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	dc2b      	bgt.n	800ed88 <tcpip_thread_handle_msg+0x6c>
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <tcpip_thread_handle_msg+0x1e>
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d015      	beq.n	800ed64 <tcpip_thread_handle_msg+0x48>
 800ed38:	e026      	b.n	800ed88 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	6850      	ldr	r0, [r2, #4]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	6892      	ldr	r2, [r2, #8]
 800ed46:	4611      	mov	r1, r2
 800ed48:	4798      	blx	r3
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d004      	beq.n	800ed5a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f001 fdd7 	bl	8010908 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed5a:	6879      	ldr	r1, [r7, #4]
 800ed5c:	2009      	movs	r0, #9
 800ed5e:	f000 ff2b 	bl	800fbb8 <memp_free>
      break;
 800ed62:	e018      	b.n	800ed96 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	6892      	ldr	r2, [r2, #8]
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed70:	6879      	ldr	r1, [r7, #4]
 800ed72:	2008      	movs	r0, #8
 800ed74:	f000 ff20 	bl	800fbb8 <memp_free>
      break;
 800ed78:	e00d      	b.n	800ed96 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	6892      	ldr	r2, [r2, #8]
 800ed82:	4610      	mov	r0, r2
 800ed84:	4798      	blx	r3
      break;
 800ed86:	e006      	b.n	800ed96 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed88:	4b05      	ldr	r3, [pc, #20]	@ (800eda0 <tcpip_thread_handle_msg+0x84>)
 800ed8a:	22cf      	movs	r2, #207	@ 0xcf
 800ed8c:	4905      	ldr	r1, [pc, #20]	@ (800eda4 <tcpip_thread_handle_msg+0x88>)
 800ed8e:	4806      	ldr	r0, [pc, #24]	@ (800eda8 <tcpip_thread_handle_msg+0x8c>)
 800ed90:	f00a fd28 	bl	80197e4 <iprintf>
      break;
 800ed94:	bf00      	nop
  }
}
 800ed96:	bf00      	nop
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	0801a7b4 	.word	0x0801a7b4
 800eda4:	0801a7e4 	.word	0x0801a7e4
 800eda8:	0801a804 	.word	0x0801a804

0800edac <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b086      	sub	sp, #24
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800edb8:	481a      	ldr	r0, [pc, #104]	@ (800ee24 <tcpip_inpkt+0x78>)
 800edba:	f00a fb78 	bl	80194ae <sys_mbox_valid>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d105      	bne.n	800edd0 <tcpip_inpkt+0x24>
 800edc4:	4b18      	ldr	r3, [pc, #96]	@ (800ee28 <tcpip_inpkt+0x7c>)
 800edc6:	22fc      	movs	r2, #252	@ 0xfc
 800edc8:	4918      	ldr	r1, [pc, #96]	@ (800ee2c <tcpip_inpkt+0x80>)
 800edca:	4819      	ldr	r0, [pc, #100]	@ (800ee30 <tcpip_inpkt+0x84>)
 800edcc:	f00a fd0a 	bl	80197e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800edd0:	2009      	movs	r0, #9
 800edd2:	f000 fe7b 	bl	800facc <memp_malloc>
 800edd6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d102      	bne.n	800ede4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800edde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ede2:	e01a      	b.n	800ee1a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2200      	movs	r2, #0
 800ede8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	68ba      	ldr	r2, [r7, #8]
 800edf4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800edfc:	6979      	ldr	r1, [r7, #20]
 800edfe:	4809      	ldr	r0, [pc, #36]	@ (800ee24 <tcpip_inpkt+0x78>)
 800ee00:	f00a fafc 	bl	80193fc <sys_mbox_trypost>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d006      	beq.n	800ee18 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee0a:	6979      	ldr	r1, [r7, #20]
 800ee0c:	2009      	movs	r0, #9
 800ee0e:	f000 fed3 	bl	800fbb8 <memp_free>
    return ERR_MEM;
 800ee12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee16:	e000      	b.n	800ee1a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee18:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	24009b20 	.word	0x24009b20
 800ee28:	0801a7b4 	.word	0x0801a7b4
 800ee2c:	0801a82c 	.word	0x0801a82c
 800ee30:	0801a804 	.word	0x0801a804

0800ee34 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee44:	f003 0318 	and.w	r3, r3, #24
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d006      	beq.n	800ee5a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ee4c:	4a08      	ldr	r2, [pc, #32]	@ (800ee70 <tcpip_input+0x3c>)
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7ff ffab 	bl	800edac <tcpip_inpkt>
 800ee56:	4603      	mov	r3, r0
 800ee58:	e005      	b.n	800ee66 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ee5a:	4a06      	ldr	r2, [pc, #24]	@ (800ee74 <tcpip_input+0x40>)
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff ffa4 	bl	800edac <tcpip_inpkt>
 800ee64:	4603      	mov	r3, r0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	0801920d 	.word	0x0801920d
 800ee74:	08018115 	.word	0x08018115

0800ee78 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ee82:	4819      	ldr	r0, [pc, #100]	@ (800eee8 <tcpip_try_callback+0x70>)
 800ee84:	f00a fb13 	bl	80194ae <sys_mbox_valid>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcpip_try_callback+0x24>
 800ee8e:	4b17      	ldr	r3, [pc, #92]	@ (800eeec <tcpip_try_callback+0x74>)
 800ee90:	f240 125d 	movw	r2, #349	@ 0x15d
 800ee94:	4916      	ldr	r1, [pc, #88]	@ (800eef0 <tcpip_try_callback+0x78>)
 800ee96:	4817      	ldr	r0, [pc, #92]	@ (800eef4 <tcpip_try_callback+0x7c>)
 800ee98:	f00a fca4 	bl	80197e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ee9c:	2008      	movs	r0, #8
 800ee9e:	f000 fe15 	bl	800facc <memp_malloc>
 800eea2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d102      	bne.n	800eeb0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800eeaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eeae:	e017      	b.n	800eee0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	683a      	ldr	r2, [r7, #0]
 800eec0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eec2:	68f9      	ldr	r1, [r7, #12]
 800eec4:	4808      	ldr	r0, [pc, #32]	@ (800eee8 <tcpip_try_callback+0x70>)
 800eec6:	f00a fa99 	bl	80193fc <sys_mbox_trypost>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d006      	beq.n	800eede <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800eed0:	68f9      	ldr	r1, [r7, #12]
 800eed2:	2008      	movs	r0, #8
 800eed4:	f000 fe70 	bl	800fbb8 <memp_free>
    return ERR_MEM;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eedc:	e000      	b.n	800eee0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	24009b20 	.word	0x24009b20
 800eeec:	0801a7b4 	.word	0x0801a7b4
 800eef0:	0801a82c 	.word	0x0801a82c
 800eef4:	0801a804 	.word	0x0801a804

0800eef8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af02      	add	r7, sp, #8
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ef02:	f000 f92d 	bl	800f160 <lwip_init>

  tcpip_init_done = initfunc;
 800ef06:	4a17      	ldr	r2, [pc, #92]	@ (800ef64 <tcpip_init+0x6c>)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ef0c:	4a16      	ldr	r2, [pc, #88]	@ (800ef68 <tcpip_init+0x70>)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ef12:	2106      	movs	r1, #6
 800ef14:	4815      	ldr	r0, [pc, #84]	@ (800ef6c <tcpip_init+0x74>)
 800ef16:	f00a fa4f 	bl	80193b8 <sys_mbox_new>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d006      	beq.n	800ef2e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ef20:	4b13      	ldr	r3, [pc, #76]	@ (800ef70 <tcpip_init+0x78>)
 800ef22:	f240 2261 	movw	r2, #609	@ 0x261
 800ef26:	4913      	ldr	r1, [pc, #76]	@ (800ef74 <tcpip_init+0x7c>)
 800ef28:	4813      	ldr	r0, [pc, #76]	@ (800ef78 <tcpip_init+0x80>)
 800ef2a:	f00a fc5b 	bl	80197e4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ef2e:	4813      	ldr	r0, [pc, #76]	@ (800ef7c <tcpip_init+0x84>)
 800ef30:	f00a fadc 	bl	80194ec <sys_mutex_new>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d006      	beq.n	800ef48 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ef3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef70 <tcpip_init+0x78>)
 800ef3c:	f240 2265 	movw	r2, #613	@ 0x265
 800ef40:	490f      	ldr	r1, [pc, #60]	@ (800ef80 <tcpip_init+0x88>)
 800ef42:	480d      	ldr	r0, [pc, #52]	@ (800ef78 <tcpip_init+0x80>)
 800ef44:	f00a fc4e 	bl	80197e4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ef48:	2300      	movs	r3, #0
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef50:	2200      	movs	r2, #0
 800ef52:	490c      	ldr	r1, [pc, #48]	@ (800ef84 <tcpip_init+0x8c>)
 800ef54:	480c      	ldr	r0, [pc, #48]	@ (800ef88 <tcpip_init+0x90>)
 800ef56:	f00a fb01 	bl	801955c <sys_thread_new>
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	24009b18 	.word	0x24009b18
 800ef68:	24009b1c 	.word	0x24009b1c
 800ef6c:	24009b20 	.word	0x24009b20
 800ef70:	0801a7b4 	.word	0x0801a7b4
 800ef74:	0801a83c 	.word	0x0801a83c
 800ef78:	0801a804 	.word	0x0801a804
 800ef7c:	24009b24 	.word	0x24009b24
 800ef80:	0801a860 	.word	0x0801a860
 800ef84:	0800ecb5 	.word	0x0800ecb5
 800ef88:	0801a884 	.word	0x0801a884

0800ef8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ef96:	88fb      	ldrh	r3, [r7, #6]
 800ef98:	021b      	lsls	r3, r3, #8
 800ef9a:	b21a      	sxth	r2, r3
 800ef9c:	88fb      	ldrh	r3, [r7, #6]
 800ef9e:	0a1b      	lsrs	r3, r3, #8
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	b21b      	sxth	r3, r3
 800efa4:	4313      	orrs	r3, r2
 800efa6:	b21b      	sxth	r3, r3
 800efa8:	b29b      	uxth	r3, r3
}
 800efaa:	4618      	mov	r0, r3
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800efb6:	b480      	push	{r7}
 800efb8:	b083      	sub	sp, #12
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	061a      	lsls	r2, r3, #24
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	021b      	lsls	r3, r3, #8
 800efc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800efca:	431a      	orrs	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	0a1b      	lsrs	r3, r3, #8
 800efd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800efd4:	431a      	orrs	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	0e1b      	lsrs	r3, r3, #24
 800efda:	4313      	orrs	r3, r2
}
 800efdc:	4618      	mov	r0, r3
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800efe8:	b480      	push	{r7}
 800efea:	b089      	sub	sp, #36	@ 0x24
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	f003 0301 	and.w	r3, r3, #1
 800f004:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00d      	beq.n	800f028 <lwip_standard_chksum+0x40>
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	dd0a      	ble.n	800f028 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	1c53      	adds	r3, r2, #1
 800f016:	61fb      	str	r3, [r7, #28]
 800f018:	f107 030e 	add.w	r3, r7, #14
 800f01c:	3301      	adds	r3, #1
 800f01e:	7812      	ldrb	r2, [r2, #0]
 800f020:	701a      	strb	r2, [r3, #0]
    len--;
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	3b01      	subs	r3, #1
 800f026:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f02c:	e00a      	b.n	800f044 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	1c9a      	adds	r2, r3, #2
 800f032:	61ba      	str	r2, [r7, #24]
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	4413      	add	r3, r2
 800f03c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	3b02      	subs	r3, #2
 800f042:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b01      	cmp	r3, #1
 800f048:	dcf1      	bgt.n	800f02e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	dd04      	ble.n	800f05a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f050:	f107 030e 	add.w	r3, r7, #14
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	7812      	ldrb	r2, [r2, #0]
 800f058:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f05a:	89fb      	ldrh	r3, [r7, #14]
 800f05c:	461a      	mov	r2, r3
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	4413      	add	r3, r2
 800f062:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	0c1a      	lsrs	r2, r3, #16
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4413      	add	r3, r2
 800f06e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	0c1a      	lsrs	r2, r3, #16
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	b29b      	uxth	r3, r3
 800f078:	4413      	add	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d007      	beq.n	800f092 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	021b      	lsls	r3, r3, #8
 800f086:	b29a      	uxth	r2, r3
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	4313      	orrs	r3, r2
 800f090:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	b29b      	uxth	r3, r3
}
 800f096:	4618      	mov	r0, r3
 800f098:	3724      	adds	r7, #36	@ 0x24
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f0ae:	887b      	ldrh	r3, [r7, #2]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff ff98 	bl	800efe8 <lwip_standard_chksum>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	43db      	mvns	r3, r3
 800f0bc:	b29b      	uxth	r3, r3
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b086      	sub	sp, #24
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	613b      	str	r3, [r7, #16]
 800f0da:	e02b      	b.n	800f134 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	685a      	ldr	r2, [r3, #4]
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	895b      	ldrh	r3, [r3, #10]
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	4610      	mov	r0, r2
 800f0e8:	f7ff ff7e 	bl	800efe8 <lwip_standard_chksum>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	0c1a      	lsrs	r2, r3, #16
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	4413      	add	r3, r2
 800f100:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	895b      	ldrh	r3, [r3, #10]
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00e      	beq.n	800f12e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	bf0c      	ite	eq
 800f116:	2301      	moveq	r3, #1
 800f118:	2300      	movne	r3, #0
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	021b      	lsls	r3, r3, #8
 800f122:	b29a      	uxth	r2, r3
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	0a1b      	lsrs	r3, r3, #8
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	4313      	orrs	r3, r2
 800f12c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	613b      	str	r3, [r7, #16]
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1d0      	bne.n	800f0dc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d007      	beq.n	800f150 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	021b      	lsls	r3, r3, #8
 800f144:	b29a      	uxth	r2, r3
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	0a1b      	lsrs	r3, r3, #8
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	4313      	orrs	r3, r2
 800f14e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	b29b      	uxth	r3, r3
 800f154:	43db      	mvns	r3, r3
 800f156:	b29b      	uxth	r3, r3
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3718      	adds	r7, #24
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f16a:	f00a f9b1 	bl	80194d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f16e:	f000 f8d9 	bl	800f324 <mem_init>
  memp_init();
 800f172:	f000 fc3d 	bl	800f9f0 <memp_init>
  pbuf_init();
  netif_init();
 800f176:	f000 fd49 	bl	800fc0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f17a:	f007 f947 	bl	801640c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f17e:	f001 fe6d 	bl	8010e5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f182:	f007 f889 	bl	8016298 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f186:	bf00      	nop
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f19a:	4b05      	ldr	r3, [pc, #20]	@ (800f1b0 <ptr_to_mem+0x20>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	88fb      	ldrh	r3, [r7, #6]
 800f1a0:	4413      	add	r3, r2
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	24009b40 	.word	0x24009b40

0800f1b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f1bc:	4b05      	ldr	r3, [pc, #20]	@ (800f1d4 <mem_to_ptr+0x20>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	b29b      	uxth	r3, r3
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	24009b40 	.word	0x24009b40

0800f1d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f1d8:	b590      	push	{r4, r7, lr}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f1e0:	4b47      	ldr	r3, [pc, #284]	@ (800f300 <plug_holes+0x128>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d206      	bcs.n	800f1f8 <plug_holes+0x20>
 800f1ea:	4b46      	ldr	r3, [pc, #280]	@ (800f304 <plug_holes+0x12c>)
 800f1ec:	f240 12df 	movw	r2, #479	@ 0x1df
 800f1f0:	4945      	ldr	r1, [pc, #276]	@ (800f308 <plug_holes+0x130>)
 800f1f2:	4846      	ldr	r0, [pc, #280]	@ (800f30c <plug_holes+0x134>)
 800f1f4:	f00a faf6 	bl	80197e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f1f8:	4b45      	ldr	r3, [pc, #276]	@ (800f310 <plug_holes+0x138>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d306      	bcc.n	800f210 <plug_holes+0x38>
 800f202:	4b40      	ldr	r3, [pc, #256]	@ (800f304 <plug_holes+0x12c>)
 800f204:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f208:	4942      	ldr	r1, [pc, #264]	@ (800f314 <plug_holes+0x13c>)
 800f20a:	4840      	ldr	r0, [pc, #256]	@ (800f30c <plug_holes+0x134>)
 800f20c:	f00a faea 	bl	80197e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	791b      	ldrb	r3, [r3, #4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <plug_holes+0x4e>
 800f218:	4b3a      	ldr	r3, [pc, #232]	@ (800f304 <plug_holes+0x12c>)
 800f21a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f21e:	493e      	ldr	r1, [pc, #248]	@ (800f318 <plug_holes+0x140>)
 800f220:	483a      	ldr	r0, [pc, #232]	@ (800f30c <plug_holes+0x134>)
 800f222:	f00a fadf 	bl	80197e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f22e:	4293      	cmp	r3, r2
 800f230:	d906      	bls.n	800f240 <plug_holes+0x68>
 800f232:	4b34      	ldr	r3, [pc, #208]	@ (800f304 <plug_holes+0x12c>)
 800f234:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f238:	4938      	ldr	r1, [pc, #224]	@ (800f31c <plug_holes+0x144>)
 800f23a:	4834      	ldr	r0, [pc, #208]	@ (800f30c <plug_holes+0x134>)
 800f23c:	f00a fad2 	bl	80197e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ffa3 	bl	800f190 <ptr_to_mem>
 800f24a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	429a      	cmp	r2, r3
 800f252:	d025      	beq.n	800f2a0 <plug_holes+0xc8>
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	791b      	ldrb	r3, [r3, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d121      	bne.n	800f2a0 <plug_holes+0xc8>
 800f25c:	4b2c      	ldr	r3, [pc, #176]	@ (800f310 <plug_holes+0x138>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	429a      	cmp	r2, r3
 800f264:	d01c      	beq.n	800f2a0 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f266:	4b2e      	ldr	r3, [pc, #184]	@ (800f320 <plug_holes+0x148>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d102      	bne.n	800f276 <plug_holes+0x9e>
      lfree = mem;
 800f270:	4a2b      	ldr	r2, [pc, #172]	@ (800f320 <plug_holes+0x148>)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	881a      	ldrh	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f286:	4293      	cmp	r3, r2
 800f288:	d00a      	beq.n	800f2a0 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff ff7e 	bl	800f190 <ptr_to_mem>
 800f294:	4604      	mov	r4, r0
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7ff ff8c 	bl	800f1b4 <mem_to_ptr>
 800f29c:	4603      	mov	r3, r0
 800f29e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	885b      	ldrh	r3, [r3, #2]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff ff73 	bl	800f190 <ptr_to_mem>
 800f2aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f2ac:	68ba      	ldr	r2, [r7, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d020      	beq.n	800f2f6 <plug_holes+0x11e>
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	791b      	ldrb	r3, [r3, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d11c      	bne.n	800f2f6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f2bc:	4b18      	ldr	r3, [pc, #96]	@ (800f320 <plug_holes+0x148>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d102      	bne.n	800f2cc <plug_holes+0xf4>
      lfree = pmem;
 800f2c6:	4a16      	ldr	r2, [pc, #88]	@ (800f320 <plug_holes+0x148>)
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	881a      	ldrh	r2, [r3, #0]
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	881b      	ldrh	r3, [r3, #0]
 800f2d8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d00a      	beq.n	800f2f6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff ff53 	bl	800f190 <ptr_to_mem>
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	68b8      	ldr	r0, [r7, #8]
 800f2ee:	f7ff ff61 	bl	800f1b4 <mem_to_ptr>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f2f6:	bf00      	nop
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd90      	pop	{r4, r7, pc}
 800f2fe:	bf00      	nop
 800f300:	24009b40 	.word	0x24009b40
 800f304:	0801a894 	.word	0x0801a894
 800f308:	0801a8c4 	.word	0x0801a8c4
 800f30c:	0801a8dc 	.word	0x0801a8dc
 800f310:	24009b44 	.word	0x24009b44
 800f314:	0801a904 	.word	0x0801a904
 800f318:	0801a920 	.word	0x0801a920
 800f31c:	0801a93c 	.word	0x0801a93c
 800f320:	24009b4c 	.word	0x24009b4c

0800f324 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f32a:	4b1d      	ldr	r3, [pc, #116]	@ (800f3a0 <mem_init+0x7c>)
 800f32c:	4a1d      	ldr	r2, [pc, #116]	@ (800f3a4 <mem_init+0x80>)
 800f32e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f330:	4b1b      	ldr	r3, [pc, #108]	@ (800f3a0 <mem_init+0x7c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f33c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f34a:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 800f34e:	f7ff ff1f 	bl	800f190 <ptr_to_mem>
 800f352:	4603      	mov	r3, r0
 800f354:	4a14      	ldr	r2, [pc, #80]	@ (800f3a8 <mem_init+0x84>)
 800f356:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f358:	4b13      	ldr	r3, [pc, #76]	@ (800f3a8 <mem_init+0x84>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2201      	movs	r2, #1
 800f35e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f360:	4b11      	ldr	r3, [pc, #68]	@ (800f3a8 <mem_init+0x84>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f368:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f36a:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a8 <mem_init+0x84>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f372:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f374:	4b0a      	ldr	r3, [pc, #40]	@ (800f3a0 <mem_init+0x7c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	4a0c      	ldr	r2, [pc, #48]	@ (800f3ac <mem_init+0x88>)
 800f37a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f37c:	480c      	ldr	r0, [pc, #48]	@ (800f3b0 <mem_init+0x8c>)
 800f37e:	f00a f8b5 	bl	80194ec <sys_mutex_new>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d006      	beq.n	800f396 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f388:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b4 <mem_init+0x90>)
 800f38a:	f240 221f 	movw	r2, #543	@ 0x21f
 800f38e:	490a      	ldr	r1, [pc, #40]	@ (800f3b8 <mem_init+0x94>)
 800f390:	480a      	ldr	r0, [pc, #40]	@ (800f3bc <mem_init+0x98>)
 800f392:	f00a fa27 	bl	80197e4 <iprintf>
  }
}
 800f396:	bf00      	nop
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	24009b40 	.word	0x24009b40
 800f3a4:	30000200 	.word	0x30000200
 800f3a8:	24009b44 	.word	0x24009b44
 800f3ac:	24009b4c 	.word	0x24009b4c
 800f3b0:	24009b48 	.word	0x24009b48
 800f3b4:	0801a894 	.word	0x0801a894
 800f3b8:	0801a968 	.word	0x0801a968
 800f3bc:	0801a8dc 	.word	0x0801a8dc

0800f3c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7ff fef3 	bl	800f1b4 <mem_to_ptr>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff feda 	bl	800f190 <ptr_to_mem>
 800f3dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	885b      	ldrh	r3, [r3, #2]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7ff fed4 	bl	800f190 <ptr_to_mem>
 800f3e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d819      	bhi.n	800f42a <mem_link_valid+0x6a>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	885b      	ldrh	r3, [r3, #2]
 800f3fa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d813      	bhi.n	800f42a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f406:	8afa      	ldrh	r2, [r7, #22]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d004      	beq.n	800f416 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	881b      	ldrh	r3, [r3, #0]
 800f410:	8afa      	ldrh	r2, [r7, #22]
 800f412:	429a      	cmp	r2, r3
 800f414:	d109      	bne.n	800f42a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f416:	4b08      	ldr	r3, [pc, #32]	@ (800f438 <mem_link_valid+0x78>)
 800f418:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d006      	beq.n	800f42e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	885b      	ldrh	r3, [r3, #2]
 800f424:	8afa      	ldrh	r2, [r7, #22]
 800f426:	429a      	cmp	r2, r3
 800f428:	d001      	beq.n	800f42e <mem_link_valid+0x6e>
    return 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	e000      	b.n	800f430 <mem_link_valid+0x70>
  }
  return 1;
 800f42e:	2301      	movs	r3, #1
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	24009b44 	.word	0x24009b44

0800f43c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d070      	beq.n	800f52c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f003 0303 	and.w	r3, r3, #3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00d      	beq.n	800f470 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f454:	4b37      	ldr	r3, [pc, #220]	@ (800f534 <mem_free+0xf8>)
 800f456:	f240 2273 	movw	r2, #627	@ 0x273
 800f45a:	4937      	ldr	r1, [pc, #220]	@ (800f538 <mem_free+0xfc>)
 800f45c:	4837      	ldr	r0, [pc, #220]	@ (800f53c <mem_free+0x100>)
 800f45e:	f00a f9c1 	bl	80197e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f462:	f00a f8a1 	bl	80195a8 <sys_arch_protect>
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f00a f8ab 	bl	80195c4 <sys_arch_unprotect>
    return;
 800f46e:	e05e      	b.n	800f52e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3b08      	subs	r3, #8
 800f474:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f476:	4b32      	ldr	r3, [pc, #200]	@ (800f540 <mem_free+0x104>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	69fa      	ldr	r2, [r7, #28]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d306      	bcc.n	800f48e <mem_free+0x52>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f103 020c 	add.w	r2, r3, #12
 800f486:	4b2f      	ldr	r3, [pc, #188]	@ (800f544 <mem_free+0x108>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d90d      	bls.n	800f4aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f48e:	4b29      	ldr	r3, [pc, #164]	@ (800f534 <mem_free+0xf8>)
 800f490:	f240 227f 	movw	r2, #639	@ 0x27f
 800f494:	492c      	ldr	r1, [pc, #176]	@ (800f548 <mem_free+0x10c>)
 800f496:	4829      	ldr	r0, [pc, #164]	@ (800f53c <mem_free+0x100>)
 800f498:	f00a f9a4 	bl	80197e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f49c:	f00a f884 	bl	80195a8 <sys_arch_protect>
 800f4a0:	6138      	str	r0, [r7, #16]
 800f4a2:	6938      	ldr	r0, [r7, #16]
 800f4a4:	f00a f88e 	bl	80195c4 <sys_arch_unprotect>
    return;
 800f4a8:	e041      	b.n	800f52e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f4aa:	4828      	ldr	r0, [pc, #160]	@ (800f54c <mem_free+0x110>)
 800f4ac:	f00a f83a 	bl	8019524 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	791b      	ldrb	r3, [r3, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d110      	bne.n	800f4da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f4b8:	4b1e      	ldr	r3, [pc, #120]	@ (800f534 <mem_free+0xf8>)
 800f4ba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f4be:	4924      	ldr	r1, [pc, #144]	@ (800f550 <mem_free+0x114>)
 800f4c0:	481e      	ldr	r0, [pc, #120]	@ (800f53c <mem_free+0x100>)
 800f4c2:	f00a f98f 	bl	80197e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f4c6:	4821      	ldr	r0, [pc, #132]	@ (800f54c <mem_free+0x110>)
 800f4c8:	f00a f83b 	bl	8019542 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4cc:	f00a f86c 	bl	80195a8 <sys_arch_protect>
 800f4d0:	6178      	str	r0, [r7, #20]
 800f4d2:	6978      	ldr	r0, [r7, #20]
 800f4d4:	f00a f876 	bl	80195c4 <sys_arch_unprotect>
    return;
 800f4d8:	e029      	b.n	800f52e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f4da:	69f8      	ldr	r0, [r7, #28]
 800f4dc:	f7ff ff70 	bl	800f3c0 <mem_link_valid>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d110      	bne.n	800f508 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f4e6:	4b13      	ldr	r3, [pc, #76]	@ (800f534 <mem_free+0xf8>)
 800f4e8:	f240 2295 	movw	r2, #661	@ 0x295
 800f4ec:	4919      	ldr	r1, [pc, #100]	@ (800f554 <mem_free+0x118>)
 800f4ee:	4813      	ldr	r0, [pc, #76]	@ (800f53c <mem_free+0x100>)
 800f4f0:	f00a f978 	bl	80197e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f4f4:	4815      	ldr	r0, [pc, #84]	@ (800f54c <mem_free+0x110>)
 800f4f6:	f00a f824 	bl	8019542 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4fa:	f00a f855 	bl	80195a8 <sys_arch_protect>
 800f4fe:	61b8      	str	r0, [r7, #24]
 800f500:	69b8      	ldr	r0, [r7, #24]
 800f502:	f00a f85f 	bl	80195c4 <sys_arch_unprotect>
    return;
 800f506:	e012      	b.n	800f52e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	2200      	movs	r2, #0
 800f50c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f50e:	4b12      	ldr	r3, [pc, #72]	@ (800f558 <mem_free+0x11c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	69fa      	ldr	r2, [r7, #28]
 800f514:	429a      	cmp	r2, r3
 800f516:	d202      	bcs.n	800f51e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f518:	4a0f      	ldr	r2, [pc, #60]	@ (800f558 <mem_free+0x11c>)
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f51e:	69f8      	ldr	r0, [r7, #28]
 800f520:	f7ff fe5a 	bl	800f1d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f524:	4809      	ldr	r0, [pc, #36]	@ (800f54c <mem_free+0x110>)
 800f526:	f00a f80c 	bl	8019542 <sys_mutex_unlock>
 800f52a:	e000      	b.n	800f52e <mem_free+0xf2>
    return;
 800f52c:	bf00      	nop
}
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	0801a894 	.word	0x0801a894
 800f538:	0801a984 	.word	0x0801a984
 800f53c:	0801a8dc 	.word	0x0801a8dc
 800f540:	24009b40 	.word	0x24009b40
 800f544:	24009b44 	.word	0x24009b44
 800f548:	0801a9a8 	.word	0x0801a9a8
 800f54c:	24009b48 	.word	0x24009b48
 800f550:	0801a9c4 	.word	0x0801a9c4
 800f554:	0801a9ec 	.word	0x0801a9ec
 800f558:	24009b4c 	.word	0x24009b4c

0800f55c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b088      	sub	sp, #32
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f568:	887b      	ldrh	r3, [r7, #2]
 800f56a:	3303      	adds	r3, #3
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	f023 0303 	bic.w	r3, r3, #3
 800f572:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f574:	8bfb      	ldrh	r3, [r7, #30]
 800f576:	2b0b      	cmp	r3, #11
 800f578:	d801      	bhi.n	800f57e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f57a:	230c      	movs	r3, #12
 800f57c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f57e:	8bfb      	ldrh	r3, [r7, #30]
 800f580:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f584:	4293      	cmp	r3, r2
 800f586:	d803      	bhi.n	800f590 <mem_trim+0x34>
 800f588:	8bfa      	ldrh	r2, [r7, #30]
 800f58a:	887b      	ldrh	r3, [r7, #2]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d201      	bcs.n	800f594 <mem_trim+0x38>
    return NULL;
 800f590:	2300      	movs	r3, #0
 800f592:	e0dc      	b.n	800f74e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f594:	4b70      	ldr	r3, [pc, #448]	@ (800f758 <mem_trim+0x1fc>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d304      	bcc.n	800f5a8 <mem_trim+0x4c>
 800f59e:	4b6f      	ldr	r3, [pc, #444]	@ (800f75c <mem_trim+0x200>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d306      	bcc.n	800f5b6 <mem_trim+0x5a>
 800f5a8:	4b6d      	ldr	r3, [pc, #436]	@ (800f760 <mem_trim+0x204>)
 800f5aa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f5ae:	496d      	ldr	r1, [pc, #436]	@ (800f764 <mem_trim+0x208>)
 800f5b0:	486d      	ldr	r0, [pc, #436]	@ (800f768 <mem_trim+0x20c>)
 800f5b2:	f00a f917 	bl	80197e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f5b6:	4b68      	ldr	r3, [pc, #416]	@ (800f758 <mem_trim+0x1fc>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d304      	bcc.n	800f5ca <mem_trim+0x6e>
 800f5c0:	4b66      	ldr	r3, [pc, #408]	@ (800f75c <mem_trim+0x200>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d307      	bcc.n	800f5da <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f5ca:	f009 ffed 	bl	80195a8 <sys_arch_protect>
 800f5ce:	60b8      	str	r0, [r7, #8]
 800f5d0:	68b8      	ldr	r0, [r7, #8]
 800f5d2:	f009 fff7 	bl	80195c4 <sys_arch_unprotect>
    return rmem;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	e0b9      	b.n	800f74e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	3b08      	subs	r3, #8
 800f5de:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f5e0:	69b8      	ldr	r0, [r7, #24]
 800f5e2:	f7ff fde7 	bl	800f1b4 <mem_to_ptr>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	881a      	ldrh	r2, [r3, #0]
 800f5ee:	8afb      	ldrh	r3, [r7, #22]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	3b08      	subs	r3, #8
 800f5f6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f5f8:	8bfa      	ldrh	r2, [r7, #30]
 800f5fa:	8abb      	ldrh	r3, [r7, #20]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d906      	bls.n	800f60e <mem_trim+0xb2>
 800f600:	4b57      	ldr	r3, [pc, #348]	@ (800f760 <mem_trim+0x204>)
 800f602:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f606:	4959      	ldr	r1, [pc, #356]	@ (800f76c <mem_trim+0x210>)
 800f608:	4857      	ldr	r0, [pc, #348]	@ (800f768 <mem_trim+0x20c>)
 800f60a:	f00a f8eb 	bl	80197e4 <iprintf>
  if (newsize > size) {
 800f60e:	8bfa      	ldrh	r2, [r7, #30]
 800f610:	8abb      	ldrh	r3, [r7, #20]
 800f612:	429a      	cmp	r2, r3
 800f614:	d901      	bls.n	800f61a <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800f616:	2300      	movs	r3, #0
 800f618:	e099      	b.n	800f74e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800f61a:	8bfa      	ldrh	r2, [r7, #30]
 800f61c:	8abb      	ldrh	r3, [r7, #20]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d101      	bne.n	800f626 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	e093      	b.n	800f74e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f626:	4852      	ldr	r0, [pc, #328]	@ (800f770 <mem_trim+0x214>)
 800f628:	f009 ff7c 	bl	8019524 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f62c:	69bb      	ldr	r3, [r7, #24]
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	4618      	mov	r0, r3
 800f632:	f7ff fdad 	bl	800f190 <ptr_to_mem>
 800f636:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	791b      	ldrb	r3, [r3, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d141      	bne.n	800f6c4 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f648:	4293      	cmp	r3, r2
 800f64a:	d106      	bne.n	800f65a <mem_trim+0xfe>
 800f64c:	4b44      	ldr	r3, [pc, #272]	@ (800f760 <mem_trim+0x204>)
 800f64e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f652:	4948      	ldr	r1, [pc, #288]	@ (800f774 <mem_trim+0x218>)
 800f654:	4844      	ldr	r0, [pc, #272]	@ (800f768 <mem_trim+0x20c>)
 800f656:	f00a f8c5 	bl	80197e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f660:	8afa      	ldrh	r2, [r7, #22]
 800f662:	8bfb      	ldrh	r3, [r7, #30]
 800f664:	4413      	add	r3, r2
 800f666:	b29b      	uxth	r3, r3
 800f668:	3308      	adds	r3, #8
 800f66a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f66c:	4b42      	ldr	r3, [pc, #264]	@ (800f778 <mem_trim+0x21c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	429a      	cmp	r2, r3
 800f674:	d106      	bne.n	800f684 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff fd89 	bl	800f190 <ptr_to_mem>
 800f67e:	4603      	mov	r3, r0
 800f680:	4a3d      	ldr	r2, [pc, #244]	@ (800f778 <mem_trim+0x21c>)
 800f682:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f684:	89fb      	ldrh	r3, [r7, #14]
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff fd82 	bl	800f190 <ptr_to_mem>
 800f68c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2200      	movs	r2, #0
 800f692:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	89ba      	ldrh	r2, [r7, #12]
 800f698:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	8afa      	ldrh	r2, [r7, #22]
 800f69e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	89fa      	ldrh	r2, [r7, #14]
 800f6a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	881b      	ldrh	r3, [r3, #0]
 800f6aa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d049      	beq.n	800f746 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff fd6a 	bl	800f190 <ptr_to_mem>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	89fb      	ldrh	r3, [r7, #14]
 800f6c0:	8053      	strh	r3, [r2, #2]
 800f6c2:	e040      	b.n	800f746 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f6c4:	8bfb      	ldrh	r3, [r7, #30]
 800f6c6:	f103 0214 	add.w	r2, r3, #20
 800f6ca:	8abb      	ldrh	r3, [r7, #20]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d83a      	bhi.n	800f746 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f6d0:	8afa      	ldrh	r2, [r7, #22]
 800f6d2:	8bfb      	ldrh	r3, [r7, #30]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	3308      	adds	r3, #8
 800f6da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	881b      	ldrh	r3, [r3, #0]
 800f6e0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d106      	bne.n	800f6f6 <mem_trim+0x19a>
 800f6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f760 <mem_trim+0x204>)
 800f6ea:	f240 3216 	movw	r2, #790	@ 0x316
 800f6ee:	4921      	ldr	r1, [pc, #132]	@ (800f774 <mem_trim+0x218>)
 800f6f0:	481d      	ldr	r0, [pc, #116]	@ (800f768 <mem_trim+0x20c>)
 800f6f2:	f00a f877 	bl	80197e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f6f6:	89fb      	ldrh	r3, [r7, #14]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7ff fd49 	bl	800f190 <ptr_to_mem>
 800f6fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f700:	4b1d      	ldr	r3, [pc, #116]	@ (800f778 <mem_trim+0x21c>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	429a      	cmp	r2, r3
 800f708:	d202      	bcs.n	800f710 <mem_trim+0x1b4>
      lfree = mem2;
 800f70a:	4a1b      	ldr	r2, [pc, #108]	@ (800f778 <mem_trim+0x21c>)
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	2200      	movs	r2, #0
 800f714:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	881a      	ldrh	r2, [r3, #0]
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	8afa      	ldrh	r2, [r7, #22]
 800f722:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	89fa      	ldrh	r2, [r7, #14]
 800f728:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f732:	4293      	cmp	r3, r2
 800f734:	d007      	beq.n	800f746 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7ff fd28 	bl	800f190 <ptr_to_mem>
 800f740:	4602      	mov	r2, r0
 800f742:	89fb      	ldrh	r3, [r7, #14]
 800f744:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f746:	480a      	ldr	r0, [pc, #40]	@ (800f770 <mem_trim+0x214>)
 800f748:	f009 fefb 	bl	8019542 <sys_mutex_unlock>
  return rmem;
 800f74c:	687b      	ldr	r3, [r7, #4]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3720      	adds	r7, #32
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	24009b40 	.word	0x24009b40
 800f75c:	24009b44 	.word	0x24009b44
 800f760:	0801a894 	.word	0x0801a894
 800f764:	0801aa20 	.word	0x0801aa20
 800f768:	0801a8dc 	.word	0x0801a8dc
 800f76c:	0801aa38 	.word	0x0801aa38
 800f770:	24009b48 	.word	0x24009b48
 800f774:	0801aa58 	.word	0x0801aa58
 800f778:	24009b4c 	.word	0x24009b4c

0800f77c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af00      	add	r7, sp, #0
 800f782:	4603      	mov	r3, r0
 800f784:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f786:	88fb      	ldrh	r3, [r7, #6]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <mem_malloc+0x14>
    return NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	e0e6      	b.n	800f95e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	3303      	adds	r3, #3
 800f794:	b29b      	uxth	r3, r3
 800f796:	f023 0303 	bic.w	r3, r3, #3
 800f79a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f79c:	8bbb      	ldrh	r3, [r7, #28]
 800f79e:	2b0b      	cmp	r3, #11
 800f7a0:	d801      	bhi.n	800f7a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f7a2:	230c      	movs	r3, #12
 800f7a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f7a6:	8bbb      	ldrh	r3, [r7, #28]
 800f7a8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d803      	bhi.n	800f7b8 <mem_malloc+0x3c>
 800f7b0:	8bba      	ldrh	r2, [r7, #28]
 800f7b2:	88fb      	ldrh	r3, [r7, #6]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d201      	bcs.n	800f7bc <mem_malloc+0x40>
    return NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	e0d0      	b.n	800f95e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f7bc:	486a      	ldr	r0, [pc, #424]	@ (800f968 <mem_malloc+0x1ec>)
 800f7be:	f009 feb1 	bl	8019524 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f7c2:	4b6a      	ldr	r3, [pc, #424]	@ (800f96c <mem_malloc+0x1f0>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7ff fcf4 	bl	800f1b4 <mem_to_ptr>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	83fb      	strh	r3, [r7, #30]
 800f7d0:	e0b9      	b.n	800f946 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f7d2:	8bfb      	ldrh	r3, [r7, #30]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7ff fcdb 	bl	800f190 <ptr_to_mem>
 800f7da:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	791b      	ldrb	r3, [r3, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f040 80a9 	bne.w	800f938 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	8bfb      	ldrh	r3, [r7, #30]
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	f1a3 0208 	sub.w	r2, r3, #8
 800f7f4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	f0c0 809e 	bcc.w	800f938 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	461a      	mov	r2, r3
 800f802:	8bfb      	ldrh	r3, [r7, #30]
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	f1a3 0208 	sub.w	r2, r3, #8
 800f80a:	8bbb      	ldrh	r3, [r7, #28]
 800f80c:	3314      	adds	r3, #20
 800f80e:	429a      	cmp	r2, r3
 800f810:	d335      	bcc.n	800f87e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f812:	8bfa      	ldrh	r2, [r7, #30]
 800f814:	8bbb      	ldrh	r3, [r7, #28]
 800f816:	4413      	add	r3, r2
 800f818:	b29b      	uxth	r3, r3
 800f81a:	3308      	adds	r3, #8
 800f81c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f81e:	8a7b      	ldrh	r3, [r7, #18]
 800f820:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f824:	4293      	cmp	r3, r2
 800f826:	d106      	bne.n	800f836 <mem_malloc+0xba>
 800f828:	4b51      	ldr	r3, [pc, #324]	@ (800f970 <mem_malloc+0x1f4>)
 800f82a:	f240 3287 	movw	r2, #903	@ 0x387
 800f82e:	4951      	ldr	r1, [pc, #324]	@ (800f974 <mem_malloc+0x1f8>)
 800f830:	4851      	ldr	r0, [pc, #324]	@ (800f978 <mem_malloc+0x1fc>)
 800f832:	f009 ffd7 	bl	80197e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f836:	8a7b      	ldrh	r3, [r7, #18]
 800f838:	4618      	mov	r0, r3
 800f83a:	f7ff fca9 	bl	800f190 <ptr_to_mem>
 800f83e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	881a      	ldrh	r2, [r3, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	8bfa      	ldrh	r2, [r7, #30]
 800f852:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	8a7a      	ldrh	r2, [r7, #18]
 800f858:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	2201      	movs	r2, #1
 800f85e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00b      	beq.n	800f884 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	881b      	ldrh	r3, [r3, #0]
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff fc8d 	bl	800f190 <ptr_to_mem>
 800f876:	4602      	mov	r2, r0
 800f878:	8a7b      	ldrh	r3, [r7, #18]
 800f87a:	8053      	strh	r3, [r2, #2]
 800f87c:	e002      	b.n	800f884 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2201      	movs	r2, #1
 800f882:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f884:	4b39      	ldr	r3, [pc, #228]	@ (800f96c <mem_malloc+0x1f0>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d127      	bne.n	800f8de <mem_malloc+0x162>
          struct mem *cur = lfree;
 800f88e:	4b37      	ldr	r3, [pc, #220]	@ (800f96c <mem_malloc+0x1f0>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f894:	e005      	b.n	800f8a2 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	881b      	ldrh	r3, [r3, #0]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7ff fc78 	bl	800f190 <ptr_to_mem>
 800f8a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	791b      	ldrb	r3, [r3, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <mem_malloc+0x138>
 800f8aa:	4b34      	ldr	r3, [pc, #208]	@ (800f97c <mem_malloc+0x200>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d1f0      	bne.n	800f896 <mem_malloc+0x11a>
          }
          lfree = cur;
 800f8b4:	4a2d      	ldr	r2, [pc, #180]	@ (800f96c <mem_malloc+0x1f0>)
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f8ba:	4b2c      	ldr	r3, [pc, #176]	@ (800f96c <mem_malloc+0x1f0>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	4b2f      	ldr	r3, [pc, #188]	@ (800f97c <mem_malloc+0x200>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d00b      	beq.n	800f8de <mem_malloc+0x162>
 800f8c6:	4b29      	ldr	r3, [pc, #164]	@ (800f96c <mem_malloc+0x1f0>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	791b      	ldrb	r3, [r3, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d006      	beq.n	800f8de <mem_malloc+0x162>
 800f8d0:	4b27      	ldr	r3, [pc, #156]	@ (800f970 <mem_malloc+0x1f4>)
 800f8d2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f8d6:	492a      	ldr	r1, [pc, #168]	@ (800f980 <mem_malloc+0x204>)
 800f8d8:	4827      	ldr	r0, [pc, #156]	@ (800f978 <mem_malloc+0x1fc>)
 800f8da:	f009 ff83 	bl	80197e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f8de:	4822      	ldr	r0, [pc, #136]	@ (800f968 <mem_malloc+0x1ec>)
 800f8e0:	f009 fe2f 	bl	8019542 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f8e4:	8bba      	ldrh	r2, [r7, #28]
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	4a23      	ldr	r2, [pc, #140]	@ (800f97c <mem_malloc+0x200>)
 800f8ee:	6812      	ldr	r2, [r2, #0]
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d906      	bls.n	800f902 <mem_malloc+0x186>
 800f8f4:	4b1e      	ldr	r3, [pc, #120]	@ (800f970 <mem_malloc+0x1f4>)
 800f8f6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f8fa:	4922      	ldr	r1, [pc, #136]	@ (800f984 <mem_malloc+0x208>)
 800f8fc:	481e      	ldr	r0, [pc, #120]	@ (800f978 <mem_malloc+0x1fc>)
 800f8fe:	f009 ff71 	bl	80197e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	f003 0303 	and.w	r3, r3, #3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d006      	beq.n	800f91a <mem_malloc+0x19e>
 800f90c:	4b18      	ldr	r3, [pc, #96]	@ (800f970 <mem_malloc+0x1f4>)
 800f90e:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f912:	491d      	ldr	r1, [pc, #116]	@ (800f988 <mem_malloc+0x20c>)
 800f914:	4818      	ldr	r0, [pc, #96]	@ (800f978 <mem_malloc+0x1fc>)
 800f916:	f009 ff65 	bl	80197e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f003 0303 	and.w	r3, r3, #3
 800f920:	2b00      	cmp	r3, #0
 800f922:	d006      	beq.n	800f932 <mem_malloc+0x1b6>
 800f924:	4b12      	ldr	r3, [pc, #72]	@ (800f970 <mem_malloc+0x1f4>)
 800f926:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f92a:	4918      	ldr	r1, [pc, #96]	@ (800f98c <mem_malloc+0x210>)
 800f92c:	4812      	ldr	r0, [pc, #72]	@ (800f978 <mem_malloc+0x1fc>)
 800f92e:	f009 ff59 	bl	80197e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	3308      	adds	r3, #8
 800f936:	e012      	b.n	800f95e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800f938:	8bfb      	ldrh	r3, [r7, #30]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff fc28 	bl	800f190 <ptr_to_mem>
 800f940:	4603      	mov	r3, r0
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f946:	8bfa      	ldrh	r2, [r7, #30]
 800f948:	8bb9      	ldrh	r1, [r7, #28]
 800f94a:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 800f94e:	1a5b      	subs	r3, r3, r1
 800f950:	429a      	cmp	r2, r3
 800f952:	f4ff af3e 	bcc.w	800f7d2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f956:	4804      	ldr	r0, [pc, #16]	@ (800f968 <mem_malloc+0x1ec>)
 800f958:	f009 fdf3 	bl	8019542 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3720      	adds	r7, #32
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	24009b48 	.word	0x24009b48
 800f96c:	24009b4c 	.word	0x24009b4c
 800f970:	0801a894 	.word	0x0801a894
 800f974:	0801aa58 	.word	0x0801aa58
 800f978:	0801a8dc 	.word	0x0801a8dc
 800f97c:	24009b44 	.word	0x24009b44
 800f980:	0801aa6c 	.word	0x0801aa6c
 800f984:	0801aa88 	.word	0x0801aa88
 800f988:	0801aab8 	.word	0x0801aab8
 800f98c:	0801aae8 	.word	0x0801aae8

0800f990 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f990:	b480      	push	{r7}
 800f992:	b085      	sub	sp, #20
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	2200      	movs	r2, #0
 800f99e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	3303      	adds	r3, #3
 800f9a6:	f023 0303 	bic.w	r3, r3, #3
 800f9aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	60fb      	str	r3, [r7, #12]
 800f9b0:	e011      	b.n	800f9d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	885b      	ldrh	r3, [r3, #2]
 800f9da:	461a      	mov	r2, r3
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	dbe7      	blt.n	800f9b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	80fb      	strh	r3, [r7, #6]
 800f9fa:	e009      	b.n	800fa10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f9fc:	88fb      	ldrh	r3, [r7, #6]
 800f9fe:	4a08      	ldr	r2, [pc, #32]	@ (800fa20 <memp_init+0x30>)
 800fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7ff ffc3 	bl	800f990 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa0a:	88fb      	ldrh	r3, [r7, #6]
 800fa0c:	3301      	adds	r3, #1
 800fa0e:	80fb      	strh	r3, [r7, #6]
 800fa10:	88fb      	ldrh	r3, [r7, #6]
 800fa12:	2b0c      	cmp	r3, #12
 800fa14:	d9f2      	bls.n	800f9fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fa16:	bf00      	nop
 800fa18:	bf00      	nop
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	0801d2fc 	.word	0x0801d2fc

0800fa24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fa2c:	f009 fdbc 	bl	80195a8 <sys_arch_protect>
 800fa30:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d015      	beq.n	800fa6c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	6812      	ldr	r2, [r2, #0]
 800fa48:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	f003 0303 	and.w	r3, r3, #3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d006      	beq.n	800fa62 <do_memp_malloc_pool+0x3e>
 800fa54:	4b09      	ldr	r3, [pc, #36]	@ (800fa7c <do_memp_malloc_pool+0x58>)
 800fa56:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fa5a:	4909      	ldr	r1, [pc, #36]	@ (800fa80 <do_memp_malloc_pool+0x5c>)
 800fa5c:	4809      	ldr	r0, [pc, #36]	@ (800fa84 <do_memp_malloc_pool+0x60>)
 800fa5e:	f009 fec1 	bl	80197e4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f009 fdae 	bl	80195c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	e003      	b.n	800fa74 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f009 fda9 	bl	80195c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fa72:	2300      	movs	r3, #0
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3710      	adds	r7, #16
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	0801ab0c 	.word	0x0801ab0c
 800fa80:	0801ab3c 	.word	0x0801ab3c
 800fa84:	0801ab60 	.word	0x0801ab60

0800fa88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d106      	bne.n	800faa4 <memp_malloc_pool+0x1c>
 800fa96:	4b0a      	ldr	r3, [pc, #40]	@ (800fac0 <memp_malloc_pool+0x38>)
 800fa98:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800fa9c:	4909      	ldr	r1, [pc, #36]	@ (800fac4 <memp_malloc_pool+0x3c>)
 800fa9e:	480a      	ldr	r0, [pc, #40]	@ (800fac8 <memp_malloc_pool+0x40>)
 800faa0:	f009 fea0 	bl	80197e4 <iprintf>
  if (desc == NULL) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <memp_malloc_pool+0x26>
    return NULL;
 800faaa:	2300      	movs	r3, #0
 800faac:	e003      	b.n	800fab6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff ffb8 	bl	800fa24 <do_memp_malloc_pool>
 800fab4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0801ab0c 	.word	0x0801ab0c
 800fac4:	0801ab88 	.word	0x0801ab88
 800fac8:	0801ab60 	.word	0x0801ab60

0800facc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	2b0c      	cmp	r3, #12
 800fada:	d908      	bls.n	800faee <memp_malloc+0x22>
 800fadc:	4b0a      	ldr	r3, [pc, #40]	@ (800fb08 <memp_malloc+0x3c>)
 800fade:	f240 1257 	movw	r2, #343	@ 0x157
 800fae2:	490a      	ldr	r1, [pc, #40]	@ (800fb0c <memp_malloc+0x40>)
 800fae4:	480a      	ldr	r0, [pc, #40]	@ (800fb10 <memp_malloc+0x44>)
 800fae6:	f009 fe7d 	bl	80197e4 <iprintf>
 800faea:	2300      	movs	r3, #0
 800faec:	e008      	b.n	800fb00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800faee:	79fb      	ldrb	r3, [r7, #7]
 800faf0:	4a08      	ldr	r2, [pc, #32]	@ (800fb14 <memp_malloc+0x48>)
 800faf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff ff94 	bl	800fa24 <do_memp_malloc_pool>
 800fafc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fafe:	68fb      	ldr	r3, [r7, #12]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	0801ab0c 	.word	0x0801ab0c
 800fb0c:	0801ab9c 	.word	0x0801ab9c
 800fb10:	0801ab60 	.word	0x0801ab60
 800fb14:	0801d2fc 	.word	0x0801d2fc

0800fb18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	f003 0303 	and.w	r3, r3, #3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d006      	beq.n	800fb3a <do_memp_free_pool+0x22>
 800fb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb64 <do_memp_free_pool+0x4c>)
 800fb2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800fb32:	490d      	ldr	r1, [pc, #52]	@ (800fb68 <do_memp_free_pool+0x50>)
 800fb34:	480d      	ldr	r0, [pc, #52]	@ (800fb6c <do_memp_free_pool+0x54>)
 800fb36:	f009 fe55 	bl	80197e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fb3e:	f009 fd33 	bl	80195a8 <sys_arch_protect>
 800fb42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	68fa      	ldr	r2, [r7, #12]
 800fb54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fb56:	68b8      	ldr	r0, [r7, #8]
 800fb58:	f009 fd34 	bl	80195c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fb5c:	bf00      	nop
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	0801ab0c 	.word	0x0801ab0c
 800fb68:	0801abbc 	.word	0x0801abbc
 800fb6c:	0801ab60 	.word	0x0801ab60

0800fb70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d106      	bne.n	800fb8e <memp_free_pool+0x1e>
 800fb80:	4b0a      	ldr	r3, [pc, #40]	@ (800fbac <memp_free_pool+0x3c>)
 800fb82:	f240 1295 	movw	r2, #405	@ 0x195
 800fb86:	490a      	ldr	r1, [pc, #40]	@ (800fbb0 <memp_free_pool+0x40>)
 800fb88:	480a      	ldr	r0, [pc, #40]	@ (800fbb4 <memp_free_pool+0x44>)
 800fb8a:	f009 fe2b 	bl	80197e4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d007      	beq.n	800fba4 <memp_free_pool+0x34>
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d004      	beq.n	800fba4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fb9a:	6839      	ldr	r1, [r7, #0]
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7ff ffbb 	bl	800fb18 <do_memp_free_pool>
 800fba2:	e000      	b.n	800fba6 <memp_free_pool+0x36>
    return;
 800fba4:	bf00      	nop
}
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	0801ab0c 	.word	0x0801ab0c
 800fbb0:	0801ab88 	.word	0x0801ab88
 800fbb4:	0801ab60 	.word	0x0801ab60

0800fbb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	6039      	str	r1, [r7, #0]
 800fbc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	2b0c      	cmp	r3, #12
 800fbc8:	d907      	bls.n	800fbda <memp_free+0x22>
 800fbca:	4b0c      	ldr	r3, [pc, #48]	@ (800fbfc <memp_free+0x44>)
 800fbcc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800fbd0:	490b      	ldr	r1, [pc, #44]	@ (800fc00 <memp_free+0x48>)
 800fbd2:	480c      	ldr	r0, [pc, #48]	@ (800fc04 <memp_free+0x4c>)
 800fbd4:	f009 fe06 	bl	80197e4 <iprintf>
 800fbd8:	e00c      	b.n	800fbf4 <memp_free+0x3c>

  if (mem == NULL) {
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d008      	beq.n	800fbf2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fbe0:	79fb      	ldrb	r3, [r7, #7]
 800fbe2:	4a09      	ldr	r2, [pc, #36]	@ (800fc08 <memp_free+0x50>)
 800fbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe8:	6839      	ldr	r1, [r7, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff ff94 	bl	800fb18 <do_memp_free_pool>
 800fbf0:	e000      	b.n	800fbf4 <memp_free+0x3c>
    return;
 800fbf2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fbf4:	3708      	adds	r7, #8
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	0801ab0c 	.word	0x0801ab0c
 800fc00:	0801abdc 	.word	0x0801abdc
 800fc04:	0801ab60 	.word	0x0801ab60
 800fc08:	0801d2fc 	.word	0x0801d2fc

0800fc0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fc10:	bf00      	nop
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
	...

0800fc1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
 800fc28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d108      	bne.n	800fc42 <netif_add+0x26>
 800fc30:	4b57      	ldr	r3, [pc, #348]	@ (800fd90 <netif_add+0x174>)
 800fc32:	f240 1227 	movw	r2, #295	@ 0x127
 800fc36:	4957      	ldr	r1, [pc, #348]	@ (800fd94 <netif_add+0x178>)
 800fc38:	4857      	ldr	r0, [pc, #348]	@ (800fd98 <netif_add+0x17c>)
 800fc3a:	f009 fdd3 	bl	80197e4 <iprintf>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	e0a2      	b.n	800fd88 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d108      	bne.n	800fc5a <netif_add+0x3e>
 800fc48:	4b51      	ldr	r3, [pc, #324]	@ (800fd90 <netif_add+0x174>)
 800fc4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800fc4e:	4953      	ldr	r1, [pc, #332]	@ (800fd9c <netif_add+0x180>)
 800fc50:	4851      	ldr	r0, [pc, #324]	@ (800fd98 <netif_add+0x17c>)
 800fc52:	f009 fdc7 	bl	80197e4 <iprintf>
 800fc56:	2300      	movs	r3, #0
 800fc58:	e096      	b.n	800fd88 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fc60:	4b4f      	ldr	r3, [pc, #316]	@ (800fda0 <netif_add+0x184>)
 800fc62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fc6a:	4b4d      	ldr	r3, [pc, #308]	@ (800fda0 <netif_add+0x184>)
 800fc6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fc74:	4b4a      	ldr	r3, [pc, #296]	@ (800fda0 <netif_add+0x184>)
 800fc76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2200      	movs	r2, #0
 800fc88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	4a45      	ldr	r2, [pc, #276]	@ (800fda4 <netif_add+0x188>)
 800fc8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6a3a      	ldr	r2, [r7, #32]
 800fca8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fcaa:	4b3f      	ldr	r3, [pc, #252]	@ (800fda8 <netif_add+0x18c>)
 800fcac:	781a      	ldrb	r2, [r3, #0]
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	68b9      	ldr	r1, [r7, #8]
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f000 f913 	bl	800feec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	4798      	blx	r3
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <netif_add+0xba>
    return NULL;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e058      	b.n	800fd88 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fcdc:	2bff      	cmp	r3, #255	@ 0xff
 800fcde:	d103      	bne.n	800fce8 <netif_add+0xcc>
        netif->num = 0;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800fce8:	2300      	movs	r3, #0
 800fcea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fcec:	4b2f      	ldr	r3, [pc, #188]	@ (800fdac <netif_add+0x190>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	e02b      	b.n	800fd4c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fcf4:	697a      	ldr	r2, [r7, #20]
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d106      	bne.n	800fd0a <netif_add+0xee>
 800fcfc:	4b24      	ldr	r3, [pc, #144]	@ (800fd90 <netif_add+0x174>)
 800fcfe:	f240 128b 	movw	r2, #395	@ 0x18b
 800fd02:	492b      	ldr	r1, [pc, #172]	@ (800fdb0 <netif_add+0x194>)
 800fd04:	4824      	ldr	r0, [pc, #144]	@ (800fd98 <netif_add+0x17c>)
 800fd06:	f009 fd6d 	bl	80197e4 <iprintf>
        num_netifs++;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	2bff      	cmp	r3, #255	@ 0xff
 800fd14:	dd06      	ble.n	800fd24 <netif_add+0x108>
 800fd16:	4b1e      	ldr	r3, [pc, #120]	@ (800fd90 <netif_add+0x174>)
 800fd18:	f240 128d 	movw	r2, #397	@ 0x18d
 800fd1c:	4925      	ldr	r1, [pc, #148]	@ (800fdb4 <netif_add+0x198>)
 800fd1e:	481e      	ldr	r0, [pc, #120]	@ (800fd98 <netif_add+0x17c>)
 800fd20:	f009 fd60 	bl	80197e4 <iprintf>
        if (netif2->num == netif->num) {
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d108      	bne.n	800fd46 <netif_add+0x12a>
          netif->num++;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	b2da      	uxtb	r2, r3
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800fd44:	e005      	b.n	800fd52 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	617b      	str	r3, [r7, #20]
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1d0      	bne.n	800fcf4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1be      	bne.n	800fcd6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd5e:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd60:	d103      	bne.n	800fd6a <netif_add+0x14e>
    netif_num = 0;
 800fd62:	4b11      	ldr	r3, [pc, #68]	@ (800fda8 <netif_add+0x18c>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e006      	b.n	800fd78 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fd70:	3301      	adds	r3, #1
 800fd72:	b2da      	uxtb	r2, r3
 800fd74:	4b0c      	ldr	r3, [pc, #48]	@ (800fda8 <netif_add+0x18c>)
 800fd76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fd78:	4b0c      	ldr	r3, [pc, #48]	@ (800fdac <netif_add+0x190>)
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fd80:	4a0a      	ldr	r2, [pc, #40]	@ (800fdac <netif_add+0x190>)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fd86:	68fb      	ldr	r3, [r7, #12]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}
 800fd90:	0801abf8 	.word	0x0801abf8
 800fd94:	0801ac8c 	.word	0x0801ac8c
 800fd98:	0801ac48 	.word	0x0801ac48
 800fd9c:	0801aca8 	.word	0x0801aca8
 800fda0:	0801d370 	.word	0x0801d370
 800fda4:	080101c7 	.word	0x080101c7
 800fda8:	240105e4 	.word	0x240105e4
 800fdac:	240105dc 	.word	0x240105dc
 800fdb0:	0801accc 	.word	0x0801accc
 800fdb4:	0801ace0 	.word	0x0801ace0

0800fdb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fdc2:	6839      	ldr	r1, [r7, #0]
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f002 fb97 	bl	80124f8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fdca:	6839      	ldr	r1, [r7, #0]
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f006 ffd7 	bl	8016d80 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fdd2:	bf00      	nop
 800fdd4:	3708      	adds	r7, #8
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
	...

0800fddc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d106      	bne.n	800fdfc <netif_do_set_ipaddr+0x20>
 800fdee:	4b1d      	ldr	r3, [pc, #116]	@ (800fe64 <netif_do_set_ipaddr+0x88>)
 800fdf0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800fdf4:	491c      	ldr	r1, [pc, #112]	@ (800fe68 <netif_do_set_ipaddr+0x8c>)
 800fdf6:	481d      	ldr	r0, [pc, #116]	@ (800fe6c <netif_do_set_ipaddr+0x90>)
 800fdf8:	f009 fcf4 	bl	80197e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d106      	bne.n	800fe10 <netif_do_set_ipaddr+0x34>
 800fe02:	4b18      	ldr	r3, [pc, #96]	@ (800fe64 <netif_do_set_ipaddr+0x88>)
 800fe04:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800fe08:	4917      	ldr	r1, [pc, #92]	@ (800fe68 <netif_do_set_ipaddr+0x8c>)
 800fe0a:	4818      	ldr	r0, [pc, #96]	@ (800fe6c <netif_do_set_ipaddr+0x90>)
 800fe0c:	f009 fcea 	bl	80197e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3304      	adds	r3, #4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d01c      	beq.n	800fe58 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	3304      	adds	r3, #4
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fe2e:	f107 0314 	add.w	r3, r7, #20
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7ff ffbf 	bl	800fdb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <netif_do_set_ipaddr+0x6a>
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	e000      	b.n	800fe48 <netif_do_set_ipaddr+0x6c>
 800fe46:	2300      	movs	r3, #0
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f000 f8d2 	bl	800fff8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fe54:	2301      	movs	r3, #1
 800fe56:	e000      	b.n	800fe5a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3718      	adds	r7, #24
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801abf8 	.word	0x0801abf8
 800fe68:	0801ad10 	.word	0x0801ad10
 800fe6c:	0801ac48 	.word	0x0801ac48

0800fe70 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	3308      	adds	r3, #8
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d00a      	beq.n	800fea0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <netif_do_set_netmask+0x26>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	e000      	b.n	800fe98 <netif_do_set_netmask+0x28>
 800fe96:	2300      	movs	r3, #0
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e000      	b.n	800fea2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	60f8      	str	r0, [r7, #12]
 800feb6:	60b9      	str	r1, [r7, #8]
 800feb8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	330c      	adds	r3, #12
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d00a      	beq.n	800fede <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <netif_do_set_gw+0x26>
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	e000      	b.n	800fed6 <netif_do_set_gw+0x28>
 800fed4:	2300      	movs	r3, #0
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ff08:	4b1c      	ldr	r3, [pc, #112]	@ (800ff7c <netif_set_addr+0x90>)
 800ff0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ff12:	4b1a      	ldr	r3, [pc, #104]	@ (800ff7c <netif_set_addr+0x90>)
 800ff14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ff1c:	4b17      	ldr	r3, [pc, #92]	@ (800ff7c <netif_set_addr+0x90>)
 800ff1e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d003      	beq.n	800ff2e <netif_set_addr+0x42>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <netif_set_addr+0x46>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e000      	b.n	800ff34 <netif_set_addr+0x48>
 800ff32:	2300      	movs	r3, #0
 800ff34:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d006      	beq.n	800ff4a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ff3c:	f107 0310 	add.w	r3, r7, #16
 800ff40:	461a      	mov	r2, r3
 800ff42:	68b9      	ldr	r1, [r7, #8]
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff ff49 	bl	800fddc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ff4a:	69fa      	ldr	r2, [r7, #28]
 800ff4c:	6879      	ldr	r1, [r7, #4]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7ff ff8e 	bl	800fe70 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff ffa8 	bl	800feae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d106      	bne.n	800ff72 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ff64:	f107 0310 	add.w	r3, r7, #16
 800ff68:	461a      	mov	r2, r3
 800ff6a:	68b9      	ldr	r1, [r7, #8]
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7ff ff35 	bl	800fddc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ff72:	bf00      	nop
 800ff74:	3720      	adds	r7, #32
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	0801d370 	.word	0x0801d370

0800ff80 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ff88:	4a04      	ldr	r2, [pc, #16]	@ (800ff9c <netif_set_default+0x1c>)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ff8e:	bf00      	nop
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	240105e0 	.word	0x240105e0

0800ffa0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d107      	bne.n	800ffbe <netif_set_up+0x1e>
 800ffae:	4b0f      	ldr	r3, [pc, #60]	@ (800ffec <netif_set_up+0x4c>)
 800ffb0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ffb4:	490e      	ldr	r1, [pc, #56]	@ (800fff0 <netif_set_up+0x50>)
 800ffb6:	480f      	ldr	r0, [pc, #60]	@ (800fff4 <netif_set_up+0x54>)
 800ffb8:	f009 fc14 	bl	80197e4 <iprintf>
 800ffbc:	e013      	b.n	800ffe6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffc4:	f003 0301 	and.w	r3, r3, #1
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d10c      	bne.n	800ffe6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffd2:	f043 0301 	orr.w	r3, r3, #1
 800ffd6:	b2da      	uxtb	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ffde:	2103      	movs	r1, #3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 f809 	bl	800fff8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	0801abf8 	.word	0x0801abf8
 800fff0:	0801ad80 	.word	0x0801ad80
 800fff4:	0801ac48 	.word	0x0801ac48

0800fff8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	460b      	mov	r3, r1
 8010002:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d106      	bne.n	8010018 <netif_issue_reports+0x20>
 801000a:	4b18      	ldr	r3, [pc, #96]	@ (801006c <netif_issue_reports+0x74>)
 801000c:	f240 326d 	movw	r2, #877	@ 0x36d
 8010010:	4917      	ldr	r1, [pc, #92]	@ (8010070 <netif_issue_reports+0x78>)
 8010012:	4818      	ldr	r0, [pc, #96]	@ (8010074 <netif_issue_reports+0x7c>)
 8010014:	f009 fbe6 	bl	80197e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801001e:	f003 0304 	and.w	r3, r3, #4
 8010022:	2b00      	cmp	r3, #0
 8010024:	d01e      	beq.n	8010064 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801002c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010030:	2b00      	cmp	r3, #0
 8010032:	d017      	beq.n	8010064 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010034:	78fb      	ldrb	r3, [r7, #3]
 8010036:	f003 0301 	and.w	r3, r3, #1
 801003a:	2b00      	cmp	r3, #0
 801003c:	d013      	beq.n	8010066 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	3304      	adds	r3, #4
 8010042:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00e      	beq.n	8010066 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801004e:	f003 0308 	and.w	r3, r3, #8
 8010052:	2b00      	cmp	r3, #0
 8010054:	d007      	beq.n	8010066 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	3304      	adds	r3, #4
 801005a:	4619      	mov	r1, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f007 fdf9 	bl	8017c54 <etharp_request>
 8010062:	e000      	b.n	8010066 <netif_issue_reports+0x6e>
    return;
 8010064:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	0801abf8 	.word	0x0801abf8
 8010070:	0801ad9c 	.word	0x0801ad9c
 8010074:	0801ac48 	.word	0x0801ac48

08010078 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d107      	bne.n	8010096 <netif_set_down+0x1e>
 8010086:	4b12      	ldr	r3, [pc, #72]	@ (80100d0 <netif_set_down+0x58>)
 8010088:	f240 329b 	movw	r2, #923	@ 0x39b
 801008c:	4911      	ldr	r1, [pc, #68]	@ (80100d4 <netif_set_down+0x5c>)
 801008e:	4812      	ldr	r0, [pc, #72]	@ (80100d8 <netif_set_down+0x60>)
 8010090:	f009 fba8 	bl	80197e4 <iprintf>
 8010094:	e019      	b.n	80100ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801009c:	f003 0301 	and.w	r3, r3, #1
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d012      	beq.n	80100ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100aa:	f023 0301 	bic.w	r3, r3, #1
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100bc:	f003 0308 	and.w	r3, r3, #8
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f007 f983 	bl	80173d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	0801abf8 	.word	0x0801abf8
 80100d4:	0801adc0 	.word	0x0801adc0
 80100d8:	0801ac48 	.word	0x0801ac48

080100dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d107      	bne.n	80100fa <netif_set_link_up+0x1e>
 80100ea:	4b13      	ldr	r3, [pc, #76]	@ (8010138 <netif_set_link_up+0x5c>)
 80100ec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80100f0:	4912      	ldr	r1, [pc, #72]	@ (801013c <netif_set_link_up+0x60>)
 80100f2:	4813      	ldr	r0, [pc, #76]	@ (8010140 <netif_set_link_up+0x64>)
 80100f4:	f009 fb76 	bl	80197e4 <iprintf>
 80100f8:	e01b      	b.n	8010132 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010100:	f003 0304 	and.w	r3, r3, #4
 8010104:	2b00      	cmp	r3, #0
 8010106:	d114      	bne.n	8010132 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801010e:	f043 0304 	orr.w	r3, r3, #4
 8010112:	b2da      	uxtb	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801011a:	2103      	movs	r1, #3
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f7ff ff6b 	bl	800fff8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	69db      	ldr	r3, [r3, #28]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d003      	beq.n	8010132 <netif_set_link_up+0x56>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	69db      	ldr	r3, [r3, #28]
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	0801abf8 	.word	0x0801abf8
 801013c:	0801ade0 	.word	0x0801ade0
 8010140:	0801ac48 	.word	0x0801ac48

08010144 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d107      	bne.n	8010162 <netif_set_link_down+0x1e>
 8010152:	4b11      	ldr	r3, [pc, #68]	@ (8010198 <netif_set_link_down+0x54>)
 8010154:	f240 4206 	movw	r2, #1030	@ 0x406
 8010158:	4910      	ldr	r1, [pc, #64]	@ (801019c <netif_set_link_down+0x58>)
 801015a:	4811      	ldr	r0, [pc, #68]	@ (80101a0 <netif_set_link_down+0x5c>)
 801015c:	f009 fb42 	bl	80197e4 <iprintf>
 8010160:	e017      	b.n	8010192 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	2b00      	cmp	r3, #0
 801016e:	d010      	beq.n	8010192 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010176:	f023 0304 	bic.w	r3, r3, #4
 801017a:	b2da      	uxtb	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	69db      	ldr	r3, [r3, #28]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <netif_set_link_down+0x4e>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	69db      	ldr	r3, [r3, #28]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0801abf8 	.word	0x0801abf8
 801019c:	0801ae04 	.word	0x0801ae04
 80101a0:	0801ac48 	.word	0x0801ac48

080101a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	61da      	str	r2, [r3, #28]
  }
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80101c6:	b480      	push	{r7}
 80101c8:	b085      	sub	sp, #20
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	60f8      	str	r0, [r7, #12]
 80101ce:	60b9      	str	r1, [r7, #8]
 80101d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80101d2:	f06f 030b 	mvn.w	r3, #11
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
	...

080101e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4603      	mov	r3, r0
 80101ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d013      	beq.n	801021c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80101f4:	4b0d      	ldr	r3, [pc, #52]	@ (801022c <netif_get_by_index+0x48>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60fb      	str	r3, [r7, #12]
 80101fa:	e00c      	b.n	8010216 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010202:	3301      	adds	r3, #1
 8010204:	b2db      	uxtb	r3, r3
 8010206:	79fa      	ldrb	r2, [r7, #7]
 8010208:	429a      	cmp	r2, r3
 801020a:	d101      	bne.n	8010210 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	e006      	b.n	801021e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	60fb      	str	r3, [r7, #12]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1ef      	bne.n	80101fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3714      	adds	r7, #20
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr
 801022a:	bf00      	nop
 801022c:	240105dc 	.word	0x240105dc

08010230 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010236:	f009 f9b7 	bl	80195a8 <sys_arch_protect>
 801023a:	6038      	str	r0, [r7, #0]
 801023c:	4b0d      	ldr	r3, [pc, #52]	@ (8010274 <pbuf_free_ooseq+0x44>)
 801023e:	2200      	movs	r2, #0
 8010240:	701a      	strb	r2, [r3, #0]
 8010242:	6838      	ldr	r0, [r7, #0]
 8010244:	f009 f9be 	bl	80195c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010248:	4b0b      	ldr	r3, [pc, #44]	@ (8010278 <pbuf_free_ooseq+0x48>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	607b      	str	r3, [r7, #4]
 801024e:	e00a      	b.n	8010266 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010254:	2b00      	cmp	r3, #0
 8010256:	d003      	beq.n	8010260 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f002 f98b 	bl	8012574 <tcp_free_ooseq>
      return;
 801025e:	e005      	b.n	801026c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	607b      	str	r3, [r7, #4]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d1f1      	bne.n	8010250 <pbuf_free_ooseq+0x20>
    }
  }
}
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	240105e5 	.word	0x240105e5
 8010278:	240105f4 	.word	0x240105f4

0801027c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010284:	f7ff ffd4 	bl	8010230 <pbuf_free_ooseq>
}
 8010288:	bf00      	nop
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010296:	f009 f987 	bl	80195a8 <sys_arch_protect>
 801029a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801029c:	4b0f      	ldr	r3, [pc, #60]	@ (80102dc <pbuf_pool_is_empty+0x4c>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80102a2:	4b0e      	ldr	r3, [pc, #56]	@ (80102dc <pbuf_pool_is_empty+0x4c>)
 80102a4:	2201      	movs	r2, #1
 80102a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f009 f98b 	bl	80195c4 <sys_arch_unprotect>

  if (!queued) {
 80102ae:	78fb      	ldrb	r3, [r7, #3]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10f      	bne.n	80102d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80102b4:	2100      	movs	r1, #0
 80102b6:	480a      	ldr	r0, [pc, #40]	@ (80102e0 <pbuf_pool_is_empty+0x50>)
 80102b8:	f7fe fdde 	bl	800ee78 <tcpip_try_callback>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d008      	beq.n	80102d4 <pbuf_pool_is_empty+0x44>
 80102c2:	f009 f971 	bl	80195a8 <sys_arch_protect>
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	4b04      	ldr	r3, [pc, #16]	@ (80102dc <pbuf_pool_is_empty+0x4c>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	701a      	strb	r2, [r3, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f009 f978 	bl	80195c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80102d4:	bf00      	nop
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	240105e5 	.word	0x240105e5
 80102e0:	0801027d 	.word	0x0801027d

080102e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	4611      	mov	r1, r2
 80102f0:	461a      	mov	r2, r3
 80102f2:	460b      	mov	r3, r1
 80102f4:	80fb      	strh	r3, [r7, #6]
 80102f6:	4613      	mov	r3, r2
 80102f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	88fa      	ldrh	r2, [r7, #6]
 801030a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	88ba      	ldrh	r2, [r7, #4]
 8010310:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010312:	8b3b      	ldrh	r3, [r7, #24]
 8010314:	b2da      	uxtb	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	7f3a      	ldrb	r2, [r7, #28]
 801031e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2201      	movs	r2, #1
 8010324:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	73da      	strb	r2, [r3, #15]
}
 801032c:	bf00      	nop
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b08c      	sub	sp, #48	@ 0x30
 801033c:	af02      	add	r7, sp, #8
 801033e:	4603      	mov	r3, r0
 8010340:	71fb      	strb	r3, [r7, #7]
 8010342:	460b      	mov	r3, r1
 8010344:	80bb      	strh	r3, [r7, #4]
 8010346:	4613      	mov	r3, r2
 8010348:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801034a:	79fb      	ldrb	r3, [r7, #7]
 801034c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801034e:	887b      	ldrh	r3, [r7, #2]
 8010350:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010354:	f000 8082 	beq.w	801045c <pbuf_alloc+0x124>
 8010358:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801035c:	f300 80ca 	bgt.w	80104f4 <pbuf_alloc+0x1bc>
 8010360:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010364:	d010      	beq.n	8010388 <pbuf_alloc+0x50>
 8010366:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801036a:	f300 80c3 	bgt.w	80104f4 <pbuf_alloc+0x1bc>
 801036e:	2b01      	cmp	r3, #1
 8010370:	d002      	beq.n	8010378 <pbuf_alloc+0x40>
 8010372:	2b41      	cmp	r3, #65	@ 0x41
 8010374:	f040 80be 	bne.w	80104f4 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010378:	887a      	ldrh	r2, [r7, #2]
 801037a:	88bb      	ldrh	r3, [r7, #4]
 801037c:	4619      	mov	r1, r3
 801037e:	2000      	movs	r0, #0
 8010380:	f000 f8d4 	bl	801052c <pbuf_alloc_reference>
 8010384:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010386:	e0bf      	b.n	8010508 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801038c:	2300      	movs	r3, #0
 801038e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010390:	88bb      	ldrh	r3, [r7, #4]
 8010392:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010394:	200c      	movs	r0, #12
 8010396:	f7ff fb99 	bl	800facc <memp_malloc>
 801039a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d109      	bne.n	80103b6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80103a2:	f7ff ff75 	bl	8010290 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80103a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d002      	beq.n	80103b2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 80103ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103ae:	f000 faab 	bl	8010908 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80103b2:	2300      	movs	r3, #0
 80103b4:	e0a9      	b.n	801050a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80103b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103b8:	3303      	adds	r3, #3
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	f023 0303 	bic.w	r3, r3, #3
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 80103c6:	1a9b      	subs	r3, r3, r2
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	8b7a      	ldrh	r2, [r7, #26]
 80103cc:	4293      	cmp	r3, r2
 80103ce:	bf28      	it	cs
 80103d0:	4613      	movcs	r3, r2
 80103d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80103d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80103d6:	3310      	adds	r3, #16
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	4413      	add	r3, r2
 80103dc:	3303      	adds	r3, #3
 80103de:	f023 0303 	bic.w	r3, r3, #3
 80103e2:	4618      	mov	r0, r3
 80103e4:	89f9      	ldrh	r1, [r7, #14]
 80103e6:	8b7a      	ldrh	r2, [r7, #26]
 80103e8:	2300      	movs	r3, #0
 80103ea:	9301      	str	r3, [sp, #4]
 80103ec:	887b      	ldrh	r3, [r7, #2]
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	460b      	mov	r3, r1
 80103f2:	4601      	mov	r1, r0
 80103f4:	6938      	ldr	r0, [r7, #16]
 80103f6:	f7ff ff75 	bl	80102e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	f003 0303 	and.w	r3, r3, #3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d006      	beq.n	8010414 <pbuf_alloc+0xdc>
 8010406:	4b43      	ldr	r3, [pc, #268]	@ (8010514 <pbuf_alloc+0x1dc>)
 8010408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801040c:	4942      	ldr	r1, [pc, #264]	@ (8010518 <pbuf_alloc+0x1e0>)
 801040e:	4843      	ldr	r0, [pc, #268]	@ (801051c <pbuf_alloc+0x1e4>)
 8010410:	f009 f9e8 	bl	80197e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010414:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010416:	3303      	adds	r3, #3
 8010418:	f023 0303 	bic.w	r3, r3, #3
 801041c:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8010420:	4293      	cmp	r3, r2
 8010422:	d106      	bne.n	8010432 <pbuf_alloc+0xfa>
 8010424:	4b3b      	ldr	r3, [pc, #236]	@ (8010514 <pbuf_alloc+0x1dc>)
 8010426:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801042a:	493d      	ldr	r1, [pc, #244]	@ (8010520 <pbuf_alloc+0x1e8>)
 801042c:	483b      	ldr	r0, [pc, #236]	@ (801051c <pbuf_alloc+0x1e4>)
 801042e:	f009 f9d9 	bl	80197e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010434:	2b00      	cmp	r3, #0
 8010436:	d102      	bne.n	801043e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	627b      	str	r3, [r7, #36]	@ 0x24
 801043c:	e002      	b.n	8010444 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	693a      	ldr	r2, [r7, #16]
 8010442:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010448:	8b7a      	ldrh	r2, [r7, #26]
 801044a:	89fb      	ldrh	r3, [r7, #14]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010454:	8b7b      	ldrh	r3, [r7, #26]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d19c      	bne.n	8010394 <pbuf_alloc+0x5c>
      break;
 801045a:	e055      	b.n	8010508 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801045c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801045e:	3303      	adds	r3, #3
 8010460:	b29b      	uxth	r3, r3
 8010462:	f023 0303 	bic.w	r3, r3, #3
 8010466:	b29a      	uxth	r2, r3
 8010468:	88bb      	ldrh	r3, [r7, #4]
 801046a:	3303      	adds	r3, #3
 801046c:	b29b      	uxth	r3, r3
 801046e:	f023 0303 	bic.w	r3, r3, #3
 8010472:	b29b      	uxth	r3, r3
 8010474:	4413      	add	r3, r2
 8010476:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010478:	8b3b      	ldrh	r3, [r7, #24]
 801047a:	3310      	adds	r3, #16
 801047c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801047e:	8b3a      	ldrh	r2, [r7, #24]
 8010480:	88bb      	ldrh	r3, [r7, #4]
 8010482:	3303      	adds	r3, #3
 8010484:	f023 0303 	bic.w	r3, r3, #3
 8010488:	429a      	cmp	r2, r3
 801048a:	d306      	bcc.n	801049a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801048c:	8afa      	ldrh	r2, [r7, #22]
 801048e:	88bb      	ldrh	r3, [r7, #4]
 8010490:	3303      	adds	r3, #3
 8010492:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010496:	429a      	cmp	r2, r3
 8010498:	d201      	bcs.n	801049e <pbuf_alloc+0x166>
        return NULL;
 801049a:	2300      	movs	r3, #0
 801049c:	e035      	b.n	801050a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801049e:	8afb      	ldrh	r3, [r7, #22]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff f96b 	bl	800f77c <mem_malloc>
 80104a6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80104a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d101      	bne.n	80104b2 <pbuf_alloc+0x17a>
        return NULL;
 80104ae:	2300      	movs	r3, #0
 80104b0:	e02b      	b.n	801050a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80104b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80104b4:	3310      	adds	r3, #16
 80104b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104b8:	4413      	add	r3, r2
 80104ba:	3303      	adds	r3, #3
 80104bc:	f023 0303 	bic.w	r3, r3, #3
 80104c0:	4618      	mov	r0, r3
 80104c2:	88b9      	ldrh	r1, [r7, #4]
 80104c4:	88ba      	ldrh	r2, [r7, #4]
 80104c6:	2300      	movs	r3, #0
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	887b      	ldrh	r3, [r7, #2]
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	460b      	mov	r3, r1
 80104d0:	4601      	mov	r1, r0
 80104d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104d4:	f7ff ff06 	bl	80102e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80104d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	f003 0303 	and.w	r3, r3, #3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d010      	beq.n	8010506 <pbuf_alloc+0x1ce>
 80104e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010514 <pbuf_alloc+0x1dc>)
 80104e6:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80104ea:	490e      	ldr	r1, [pc, #56]	@ (8010524 <pbuf_alloc+0x1ec>)
 80104ec:	480b      	ldr	r0, [pc, #44]	@ (801051c <pbuf_alloc+0x1e4>)
 80104ee:	f009 f979 	bl	80197e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80104f2:	e008      	b.n	8010506 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80104f4:	4b07      	ldr	r3, [pc, #28]	@ (8010514 <pbuf_alloc+0x1dc>)
 80104f6:	f240 1227 	movw	r2, #295	@ 0x127
 80104fa:	490b      	ldr	r1, [pc, #44]	@ (8010528 <pbuf_alloc+0x1f0>)
 80104fc:	4807      	ldr	r0, [pc, #28]	@ (801051c <pbuf_alloc+0x1e4>)
 80104fe:	f009 f971 	bl	80197e4 <iprintf>
      return NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	e001      	b.n	801050a <pbuf_alloc+0x1d2>
      break;
 8010506:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801050a:	4618      	mov	r0, r3
 801050c:	3728      	adds	r7, #40	@ 0x28
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	0801ae28 	.word	0x0801ae28
 8010518:	0801ae58 	.word	0x0801ae58
 801051c:	0801ae88 	.word	0x0801ae88
 8010520:	0801aeb0 	.word	0x0801aeb0
 8010524:	0801aee4 	.word	0x0801aee4
 8010528:	0801af10 	.word	0x0801af10

0801052c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b086      	sub	sp, #24
 8010530:	af02      	add	r7, sp, #8
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	807b      	strh	r3, [r7, #2]
 8010538:	4613      	mov	r3, r2
 801053a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801053c:	883b      	ldrh	r3, [r7, #0]
 801053e:	2b41      	cmp	r3, #65	@ 0x41
 8010540:	d009      	beq.n	8010556 <pbuf_alloc_reference+0x2a>
 8010542:	883b      	ldrh	r3, [r7, #0]
 8010544:	2b01      	cmp	r3, #1
 8010546:	d006      	beq.n	8010556 <pbuf_alloc_reference+0x2a>
 8010548:	4b0f      	ldr	r3, [pc, #60]	@ (8010588 <pbuf_alloc_reference+0x5c>)
 801054a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801054e:	490f      	ldr	r1, [pc, #60]	@ (801058c <pbuf_alloc_reference+0x60>)
 8010550:	480f      	ldr	r0, [pc, #60]	@ (8010590 <pbuf_alloc_reference+0x64>)
 8010552:	f009 f947 	bl	80197e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010556:	200b      	movs	r0, #11
 8010558:	f7ff fab8 	bl	800facc <memp_malloc>
 801055c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010564:	2300      	movs	r3, #0
 8010566:	e00b      	b.n	8010580 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010568:	8879      	ldrh	r1, [r7, #2]
 801056a:	887a      	ldrh	r2, [r7, #2]
 801056c:	2300      	movs	r3, #0
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	883b      	ldrh	r3, [r7, #0]
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	460b      	mov	r3, r1
 8010576:	6879      	ldr	r1, [r7, #4]
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f7ff feb3 	bl	80102e4 <pbuf_init_alloced_pbuf>
  return p;
 801057e:	68fb      	ldr	r3, [r7, #12]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	0801ae28 	.word	0x0801ae28
 801058c:	0801af2c 	.word	0x0801af2c
 8010590:	0801ae88 	.word	0x0801ae88

08010594 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b088      	sub	sp, #32
 8010598:	af02      	add	r7, sp, #8
 801059a:	607b      	str	r3, [r7, #4]
 801059c:	4603      	mov	r3, r0
 801059e:	73fb      	strb	r3, [r7, #15]
 80105a0:	460b      	mov	r3, r1
 80105a2:	81bb      	strh	r3, [r7, #12]
 80105a4:	4613      	mov	r3, r2
 80105a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80105ac:	8a7b      	ldrh	r3, [r7, #18]
 80105ae:	3303      	adds	r3, #3
 80105b0:	f023 0203 	bic.w	r2, r3, #3
 80105b4:	89bb      	ldrh	r3, [r7, #12]
 80105b6:	441a      	add	r2, r3
 80105b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d901      	bls.n	80105c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80105be:	2300      	movs	r3, #0
 80105c0:	e018      	b.n	80105f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d007      	beq.n	80105d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80105c8:	8a7b      	ldrh	r3, [r7, #18]
 80105ca:	3303      	adds	r3, #3
 80105cc:	f023 0303 	bic.w	r3, r3, #3
 80105d0:	6a3a      	ldr	r2, [r7, #32]
 80105d2:	4413      	add	r3, r2
 80105d4:	617b      	str	r3, [r7, #20]
 80105d6:	e001      	b.n	80105dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80105d8:	2300      	movs	r3, #0
 80105da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	89b9      	ldrh	r1, [r7, #12]
 80105e0:	89ba      	ldrh	r2, [r7, #12]
 80105e2:	2302      	movs	r3, #2
 80105e4:	9301      	str	r3, [sp, #4]
 80105e6:	897b      	ldrh	r3, [r7, #10]
 80105e8:	9300      	str	r3, [sp, #0]
 80105ea:	460b      	mov	r3, r1
 80105ec:	6979      	ldr	r1, [r7, #20]
 80105ee:	f7ff fe79 	bl	80102e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80105f2:	687b      	ldr	r3, [r7, #4]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	460b      	mov	r3, r1
 8010606:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d106      	bne.n	801061c <pbuf_realloc+0x20>
 801060e:	4b3a      	ldr	r3, [pc, #232]	@ (80106f8 <pbuf_realloc+0xfc>)
 8010610:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010614:	4939      	ldr	r1, [pc, #228]	@ (80106fc <pbuf_realloc+0x100>)
 8010616:	483a      	ldr	r0, [pc, #232]	@ (8010700 <pbuf_realloc+0x104>)
 8010618:	f009 f8e4 	bl	80197e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	887a      	ldrh	r2, [r7, #2]
 8010622:	429a      	cmp	r2, r3
 8010624:	d263      	bcs.n	80106ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	891a      	ldrh	r2, [r3, #8]
 801062a:	887b      	ldrh	r3, [r7, #2]
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010630:	887b      	ldrh	r3, [r7, #2]
 8010632:	817b      	strh	r3, [r7, #10]
  q = p;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010638:	e018      	b.n	801066c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	895b      	ldrh	r3, [r3, #10]
 801063e:	897a      	ldrh	r2, [r7, #10]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	891a      	ldrh	r2, [r3, #8]
 8010648:	893b      	ldrh	r3, [r7, #8]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	b29a      	uxth	r2, r3
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <pbuf_realloc+0x70>
 801065e:	4b26      	ldr	r3, [pc, #152]	@ (80106f8 <pbuf_realloc+0xfc>)
 8010660:	f240 12af 	movw	r2, #431	@ 0x1af
 8010664:	4927      	ldr	r1, [pc, #156]	@ (8010704 <pbuf_realloc+0x108>)
 8010666:	4826      	ldr	r0, [pc, #152]	@ (8010700 <pbuf_realloc+0x104>)
 8010668:	f009 f8bc 	bl	80197e4 <iprintf>
  while (rem_len > q->len) {
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	895b      	ldrh	r3, [r3, #10]
 8010670:	897a      	ldrh	r2, [r7, #10]
 8010672:	429a      	cmp	r2, r3
 8010674:	d8e1      	bhi.n	801063a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	7b1b      	ldrb	r3, [r3, #12]
 801067a:	f003 030f 	and.w	r3, r3, #15
 801067e:	2b00      	cmp	r3, #0
 8010680:	d121      	bne.n	80106c6 <pbuf_realloc+0xca>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	895b      	ldrh	r3, [r3, #10]
 8010686:	897a      	ldrh	r2, [r7, #10]
 8010688:	429a      	cmp	r2, r3
 801068a:	d01c      	beq.n	80106c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	7b5b      	ldrb	r3, [r3, #13]
 8010690:	f003 0302 	and.w	r3, r3, #2
 8010694:	2b00      	cmp	r3, #0
 8010696:	d116      	bne.n	80106c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	897b      	ldrh	r3, [r7, #10]
 80106a4:	4413      	add	r3, r2
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	4619      	mov	r1, r3
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	f7fe ff56 	bl	800f55c <mem_trim>
 80106b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d106      	bne.n	80106c6 <pbuf_realloc+0xca>
 80106b8:	4b0f      	ldr	r3, [pc, #60]	@ (80106f8 <pbuf_realloc+0xfc>)
 80106ba:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80106be:	4912      	ldr	r1, [pc, #72]	@ (8010708 <pbuf_realloc+0x10c>)
 80106c0:	480f      	ldr	r0, [pc, #60]	@ (8010700 <pbuf_realloc+0x104>)
 80106c2:	f009 f88f 	bl	80197e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	897a      	ldrh	r2, [r7, #10]
 80106ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	895a      	ldrh	r2, [r3, #10]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d004      	beq.n	80106e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 f911 	bl	8010908 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	e000      	b.n	80106f0 <pbuf_realloc+0xf4>
    return;
 80106ee:	bf00      	nop

}
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	0801ae28 	.word	0x0801ae28
 80106fc:	0801af40 	.word	0x0801af40
 8010700:	0801ae88 	.word	0x0801ae88
 8010704:	0801af58 	.word	0x0801af58
 8010708:	0801af70 	.word	0x0801af70

0801070c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	4613      	mov	r3, r2
 8010718:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d106      	bne.n	801072e <pbuf_add_header_impl+0x22>
 8010720:	4b2b      	ldr	r3, [pc, #172]	@ (80107d0 <pbuf_add_header_impl+0xc4>)
 8010722:	f240 12df 	movw	r2, #479	@ 0x1df
 8010726:	492b      	ldr	r1, [pc, #172]	@ (80107d4 <pbuf_add_header_impl+0xc8>)
 8010728:	482b      	ldr	r0, [pc, #172]	@ (80107d8 <pbuf_add_header_impl+0xcc>)
 801072a:	f009 f85b 	bl	80197e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <pbuf_add_header_impl+0x30>
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801073a:	d301      	bcc.n	8010740 <pbuf_add_header_impl+0x34>
    return 1;
 801073c:	2301      	movs	r3, #1
 801073e:	e043      	b.n	80107c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <pbuf_add_header_impl+0x3e>
    return 0;
 8010746:	2300      	movs	r3, #0
 8010748:	e03e      	b.n	80107c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	891a      	ldrh	r2, [r3, #8]
 8010752:	8a7b      	ldrh	r3, [r7, #18]
 8010754:	4413      	add	r3, r2
 8010756:	b29b      	uxth	r3, r3
 8010758:	8a7a      	ldrh	r2, [r7, #18]
 801075a:	429a      	cmp	r2, r3
 801075c:	d901      	bls.n	8010762 <pbuf_add_header_impl+0x56>
    return 1;
 801075e:	2301      	movs	r3, #1
 8010760:	e032      	b.n	80107c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	7b1b      	ldrb	r3, [r3, #12]
 8010766:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010768:	8a3b      	ldrh	r3, [r7, #16]
 801076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00c      	beq.n	801078c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	685a      	ldr	r2, [r3, #4]
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	425b      	negs	r3, r3
 801077a:	4413      	add	r3, r2
 801077c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3310      	adds	r3, #16
 8010782:	697a      	ldr	r2, [r7, #20]
 8010784:	429a      	cmp	r2, r3
 8010786:	d20d      	bcs.n	80107a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010788:	2301      	movs	r3, #1
 801078a:	e01d      	b.n	80107c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d006      	beq.n	80107a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	685a      	ldr	r2, [r3, #4]
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	425b      	negs	r3, r3
 801079a:	4413      	add	r3, r2
 801079c:	617b      	str	r3, [r7, #20]
 801079e:	e001      	b.n	80107a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80107a0:	2301      	movs	r3, #1
 80107a2:	e011      	b.n	80107c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	895a      	ldrh	r2, [r3, #10]
 80107ae:	8a7b      	ldrh	r3, [r7, #18]
 80107b0:	4413      	add	r3, r2
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	891a      	ldrh	r2, [r3, #8]
 80107bc:	8a7b      	ldrh	r3, [r7, #18]
 80107be:	4413      	add	r3, r2
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	811a      	strh	r2, [r3, #8]


  return 0;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3718      	adds	r7, #24
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	0801ae28 	.word	0x0801ae28
 80107d4:	0801af8c 	.word	0x0801af8c
 80107d8:	0801ae88 	.word	0x0801ae88

080107dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80107e6:	2200      	movs	r2, #0
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ff ff8e 	bl	801070c <pbuf_add_header_impl>
 80107f0:	4603      	mov	r3, r0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
	...

080107fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d106      	bne.n	801081a <pbuf_remove_header+0x1e>
 801080c:	4b20      	ldr	r3, [pc, #128]	@ (8010890 <pbuf_remove_header+0x94>)
 801080e:	f240 224b 	movw	r2, #587	@ 0x24b
 8010812:	4920      	ldr	r1, [pc, #128]	@ (8010894 <pbuf_remove_header+0x98>)
 8010814:	4820      	ldr	r0, [pc, #128]	@ (8010898 <pbuf_remove_header+0x9c>)
 8010816:	f008 ffe5 	bl	80197e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <pbuf_remove_header+0x2c>
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010826:	d301      	bcc.n	801082c <pbuf_remove_header+0x30>
    return 1;
 8010828:	2301      	movs	r3, #1
 801082a:	e02c      	b.n	8010886 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d101      	bne.n	8010836 <pbuf_remove_header+0x3a>
    return 0;
 8010832:	2300      	movs	r3, #0
 8010834:	e027      	b.n	8010886 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	895b      	ldrh	r3, [r3, #10]
 801083e:	89fa      	ldrh	r2, [r7, #14]
 8010840:	429a      	cmp	r2, r3
 8010842:	d908      	bls.n	8010856 <pbuf_remove_header+0x5a>
 8010844:	4b12      	ldr	r3, [pc, #72]	@ (8010890 <pbuf_remove_header+0x94>)
 8010846:	f240 2255 	movw	r2, #597	@ 0x255
 801084a:	4914      	ldr	r1, [pc, #80]	@ (801089c <pbuf_remove_header+0xa0>)
 801084c:	4812      	ldr	r0, [pc, #72]	@ (8010898 <pbuf_remove_header+0x9c>)
 801084e:	f008 ffc9 	bl	80197e4 <iprintf>
 8010852:	2301      	movs	r3, #1
 8010854:	e017      	b.n	8010886 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685a      	ldr	r2, [r3, #4]
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	441a      	add	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	895a      	ldrh	r2, [r3, #10]
 801086c:	89fb      	ldrh	r3, [r7, #14]
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	b29a      	uxth	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	891a      	ldrh	r2, [r3, #8]
 801087a:	89fb      	ldrh	r3, [r7, #14]
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	b29a      	uxth	r2, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	0801ae28 	.word	0x0801ae28
 8010894:	0801af8c 	.word	0x0801af8c
 8010898:	0801ae88 	.word	0x0801ae88
 801089c:	0801af98 	.word	0x0801af98

080108a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	807b      	strh	r3, [r7, #2]
 80108ac:	4613      	mov	r3, r2
 80108ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80108b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	da08      	bge.n	80108ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80108b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108bc:	425b      	negs	r3, r3
 80108be:	4619      	mov	r1, r3
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff ff9b 	bl	80107fc <pbuf_remove_header>
 80108c6:	4603      	mov	r3, r0
 80108c8:	e007      	b.n	80108da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80108ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108ce:	787a      	ldrb	r2, [r7, #1]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff ff1a 	bl	801070c <pbuf_add_header_impl>
 80108d8:	4603      	mov	r3, r0
  }
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	460b      	mov	r3, r1
 80108ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80108ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108f2:	2201      	movs	r2, #1
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7ff ffd2 	bl	80108a0 <pbuf_header_impl>
 80108fc:	4603      	mov	r3, r0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3708      	adds	r7, #8
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
	...

08010908 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b088      	sub	sp, #32
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10b      	bne.n	801092e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d106      	bne.n	801092a <pbuf_free+0x22>
 801091c:	4b3b      	ldr	r3, [pc, #236]	@ (8010a0c <pbuf_free+0x104>)
 801091e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010922:	493b      	ldr	r1, [pc, #236]	@ (8010a10 <pbuf_free+0x108>)
 8010924:	483b      	ldr	r0, [pc, #236]	@ (8010a14 <pbuf_free+0x10c>)
 8010926:	f008 ff5d 	bl	80197e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801092a:	2300      	movs	r3, #0
 801092c:	e069      	b.n	8010a02 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010932:	e062      	b.n	80109fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010934:	f008 fe38 	bl	80195a8 <sys_arch_protect>
 8010938:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	7b9b      	ldrb	r3, [r3, #14]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <pbuf_free+0x48>
 8010942:	4b32      	ldr	r3, [pc, #200]	@ (8010a0c <pbuf_free+0x104>)
 8010944:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010948:	4933      	ldr	r1, [pc, #204]	@ (8010a18 <pbuf_free+0x110>)
 801094a:	4832      	ldr	r0, [pc, #200]	@ (8010a14 <pbuf_free+0x10c>)
 801094c:	f008 ff4a 	bl	80197e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	7b9b      	ldrb	r3, [r3, #14]
 8010954:	3b01      	subs	r3, #1
 8010956:	b2da      	uxtb	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	739a      	strb	r2, [r3, #14]
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	7b9b      	ldrb	r3, [r3, #14]
 8010960:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010962:	69b8      	ldr	r0, [r7, #24]
 8010964:	f008 fe2e 	bl	80195c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010968:	7dfb      	ldrb	r3, [r7, #23]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d143      	bne.n	80109f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	7b1b      	ldrb	r3, [r3, #12]
 8010978:	f003 030f 	and.w	r3, r3, #15
 801097c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	7b5b      	ldrb	r3, [r3, #13]
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d011      	beq.n	80109ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	691b      	ldr	r3, [r3, #16]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d106      	bne.n	80109a4 <pbuf_free+0x9c>
 8010996:	4b1d      	ldr	r3, [pc, #116]	@ (8010a0c <pbuf_free+0x104>)
 8010998:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801099c:	491f      	ldr	r1, [pc, #124]	@ (8010a1c <pbuf_free+0x114>)
 801099e:	481d      	ldr	r0, [pc, #116]	@ (8010a14 <pbuf_free+0x10c>)
 80109a0:	f008 ff20 	bl	80197e4 <iprintf>
        pc->custom_free_function(p);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	691b      	ldr	r3, [r3, #16]
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	4798      	blx	r3
 80109ac:	e01d      	b.n	80109ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	2b02      	cmp	r3, #2
 80109b2:	d104      	bne.n	80109be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80109b4:	6879      	ldr	r1, [r7, #4]
 80109b6:	200c      	movs	r0, #12
 80109b8:	f7ff f8fe 	bl	800fbb8 <memp_free>
 80109bc:	e015      	b.n	80109ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80109be:	7bfb      	ldrb	r3, [r7, #15]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d104      	bne.n	80109ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80109c4:	6879      	ldr	r1, [r7, #4]
 80109c6:	200b      	movs	r0, #11
 80109c8:	f7ff f8f6 	bl	800fbb8 <memp_free>
 80109cc:	e00d      	b.n	80109ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80109ce:	7bfb      	ldrb	r3, [r7, #15]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d103      	bne.n	80109dc <pbuf_free+0xd4>
          mem_free(p);
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7fe fd31 	bl	800f43c <mem_free>
 80109da:	e006      	b.n	80109ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80109dc:	4b0b      	ldr	r3, [pc, #44]	@ (8010a0c <pbuf_free+0x104>)
 80109de:	f240 320f 	movw	r2, #783	@ 0x30f
 80109e2:	490f      	ldr	r1, [pc, #60]	@ (8010a20 <pbuf_free+0x118>)
 80109e4:	480b      	ldr	r0, [pc, #44]	@ (8010a14 <pbuf_free+0x10c>)
 80109e6:	f008 fefd 	bl	80197e4 <iprintf>
        }
      }
      count++;
 80109ea:	7ffb      	ldrb	r3, [r7, #31]
 80109ec:	3301      	adds	r3, #1
 80109ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	607b      	str	r3, [r7, #4]
 80109f4:	e001      	b.n	80109fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80109f6:	2300      	movs	r3, #0
 80109f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d199      	bne.n	8010934 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3720      	adds	r7, #32
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	0801ae28 	.word	0x0801ae28
 8010a10:	0801af8c 	.word	0x0801af8c
 8010a14:	0801ae88 	.word	0x0801ae88
 8010a18:	0801afb8 	.word	0x0801afb8
 8010a1c:	0801afd0 	.word	0x0801afd0
 8010a20:	0801aff4 	.word	0x0801aff4

08010a24 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010a30:	e005      	b.n	8010a3e <pbuf_clen+0x1a>
    ++len;
 8010a32:	89fb      	ldrh	r3, [r7, #14]
 8010a34:	3301      	adds	r3, #1
 8010a36:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1f6      	bne.n	8010a32 <pbuf_clen+0xe>
  }
  return len;
 8010a44:	89fb      	ldrh	r3, [r7, #14]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3714      	adds	r7, #20
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
	...

08010a54 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d016      	beq.n	8010a90 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010a62:	f008 fda1 	bl	80195a8 <sys_arch_protect>
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	7b9b      	ldrb	r3, [r3, #14]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	739a      	strb	r2, [r3, #14]
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f008 fda5 	bl	80195c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7b9b      	ldrb	r3, [r3, #14]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <pbuf_ref+0x3c>
 8010a82:	4b05      	ldr	r3, [pc, #20]	@ (8010a98 <pbuf_ref+0x44>)
 8010a84:	f240 3242 	movw	r2, #834	@ 0x342
 8010a88:	4904      	ldr	r1, [pc, #16]	@ (8010a9c <pbuf_ref+0x48>)
 8010a8a:	4805      	ldr	r0, [pc, #20]	@ (8010aa0 <pbuf_ref+0x4c>)
 8010a8c:	f008 feaa 	bl	80197e4 <iprintf>
  }
}
 8010a90:	bf00      	nop
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	0801ae28 	.word	0x0801ae28
 8010a9c:	0801b008 	.word	0x0801b008
 8010aa0:	0801ae88 	.word	0x0801ae88

08010aa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d002      	beq.n	8010aba <pbuf_cat+0x16>
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d107      	bne.n	8010aca <pbuf_cat+0x26>
 8010aba:	4b20      	ldr	r3, [pc, #128]	@ (8010b3c <pbuf_cat+0x98>)
 8010abc:	f240 3259 	movw	r2, #857	@ 0x359
 8010ac0:	491f      	ldr	r1, [pc, #124]	@ (8010b40 <pbuf_cat+0x9c>)
 8010ac2:	4820      	ldr	r0, [pc, #128]	@ (8010b44 <pbuf_cat+0xa0>)
 8010ac4:	f008 fe8e 	bl	80197e4 <iprintf>
 8010ac8:	e034      	b.n	8010b34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	60fb      	str	r3, [r7, #12]
 8010ace:	e00a      	b.n	8010ae6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	891a      	ldrh	r2, [r3, #8]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	891b      	ldrh	r3, [r3, #8]
 8010ad8:	4413      	add	r3, r2
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	60fb      	str	r3, [r7, #12]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1f0      	bne.n	8010ad0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	891a      	ldrh	r2, [r3, #8]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	895b      	ldrh	r3, [r3, #10]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d006      	beq.n	8010b08 <pbuf_cat+0x64>
 8010afa:	4b10      	ldr	r3, [pc, #64]	@ (8010b3c <pbuf_cat+0x98>)
 8010afc:	f240 3262 	movw	r2, #866	@ 0x362
 8010b00:	4911      	ldr	r1, [pc, #68]	@ (8010b48 <pbuf_cat+0xa4>)
 8010b02:	4810      	ldr	r0, [pc, #64]	@ (8010b44 <pbuf_cat+0xa0>)
 8010b04:	f008 fe6e 	bl	80197e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d006      	beq.n	8010b1e <pbuf_cat+0x7a>
 8010b10:	4b0a      	ldr	r3, [pc, #40]	@ (8010b3c <pbuf_cat+0x98>)
 8010b12:	f240 3263 	movw	r2, #867	@ 0x363
 8010b16:	490d      	ldr	r1, [pc, #52]	@ (8010b4c <pbuf_cat+0xa8>)
 8010b18:	480a      	ldr	r0, [pc, #40]	@ (8010b44 <pbuf_cat+0xa0>)
 8010b1a:	f008 fe63 	bl	80197e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	891a      	ldrh	r2, [r3, #8]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	891b      	ldrh	r3, [r3, #8]
 8010b26:	4413      	add	r3, r2
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	0801ae28 	.word	0x0801ae28
 8010b40:	0801b01c 	.word	0x0801b01c
 8010b44:	0801ae88 	.word	0x0801ae88
 8010b48:	0801b054 	.word	0x0801b054
 8010b4c:	0801b084 	.word	0x0801b084

08010b50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010b5a:	6839      	ldr	r1, [r7, #0]
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f7ff ffa1 	bl	8010aa4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010b62:	6838      	ldr	r0, [r7, #0]
 8010b64:	f7ff ff76 	bl	8010a54 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010b68:	bf00      	nop
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	617b      	str	r3, [r7, #20]
 8010b7e:	2300      	movs	r3, #0
 8010b80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d008      	beq.n	8010b9a <pbuf_copy+0x2a>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d005      	beq.n	8010b9a <pbuf_copy+0x2a>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	891a      	ldrh	r2, [r3, #8]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	891b      	ldrh	r3, [r3, #8]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d209      	bcs.n	8010bae <pbuf_copy+0x3e>
 8010b9a:	4b57      	ldr	r3, [pc, #348]	@ (8010cf8 <pbuf_copy+0x188>)
 8010b9c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010ba0:	4956      	ldr	r1, [pc, #344]	@ (8010cfc <pbuf_copy+0x18c>)
 8010ba2:	4857      	ldr	r0, [pc, #348]	@ (8010d00 <pbuf_copy+0x190>)
 8010ba4:	f008 fe1e 	bl	80197e4 <iprintf>
 8010ba8:	f06f 030f 	mvn.w	r3, #15
 8010bac:	e09f      	b.n	8010cee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	895b      	ldrh	r3, [r3, #10]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	895b      	ldrh	r3, [r3, #10]
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	1acb      	subs	r3, r1, r3
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d306      	bcc.n	8010bd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	895b      	ldrh	r3, [r3, #10]
 8010bca:	461a      	mov	r2, r3
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	1ad3      	subs	r3, r2, r3
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	e005      	b.n	8010be0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	895b      	ldrh	r3, [r3, #10]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	1ad3      	subs	r3, r2, r3
 8010bde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	685a      	ldr	r2, [r3, #4]
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	18d0      	adds	r0, r2, r3
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	4413      	add	r3, r2
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	f008 fe9d 	bl	8019932 <memcpy>
    offset_to += len;
 8010bf8:	697a      	ldr	r2, [r7, #20]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010c00:	693a      	ldr	r2, [r7, #16]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	4413      	add	r3, r2
 8010c06:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	895b      	ldrh	r3, [r3, #10]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d906      	bls.n	8010c22 <pbuf_copy+0xb2>
 8010c14:	4b38      	ldr	r3, [pc, #224]	@ (8010cf8 <pbuf_copy+0x188>)
 8010c16:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010c1a:	493a      	ldr	r1, [pc, #232]	@ (8010d04 <pbuf_copy+0x194>)
 8010c1c:	4838      	ldr	r0, [pc, #224]	@ (8010d00 <pbuf_copy+0x190>)
 8010c1e:	f008 fde1 	bl	80197e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	895b      	ldrh	r3, [r3, #10]
 8010c26:	461a      	mov	r2, r3
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d906      	bls.n	8010c3c <pbuf_copy+0xcc>
 8010c2e:	4b32      	ldr	r3, [pc, #200]	@ (8010cf8 <pbuf_copy+0x188>)
 8010c30:	f240 32da 	movw	r2, #986	@ 0x3da
 8010c34:	4934      	ldr	r1, [pc, #208]	@ (8010d08 <pbuf_copy+0x198>)
 8010c36:	4832      	ldr	r0, [pc, #200]	@ (8010d00 <pbuf_copy+0x190>)
 8010c38:	f008 fdd4 	bl	80197e4 <iprintf>
    if (offset_from >= p_from->len) {
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	895b      	ldrh	r3, [r3, #10]
 8010c40:	461a      	mov	r2, r3
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	d304      	bcc.n	8010c52 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	895b      	ldrh	r3, [r3, #10]
 8010c56:	461a      	mov	r2, r3
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d114      	bne.n	8010c88 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10c      	bne.n	8010c88 <pbuf_copy+0x118>
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d009      	beq.n	8010c88 <pbuf_copy+0x118>
 8010c74:	4b20      	ldr	r3, [pc, #128]	@ (8010cf8 <pbuf_copy+0x188>)
 8010c76:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010c7a:	4924      	ldr	r1, [pc, #144]	@ (8010d0c <pbuf_copy+0x19c>)
 8010c7c:	4820      	ldr	r0, [pc, #128]	@ (8010d00 <pbuf_copy+0x190>)
 8010c7e:	f008 fdb1 	bl	80197e4 <iprintf>
 8010c82:	f06f 030f 	mvn.w	r3, #15
 8010c86:	e032      	b.n	8010cee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d013      	beq.n	8010cb6 <pbuf_copy+0x146>
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	895a      	ldrh	r2, [r3, #10]
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	891b      	ldrh	r3, [r3, #8]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d10d      	bne.n	8010cb6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d009      	beq.n	8010cb6 <pbuf_copy+0x146>
 8010ca2:	4b15      	ldr	r3, [pc, #84]	@ (8010cf8 <pbuf_copy+0x188>)
 8010ca4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010ca8:	4919      	ldr	r1, [pc, #100]	@ (8010d10 <pbuf_copy+0x1a0>)
 8010caa:	4815      	ldr	r0, [pc, #84]	@ (8010d00 <pbuf_copy+0x190>)
 8010cac:	f008 fd9a 	bl	80197e4 <iprintf>
 8010cb0:	f06f 0305 	mvn.w	r3, #5
 8010cb4:	e01b      	b.n	8010cee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d013      	beq.n	8010ce4 <pbuf_copy+0x174>
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	895a      	ldrh	r2, [r3, #10]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	891b      	ldrh	r3, [r3, #8]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d10d      	bne.n	8010ce4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d009      	beq.n	8010ce4 <pbuf_copy+0x174>
 8010cd0:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <pbuf_copy+0x188>)
 8010cd2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010cd6:	490e      	ldr	r1, [pc, #56]	@ (8010d10 <pbuf_copy+0x1a0>)
 8010cd8:	4809      	ldr	r0, [pc, #36]	@ (8010d00 <pbuf_copy+0x190>)
 8010cda:	f008 fd83 	bl	80197e4 <iprintf>
 8010cde:	f06f 0305 	mvn.w	r3, #5
 8010ce2:	e004      	b.n	8010cee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f47f af61 	bne.w	8010bae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3718      	adds	r7, #24
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	0801ae28 	.word	0x0801ae28
 8010cfc:	0801b0d0 	.word	0x0801b0d0
 8010d00:	0801ae88 	.word	0x0801ae88
 8010d04:	0801b100 	.word	0x0801b100
 8010d08:	0801b118 	.word	0x0801b118
 8010d0c:	0801b134 	.word	0x0801b134
 8010d10:	0801b144 	.word	0x0801b144

08010d14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b088      	sub	sp, #32
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	4611      	mov	r1, r2
 8010d20:	461a      	mov	r2, r3
 8010d22:	460b      	mov	r3, r1
 8010d24:	80fb      	strh	r3, [r7, #6]
 8010d26:	4613      	mov	r3, r2
 8010d28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d108      	bne.n	8010d4a <pbuf_copy_partial+0x36>
 8010d38:	4b2b      	ldr	r3, [pc, #172]	@ (8010de8 <pbuf_copy_partial+0xd4>)
 8010d3a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010d3e:	492b      	ldr	r1, [pc, #172]	@ (8010dec <pbuf_copy_partial+0xd8>)
 8010d40:	482b      	ldr	r0, [pc, #172]	@ (8010df0 <pbuf_copy_partial+0xdc>)
 8010d42:	f008 fd4f 	bl	80197e4 <iprintf>
 8010d46:	2300      	movs	r3, #0
 8010d48:	e04a      	b.n	8010de0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d108      	bne.n	8010d62 <pbuf_copy_partial+0x4e>
 8010d50:	4b25      	ldr	r3, [pc, #148]	@ (8010de8 <pbuf_copy_partial+0xd4>)
 8010d52:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010d56:	4927      	ldr	r1, [pc, #156]	@ (8010df4 <pbuf_copy_partial+0xe0>)
 8010d58:	4825      	ldr	r0, [pc, #148]	@ (8010df0 <pbuf_copy_partial+0xdc>)
 8010d5a:	f008 fd43 	bl	80197e4 <iprintf>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	e03e      	b.n	8010de0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	61fb      	str	r3, [r7, #28]
 8010d66:	e034      	b.n	8010dd2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010d68:	88bb      	ldrh	r3, [r7, #4]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00a      	beq.n	8010d84 <pbuf_copy_partial+0x70>
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	895b      	ldrh	r3, [r3, #10]
 8010d72:	88ba      	ldrh	r2, [r7, #4]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d305      	bcc.n	8010d84 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	895b      	ldrh	r3, [r3, #10]
 8010d7c:	88ba      	ldrh	r2, [r7, #4]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	80bb      	strh	r3, [r7, #4]
 8010d82:	e023      	b.n	8010dcc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	895a      	ldrh	r2, [r3, #10]
 8010d88:	88bb      	ldrh	r3, [r7, #4]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010d8e:	8b3a      	ldrh	r2, [r7, #24]
 8010d90:	88fb      	ldrh	r3, [r7, #6]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d901      	bls.n	8010d9a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010d96:	88fb      	ldrh	r3, [r7, #6]
 8010d98:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010d9a:	8b7b      	ldrh	r3, [r7, #26]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	18d0      	adds	r0, r2, r3
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	685a      	ldr	r2, [r3, #4]
 8010da4:	88bb      	ldrh	r3, [r7, #4]
 8010da6:	4413      	add	r3, r2
 8010da8:	8b3a      	ldrh	r2, [r7, #24]
 8010daa:	4619      	mov	r1, r3
 8010dac:	f008 fdc1 	bl	8019932 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010db0:	8afa      	ldrh	r2, [r7, #22]
 8010db2:	8b3b      	ldrh	r3, [r7, #24]
 8010db4:	4413      	add	r3, r2
 8010db6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010db8:	8b7a      	ldrh	r2, [r7, #26]
 8010dba:	8b3b      	ldrh	r3, [r7, #24]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010dc0:	88fa      	ldrh	r2, [r7, #6]
 8010dc2:	8b3b      	ldrh	r3, [r7, #24]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	61fb      	str	r3, [r7, #28]
 8010dd2:	88fb      	ldrh	r3, [r7, #6]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d002      	beq.n	8010dde <pbuf_copy_partial+0xca>
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d1c4      	bne.n	8010d68 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010dde:	8afb      	ldrh	r3, [r7, #22]
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3720      	adds	r7, #32
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	0801ae28 	.word	0x0801ae28
 8010dec:	0801b170 	.word	0x0801b170
 8010df0:	0801ae88 	.word	0x0801ae88
 8010df4:	0801b190 	.word	0x0801b190

08010df8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	603a      	str	r2, [r7, #0]
 8010e02:	71fb      	strb	r3, [r7, #7]
 8010e04:	460b      	mov	r3, r1
 8010e06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	8919      	ldrh	r1, [r3, #8]
 8010e0c:	88ba      	ldrh	r2, [r7, #4]
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff fa91 	bl	8010338 <pbuf_alloc>
 8010e16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d101      	bne.n	8010e22 <pbuf_clone+0x2a>
    return NULL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e011      	b.n	8010e46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010e22:	6839      	ldr	r1, [r7, #0]
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff fea3 	bl	8010b70 <pbuf_copy>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010e2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d006      	beq.n	8010e44 <pbuf_clone+0x4c>
 8010e36:	4b06      	ldr	r3, [pc, #24]	@ (8010e50 <pbuf_clone+0x58>)
 8010e38:	f240 5224 	movw	r2, #1316	@ 0x524
 8010e3c:	4905      	ldr	r1, [pc, #20]	@ (8010e54 <pbuf_clone+0x5c>)
 8010e3e:	4806      	ldr	r0, [pc, #24]	@ (8010e58 <pbuf_clone+0x60>)
 8010e40:	f008 fcd0 	bl	80197e4 <iprintf>
  return q;
 8010e44:	68fb      	ldr	r3, [r7, #12]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	0801ae28 	.word	0x0801ae28
 8010e54:	0801b29c 	.word	0x0801b29c
 8010e58:	0801ae88 	.word	0x0801ae88

08010e5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010e60:	f008 fbc0 	bl	80195e4 <rand>
 8010e64:	4603      	mov	r3, r0
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010e72:	b29a      	uxth	r2, r3
 8010e74:	4b01      	ldr	r3, [pc, #4]	@ (8010e7c <tcp_init+0x20>)
 8010e76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010e78:	bf00      	nop
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	240049f8 	.word	0x240049f8

08010e80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	7d1b      	ldrb	r3, [r3, #20]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d105      	bne.n	8010e9c <tcp_free+0x1c>
 8010e90:	4b06      	ldr	r3, [pc, #24]	@ (8010eac <tcp_free+0x2c>)
 8010e92:	22d4      	movs	r2, #212	@ 0xd4
 8010e94:	4906      	ldr	r1, [pc, #24]	@ (8010eb0 <tcp_free+0x30>)
 8010e96:	4807      	ldr	r0, [pc, #28]	@ (8010eb4 <tcp_free+0x34>)
 8010e98:	f008 fca4 	bl	80197e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	f7fe fe8a 	bl	800fbb8 <memp_free>
}
 8010ea4:	bf00      	nop
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	0801b328 	.word	0x0801b328
 8010eb0:	0801b358 	.word	0x0801b358
 8010eb4:	0801b36c 	.word	0x0801b36c

08010eb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	7d1b      	ldrb	r3, [r3, #20]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d105      	bne.n	8010ed4 <tcp_free_listen+0x1c>
 8010ec8:	4b06      	ldr	r3, [pc, #24]	@ (8010ee4 <tcp_free_listen+0x2c>)
 8010eca:	22df      	movs	r2, #223	@ 0xdf
 8010ecc:	4906      	ldr	r1, [pc, #24]	@ (8010ee8 <tcp_free_listen+0x30>)
 8010ece:	4807      	ldr	r0, [pc, #28]	@ (8010eec <tcp_free_listen+0x34>)
 8010ed0:	f008 fc88 	bl	80197e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010ed4:	6879      	ldr	r1, [r7, #4]
 8010ed6:	2002      	movs	r0, #2
 8010ed8:	f7fe fe6e 	bl	800fbb8 <memp_free>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	0801b328 	.word	0x0801b328
 8010ee8:	0801b394 	.word	0x0801b394
 8010eec:	0801b36c 	.word	0x0801b36c

08010ef0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010ef4:	f000 fea6 	bl	8011c44 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010ef8:	4b07      	ldr	r3, [pc, #28]	@ (8010f18 <tcp_tmr+0x28>)
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	3301      	adds	r3, #1
 8010efe:	b2da      	uxtb	r2, r3
 8010f00:	4b05      	ldr	r3, [pc, #20]	@ (8010f18 <tcp_tmr+0x28>)
 8010f02:	701a      	strb	r2, [r3, #0]
 8010f04:	4b04      	ldr	r3, [pc, #16]	@ (8010f18 <tcp_tmr+0x28>)
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	f003 0301 	and.w	r3, r3, #1
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010f10:	f000 fb56 	bl	80115c0 <tcp_slowtmr>
  }
}
 8010f14:	bf00      	nop
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	240105fd 	.word	0x240105fd

08010f1c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d105      	bne.n	8010f38 <tcp_remove_listener+0x1c>
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <tcp_remove_listener+0x48>)
 8010f2e:	22ff      	movs	r2, #255	@ 0xff
 8010f30:	490d      	ldr	r1, [pc, #52]	@ (8010f68 <tcp_remove_listener+0x4c>)
 8010f32:	480e      	ldr	r0, [pc, #56]	@ (8010f6c <tcp_remove_listener+0x50>)
 8010f34:	f008 fc56 	bl	80197e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	60fb      	str	r3, [r7, #12]
 8010f3c:	e00a      	b.n	8010f54 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f42:	683a      	ldr	r2, [r7, #0]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d102      	bne.n	8010f4e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1f1      	bne.n	8010f3e <tcp_remove_listener+0x22>
    }
  }
}
 8010f5a:	bf00      	nop
 8010f5c:	bf00      	nop
 8010f5e:	3710      	adds	r7, #16
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	0801b328 	.word	0x0801b328
 8010f68:	0801b3b0 	.word	0x0801b3b0
 8010f6c:	0801b36c 	.word	0x0801b36c

08010f70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d106      	bne.n	8010f8c <tcp_listen_closed+0x1c>
 8010f7e:	4b14      	ldr	r3, [pc, #80]	@ (8010fd0 <tcp_listen_closed+0x60>)
 8010f80:	f240 1211 	movw	r2, #273	@ 0x111
 8010f84:	4913      	ldr	r1, [pc, #76]	@ (8010fd4 <tcp_listen_closed+0x64>)
 8010f86:	4814      	ldr	r0, [pc, #80]	@ (8010fd8 <tcp_listen_closed+0x68>)
 8010f88:	f008 fc2c 	bl	80197e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7d1b      	ldrb	r3, [r3, #20]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d006      	beq.n	8010fa2 <tcp_listen_closed+0x32>
 8010f94:	4b0e      	ldr	r3, [pc, #56]	@ (8010fd0 <tcp_listen_closed+0x60>)
 8010f96:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010f9a:	4910      	ldr	r1, [pc, #64]	@ (8010fdc <tcp_listen_closed+0x6c>)
 8010f9c:	480e      	ldr	r0, [pc, #56]	@ (8010fd8 <tcp_listen_closed+0x68>)
 8010f9e:	f008 fc21 	bl	80197e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	60fb      	str	r3, [r7, #12]
 8010fa6:	e00b      	b.n	8010fc0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8010fe0 <tcp_listen_closed+0x70>)
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6879      	ldr	r1, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff ffb1 	bl	8010f1c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b03      	cmp	r3, #3
 8010fc4:	d9f0      	bls.n	8010fa8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010fc6:	bf00      	nop
 8010fc8:	bf00      	nop
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	0801b328 	.word	0x0801b328
 8010fd4:	0801b3d8 	.word	0x0801b3d8
 8010fd8:	0801b36c 	.word	0x0801b36c
 8010fdc:	0801b3e4 	.word	0x0801b3e4
 8010fe0:	0801d348 	.word	0x0801d348

08010fe4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010fe4:	b5b0      	push	{r4, r5, r7, lr}
 8010fe6:	b088      	sub	sp, #32
 8010fe8:	af04      	add	r7, sp, #16
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	460b      	mov	r3, r1
 8010fee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_close_shutdown+0x20>
 8010ff6:	4b63      	ldr	r3, [pc, #396]	@ (8011184 <tcp_close_shutdown+0x1a0>)
 8010ff8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010ffc:	4962      	ldr	r1, [pc, #392]	@ (8011188 <tcp_close_shutdown+0x1a4>)
 8010ffe:	4863      	ldr	r0, [pc, #396]	@ (801118c <tcp_close_shutdown+0x1a8>)
 8011000:	f008 fbf0 	bl	80197e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011004:	78fb      	ldrb	r3, [r7, #3]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d067      	beq.n	80110da <tcp_close_shutdown+0xf6>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	7d1b      	ldrb	r3, [r3, #20]
 801100e:	2b04      	cmp	r3, #4
 8011010:	d003      	beq.n	801101a <tcp_close_shutdown+0x36>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	7d1b      	ldrb	r3, [r3, #20]
 8011016:	2b07      	cmp	r3, #7
 8011018:	d15f      	bne.n	80110da <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801101e:	2b00      	cmp	r3, #0
 8011020:	d105      	bne.n	801102e <tcp_close_shutdown+0x4a>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011026:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801102a:	4293      	cmp	r3, r2
 801102c:	d055      	beq.n	80110da <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	8b5b      	ldrh	r3, [r3, #26]
 8011032:	f003 0310 	and.w	r3, r3, #16
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_close_shutdown+0x64>
 801103a:	4b52      	ldr	r3, [pc, #328]	@ (8011184 <tcp_close_shutdown+0x1a0>)
 801103c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011040:	4953      	ldr	r1, [pc, #332]	@ (8011190 <tcp_close_shutdown+0x1ac>)
 8011042:	4852      	ldr	r0, [pc, #328]	@ (801118c <tcp_close_shutdown+0x1a8>)
 8011044:	f008 fbce 	bl	80197e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011050:	687d      	ldr	r5, [r7, #4]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	3304      	adds	r3, #4
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	8ad2      	ldrh	r2, [r2, #22]
 801105a:	6879      	ldr	r1, [r7, #4]
 801105c:	8b09      	ldrh	r1, [r1, #24]
 801105e:	9102      	str	r1, [sp, #8]
 8011060:	9201      	str	r2, [sp, #4]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	462b      	mov	r3, r5
 8011066:	4622      	mov	r2, r4
 8011068:	4601      	mov	r1, r0
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f004 fe92 	bl	8015d94 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f001 f8cb 	bl	801220c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011076:	4b47      	ldr	r3, [pc, #284]	@ (8011194 <tcp_close_shutdown+0x1b0>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	429a      	cmp	r2, r3
 801107e:	d105      	bne.n	801108c <tcp_close_shutdown+0xa8>
 8011080:	4b44      	ldr	r3, [pc, #272]	@ (8011194 <tcp_close_shutdown+0x1b0>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	4a43      	ldr	r2, [pc, #268]	@ (8011194 <tcp_close_shutdown+0x1b0>)
 8011088:	6013      	str	r3, [r2, #0]
 801108a:	e013      	b.n	80110b4 <tcp_close_shutdown+0xd0>
 801108c:	4b41      	ldr	r3, [pc, #260]	@ (8011194 <tcp_close_shutdown+0x1b0>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	60fb      	str	r3, [r7, #12]
 8011092:	e00c      	b.n	80110ae <tcp_close_shutdown+0xca>
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	429a      	cmp	r2, r3
 801109c:	d104      	bne.n	80110a8 <tcp_close_shutdown+0xc4>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68da      	ldr	r2, [r3, #12]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	60da      	str	r2, [r3, #12]
 80110a6:	e005      	b.n	80110b4 <tcp_close_shutdown+0xd0>
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d1ef      	bne.n	8011094 <tcp_close_shutdown+0xb0>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	60da      	str	r2, [r3, #12]
 80110ba:	4b37      	ldr	r3, [pc, #220]	@ (8011198 <tcp_close_shutdown+0x1b4>)
 80110bc:	2201      	movs	r2, #1
 80110be:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80110c0:	4b36      	ldr	r3, [pc, #216]	@ (801119c <tcp_close_shutdown+0x1b8>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d102      	bne.n	80110d0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80110ca:	f003 fd61 	bl	8014b90 <tcp_trigger_input_pcb_close>
 80110ce:	e002      	b.n	80110d6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7ff fed5 	bl	8010e80 <tcp_free>
      }
      return ERR_OK;
 80110d6:	2300      	movs	r3, #0
 80110d8:	e050      	b.n	801117c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	7d1b      	ldrb	r3, [r3, #20]
 80110de:	2b02      	cmp	r3, #2
 80110e0:	d03b      	beq.n	801115a <tcp_close_shutdown+0x176>
 80110e2:	2b02      	cmp	r3, #2
 80110e4:	dc44      	bgt.n	8011170 <tcp_close_shutdown+0x18c>
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d002      	beq.n	80110f0 <tcp_close_shutdown+0x10c>
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d02a      	beq.n	8011144 <tcp_close_shutdown+0x160>
 80110ee:	e03f      	b.n	8011170 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	8adb      	ldrh	r3, [r3, #22]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d021      	beq.n	801113c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80110f8:	4b29      	ldr	r3, [pc, #164]	@ (80111a0 <tcp_close_shutdown+0x1bc>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	687a      	ldr	r2, [r7, #4]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d105      	bne.n	801110e <tcp_close_shutdown+0x12a>
 8011102:	4b27      	ldr	r3, [pc, #156]	@ (80111a0 <tcp_close_shutdown+0x1bc>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	4a25      	ldr	r2, [pc, #148]	@ (80111a0 <tcp_close_shutdown+0x1bc>)
 801110a:	6013      	str	r3, [r2, #0]
 801110c:	e013      	b.n	8011136 <tcp_close_shutdown+0x152>
 801110e:	4b24      	ldr	r3, [pc, #144]	@ (80111a0 <tcp_close_shutdown+0x1bc>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	60bb      	str	r3, [r7, #8]
 8011114:	e00c      	b.n	8011130 <tcp_close_shutdown+0x14c>
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	429a      	cmp	r2, r3
 801111e:	d104      	bne.n	801112a <tcp_close_shutdown+0x146>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	68da      	ldr	r2, [r3, #12]
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	60da      	str	r2, [r3, #12]
 8011128:	e005      	b.n	8011136 <tcp_close_shutdown+0x152>
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	60bb      	str	r3, [r7, #8]
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d1ef      	bne.n	8011116 <tcp_close_shutdown+0x132>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff fe9f 	bl	8010e80 <tcp_free>
      break;
 8011142:	e01a      	b.n	801117a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f7ff ff13 	bl	8010f70 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801114a:	6879      	ldr	r1, [r7, #4]
 801114c:	4815      	ldr	r0, [pc, #84]	@ (80111a4 <tcp_close_shutdown+0x1c0>)
 801114e:	f001 f8ad 	bl	80122ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f7ff feb0 	bl	8010eb8 <tcp_free_listen>
      break;
 8011158:	e00f      	b.n	801117a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801115a:	6879      	ldr	r1, [r7, #4]
 801115c:	480d      	ldr	r0, [pc, #52]	@ (8011194 <tcp_close_shutdown+0x1b0>)
 801115e:	f001 f8a5 	bl	80122ac <tcp_pcb_remove>
 8011162:	4b0d      	ldr	r3, [pc, #52]	@ (8011198 <tcp_close_shutdown+0x1b4>)
 8011164:	2201      	movs	r2, #1
 8011166:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f7ff fe89 	bl	8010e80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801116e:	e004      	b.n	801117a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 f819 	bl	80111a8 <tcp_close_shutdown_fin>
 8011176:	4603      	mov	r3, r0
 8011178:	e000      	b.n	801117c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bdb0      	pop	{r4, r5, r7, pc}
 8011184:	0801b328 	.word	0x0801b328
 8011188:	0801b3fc 	.word	0x0801b3fc
 801118c:	0801b36c 	.word	0x0801b36c
 8011190:	0801b41c 	.word	0x0801b41c
 8011194:	240105f4 	.word	0x240105f4
 8011198:	240105fc 	.word	0x240105fc
 801119c:	24010634 	.word	0x24010634
 80111a0:	240105ec 	.word	0x240105ec
 80111a4:	240105f0 	.word	0x240105f0

080111a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d106      	bne.n	80111c4 <tcp_close_shutdown_fin+0x1c>
 80111b6:	4b2e      	ldr	r3, [pc, #184]	@ (8011270 <tcp_close_shutdown_fin+0xc8>)
 80111b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80111bc:	492d      	ldr	r1, [pc, #180]	@ (8011274 <tcp_close_shutdown_fin+0xcc>)
 80111be:	482e      	ldr	r0, [pc, #184]	@ (8011278 <tcp_close_shutdown_fin+0xd0>)
 80111c0:	f008 fb10 	bl	80197e4 <iprintf>

  switch (pcb->state) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	7d1b      	ldrb	r3, [r3, #20]
 80111c8:	2b07      	cmp	r3, #7
 80111ca:	d020      	beq.n	801120e <tcp_close_shutdown_fin+0x66>
 80111cc:	2b07      	cmp	r3, #7
 80111ce:	dc2b      	bgt.n	8011228 <tcp_close_shutdown_fin+0x80>
 80111d0:	2b03      	cmp	r3, #3
 80111d2:	d002      	beq.n	80111da <tcp_close_shutdown_fin+0x32>
 80111d4:	2b04      	cmp	r3, #4
 80111d6:	d00d      	beq.n	80111f4 <tcp_close_shutdown_fin+0x4c>
 80111d8:	e026      	b.n	8011228 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f003 fee8 	bl	8014fb0 <tcp_send_fin>
 80111e0:	4603      	mov	r3, r0
 80111e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80111e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d11f      	bne.n	801122c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2205      	movs	r2, #5
 80111f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80111f2:	e01b      	b.n	801122c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f003 fedb 	bl	8014fb0 <tcp_send_fin>
 80111fa:	4603      	mov	r3, r0
 80111fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80111fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d114      	bne.n	8011230 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2205      	movs	r2, #5
 801120a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801120c:	e010      	b.n	8011230 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f003 fece 	bl	8014fb0 <tcp_send_fin>
 8011214:	4603      	mov	r3, r0
 8011216:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d109      	bne.n	8011234 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2209      	movs	r2, #9
 8011224:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011226:	e005      	b.n	8011234 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	e01c      	b.n	8011266 <tcp_close_shutdown_fin+0xbe>
      break;
 801122c:	bf00      	nop
 801122e:	e002      	b.n	8011236 <tcp_close_shutdown_fin+0x8e>
      break;
 8011230:	bf00      	nop
 8011232:	e000      	b.n	8011236 <tcp_close_shutdown_fin+0x8e>
      break;
 8011234:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d103      	bne.n	8011246 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f003 fff4 	bl	801522c <tcp_output>
 8011244:	e00d      	b.n	8011262 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801124a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801124e:	d108      	bne.n	8011262 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	8b5b      	ldrh	r3, [r3, #26]
 8011254:	f043 0308 	orr.w	r3, r3, #8
 8011258:	b29a      	uxth	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801125e:	2300      	movs	r3, #0
 8011260:	e001      	b.n	8011266 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	0801b328 	.word	0x0801b328
 8011274:	0801b3d8 	.word	0x0801b3d8
 8011278:	0801b36c 	.word	0x0801b36c

0801127c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d109      	bne.n	801129e <tcp_close+0x22>
 801128a:	4b0f      	ldr	r3, [pc, #60]	@ (80112c8 <tcp_close+0x4c>)
 801128c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011290:	490e      	ldr	r1, [pc, #56]	@ (80112cc <tcp_close+0x50>)
 8011292:	480f      	ldr	r0, [pc, #60]	@ (80112d0 <tcp_close+0x54>)
 8011294:	f008 faa6 	bl	80197e4 <iprintf>
 8011298:	f06f 030f 	mvn.w	r3, #15
 801129c:	e00f      	b.n	80112be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	7d1b      	ldrb	r3, [r3, #20]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d006      	beq.n	80112b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	8b5b      	ldrh	r3, [r3, #26]
 80112aa:	f043 0310 	orr.w	r3, r3, #16
 80112ae:	b29a      	uxth	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80112b4:	2101      	movs	r1, #1
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f7ff fe94 	bl	8010fe4 <tcp_close_shutdown>
 80112bc:	4603      	mov	r3, r0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	0801b328 	.word	0x0801b328
 80112cc:	0801b438 	.word	0x0801b438
 80112d0:	0801b36c 	.word	0x0801b36c

080112d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08e      	sub	sp, #56	@ 0x38
 80112d8:	af04      	add	r7, sp, #16
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d107      	bne.n	80112f4 <tcp_abandon+0x20>
 80112e4:	4b52      	ldr	r3, [pc, #328]	@ (8011430 <tcp_abandon+0x15c>)
 80112e6:	f240 223d 	movw	r2, #573	@ 0x23d
 80112ea:	4952      	ldr	r1, [pc, #328]	@ (8011434 <tcp_abandon+0x160>)
 80112ec:	4852      	ldr	r0, [pc, #328]	@ (8011438 <tcp_abandon+0x164>)
 80112ee:	f008 fa79 	bl	80197e4 <iprintf>
 80112f2:	e099      	b.n	8011428 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	7d1b      	ldrb	r3, [r3, #20]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d106      	bne.n	801130a <tcp_abandon+0x36>
 80112fc:	4b4c      	ldr	r3, [pc, #304]	@ (8011430 <tcp_abandon+0x15c>)
 80112fe:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011302:	494e      	ldr	r1, [pc, #312]	@ (801143c <tcp_abandon+0x168>)
 8011304:	484c      	ldr	r0, [pc, #304]	@ (8011438 <tcp_abandon+0x164>)
 8011306:	f008 fa6d 	bl	80197e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	7d1b      	ldrb	r3, [r3, #20]
 801130e:	2b0a      	cmp	r3, #10
 8011310:	d107      	bne.n	8011322 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	484a      	ldr	r0, [pc, #296]	@ (8011440 <tcp_abandon+0x16c>)
 8011316:	f000 ffc9 	bl	80122ac <tcp_pcb_remove>
    tcp_free(pcb);
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff fdb0 	bl	8010e80 <tcp_free>
 8011320:	e082      	b.n	8011428 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011322:	2300      	movs	r3, #0
 8011324:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801132e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011334:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801133c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	7d1b      	ldrb	r3, [r3, #20]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d126      	bne.n	801139a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	8adb      	ldrh	r3, [r3, #22]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d02e      	beq.n	80113b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011354:	4b3b      	ldr	r3, [pc, #236]	@ (8011444 <tcp_abandon+0x170>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	429a      	cmp	r2, r3
 801135c:	d105      	bne.n	801136a <tcp_abandon+0x96>
 801135e:	4b39      	ldr	r3, [pc, #228]	@ (8011444 <tcp_abandon+0x170>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	4a37      	ldr	r2, [pc, #220]	@ (8011444 <tcp_abandon+0x170>)
 8011366:	6013      	str	r3, [r2, #0]
 8011368:	e013      	b.n	8011392 <tcp_abandon+0xbe>
 801136a:	4b36      	ldr	r3, [pc, #216]	@ (8011444 <tcp_abandon+0x170>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	61fb      	str	r3, [r7, #28]
 8011370:	e00c      	b.n	801138c <tcp_abandon+0xb8>
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	429a      	cmp	r2, r3
 801137a:	d104      	bne.n	8011386 <tcp_abandon+0xb2>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	68da      	ldr	r2, [r3, #12]
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	60da      	str	r2, [r3, #12]
 8011384:	e005      	b.n	8011392 <tcp_abandon+0xbe>
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	61fb      	str	r3, [r7, #28]
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d1ef      	bne.n	8011372 <tcp_abandon+0x9e>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	60da      	str	r2, [r3, #12]
 8011398:	e00b      	b.n	80113b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8adb      	ldrh	r3, [r3, #22]
 80113a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80113a4:	6879      	ldr	r1, [r7, #4]
 80113a6:	4828      	ldr	r0, [pc, #160]	@ (8011448 <tcp_abandon+0x174>)
 80113a8:	f000 ff80 	bl	80122ac <tcp_pcb_remove>
 80113ac:	4b27      	ldr	r3, [pc, #156]	@ (801144c <tcp_abandon+0x178>)
 80113ae:	2201      	movs	r2, #1
 80113b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d004      	beq.n	80113c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113be:	4618      	mov	r0, r3
 80113c0:	f000 fd22 	bl	8011e08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d004      	beq.n	80113d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113d0:	4618      	mov	r0, r3
 80113d2:	f000 fd19 	bl	8011e08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d004      	beq.n	80113e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113e2:	4618      	mov	r0, r3
 80113e4:	f000 fd10 	bl	8011e08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80113e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00e      	beq.n	801140c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80113ee:	6879      	ldr	r1, [r7, #4]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	3304      	adds	r3, #4
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	8b12      	ldrh	r2, [r2, #24]
 80113f8:	9202      	str	r2, [sp, #8]
 80113fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80113fc:	9201      	str	r2, [sp, #4]
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	460b      	mov	r3, r1
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	69b9      	ldr	r1, [r7, #24]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f004 fcc4 	bl	8015d94 <tcp_rst>
    }
    last_state = pcb->state;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f7ff fd34 	bl	8010e80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d004      	beq.n	8011428 <tcp_abandon+0x154>
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f06f 010c 	mvn.w	r1, #12
 8011424:	68f8      	ldr	r0, [r7, #12]
 8011426:	4798      	blx	r3
  }
}
 8011428:	3728      	adds	r7, #40	@ 0x28
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	0801b328 	.word	0x0801b328
 8011434:	0801b46c 	.word	0x0801b46c
 8011438:	0801b36c 	.word	0x0801b36c
 801143c:	0801b488 	.word	0x0801b488
 8011440:	240105f8 	.word	0x240105f8
 8011444:	240105ec 	.word	0x240105ec
 8011448:	240105f4 	.word	0x240105f4
 801144c:	240105fc 	.word	0x240105fc

08011450 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011458:	2101      	movs	r1, #1
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff ff3a 	bl	80112d4 <tcp_abandon>
}
 8011460:	bf00      	nop
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d106      	bne.n	8011484 <tcp_update_rcv_ann_wnd+0x1c>
 8011476:	4b25      	ldr	r3, [pc, #148]	@ (801150c <tcp_update_rcv_ann_wnd+0xa4>)
 8011478:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801147c:	4924      	ldr	r1, [pc, #144]	@ (8011510 <tcp_update_rcv_ann_wnd+0xa8>)
 801147e:	4825      	ldr	r0, [pc, #148]	@ (8011514 <tcp_update_rcv_ann_wnd+0xac>)
 8011480:	f008 f9b0 	bl	80197e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801148c:	4413      	add	r3, r2
 801148e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011494:	687a      	ldr	r2, [r7, #4]
 8011496:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011498:	f640 3168 	movw	r1, #2920	@ 0xb68
 801149c:	428a      	cmp	r2, r1
 801149e:	bf28      	it	cs
 80114a0:	460a      	movcs	r2, r1
 80114a2:	b292      	uxth	r2, r2
 80114a4:	4413      	add	r3, r2
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	1ad3      	subs	r3, r2, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db08      	blt.n	80114c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	e020      	b.n	8011502 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	dd03      	ble.n	80114d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80114d4:	e014      	b.n	8011500 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114de:	1ad3      	subs	r3, r2, r3
 80114e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80114e8:	d306      	bcc.n	80114f8 <tcp_update_rcv_ann_wnd+0x90>
 80114ea:	4b08      	ldr	r3, [pc, #32]	@ (801150c <tcp_update_rcv_ann_wnd+0xa4>)
 80114ec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80114f0:	4909      	ldr	r1, [pc, #36]	@ (8011518 <tcp_update_rcv_ann_wnd+0xb0>)
 80114f2:	4808      	ldr	r0, [pc, #32]	@ (8011514 <tcp_update_rcv_ann_wnd+0xac>)
 80114f4:	f008 f976 	bl	80197e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8011500:	2300      	movs	r3, #0
  }
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	0801b328 	.word	0x0801b328
 8011510:	0801b584 	.word	0x0801b584
 8011514:	0801b36c 	.word	0x0801b36c
 8011518:	0801b5a8 	.word	0x0801b5a8

0801151c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b084      	sub	sp, #16
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d107      	bne.n	801153e <tcp_recved+0x22>
 801152e:	4b20      	ldr	r3, [pc, #128]	@ (80115b0 <tcp_recved+0x94>)
 8011530:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011534:	491f      	ldr	r1, [pc, #124]	@ (80115b4 <tcp_recved+0x98>)
 8011536:	4820      	ldr	r0, [pc, #128]	@ (80115b8 <tcp_recved+0x9c>)
 8011538:	f008 f954 	bl	80197e4 <iprintf>
 801153c:	e034      	b.n	80115a8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	7d1b      	ldrb	r3, [r3, #20]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d106      	bne.n	8011554 <tcp_recved+0x38>
 8011546:	4b1a      	ldr	r3, [pc, #104]	@ (80115b0 <tcp_recved+0x94>)
 8011548:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801154c:	491b      	ldr	r1, [pc, #108]	@ (80115bc <tcp_recved+0xa0>)
 801154e:	481a      	ldr	r0, [pc, #104]	@ (80115b8 <tcp_recved+0x9c>)
 8011550:	f008 f948 	bl	80197e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011558:	887b      	ldrh	r3, [r7, #2]
 801155a:	4413      	add	r3, r2
 801155c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801155e:	89fb      	ldrh	r3, [r7, #14]
 8011560:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011564:	4293      	cmp	r3, r2
 8011566:	d804      	bhi.n	8011572 <tcp_recved+0x56>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801156c:	89fa      	ldrh	r2, [r7, #14]
 801156e:	429a      	cmp	r2, r3
 8011570:	d204      	bcs.n	801157c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011578:	851a      	strh	r2, [r3, #40]	@ 0x28
 801157a:	e002      	b.n	8011582 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	89fa      	ldrh	r2, [r7, #14]
 8011580:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7ff ff70 	bl	8011468 <tcp_update_rcv_ann_wnd>
 8011588:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011590:	4293      	cmp	r3, r2
 8011592:	d909      	bls.n	80115a8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	8b5b      	ldrh	r3, [r3, #26]
 8011598:	f043 0302 	orr.w	r3, r3, #2
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f003 fe42 	bl	801522c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	0801b328 	.word	0x0801b328
 80115b4:	0801b5c4 	.word	0x0801b5c4
 80115b8:	0801b36c 	.word	0x0801b36c
 80115bc:	0801b5dc 	.word	0x0801b5dc

080115c0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80115c0:	b5b0      	push	{r4, r5, r7, lr}
 80115c2:	b090      	sub	sp, #64	@ 0x40
 80115c4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80115cc:	4b95      	ldr	r3, [pc, #596]	@ (8011824 <tcp_slowtmr+0x264>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	3301      	adds	r3, #1
 80115d2:	4a94      	ldr	r2, [pc, #592]	@ (8011824 <tcp_slowtmr+0x264>)
 80115d4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80115d6:	4b94      	ldr	r3, [pc, #592]	@ (8011828 <tcp_slowtmr+0x268>)
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	3301      	adds	r3, #1
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	4b92      	ldr	r3, [pc, #584]	@ (8011828 <tcp_slowtmr+0x268>)
 80115e0:	701a      	strb	r2, [r3, #0]
 80115e2:	e000      	b.n	80115e6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80115e4:	bf00      	nop
  prev = NULL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80115ea:	4b90      	ldr	r3, [pc, #576]	@ (801182c <tcp_slowtmr+0x26c>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80115f0:	e29d      	b.n	8011b2e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80115f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f4:	7d1b      	ldrb	r3, [r3, #20]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d106      	bne.n	8011608 <tcp_slowtmr+0x48>
 80115fa:	4b8d      	ldr	r3, [pc, #564]	@ (8011830 <tcp_slowtmr+0x270>)
 80115fc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011600:	498c      	ldr	r1, [pc, #560]	@ (8011834 <tcp_slowtmr+0x274>)
 8011602:	488d      	ldr	r0, [pc, #564]	@ (8011838 <tcp_slowtmr+0x278>)
 8011604:	f008 f8ee 	bl	80197e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	7d1b      	ldrb	r3, [r3, #20]
 801160c:	2b01      	cmp	r3, #1
 801160e:	d106      	bne.n	801161e <tcp_slowtmr+0x5e>
 8011610:	4b87      	ldr	r3, [pc, #540]	@ (8011830 <tcp_slowtmr+0x270>)
 8011612:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8011616:	4989      	ldr	r1, [pc, #548]	@ (801183c <tcp_slowtmr+0x27c>)
 8011618:	4887      	ldr	r0, [pc, #540]	@ (8011838 <tcp_slowtmr+0x278>)
 801161a:	f008 f8e3 	bl	80197e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011620:	7d1b      	ldrb	r3, [r3, #20]
 8011622:	2b0a      	cmp	r3, #10
 8011624:	d106      	bne.n	8011634 <tcp_slowtmr+0x74>
 8011626:	4b82      	ldr	r3, [pc, #520]	@ (8011830 <tcp_slowtmr+0x270>)
 8011628:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801162c:	4984      	ldr	r1, [pc, #528]	@ (8011840 <tcp_slowtmr+0x280>)
 801162e:	4882      	ldr	r0, [pc, #520]	@ (8011838 <tcp_slowtmr+0x278>)
 8011630:	f008 f8d8 	bl	80197e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011636:	7f9a      	ldrb	r2, [r3, #30]
 8011638:	4b7b      	ldr	r3, [pc, #492]	@ (8011828 <tcp_slowtmr+0x268>)
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	429a      	cmp	r2, r3
 801163e:	d105      	bne.n	801164c <tcp_slowtmr+0x8c>
      prev = pcb;
 8011640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011642:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801164a:	e270      	b.n	8011b2e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801164c:	4b76      	ldr	r3, [pc, #472]	@ (8011828 <tcp_slowtmr+0x268>)
 801164e:	781a      	ldrb	r2, [r3, #0]
 8011650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011652:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801165a:	2300      	movs	r3, #0
 801165c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011662:	7d1b      	ldrb	r3, [r3, #20]
 8011664:	2b02      	cmp	r3, #2
 8011666:	d10a      	bne.n	801167e <tcp_slowtmr+0xbe>
 8011668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801166e:	2b05      	cmp	r3, #5
 8011670:	d905      	bls.n	801167e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011676:	3301      	adds	r3, #1
 8011678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801167c:	e11e      	b.n	80118bc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011684:	2b0b      	cmp	r3, #11
 8011686:	d905      	bls.n	8011694 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8011688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801168c:	3301      	adds	r3, #1
 801168e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011692:	e113      	b.n	80118bc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011696:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801169a:	2b00      	cmp	r3, #0
 801169c:	d075      	beq.n	801178a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d006      	beq.n	80116b4 <tcp_slowtmr+0xf4>
 80116a6:	4b62      	ldr	r3, [pc, #392]	@ (8011830 <tcp_slowtmr+0x270>)
 80116a8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80116ac:	4965      	ldr	r1, [pc, #404]	@ (8011844 <tcp_slowtmr+0x284>)
 80116ae:	4862      	ldr	r0, [pc, #392]	@ (8011838 <tcp_slowtmr+0x278>)
 80116b0:	f008 f898 	bl	80197e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80116b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d106      	bne.n	80116ca <tcp_slowtmr+0x10a>
 80116bc:	4b5c      	ldr	r3, [pc, #368]	@ (8011830 <tcp_slowtmr+0x270>)
 80116be:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80116c2:	4961      	ldr	r1, [pc, #388]	@ (8011848 <tcp_slowtmr+0x288>)
 80116c4:	485c      	ldr	r0, [pc, #368]	@ (8011838 <tcp_slowtmr+0x278>)
 80116c6:	f008 f88d 	bl	80197e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80116ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80116d0:	2b0b      	cmp	r3, #11
 80116d2:	d905      	bls.n	80116e0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80116d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116d8:	3301      	adds	r3, #1
 80116da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80116de:	e0ed      	b.n	80118bc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80116e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80116e6:	3b01      	subs	r3, #1
 80116e8:	4a58      	ldr	r2, [pc, #352]	@ (801184c <tcp_slowtmr+0x28c>)
 80116ea:	5cd3      	ldrb	r3, [r2, r3]
 80116ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80116ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80116f4:	7c7a      	ldrb	r2, [r7, #17]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d907      	bls.n	801170a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80116fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011700:	3301      	adds	r3, #1
 8011702:	b2da      	uxtb	r2, r3
 8011704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011706:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801170c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011710:	7c7a      	ldrb	r2, [r7, #17]
 8011712:	429a      	cmp	r2, r3
 8011714:	f200 80d2 	bhi.w	80118bc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8011718:	2301      	movs	r3, #1
 801171a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011722:	2b00      	cmp	r3, #0
 8011724:	d108      	bne.n	8011738 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011728:	f004 fc28 	bl	8015f7c <tcp_zero_window_probe>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d014      	beq.n	801175c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8011732:	2300      	movs	r3, #0
 8011734:	623b      	str	r3, [r7, #32]
 8011736:	e011      	b.n	801175c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801173a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801173e:	4619      	mov	r1, r3
 8011740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011742:	f003 faed 	bl	8014d20 <tcp_split_unsent_seg>
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d107      	bne.n	801175c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801174c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801174e:	f003 fd6d 	bl	801522c <tcp_output>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801175c:	6a3b      	ldr	r3, [r7, #32]
 801175e:	2b00      	cmp	r3, #0
 8011760:	f000 80ac 	beq.w	80118bc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011766:	2200      	movs	r2, #0
 8011768:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011772:	2b06      	cmp	r3, #6
 8011774:	f200 80a2 	bhi.w	80118bc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8011778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801177e:	3301      	adds	r3, #1
 8011780:	b2da      	uxtb	r2, r3
 8011782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011784:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8011788:	e098      	b.n	80118bc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801178a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801178c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011790:	2b00      	cmp	r3, #0
 8011792:	db0f      	blt.n	80117b4 <tcp_slowtmr+0x1f4>
 8011794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011796:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801179a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801179e:	4293      	cmp	r3, r2
 80117a0:	d008      	beq.n	80117b4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80117a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	3301      	adds	r3, #1
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	b21a      	sxth	r2, r3
 80117b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80117b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80117ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80117c0:	429a      	cmp	r2, r3
 80117c2:	db7b      	blt.n	80118bc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80117c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80117c6:	f004 f825 	bl	8015814 <tcp_rexmit_rto_prepare>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d007      	beq.n	80117e0 <tcp_slowtmr+0x220>
 80117d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d171      	bne.n	80118bc <tcp_slowtmr+0x2fc>
 80117d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d06d      	beq.n	80118bc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80117e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d03a      	beq.n	801185e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80117e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80117ee:	2b0c      	cmp	r3, #12
 80117f0:	bf28      	it	cs
 80117f2:	230c      	movcs	r3, #12
 80117f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80117f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80117fc:	10db      	asrs	r3, r3, #3
 80117fe:	b21b      	sxth	r3, r3
 8011800:	461a      	mov	r2, r3
 8011802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011804:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011808:	4413      	add	r3, r2
 801180a:	7efa      	ldrb	r2, [r7, #27]
 801180c:	4910      	ldr	r1, [pc, #64]	@ (8011850 <tcp_slowtmr+0x290>)
 801180e:	5c8a      	ldrb	r2, [r1, r2]
 8011810:	4093      	lsls	r3, r2
 8011812:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801181a:	4293      	cmp	r3, r2
 801181c:	dc1a      	bgt.n	8011854 <tcp_slowtmr+0x294>
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	b21a      	sxth	r2, r3
 8011822:	e019      	b.n	8011858 <tcp_slowtmr+0x298>
 8011824:	240105e8 	.word	0x240105e8
 8011828:	240105fe 	.word	0x240105fe
 801182c:	240105f4 	.word	0x240105f4
 8011830:	0801b328 	.word	0x0801b328
 8011834:	0801b66c 	.word	0x0801b66c
 8011838:	0801b36c 	.word	0x0801b36c
 801183c:	0801b698 	.word	0x0801b698
 8011840:	0801b6c4 	.word	0x0801b6c4
 8011844:	0801b6f4 	.word	0x0801b6f4
 8011848:	0801b728 	.word	0x0801b728
 801184c:	0801d340 	.word	0x0801d340
 8011850:	0801d330 	.word	0x0801d330
 8011854:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	2200      	movs	r2, #0
 8011862:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011866:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801186c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011870:	4293      	cmp	r3, r2
 8011872:	bf28      	it	cs
 8011874:	4613      	movcs	r3, r2
 8011876:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011878:	8a7b      	ldrh	r3, [r7, #18]
 801187a:	085b      	lsrs	r3, r3, #1
 801187c:	b29a      	uxth	r2, r3
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011886:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801188c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	b29b      	uxth	r3, r3
 8011892:	429a      	cmp	r2, r3
 8011894:	d206      	bcs.n	80118a4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011898:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801189a:	005b      	lsls	r3, r3, #1
 801189c:	b29a      	uxth	r2, r3
 801189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80118a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80118a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80118ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b0:	2200      	movs	r2, #0
 80118b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80118b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118b8:	f004 f81c 	bl	80158f4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80118bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118be:	7d1b      	ldrb	r3, [r3, #20]
 80118c0:	2b06      	cmp	r3, #6
 80118c2:	d111      	bne.n	80118e8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80118c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c6:	8b5b      	ldrh	r3, [r3, #26]
 80118c8:	f003 0310 	and.w	r3, r3, #16
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d00b      	beq.n	80118e8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80118d0:	4b9c      	ldr	r3, [pc, #624]	@ (8011b44 <tcp_slowtmr+0x584>)
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d6:	6a1b      	ldr	r3, [r3, #32]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	2b28      	cmp	r3, #40	@ 0x28
 80118dc:	d904      	bls.n	80118e8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80118de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80118e2:	3301      	adds	r3, #1
 80118e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80118e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ea:	7a5b      	ldrb	r3, [r3, #9]
 80118ec:	f003 0308 	and.w	r3, r3, #8
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d04a      	beq.n	801198a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80118f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80118f8:	2b04      	cmp	r3, #4
 80118fa:	d003      	beq.n	8011904 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80118fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011900:	2b07      	cmp	r3, #7
 8011902:	d142      	bne.n	801198a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011904:	4b8f      	ldr	r3, [pc, #572]	@ (8011b44 <tcp_slowtmr+0x584>)
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011910:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011914:	4b8c      	ldr	r3, [pc, #560]	@ (8011b48 <tcp_slowtmr+0x588>)
 8011916:	440b      	add	r3, r1
 8011918:	498c      	ldr	r1, [pc, #560]	@ (8011b4c <tcp_slowtmr+0x58c>)
 801191a:	fba1 1303 	umull	r1, r3, r1, r3
 801191e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011920:	429a      	cmp	r2, r3
 8011922:	d90a      	bls.n	801193a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8011924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011928:	3301      	adds	r3, #1
 801192a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801192e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011932:	3301      	adds	r3, #1
 8011934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011938:	e027      	b.n	801198a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801193a:	4b82      	ldr	r3, [pc, #520]	@ (8011b44 <tcp_slowtmr+0x584>)
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011946:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801194a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801194c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011950:	4618      	mov	r0, r3
 8011952:	4b7f      	ldr	r3, [pc, #508]	@ (8011b50 <tcp_slowtmr+0x590>)
 8011954:	fb00 f303 	mul.w	r3, r0, r3
 8011958:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801195a:	497c      	ldr	r1, [pc, #496]	@ (8011b4c <tcp_slowtmr+0x58c>)
 801195c:	fba1 1303 	umull	r1, r3, r1, r3
 8011960:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011962:	429a      	cmp	r2, r3
 8011964:	d911      	bls.n	801198a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011966:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011968:	f004 fac8 	bl	8015efc <tcp_keepalive>
 801196c:	4603      	mov	r3, r0
 801196e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011972:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011976:	2b00      	cmp	r3, #0
 8011978:	d107      	bne.n	801198a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801197a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801197c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011980:	3301      	adds	r3, #1
 8011982:	b2da      	uxtb	r2, r3
 8011984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011986:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801198c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801198e:	2b00      	cmp	r3, #0
 8011990:	d011      	beq.n	80119b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011992:	4b6c      	ldr	r3, [pc, #432]	@ (8011b44 <tcp_slowtmr+0x584>)
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	1ad2      	subs	r2, r2, r3
 801199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801199e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80119a2:	4619      	mov	r1, r3
 80119a4:	460b      	mov	r3, r1
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	440b      	add	r3, r1
 80119aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d302      	bcc.n	80119b6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80119b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80119b2:	f000 fddf 	bl	8012574 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80119b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119b8:	7d1b      	ldrb	r3, [r3, #20]
 80119ba:	2b03      	cmp	r3, #3
 80119bc:	d10b      	bne.n	80119d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119be:	4b61      	ldr	r3, [pc, #388]	@ (8011b44 <tcp_slowtmr+0x584>)
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c4:	6a1b      	ldr	r3, [r3, #32]
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	2b28      	cmp	r3, #40	@ 0x28
 80119ca:	d904      	bls.n	80119d6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80119cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119d0:	3301      	adds	r3, #1
 80119d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80119d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119d8:	7d1b      	ldrb	r3, [r3, #20]
 80119da:	2b09      	cmp	r3, #9
 80119dc:	d10b      	bne.n	80119f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80119de:	4b59      	ldr	r3, [pc, #356]	@ (8011b44 <tcp_slowtmr+0x584>)
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e4:	6a1b      	ldr	r3, [r3, #32]
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80119ea:	d904      	bls.n	80119f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80119ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119f0:	3301      	adds	r3, #1
 80119f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80119f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d060      	beq.n	8011ac0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80119fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a04:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a08:	f000 fc00 	bl	801220c <tcp_pcb_purge>
      if (prev != NULL) {
 8011a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d010      	beq.n	8011a34 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011a12:	4b50      	ldr	r3, [pc, #320]	@ (8011b54 <tcp_slowtmr+0x594>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d106      	bne.n	8011a2a <tcp_slowtmr+0x46a>
 8011a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8011b58 <tcp_slowtmr+0x598>)
 8011a1e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011a22:	494e      	ldr	r1, [pc, #312]	@ (8011b5c <tcp_slowtmr+0x59c>)
 8011a24:	484e      	ldr	r0, [pc, #312]	@ (8011b60 <tcp_slowtmr+0x5a0>)
 8011a26:	f007 fedd 	bl	80197e4 <iprintf>
        prev->next = pcb->next;
 8011a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2c:	68da      	ldr	r2, [r3, #12]
 8011a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a30:	60da      	str	r2, [r3, #12]
 8011a32:	e00f      	b.n	8011a54 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011a34:	4b47      	ldr	r3, [pc, #284]	@ (8011b54 <tcp_slowtmr+0x594>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d006      	beq.n	8011a4c <tcp_slowtmr+0x48c>
 8011a3e:	4b46      	ldr	r3, [pc, #280]	@ (8011b58 <tcp_slowtmr+0x598>)
 8011a40:	f240 5271 	movw	r2, #1393	@ 0x571
 8011a44:	4947      	ldr	r1, [pc, #284]	@ (8011b64 <tcp_slowtmr+0x5a4>)
 8011a46:	4846      	ldr	r0, [pc, #280]	@ (8011b60 <tcp_slowtmr+0x5a0>)
 8011a48:	f007 fecc 	bl	80197e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	4a40      	ldr	r2, [pc, #256]	@ (8011b54 <tcp_slowtmr+0x594>)
 8011a52:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011a54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d013      	beq.n	8011a84 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a62:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011a64:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a68:	3304      	adds	r3, #4
 8011a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a6c:	8ad2      	ldrh	r2, [r2, #22]
 8011a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a70:	8b09      	ldrh	r1, [r1, #24]
 8011a72:	9102      	str	r1, [sp, #8]
 8011a74:	9201      	str	r2, [sp, #4]
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	462b      	mov	r3, r5
 8011a7a:	4622      	mov	r2, r4
 8011a7c:	4601      	mov	r1, r0
 8011a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a80:	f004 f988 	bl	8015d94 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a86:	691b      	ldr	r3, [r3, #16]
 8011a88:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a8c:	7d1b      	ldrb	r3, [r3, #20]
 8011a8e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a92:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011a9a:	6838      	ldr	r0, [r7, #0]
 8011a9c:	f7ff f9f0 	bl	8010e80 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011aa0:	4b31      	ldr	r3, [pc, #196]	@ (8011b68 <tcp_slowtmr+0x5a8>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d004      	beq.n	8011ab6 <tcp_slowtmr+0x4f6>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f06f 010c 	mvn.w	r1, #12
 8011ab2:	68b8      	ldr	r0, [r7, #8]
 8011ab4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8011b68 <tcp_slowtmr+0x5a8>)
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d037      	beq.n	8011b2e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011abe:	e592      	b.n	80115e6 <tcp_slowtmr+0x26>
      prev = pcb;
 8011ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac6:	68db      	ldr	r3, [r3, #12]
 8011ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011acc:	7f1b      	ldrb	r3, [r3, #28]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad8:	7f1a      	ldrb	r2, [r3, #28]
 8011ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011adc:	7f5b      	ldrb	r3, [r3, #29]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d325      	bcc.n	8011b2e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8011b68 <tcp_slowtmr+0x5a8>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00b      	beq.n	8011b10 <tcp_slowtmr+0x550>
 8011af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b00:	6912      	ldr	r2, [r2, #16]
 8011b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b04:	4610      	mov	r0, r2
 8011b06:	4798      	blx	r3
 8011b08:	4603      	mov	r3, r0
 8011b0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011b0e:	e002      	b.n	8011b16 <tcp_slowtmr+0x556>
 8011b10:	2300      	movs	r3, #0
 8011b12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011b16:	4b14      	ldr	r3, [pc, #80]	@ (8011b68 <tcp_slowtmr+0x5a8>)
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f47f ad62 	bne.w	80115e4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011b20:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d102      	bne.n	8011b2e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b2a:	f003 fb7f 	bl	801522c <tcp_output>
  while (pcb != NULL) {
 8011b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f47f ad5e 	bne.w	80115f2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011b36:	2300      	movs	r3, #0
 8011b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8011b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8011b6c <tcp_slowtmr+0x5ac>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011b40:	e069      	b.n	8011c16 <tcp_slowtmr+0x656>
 8011b42:	bf00      	nop
 8011b44:	240105e8 	.word	0x240105e8
 8011b48:	000a4cb8 	.word	0x000a4cb8
 8011b4c:	10624dd3 	.word	0x10624dd3
 8011b50:	000124f8 	.word	0x000124f8
 8011b54:	240105f4 	.word	0x240105f4
 8011b58:	0801b328 	.word	0x0801b328
 8011b5c:	0801b760 	.word	0x0801b760
 8011b60:	0801b36c 	.word	0x0801b36c
 8011b64:	0801b78c 	.word	0x0801b78c
 8011b68:	240105fc 	.word	0x240105fc
 8011b6c:	240105f8 	.word	0x240105f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b72:	7d1b      	ldrb	r3, [r3, #20]
 8011b74:	2b0a      	cmp	r3, #10
 8011b76:	d006      	beq.n	8011b86 <tcp_slowtmr+0x5c6>
 8011b78:	4b2b      	ldr	r3, [pc, #172]	@ (8011c28 <tcp_slowtmr+0x668>)
 8011b7a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8011b7e:	492b      	ldr	r1, [pc, #172]	@ (8011c2c <tcp_slowtmr+0x66c>)
 8011b80:	482b      	ldr	r0, [pc, #172]	@ (8011c30 <tcp_slowtmr+0x670>)
 8011b82:	f007 fe2f 	bl	80197e4 <iprintf>
    pcb_remove = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b8c:	4b29      	ldr	r3, [pc, #164]	@ (8011c34 <tcp_slowtmr+0x674>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b92:	6a1b      	ldr	r3, [r3, #32]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	2bf0      	cmp	r3, #240	@ 0xf0
 8011b98:	d904      	bls.n	8011ba4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d02f      	beq.n	8011c0c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011bae:	f000 fb2d 	bl	801220c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d010      	beq.n	8011bda <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8011c38 <tcp_slowtmr+0x678>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d106      	bne.n	8011bd0 <tcp_slowtmr+0x610>
 8011bc2:	4b19      	ldr	r3, [pc, #100]	@ (8011c28 <tcp_slowtmr+0x668>)
 8011bc4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011bc8:	491c      	ldr	r1, [pc, #112]	@ (8011c3c <tcp_slowtmr+0x67c>)
 8011bca:	4819      	ldr	r0, [pc, #100]	@ (8011c30 <tcp_slowtmr+0x670>)
 8011bcc:	f007 fe0a 	bl	80197e4 <iprintf>
        prev->next = pcb->next;
 8011bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bd2:	68da      	ldr	r2, [r3, #12]
 8011bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd6:	60da      	str	r2, [r3, #12]
 8011bd8:	e00f      	b.n	8011bfa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011bda:	4b17      	ldr	r3, [pc, #92]	@ (8011c38 <tcp_slowtmr+0x678>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d006      	beq.n	8011bf2 <tcp_slowtmr+0x632>
 8011be4:	4b10      	ldr	r3, [pc, #64]	@ (8011c28 <tcp_slowtmr+0x668>)
 8011be6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011bea:	4915      	ldr	r1, [pc, #84]	@ (8011c40 <tcp_slowtmr+0x680>)
 8011bec:	4810      	ldr	r0, [pc, #64]	@ (8011c30 <tcp_slowtmr+0x670>)
 8011bee:	f007 fdf9 	bl	80197e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	4a10      	ldr	r2, [pc, #64]	@ (8011c38 <tcp_slowtmr+0x678>)
 8011bf8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bfc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011c04:	69f8      	ldr	r0, [r7, #28]
 8011c06:	f7ff f93b 	bl	8010e80 <tcp_free>
 8011c0a:	e004      	b.n	8011c16 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1a9      	bne.n	8011b70 <tcp_slowtmr+0x5b0>
    }
  }
}
 8011c1c:	bf00      	nop
 8011c1e:	bf00      	nop
 8011c20:	3730      	adds	r7, #48	@ 0x30
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bdb0      	pop	{r4, r5, r7, pc}
 8011c26:	bf00      	nop
 8011c28:	0801b328 	.word	0x0801b328
 8011c2c:	0801b7b8 	.word	0x0801b7b8
 8011c30:	0801b36c 	.word	0x0801b36c
 8011c34:	240105e8 	.word	0x240105e8
 8011c38:	240105f8 	.word	0x240105f8
 8011c3c:	0801b7e8 	.word	0x0801b7e8
 8011c40:	0801b810 	.word	0x0801b810

08011c44 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8011d00 <tcp_fasttmr+0xbc>)
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	3301      	adds	r3, #1
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	4b2b      	ldr	r3, [pc, #172]	@ (8011d00 <tcp_fasttmr+0xbc>)
 8011c54:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011c56:	4b2b      	ldr	r3, [pc, #172]	@ (8011d04 <tcp_fasttmr+0xc0>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011c5c:	e048      	b.n	8011cf0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	7f9a      	ldrb	r2, [r3, #30]
 8011c62:	4b27      	ldr	r3, [pc, #156]	@ (8011d00 <tcp_fasttmr+0xbc>)
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d03f      	beq.n	8011cea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011c6a:	4b25      	ldr	r3, [pc, #148]	@ (8011d00 <tcp_fasttmr+0xbc>)
 8011c6c:	781a      	ldrb	r2, [r3, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	8b5b      	ldrh	r3, [r3, #26]
 8011c76:	f003 0301 	and.w	r3, r3, #1
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d010      	beq.n	8011ca0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8b5b      	ldrh	r3, [r3, #26]
 8011c82:	f043 0302 	orr.w	r3, r3, #2
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f003 facd 	bl	801522c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	8b5b      	ldrh	r3, [r3, #26]
 8011c96:	f023 0303 	bic.w	r3, r3, #3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	8b5b      	ldrh	r3, [r3, #26]
 8011ca4:	f003 0308 	and.w	r3, r3, #8
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d009      	beq.n	8011cc0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	8b5b      	ldrh	r3, [r3, #26]
 8011cb0:	f023 0308 	bic.w	r3, r3, #8
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f7ff fa74 	bl	80111a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00a      	beq.n	8011ce4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011cce:	4b0e      	ldr	r3, [pc, #56]	@ (8011d08 <tcp_fasttmr+0xc4>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 f819 	bl	8011d0c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011cda:	4b0b      	ldr	r3, [pc, #44]	@ (8011d08 <tcp_fasttmr+0xc4>)
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d000      	beq.n	8011ce4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011ce2:	e7b8      	b.n	8011c56 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	607b      	str	r3, [r7, #4]
 8011ce8:	e002      	b.n	8011cf0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1b3      	bne.n	8011c5e <tcp_fasttmr+0x1a>
    }
  }
}
 8011cf6:	bf00      	nop
 8011cf8:	bf00      	nop
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	240105fe 	.word	0x240105fe
 8011d04:	240105f4 	.word	0x240105f4
 8011d08:	240105fc 	.word	0x240105fc

08011d0c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011d0c:	b590      	push	{r4, r7, lr}
 8011d0e:	b085      	sub	sp, #20
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d109      	bne.n	8011d2e <tcp_process_refused_data+0x22>
 8011d1a:	4b38      	ldr	r3, [pc, #224]	@ (8011dfc <tcp_process_refused_data+0xf0>)
 8011d1c:	f240 6209 	movw	r2, #1545	@ 0x609
 8011d20:	4937      	ldr	r1, [pc, #220]	@ (8011e00 <tcp_process_refused_data+0xf4>)
 8011d22:	4838      	ldr	r0, [pc, #224]	@ (8011e04 <tcp_process_refused_data+0xf8>)
 8011d24:	f007 fd5e 	bl	80197e4 <iprintf>
 8011d28:	f06f 030f 	mvn.w	r3, #15
 8011d2c:	e061      	b.n	8011df2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d32:	7b5b      	ldrb	r3, [r3, #13]
 8011d34:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d3a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00b      	beq.n	8011d64 <tcp_process_refused_data+0x58>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6918      	ldr	r0, [r3, #16]
 8011d56:	2300      	movs	r3, #0
 8011d58:	68ba      	ldr	r2, [r7, #8]
 8011d5a:	6879      	ldr	r1, [r7, #4]
 8011d5c:	47a0      	blx	r4
 8011d5e:	4603      	mov	r3, r0
 8011d60:	73fb      	strb	r3, [r7, #15]
 8011d62:	e007      	b.n	8011d74 <tcp_process_refused_data+0x68>
 8011d64:	2300      	movs	r3, #0
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	6879      	ldr	r1, [r7, #4]
 8011d6a:	2000      	movs	r0, #0
 8011d6c:	f000 f8a6 	bl	8011ebc <tcp_recv_null>
 8011d70:	4603      	mov	r3, r0
 8011d72:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d12b      	bne.n	8011dd4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011d7c:	7bbb      	ldrb	r3, [r7, #14]
 8011d7e:	f003 0320 	and.w	r3, r3, #32
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d034      	beq.n	8011df0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d8a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d005      	beq.n	8011d9e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d96:	3301      	adds	r3, #1
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00b      	beq.n	8011dc0 <tcp_process_refused_data+0xb4>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6918      	ldr	r0, [r3, #16]
 8011db2:	2300      	movs	r3, #0
 8011db4:	2200      	movs	r2, #0
 8011db6:	6879      	ldr	r1, [r7, #4]
 8011db8:	47a0      	blx	r4
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73fb      	strb	r3, [r7, #15]
 8011dbe:	e001      	b.n	8011dc4 <tcp_process_refused_data+0xb8>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dc8:	f113 0f0d 	cmn.w	r3, #13
 8011dcc:	d110      	bne.n	8011df0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8011dce:	f06f 030c 	mvn.w	r3, #12
 8011dd2:	e00e      	b.n	8011df2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dd8:	f113 0f0d 	cmn.w	r3, #13
 8011ddc:	d102      	bne.n	8011de4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011dde:	f06f 030c 	mvn.w	r3, #12
 8011de2:	e006      	b.n	8011df2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	68ba      	ldr	r2, [r7, #8]
 8011de8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011dea:	f06f 0304 	mvn.w	r3, #4
 8011dee:	e000      	b.n	8011df2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3714      	adds	r7, #20
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	0801b328 	.word	0x0801b328
 8011e00:	0801b838 	.word	0x0801b838
 8011e04:	0801b36c 	.word	0x0801b36c

08011e08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011e10:	e007      	b.n	8011e22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f000 f80a 	bl	8011e32 <tcp_seg_free>
    seg = next;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1f4      	bne.n	8011e12 <tcp_segs_free+0xa>
  }
}
 8011e28:	bf00      	nop
 8011e2a:	bf00      	nop
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b082      	sub	sp, #8
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00c      	beq.n	8011e5a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d004      	beq.n	8011e52 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fe fd5b 	bl	8010908 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011e52:	6879      	ldr	r1, [r7, #4]
 8011e54:	2003      	movs	r0, #3
 8011e56:	f7fd feaf 	bl	800fbb8 <memp_free>
  }
}
 8011e5a:	bf00      	nop
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
	...

08011e64 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d106      	bne.n	8011e80 <tcp_seg_copy+0x1c>
 8011e72:	4b0f      	ldr	r3, [pc, #60]	@ (8011eb0 <tcp_seg_copy+0x4c>)
 8011e74:	f240 6282 	movw	r2, #1666	@ 0x682
 8011e78:	490e      	ldr	r1, [pc, #56]	@ (8011eb4 <tcp_seg_copy+0x50>)
 8011e7a:	480f      	ldr	r0, [pc, #60]	@ (8011eb8 <tcp_seg_copy+0x54>)
 8011e7c:	f007 fcb2 	bl	80197e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011e80:	2003      	movs	r0, #3
 8011e82:	f7fd fe23 	bl	800facc <memp_malloc>
 8011e86:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <tcp_seg_copy+0x2e>
    return NULL;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e00a      	b.n	8011ea8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011e92:	2210      	movs	r2, #16
 8011e94:	6879      	ldr	r1, [r7, #4]
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f007 fd4b 	bl	8019932 <memcpy>
  pbuf_ref(cseg->p);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fe fdd7 	bl	8010a54 <pbuf_ref>
  return cseg;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0801b328 	.word	0x0801b328
 8011eb4:	0801b87c 	.word	0x0801b87c
 8011eb8:	0801b36c 	.word	0x0801b36c

08011ebc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b084      	sub	sp, #16
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	607a      	str	r2, [r7, #4]
 8011ec8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d109      	bne.n	8011ee4 <tcp_recv_null+0x28>
 8011ed0:	4b12      	ldr	r3, [pc, #72]	@ (8011f1c <tcp_recv_null+0x60>)
 8011ed2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011ed6:	4912      	ldr	r1, [pc, #72]	@ (8011f20 <tcp_recv_null+0x64>)
 8011ed8:	4812      	ldr	r0, [pc, #72]	@ (8011f24 <tcp_recv_null+0x68>)
 8011eda:	f007 fc83 	bl	80197e4 <iprintf>
 8011ede:	f06f 030f 	mvn.w	r3, #15
 8011ee2:	e016      	b.n	8011f12 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d009      	beq.n	8011efe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	891b      	ldrh	r3, [r3, #8]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	68b8      	ldr	r0, [r7, #8]
 8011ef2:	f7ff fb13 	bl	801151c <tcp_recved>
    pbuf_free(p);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7fe fd06 	bl	8010908 <pbuf_free>
 8011efc:	e008      	b.n	8011f10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d104      	bne.n	8011f10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011f06:	68b8      	ldr	r0, [r7, #8]
 8011f08:	f7ff f9b8 	bl	801127c <tcp_close>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	e000      	b.n	8011f12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	0801b328 	.word	0x0801b328
 8011f20:	0801b898 	.word	0x0801b898
 8011f24:	0801b36c 	.word	0x0801b36c

08011f28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b086      	sub	sp, #24
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	4603      	mov	r3, r0
 8011f30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	db01      	blt.n	8011f3e <tcp_kill_prio+0x16>
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	e000      	b.n	8011f40 <tcp_kill_prio+0x18>
 8011f3e:	237f      	movs	r3, #127	@ 0x7f
 8011f40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011f42:	7afb      	ldrb	r3, [r7, #11]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d034      	beq.n	8011fb2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011f48:	7afb      	ldrb	r3, [r7, #11]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011f52:	2300      	movs	r3, #0
 8011f54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f56:	4b19      	ldr	r3, [pc, #100]	@ (8011fbc <tcp_kill_prio+0x94>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	617b      	str	r3, [r7, #20]
 8011f5c:	e01f      	b.n	8011f9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	7d5b      	ldrb	r3, [r3, #21]
 8011f62:	7afa      	ldrb	r2, [r7, #11]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d80c      	bhi.n	8011f82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011f6c:	7afa      	ldrb	r2, [r7, #11]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d112      	bne.n	8011f98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011f72:	4b13      	ldr	r3, [pc, #76]	@ (8011fc0 <tcp_kill_prio+0x98>)
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	6a1b      	ldr	r3, [r3, #32]
 8011f7a:	1ad3      	subs	r3, r2, r3
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d80a      	bhi.n	8011f98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011f82:	4b0f      	ldr	r3, [pc, #60]	@ (8011fc0 <tcp_kill_prio+0x98>)
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	6a1b      	ldr	r3, [r3, #32]
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	7d5b      	ldrb	r3, [r3, #21]
 8011f96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	68db      	ldr	r3, [r3, #12]
 8011f9c:	617b      	str	r3, [r7, #20]
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1dc      	bne.n	8011f5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d004      	beq.n	8011fb4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011faa:	6938      	ldr	r0, [r7, #16]
 8011fac:	f7ff fa50 	bl	8011450 <tcp_abort>
 8011fb0:	e000      	b.n	8011fb4 <tcp_kill_prio+0x8c>
    return;
 8011fb2:	bf00      	nop
  }
}
 8011fb4:	3718      	adds	r7, #24
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	240105f4 	.word	0x240105f4
 8011fc0:	240105e8 	.word	0x240105e8

08011fc4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	2b08      	cmp	r3, #8
 8011fd2:	d009      	beq.n	8011fe8 <tcp_kill_state+0x24>
 8011fd4:	79fb      	ldrb	r3, [r7, #7]
 8011fd6:	2b09      	cmp	r3, #9
 8011fd8:	d006      	beq.n	8011fe8 <tcp_kill_state+0x24>
 8011fda:	4b1a      	ldr	r3, [pc, #104]	@ (8012044 <tcp_kill_state+0x80>)
 8011fdc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011fe0:	4919      	ldr	r1, [pc, #100]	@ (8012048 <tcp_kill_state+0x84>)
 8011fe2:	481a      	ldr	r0, [pc, #104]	@ (801204c <tcp_kill_state+0x88>)
 8011fe4:	f007 fbfe 	bl	80197e4 <iprintf>

  inactivity = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011fec:	2300      	movs	r3, #0
 8011fee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ff0:	4b17      	ldr	r3, [pc, #92]	@ (8012050 <tcp_kill_state+0x8c>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	617b      	str	r3, [r7, #20]
 8011ff6:	e017      	b.n	8012028 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	7d1b      	ldrb	r3, [r3, #20]
 8011ffc:	79fa      	ldrb	r2, [r7, #7]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d10f      	bne.n	8012022 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012002:	4b14      	ldr	r3, [pc, #80]	@ (8012054 <tcp_kill_state+0x90>)
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	6a1b      	ldr	r3, [r3, #32]
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	429a      	cmp	r2, r3
 8012010:	d807      	bhi.n	8012022 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012012:	4b10      	ldr	r3, [pc, #64]	@ (8012054 <tcp_kill_state+0x90>)
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	6a1b      	ldr	r3, [r3, #32]
 801201a:	1ad3      	subs	r3, r2, r3
 801201c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	617b      	str	r3, [r7, #20]
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1e4      	bne.n	8011ff8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d003      	beq.n	801203c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012034:	2100      	movs	r1, #0
 8012036:	6938      	ldr	r0, [r7, #16]
 8012038:	f7ff f94c 	bl	80112d4 <tcp_abandon>
  }
}
 801203c:	bf00      	nop
 801203e:	3718      	adds	r7, #24
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	0801b328 	.word	0x0801b328
 8012048:	0801b8b4 	.word	0x0801b8b4
 801204c:	0801b36c 	.word	0x0801b36c
 8012050:	240105f4 	.word	0x240105f4
 8012054:	240105e8 	.word	0x240105e8

08012058 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801205e:	2300      	movs	r3, #0
 8012060:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012062:	2300      	movs	r3, #0
 8012064:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012066:	4b12      	ldr	r3, [pc, #72]	@ (80120b0 <tcp_kill_timewait+0x58>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	60fb      	str	r3, [r7, #12]
 801206c:	e012      	b.n	8012094 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801206e:	4b11      	ldr	r3, [pc, #68]	@ (80120b4 <tcp_kill_timewait+0x5c>)
 8012070:	681a      	ldr	r2, [r3, #0]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	6a1b      	ldr	r3, [r3, #32]
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	429a      	cmp	r2, r3
 801207c:	d807      	bhi.n	801208e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801207e:	4b0d      	ldr	r3, [pc, #52]	@ (80120b4 <tcp_kill_timewait+0x5c>)
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	6a1b      	ldr	r3, [r3, #32]
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	60fb      	str	r3, [r7, #12]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1e9      	bne.n	801206e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80120a0:	68b8      	ldr	r0, [r7, #8]
 80120a2:	f7ff f9d5 	bl	8011450 <tcp_abort>
  }
}
 80120a6:	bf00      	nop
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	240105f8 	.word	0x240105f8
 80120b4:	240105e8 	.word	0x240105e8

080120b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80120be:	4b10      	ldr	r3, [pc, #64]	@ (8012100 <tcp_handle_closepend+0x48>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80120c4:	e014      	b.n	80120f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	8b5b      	ldrh	r3, [r3, #26]
 80120d0:	f003 0308 	and.w	r3, r3, #8
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d009      	beq.n	80120ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	8b5b      	ldrh	r3, [r3, #26]
 80120dc:	f023 0308 	bic.w	r3, r3, #8
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7ff f85e 	bl	80111a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d1e7      	bne.n	80120c6 <tcp_handle_closepend+0xe>
  }
}
 80120f6:	bf00      	nop
 80120f8:	bf00      	nop
 80120fa:	3708      	adds	r7, #8
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	240105f4 	.word	0x240105f4

08012104 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	4603      	mov	r3, r0
 801210c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801210e:	2001      	movs	r0, #1
 8012110:	f7fd fcdc 	bl	800facc <memp_malloc>
 8012114:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d126      	bne.n	801216a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801211c:	f7ff ffcc 	bl	80120b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012120:	f7ff ff9a 	bl	8012058 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012124:	2001      	movs	r0, #1
 8012126:	f7fd fcd1 	bl	800facc <memp_malloc>
 801212a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d11b      	bne.n	801216a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012132:	2009      	movs	r0, #9
 8012134:	f7ff ff46 	bl	8011fc4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012138:	2001      	movs	r0, #1
 801213a:	f7fd fcc7 	bl	800facc <memp_malloc>
 801213e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d111      	bne.n	801216a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012146:	2008      	movs	r0, #8
 8012148:	f7ff ff3c 	bl	8011fc4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801214c:	2001      	movs	r0, #1
 801214e:	f7fd fcbd 	bl	800facc <memp_malloc>
 8012152:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d107      	bne.n	801216a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801215a:	79fb      	ldrb	r3, [r7, #7]
 801215c:	4618      	mov	r0, r3
 801215e:	f7ff fee3 	bl	8011f28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012162:	2001      	movs	r0, #1
 8012164:	f7fd fcb2 	bl	800facc <memp_malloc>
 8012168:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d03f      	beq.n	80121f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012170:	229c      	movs	r2, #156	@ 0x9c
 8012172:	2100      	movs	r1, #0
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f007 fb57 	bl	8019828 <memset>
    pcb->prio = prio;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	79fa      	ldrb	r2, [r7, #7]
 801217e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012186:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012190:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	22ff      	movs	r2, #255	@ 0xff
 801219e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80121a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2206      	movs	r2, #6
 80121ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2206      	movs	r2, #6
 80121b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80121bc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2201      	movs	r2, #1
 80121c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80121c6:	4b0d      	ldr	r3, [pc, #52]	@ (80121fc <tcp_alloc+0xf8>)
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80121ce:	4b0c      	ldr	r3, [pc, #48]	@ (8012200 <tcp_alloc+0xfc>)
 80121d0:	781a      	ldrb	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80121dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	4a08      	ldr	r2, [pc, #32]	@ (8012204 <tcp_alloc+0x100>)
 80121e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	4a07      	ldr	r2, [pc, #28]	@ (8012208 <tcp_alloc+0x104>)
 80121ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80121f0:	68fb      	ldr	r3, [r7, #12]
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	240105e8 	.word	0x240105e8
 8012200:	240105fe 	.word	0x240105fe
 8012204:	08011ebd 	.word	0x08011ebd
 8012208:	006ddd00 	.word	0x006ddd00

0801220c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d107      	bne.n	801222a <tcp_pcb_purge+0x1e>
 801221a:	4b21      	ldr	r3, [pc, #132]	@ (80122a0 <tcp_pcb_purge+0x94>)
 801221c:	f640 0251 	movw	r2, #2129	@ 0x851
 8012220:	4920      	ldr	r1, [pc, #128]	@ (80122a4 <tcp_pcb_purge+0x98>)
 8012222:	4821      	ldr	r0, [pc, #132]	@ (80122a8 <tcp_pcb_purge+0x9c>)
 8012224:	f007 fade 	bl	80197e4 <iprintf>
 8012228:	e037      	b.n	801229a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	7d1b      	ldrb	r3, [r3, #20]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d033      	beq.n	801229a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012236:	2b0a      	cmp	r3, #10
 8012238:	d02f      	beq.n	801229a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801223e:	2b01      	cmp	r3, #1
 8012240:	d02b      	beq.n	801229a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012246:	2b00      	cmp	r3, #0
 8012248:	d007      	beq.n	801225a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe fb5a 	bl	8010908 <pbuf_free>
      pcb->refused_data = NULL;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801225e:	2b00      	cmp	r3, #0
 8012260:	d002      	beq.n	8012268 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 f986 	bl	8012574 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801226e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012274:	4618      	mov	r0, r3
 8012276:	f7ff fdc7 	bl	8011e08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801227e:	4618      	mov	r0, r3
 8012280:	f7ff fdc2 	bl	8011e08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	66da      	str	r2, [r3, #108]	@ 0x6c
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2200      	movs	r2, #0
 8012296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	0801b328 	.word	0x0801b328
 80122a4:	0801b974 	.word	0x0801b974
 80122a8:	0801b36c 	.word	0x0801b36c

080122ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <tcp_pcb_remove+0x1e>
 80122bc:	4b3e      	ldr	r3, [pc, #248]	@ (80123b8 <tcp_pcb_remove+0x10c>)
 80122be:	f640 0283 	movw	r2, #2179	@ 0x883
 80122c2:	493e      	ldr	r1, [pc, #248]	@ (80123bc <tcp_pcb_remove+0x110>)
 80122c4:	483e      	ldr	r0, [pc, #248]	@ (80123c0 <tcp_pcb_remove+0x114>)
 80122c6:	f007 fa8d 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d106      	bne.n	80122de <tcp_pcb_remove+0x32>
 80122d0:	4b39      	ldr	r3, [pc, #228]	@ (80123b8 <tcp_pcb_remove+0x10c>)
 80122d2:	f640 0284 	movw	r2, #2180	@ 0x884
 80122d6:	493b      	ldr	r1, [pc, #236]	@ (80123c4 <tcp_pcb_remove+0x118>)
 80122d8:	4839      	ldr	r0, [pc, #228]	@ (80123c0 <tcp_pcb_remove+0x114>)
 80122da:	f007 fa83 	bl	80197e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d105      	bne.n	80122f4 <tcp_pcb_remove+0x48>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	68da      	ldr	r2, [r3, #12]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	601a      	str	r2, [r3, #0]
 80122f2:	e013      	b.n	801231c <tcp_pcb_remove+0x70>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	60fb      	str	r3, [r7, #12]
 80122fa:	e00c      	b.n	8012316 <tcp_pcb_remove+0x6a>
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	429a      	cmp	r2, r3
 8012304:	d104      	bne.n	8012310 <tcp_pcb_remove+0x64>
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	68da      	ldr	r2, [r3, #12]
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	60da      	str	r2, [r3, #12]
 801230e:	e005      	b.n	801231c <tcp_pcb_remove+0x70>
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	60fb      	str	r3, [r7, #12]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d1ef      	bne.n	80122fc <tcp_pcb_remove+0x50>
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	2200      	movs	r2, #0
 8012320:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012322:	6838      	ldr	r0, [r7, #0]
 8012324:	f7ff ff72 	bl	801220c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	7d1b      	ldrb	r3, [r3, #20]
 801232c:	2b0a      	cmp	r3, #10
 801232e:	d013      	beq.n	8012358 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012334:	2b01      	cmp	r3, #1
 8012336:	d00f      	beq.n	8012358 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	8b5b      	ldrh	r3, [r3, #26]
 801233c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012340:	2b00      	cmp	r3, #0
 8012342:	d009      	beq.n	8012358 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	8b5b      	ldrh	r3, [r3, #26]
 8012348:	f043 0302 	orr.w	r3, r3, #2
 801234c:	b29a      	uxth	r2, r3
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012352:	6838      	ldr	r0, [r7, #0]
 8012354:	f002 ff6a 	bl	801522c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	7d1b      	ldrb	r3, [r3, #20]
 801235c:	2b01      	cmp	r3, #1
 801235e:	d020      	beq.n	80123a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012364:	2b00      	cmp	r3, #0
 8012366:	d006      	beq.n	8012376 <tcp_pcb_remove+0xca>
 8012368:	4b13      	ldr	r3, [pc, #76]	@ (80123b8 <tcp_pcb_remove+0x10c>)
 801236a:	f640 0293 	movw	r2, #2195	@ 0x893
 801236e:	4916      	ldr	r1, [pc, #88]	@ (80123c8 <tcp_pcb_remove+0x11c>)
 8012370:	4813      	ldr	r0, [pc, #76]	@ (80123c0 <tcp_pcb_remove+0x114>)
 8012372:	f007 fa37 	bl	80197e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801237a:	2b00      	cmp	r3, #0
 801237c:	d006      	beq.n	801238c <tcp_pcb_remove+0xe0>
 801237e:	4b0e      	ldr	r3, [pc, #56]	@ (80123b8 <tcp_pcb_remove+0x10c>)
 8012380:	f640 0294 	movw	r2, #2196	@ 0x894
 8012384:	4911      	ldr	r1, [pc, #68]	@ (80123cc <tcp_pcb_remove+0x120>)
 8012386:	480e      	ldr	r0, [pc, #56]	@ (80123c0 <tcp_pcb_remove+0x114>)
 8012388:	f007 fa2c 	bl	80197e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012390:	2b00      	cmp	r3, #0
 8012392:	d006      	beq.n	80123a2 <tcp_pcb_remove+0xf6>
 8012394:	4b08      	ldr	r3, [pc, #32]	@ (80123b8 <tcp_pcb_remove+0x10c>)
 8012396:	f640 0296 	movw	r2, #2198	@ 0x896
 801239a:	490d      	ldr	r1, [pc, #52]	@ (80123d0 <tcp_pcb_remove+0x124>)
 801239c:	4808      	ldr	r0, [pc, #32]	@ (80123c0 <tcp_pcb_remove+0x114>)
 801239e:	f007 fa21 	bl	80197e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	2200      	movs	r2, #0
 80123a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2200      	movs	r2, #0
 80123ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80123ae:	bf00      	nop
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	0801b328 	.word	0x0801b328
 80123bc:	0801b990 	.word	0x0801b990
 80123c0:	0801b36c 	.word	0x0801b36c
 80123c4:	0801b9ac 	.word	0x0801b9ac
 80123c8:	0801b9cc 	.word	0x0801b9cc
 80123cc:	0801b9e4 	.word	0x0801b9e4
 80123d0:	0801ba00 	.word	0x0801ba00

080123d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d106      	bne.n	80123f0 <tcp_next_iss+0x1c>
 80123e2:	4b0a      	ldr	r3, [pc, #40]	@ (801240c <tcp_next_iss+0x38>)
 80123e4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80123e8:	4909      	ldr	r1, [pc, #36]	@ (8012410 <tcp_next_iss+0x3c>)
 80123ea:	480a      	ldr	r0, [pc, #40]	@ (8012414 <tcp_next_iss+0x40>)
 80123ec:	f007 f9fa 	bl	80197e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80123f0:	4b09      	ldr	r3, [pc, #36]	@ (8012418 <tcp_next_iss+0x44>)
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	4b09      	ldr	r3, [pc, #36]	@ (801241c <tcp_next_iss+0x48>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4413      	add	r3, r2
 80123fa:	4a07      	ldr	r2, [pc, #28]	@ (8012418 <tcp_next_iss+0x44>)
 80123fc:	6013      	str	r3, [r2, #0]
  return iss;
 80123fe:	4b06      	ldr	r3, [pc, #24]	@ (8012418 <tcp_next_iss+0x44>)
 8012400:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012402:	4618      	mov	r0, r3
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	0801b328 	.word	0x0801b328
 8012410:	0801ba18 	.word	0x0801ba18
 8012414:	0801b36c 	.word	0x0801b36c
 8012418:	240049fc 	.word	0x240049fc
 801241c:	240105e8 	.word	0x240105e8

08012420 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	4603      	mov	r3, r0
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d106      	bne.n	8012442 <tcp_eff_send_mss_netif+0x22>
 8012434:	4b14      	ldr	r3, [pc, #80]	@ (8012488 <tcp_eff_send_mss_netif+0x68>)
 8012436:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801243a:	4914      	ldr	r1, [pc, #80]	@ (801248c <tcp_eff_send_mss_netif+0x6c>)
 801243c:	4814      	ldr	r0, [pc, #80]	@ (8012490 <tcp_eff_send_mss_netif+0x70>)
 801243e:	f007 f9d1 	bl	80197e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012448:	89fb      	ldrh	r3, [r7, #14]
 801244a:	e019      	b.n	8012480 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012450:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012452:	8afb      	ldrh	r3, [r7, #22]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d012      	beq.n	801247e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012458:	2328      	movs	r3, #40	@ 0x28
 801245a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801245c:	8afa      	ldrh	r2, [r7, #22]
 801245e:	8abb      	ldrh	r3, [r7, #20]
 8012460:	429a      	cmp	r2, r3
 8012462:	d904      	bls.n	801246e <tcp_eff_send_mss_netif+0x4e>
 8012464:	8afa      	ldrh	r2, [r7, #22]
 8012466:	8abb      	ldrh	r3, [r7, #20]
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	b29b      	uxth	r3, r3
 801246c:	e000      	b.n	8012470 <tcp_eff_send_mss_netif+0x50>
 801246e:	2300      	movs	r3, #0
 8012470:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012472:	8a7a      	ldrh	r2, [r7, #18]
 8012474:	89fb      	ldrh	r3, [r7, #14]
 8012476:	4293      	cmp	r3, r2
 8012478:	bf28      	it	cs
 801247a:	4613      	movcs	r3, r2
 801247c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801247e:	89fb      	ldrh	r3, [r7, #14]
}
 8012480:	4618      	mov	r0, r3
 8012482:	3718      	adds	r7, #24
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}
 8012488:	0801b328 	.word	0x0801b328
 801248c:	0801ba34 	.word	0x0801ba34
 8012490:	0801b36c 	.word	0x0801b36c

08012494 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d119      	bne.n	80124dc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80124a8:	4b10      	ldr	r3, [pc, #64]	@ (80124ec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80124aa:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80124ae:	4910      	ldr	r1, [pc, #64]	@ (80124f0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80124b0:	4810      	ldr	r0, [pc, #64]	@ (80124f4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80124b2:	f007 f997 	bl	80197e4 <iprintf>

  while (pcb != NULL) {
 80124b6:	e011      	b.n	80124dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d108      	bne.n	80124d6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f7fe ffc0 	bl	8011450 <tcp_abort>
      pcb = next;
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	60fb      	str	r3, [r7, #12]
 80124d4:	e002      	b.n	80124dc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d1ea      	bne.n	80124b8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80124e2:	bf00      	nop
 80124e4:	bf00      	nop
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	0801b328 	.word	0x0801b328
 80124f0:	0801ba5c 	.word	0x0801ba5c
 80124f4:	0801b36c 	.word	0x0801b36c

080124f8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d02a      	beq.n	801255e <tcp_netif_ip_addr_changed+0x66>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d026      	beq.n	801255e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012510:	4b15      	ldr	r3, [pc, #84]	@ (8012568 <tcp_netif_ip_addr_changed+0x70>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4619      	mov	r1, r3
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7ff ffbc 	bl	8012494 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801251c:	4b13      	ldr	r3, [pc, #76]	@ (801256c <tcp_netif_ip_addr_changed+0x74>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4619      	mov	r1, r3
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7ff ffb6 	bl	8012494 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d017      	beq.n	801255e <tcp_netif_ip_addr_changed+0x66>
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d013      	beq.n	801255e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012536:	4b0e      	ldr	r3, [pc, #56]	@ (8012570 <tcp_netif_ip_addr_changed+0x78>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	e00c      	b.n	8012558 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	429a      	cmp	r2, r3
 8012548:	d103      	bne.n	8012552 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	60fb      	str	r3, [r7, #12]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1ef      	bne.n	801253e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801255e:	bf00      	nop
 8012560:	3710      	adds	r7, #16
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	240105f4 	.word	0x240105f4
 801256c:	240105ec 	.word	0x240105ec
 8012570:	240105f0 	.word	0x240105f0

08012574 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012580:	2b00      	cmp	r3, #0
 8012582:	d007      	beq.n	8012594 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012588:	4618      	mov	r0, r3
 801258a:	f7ff fc3d 	bl	8011e08 <tcp_segs_free>
    pcb->ooseq = NULL;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012594:	bf00      	nop
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b08d      	sub	sp, #52	@ 0x34
 80125a0:	af04      	add	r7, sp, #16
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d105      	bne.n	80125b8 <tcp_input+0x1c>
 80125ac:	4b9b      	ldr	r3, [pc, #620]	@ (801281c <tcp_input+0x280>)
 80125ae:	2283      	movs	r2, #131	@ 0x83
 80125b0:	499b      	ldr	r1, [pc, #620]	@ (8012820 <tcp_input+0x284>)
 80125b2:	489c      	ldr	r0, [pc, #624]	@ (8012824 <tcp_input+0x288>)
 80125b4:	f007 f916 	bl	80197e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	4a9a      	ldr	r2, [pc, #616]	@ (8012828 <tcp_input+0x28c>)
 80125be:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	895b      	ldrh	r3, [r3, #10]
 80125c4:	2b13      	cmp	r3, #19
 80125c6:	f240 83d1 	bls.w	8012d6c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80125ca:	4b98      	ldr	r3, [pc, #608]	@ (801282c <tcp_input+0x290>)
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	4a97      	ldr	r2, [pc, #604]	@ (801282c <tcp_input+0x290>)
 80125d0:	6812      	ldr	r2, [r2, #0]
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f005 ff99 	bl	801850c <ip4_addr_isbroadcast_u32>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 83c7 	bne.w	8012d70 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80125e2:	4b92      	ldr	r3, [pc, #584]	@ (801282c <tcp_input+0x290>)
 80125e4:	695b      	ldr	r3, [r3, #20]
 80125e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80125ea:	2be0      	cmp	r3, #224	@ 0xe0
 80125ec:	f000 83c0 	beq.w	8012d70 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80125f0:	4b8d      	ldr	r3, [pc, #564]	@ (8012828 <tcp_input+0x28c>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	899b      	ldrh	r3, [r3, #12]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fc fcc7 	bl	800ef8c <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	0b1b      	lsrs	r3, r3, #12
 8012602:	b29b      	uxth	r3, r3
 8012604:	b2db      	uxtb	r3, r3
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801260a:	7cbb      	ldrb	r3, [r7, #18]
 801260c:	2b13      	cmp	r3, #19
 801260e:	f240 83b1 	bls.w	8012d74 <tcp_input+0x7d8>
 8012612:	7cbb      	ldrb	r3, [r7, #18]
 8012614:	b29a      	uxth	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	891b      	ldrh	r3, [r3, #8]
 801261a:	429a      	cmp	r2, r3
 801261c:	f200 83aa 	bhi.w	8012d74 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012620:	7cbb      	ldrb	r3, [r7, #18]
 8012622:	b29b      	uxth	r3, r3
 8012624:	3b14      	subs	r3, #20
 8012626:	b29a      	uxth	r2, r3
 8012628:	4b81      	ldr	r3, [pc, #516]	@ (8012830 <tcp_input+0x294>)
 801262a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801262c:	4b81      	ldr	r3, [pc, #516]	@ (8012834 <tcp_input+0x298>)
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	895a      	ldrh	r2, [r3, #10]
 8012636:	7cbb      	ldrb	r3, [r7, #18]
 8012638:	b29b      	uxth	r3, r3
 801263a:	429a      	cmp	r2, r3
 801263c:	d309      	bcc.n	8012652 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801263e:	4b7c      	ldr	r3, [pc, #496]	@ (8012830 <tcp_input+0x294>)
 8012640:	881a      	ldrh	r2, [r3, #0]
 8012642:	4b7d      	ldr	r3, [pc, #500]	@ (8012838 <tcp_input+0x29c>)
 8012644:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012646:	7cbb      	ldrb	r3, [r7, #18]
 8012648:	4619      	mov	r1, r3
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7fe f8d6 	bl	80107fc <pbuf_remove_header>
 8012650:	e04e      	b.n	80126f0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d105      	bne.n	8012666 <tcp_input+0xca>
 801265a:	4b70      	ldr	r3, [pc, #448]	@ (801281c <tcp_input+0x280>)
 801265c:	22c2      	movs	r2, #194	@ 0xc2
 801265e:	4977      	ldr	r1, [pc, #476]	@ (801283c <tcp_input+0x2a0>)
 8012660:	4870      	ldr	r0, [pc, #448]	@ (8012824 <tcp_input+0x288>)
 8012662:	f007 f8bf 	bl	80197e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012666:	2114      	movs	r1, #20
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7fe f8c7 	bl	80107fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	895a      	ldrh	r2, [r3, #10]
 8012672:	4b71      	ldr	r3, [pc, #452]	@ (8012838 <tcp_input+0x29c>)
 8012674:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012676:	4b6e      	ldr	r3, [pc, #440]	@ (8012830 <tcp_input+0x294>)
 8012678:	881a      	ldrh	r2, [r3, #0]
 801267a:	4b6f      	ldr	r3, [pc, #444]	@ (8012838 <tcp_input+0x29c>)
 801267c:	881b      	ldrh	r3, [r3, #0]
 801267e:	1ad3      	subs	r3, r2, r3
 8012680:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012682:	4b6d      	ldr	r3, [pc, #436]	@ (8012838 <tcp_input+0x29c>)
 8012684:	881b      	ldrh	r3, [r3, #0]
 8012686:	4619      	mov	r1, r3
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7fe f8b7 	bl	80107fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	895b      	ldrh	r3, [r3, #10]
 8012694:	8a3a      	ldrh	r2, [r7, #16]
 8012696:	429a      	cmp	r2, r3
 8012698:	f200 836e 	bhi.w	8012d78 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	4a64      	ldr	r2, [pc, #400]	@ (8012834 <tcp_input+0x298>)
 80126a4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	8a3a      	ldrh	r2, [r7, #16]
 80126ac:	4611      	mov	r1, r2
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fe f8a4 	bl	80107fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	891a      	ldrh	r2, [r3, #8]
 80126b8:	8a3b      	ldrh	r3, [r7, #16]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	b29a      	uxth	r2, r3
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	895b      	ldrh	r3, [r3, #10]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d005      	beq.n	80126d6 <tcp_input+0x13a>
 80126ca:	4b54      	ldr	r3, [pc, #336]	@ (801281c <tcp_input+0x280>)
 80126cc:	22df      	movs	r2, #223	@ 0xdf
 80126ce:	495c      	ldr	r1, [pc, #368]	@ (8012840 <tcp_input+0x2a4>)
 80126d0:	4854      	ldr	r0, [pc, #336]	@ (8012824 <tcp_input+0x288>)
 80126d2:	f007 f887 	bl	80197e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	891a      	ldrh	r2, [r3, #8]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	891b      	ldrh	r3, [r3, #8]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d005      	beq.n	80126f0 <tcp_input+0x154>
 80126e4:	4b4d      	ldr	r3, [pc, #308]	@ (801281c <tcp_input+0x280>)
 80126e6:	22e0      	movs	r2, #224	@ 0xe0
 80126e8:	4956      	ldr	r1, [pc, #344]	@ (8012844 <tcp_input+0x2a8>)
 80126ea:	484e      	ldr	r0, [pc, #312]	@ (8012824 <tcp_input+0x288>)
 80126ec:	f007 f87a 	bl	80197e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80126f0:	4b4d      	ldr	r3, [pc, #308]	@ (8012828 <tcp_input+0x28c>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	4a4b      	ldr	r2, [pc, #300]	@ (8012828 <tcp_input+0x28c>)
 80126fa:	6814      	ldr	r4, [r2, #0]
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7fc fc45 	bl	800ef8c <lwip_htons>
 8012702:	4603      	mov	r3, r0
 8012704:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012706:	4b48      	ldr	r3, [pc, #288]	@ (8012828 <tcp_input+0x28c>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	885b      	ldrh	r3, [r3, #2]
 801270c:	b29b      	uxth	r3, r3
 801270e:	4a46      	ldr	r2, [pc, #280]	@ (8012828 <tcp_input+0x28c>)
 8012710:	6814      	ldr	r4, [r2, #0]
 8012712:	4618      	mov	r0, r3
 8012714:	f7fc fc3a 	bl	800ef8c <lwip_htons>
 8012718:	4603      	mov	r3, r0
 801271a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801271c:	4b42      	ldr	r3, [pc, #264]	@ (8012828 <tcp_input+0x28c>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	4a41      	ldr	r2, [pc, #260]	@ (8012828 <tcp_input+0x28c>)
 8012724:	6814      	ldr	r4, [r2, #0]
 8012726:	4618      	mov	r0, r3
 8012728:	f7fc fc45 	bl	800efb6 <lwip_htonl>
 801272c:	4603      	mov	r3, r0
 801272e:	6063      	str	r3, [r4, #4]
 8012730:	6863      	ldr	r3, [r4, #4]
 8012732:	4a45      	ldr	r2, [pc, #276]	@ (8012848 <tcp_input+0x2ac>)
 8012734:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012736:	4b3c      	ldr	r3, [pc, #240]	@ (8012828 <tcp_input+0x28c>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	4a3a      	ldr	r2, [pc, #232]	@ (8012828 <tcp_input+0x28c>)
 801273e:	6814      	ldr	r4, [r2, #0]
 8012740:	4618      	mov	r0, r3
 8012742:	f7fc fc38 	bl	800efb6 <lwip_htonl>
 8012746:	4603      	mov	r3, r0
 8012748:	60a3      	str	r3, [r4, #8]
 801274a:	68a3      	ldr	r3, [r4, #8]
 801274c:	4a3f      	ldr	r2, [pc, #252]	@ (801284c <tcp_input+0x2b0>)
 801274e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012750:	4b35      	ldr	r3, [pc, #212]	@ (8012828 <tcp_input+0x28c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	89db      	ldrh	r3, [r3, #14]
 8012756:	b29b      	uxth	r3, r3
 8012758:	4a33      	ldr	r2, [pc, #204]	@ (8012828 <tcp_input+0x28c>)
 801275a:	6814      	ldr	r4, [r2, #0]
 801275c:	4618      	mov	r0, r3
 801275e:	f7fc fc15 	bl	800ef8c <lwip_htons>
 8012762:	4603      	mov	r3, r0
 8012764:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012766:	4b30      	ldr	r3, [pc, #192]	@ (8012828 <tcp_input+0x28c>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	899b      	ldrh	r3, [r3, #12]
 801276c:	b29b      	uxth	r3, r3
 801276e:	4618      	mov	r0, r3
 8012770:	f7fc fc0c 	bl	800ef8c <lwip_htons>
 8012774:	4603      	mov	r3, r0
 8012776:	b2db      	uxtb	r3, r3
 8012778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801277c:	b2da      	uxtb	r2, r3
 801277e:	4b34      	ldr	r3, [pc, #208]	@ (8012850 <tcp_input+0x2b4>)
 8012780:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	891a      	ldrh	r2, [r3, #8]
 8012786:	4b33      	ldr	r3, [pc, #204]	@ (8012854 <tcp_input+0x2b8>)
 8012788:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801278a:	4b31      	ldr	r3, [pc, #196]	@ (8012850 <tcp_input+0x2b4>)
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	f003 0303 	and.w	r3, r3, #3
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00c      	beq.n	80127b0 <tcp_input+0x214>
    tcplen++;
 8012796:	4b2f      	ldr	r3, [pc, #188]	@ (8012854 <tcp_input+0x2b8>)
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	3301      	adds	r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	4b2d      	ldr	r3, [pc, #180]	@ (8012854 <tcp_input+0x2b8>)
 80127a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	891a      	ldrh	r2, [r3, #8]
 80127a6:	4b2b      	ldr	r3, [pc, #172]	@ (8012854 <tcp_input+0x2b8>)
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	f200 82e6 	bhi.w	8012d7c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80127b0:	2300      	movs	r3, #0
 80127b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80127b4:	4b28      	ldr	r3, [pc, #160]	@ (8012858 <tcp_input+0x2bc>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	61fb      	str	r3, [r7, #28]
 80127ba:	e09d      	b.n	80128f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	7d1b      	ldrb	r3, [r3, #20]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d105      	bne.n	80127d0 <tcp_input+0x234>
 80127c4:	4b15      	ldr	r3, [pc, #84]	@ (801281c <tcp_input+0x280>)
 80127c6:	22fb      	movs	r2, #251	@ 0xfb
 80127c8:	4924      	ldr	r1, [pc, #144]	@ (801285c <tcp_input+0x2c0>)
 80127ca:	4816      	ldr	r0, [pc, #88]	@ (8012824 <tcp_input+0x288>)
 80127cc:	f007 f80a 	bl	80197e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80127d0:	69fb      	ldr	r3, [r7, #28]
 80127d2:	7d1b      	ldrb	r3, [r3, #20]
 80127d4:	2b0a      	cmp	r3, #10
 80127d6:	d105      	bne.n	80127e4 <tcp_input+0x248>
 80127d8:	4b10      	ldr	r3, [pc, #64]	@ (801281c <tcp_input+0x280>)
 80127da:	22fc      	movs	r2, #252	@ 0xfc
 80127dc:	4920      	ldr	r1, [pc, #128]	@ (8012860 <tcp_input+0x2c4>)
 80127de:	4811      	ldr	r0, [pc, #68]	@ (8012824 <tcp_input+0x288>)
 80127e0:	f007 f800 	bl	80197e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	7d1b      	ldrb	r3, [r3, #20]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d105      	bne.n	80127f8 <tcp_input+0x25c>
 80127ec:	4b0b      	ldr	r3, [pc, #44]	@ (801281c <tcp_input+0x280>)
 80127ee:	22fd      	movs	r2, #253	@ 0xfd
 80127f0:	491c      	ldr	r1, [pc, #112]	@ (8012864 <tcp_input+0x2c8>)
 80127f2:	480c      	ldr	r0, [pc, #48]	@ (8012824 <tcp_input+0x288>)
 80127f4:	f006 fff6 	bl	80197e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	7a1b      	ldrb	r3, [r3, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d033      	beq.n	8012868 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	7a1a      	ldrb	r2, [r3, #8]
 8012804:	4b09      	ldr	r3, [pc, #36]	@ (801282c <tcp_input+0x290>)
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801280c:	3301      	adds	r3, #1
 801280e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012810:	429a      	cmp	r2, r3
 8012812:	d029      	beq.n	8012868 <tcp_input+0x2cc>
      prev = pcb;
 8012814:	69fb      	ldr	r3, [r7, #28]
 8012816:	61bb      	str	r3, [r7, #24]
      continue;
 8012818:	e06b      	b.n	80128f2 <tcp_input+0x356>
 801281a:	bf00      	nop
 801281c:	0801ba90 	.word	0x0801ba90
 8012820:	0801bac4 	.word	0x0801bac4
 8012824:	0801badc 	.word	0x0801badc
 8012828:	24010610 	.word	0x24010610
 801282c:	24009b28 	.word	0x24009b28
 8012830:	24010614 	.word	0x24010614
 8012834:	24010618 	.word	0x24010618
 8012838:	24010616 	.word	0x24010616
 801283c:	0801bb04 	.word	0x0801bb04
 8012840:	0801bb14 	.word	0x0801bb14
 8012844:	0801bb20 	.word	0x0801bb20
 8012848:	24010620 	.word	0x24010620
 801284c:	24010624 	.word	0x24010624
 8012850:	2401062c 	.word	0x2401062c
 8012854:	2401062a 	.word	0x2401062a
 8012858:	240105f4 	.word	0x240105f4
 801285c:	0801bb40 	.word	0x0801bb40
 8012860:	0801bb68 	.word	0x0801bb68
 8012864:	0801bb94 	.word	0x0801bb94
    }

    if (pcb->remote_port == tcphdr->src &&
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	8b1a      	ldrh	r2, [r3, #24]
 801286c:	4b72      	ldr	r3, [pc, #456]	@ (8012a38 <tcp_input+0x49c>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	881b      	ldrh	r3, [r3, #0]
 8012872:	b29b      	uxth	r3, r3
 8012874:	429a      	cmp	r2, r3
 8012876:	d13a      	bne.n	80128ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	8ada      	ldrh	r2, [r3, #22]
 801287c:	4b6e      	ldr	r3, [pc, #440]	@ (8012a38 <tcp_input+0x49c>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	885b      	ldrh	r3, [r3, #2]
 8012882:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012884:	429a      	cmp	r2, r3
 8012886:	d132      	bne.n	80128ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	685a      	ldr	r2, [r3, #4]
 801288c:	4b6b      	ldr	r3, [pc, #428]	@ (8012a3c <tcp_input+0x4a0>)
 801288e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012890:	429a      	cmp	r2, r3
 8012892:	d12c      	bne.n	80128ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	4b68      	ldr	r3, [pc, #416]	@ (8012a3c <tcp_input+0x4a0>)
 801289a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801289c:	429a      	cmp	r2, r3
 801289e:	d126      	bne.n	80128ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	69fa      	ldr	r2, [r7, #28]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d106      	bne.n	80128b8 <tcp_input+0x31c>
 80128aa:	4b65      	ldr	r3, [pc, #404]	@ (8012a40 <tcp_input+0x4a4>)
 80128ac:	f240 120d 	movw	r2, #269	@ 0x10d
 80128b0:	4964      	ldr	r1, [pc, #400]	@ (8012a44 <tcp_input+0x4a8>)
 80128b2:	4865      	ldr	r0, [pc, #404]	@ (8012a48 <tcp_input+0x4ac>)
 80128b4:	f006 ff96 	bl	80197e4 <iprintf>
      if (prev != NULL) {
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00a      	beq.n	80128d4 <tcp_input+0x338>
        prev->next = pcb->next;
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	68da      	ldr	r2, [r3, #12]
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80128c6:	4b61      	ldr	r3, [pc, #388]	@ (8012a4c <tcp_input+0x4b0>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	69fb      	ldr	r3, [r7, #28]
 80128cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80128ce:	4a5f      	ldr	r2, [pc, #380]	@ (8012a4c <tcp_input+0x4b0>)
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	69fa      	ldr	r2, [r7, #28]
 80128da:	429a      	cmp	r2, r3
 80128dc:	d111      	bne.n	8012902 <tcp_input+0x366>
 80128de:	4b58      	ldr	r3, [pc, #352]	@ (8012a40 <tcp_input+0x4a4>)
 80128e0:	f240 1215 	movw	r2, #277	@ 0x115
 80128e4:	495a      	ldr	r1, [pc, #360]	@ (8012a50 <tcp_input+0x4b4>)
 80128e6:	4858      	ldr	r0, [pc, #352]	@ (8012a48 <tcp_input+0x4ac>)
 80128e8:	f006 ff7c 	bl	80197e4 <iprintf>
      break;
 80128ec:	e009      	b.n	8012902 <tcp_input+0x366>
    }
    prev = pcb;
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	61fb      	str	r3, [r7, #28]
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f47f af5e 	bne.w	80127bc <tcp_input+0x220>
 8012900:	e000      	b.n	8012904 <tcp_input+0x368>
      break;
 8012902:	bf00      	nop
  }

  if (pcb == NULL) {
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	2b00      	cmp	r3, #0
 8012908:	f040 80aa 	bne.w	8012a60 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801290c:	4b51      	ldr	r3, [pc, #324]	@ (8012a54 <tcp_input+0x4b8>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	61fb      	str	r3, [r7, #28]
 8012912:	e03f      	b.n	8012994 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	7d1b      	ldrb	r3, [r3, #20]
 8012918:	2b0a      	cmp	r3, #10
 801291a:	d006      	beq.n	801292a <tcp_input+0x38e>
 801291c:	4b48      	ldr	r3, [pc, #288]	@ (8012a40 <tcp_input+0x4a4>)
 801291e:	f240 121f 	movw	r2, #287	@ 0x11f
 8012922:	494d      	ldr	r1, [pc, #308]	@ (8012a58 <tcp_input+0x4bc>)
 8012924:	4848      	ldr	r0, [pc, #288]	@ (8012a48 <tcp_input+0x4ac>)
 8012926:	f006 ff5d 	bl	80197e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	7a1b      	ldrb	r3, [r3, #8]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d009      	beq.n	8012946 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	7a1a      	ldrb	r2, [r3, #8]
 8012936:	4b41      	ldr	r3, [pc, #260]	@ (8012a3c <tcp_input+0x4a0>)
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801293e:	3301      	adds	r3, #1
 8012940:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012942:	429a      	cmp	r2, r3
 8012944:	d122      	bne.n	801298c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	8b1a      	ldrh	r2, [r3, #24]
 801294a:	4b3b      	ldr	r3, [pc, #236]	@ (8012a38 <tcp_input+0x49c>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	881b      	ldrh	r3, [r3, #0]
 8012950:	b29b      	uxth	r3, r3
 8012952:	429a      	cmp	r2, r3
 8012954:	d11b      	bne.n	801298e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	8ada      	ldrh	r2, [r3, #22]
 801295a:	4b37      	ldr	r3, [pc, #220]	@ (8012a38 <tcp_input+0x49c>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	885b      	ldrh	r3, [r3, #2]
 8012960:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012962:	429a      	cmp	r2, r3
 8012964:	d113      	bne.n	801298e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	685a      	ldr	r2, [r3, #4]
 801296a:	4b34      	ldr	r3, [pc, #208]	@ (8012a3c <tcp_input+0x4a0>)
 801296c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801296e:	429a      	cmp	r2, r3
 8012970:	d10d      	bne.n	801298e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	4b31      	ldr	r3, [pc, #196]	@ (8012a3c <tcp_input+0x4a0>)
 8012978:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801297a:	429a      	cmp	r2, r3
 801297c:	d107      	bne.n	801298e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801297e:	69f8      	ldr	r0, [r7, #28]
 8012980:	f000 fb56 	bl	8013030 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f7fd ffbf 	bl	8010908 <pbuf_free>
        return;
 801298a:	e1fd      	b.n	8012d88 <tcp_input+0x7ec>
        continue;
 801298c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	61fb      	str	r3, [r7, #28]
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1bc      	bne.n	8012914 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801299a:	2300      	movs	r3, #0
 801299c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801299e:	4b2f      	ldr	r3, [pc, #188]	@ (8012a5c <tcp_input+0x4c0>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	617b      	str	r3, [r7, #20]
 80129a4:	e02a      	b.n	80129fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	7a1b      	ldrb	r3, [r3, #8]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00c      	beq.n	80129c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	7a1a      	ldrb	r2, [r3, #8]
 80129b2:	4b22      	ldr	r3, [pc, #136]	@ (8012a3c <tcp_input+0x4a0>)
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80129ba:	3301      	adds	r3, #1
 80129bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80129be:	429a      	cmp	r2, r3
 80129c0:	d002      	beq.n	80129c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	61bb      	str	r3, [r7, #24]
        continue;
 80129c6:	e016      	b.n	80129f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	8ada      	ldrh	r2, [r3, #22]
 80129cc:	4b1a      	ldr	r3, [pc, #104]	@ (8012a38 <tcp_input+0x49c>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	885b      	ldrh	r3, [r3, #2]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d10c      	bne.n	80129f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	4b17      	ldr	r3, [pc, #92]	@ (8012a3c <tcp_input+0x4a0>)
 80129de:	695b      	ldr	r3, [r3, #20]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d00f      	beq.n	8012a04 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00d      	beq.n	8012a06 <tcp_input+0x46a>
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d009      	beq.n	8012a06 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	617b      	str	r3, [r7, #20]
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d1d1      	bne.n	80129a6 <tcp_input+0x40a>
 8012a02:	e000      	b.n	8012a06 <tcp_input+0x46a>
            break;
 8012a04:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d029      	beq.n	8012a60 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d00a      	beq.n	8012a28 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	68da      	ldr	r2, [r3, #12]
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012a1a:	4b10      	ldr	r3, [pc, #64]	@ (8012a5c <tcp_input+0x4c0>)
 8012a1c:	681a      	ldr	r2, [r3, #0]
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012a22:	4a0e      	ldr	r2, [pc, #56]	@ (8012a5c <tcp_input+0x4c0>)
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012a28:	6978      	ldr	r0, [r7, #20]
 8012a2a:	f000 fa03 	bl	8012e34 <tcp_listen_input>
      }
      pbuf_free(p);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7fd ff6a 	bl	8010908 <pbuf_free>
      return;
 8012a34:	e1a8      	b.n	8012d88 <tcp_input+0x7ec>
 8012a36:	bf00      	nop
 8012a38:	24010610 	.word	0x24010610
 8012a3c:	24009b28 	.word	0x24009b28
 8012a40:	0801ba90 	.word	0x0801ba90
 8012a44:	0801bbbc 	.word	0x0801bbbc
 8012a48:	0801badc 	.word	0x0801badc
 8012a4c:	240105f4 	.word	0x240105f4
 8012a50:	0801bbe8 	.word	0x0801bbe8
 8012a54:	240105f8 	.word	0x240105f8
 8012a58:	0801bc14 	.word	0x0801bc14
 8012a5c:	240105f0 	.word	0x240105f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f000 8158 	beq.w	8012d18 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012a68:	4b95      	ldr	r3, [pc, #596]	@ (8012cc0 <tcp_input+0x724>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	891a      	ldrh	r2, [r3, #8]
 8012a72:	4b93      	ldr	r3, [pc, #588]	@ (8012cc0 <tcp_input+0x724>)
 8012a74:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012a76:	4a92      	ldr	r2, [pc, #584]	@ (8012cc0 <tcp_input+0x724>)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012a7c:	4b91      	ldr	r3, [pc, #580]	@ (8012cc4 <tcp_input+0x728>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4a8f      	ldr	r2, [pc, #572]	@ (8012cc0 <tcp_input+0x724>)
 8012a82:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012a84:	4b90      	ldr	r3, [pc, #576]	@ (8012cc8 <tcp_input+0x72c>)
 8012a86:	2200      	movs	r2, #0
 8012a88:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012a8a:	4b90      	ldr	r3, [pc, #576]	@ (8012ccc <tcp_input+0x730>)
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012a90:	4b8f      	ldr	r3, [pc, #572]	@ (8012cd0 <tcp_input+0x734>)
 8012a92:	2200      	movs	r2, #0
 8012a94:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012a96:	4b8f      	ldr	r3, [pc, #572]	@ (8012cd4 <tcp_input+0x738>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	f003 0308 	and.w	r3, r3, #8
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d006      	beq.n	8012ab0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	7b5b      	ldrb	r3, [r3, #13]
 8012aa6:	f043 0301 	orr.w	r3, r3, #1
 8012aaa:	b2da      	uxtb	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d017      	beq.n	8012ae8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012ab8:	69f8      	ldr	r0, [r7, #28]
 8012aba:	f7ff f927 	bl	8011d0c <tcp_process_refused_data>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f113 0f0d 	cmn.w	r3, #13
 8012ac4:	d007      	beq.n	8012ad6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00c      	beq.n	8012ae8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ace:	4b82      	ldr	r3, [pc, #520]	@ (8012cd8 <tcp_input+0x73c>)
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d008      	beq.n	8012ae8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f040 80e4 	bne.w	8012ca8 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ae0:	69f8      	ldr	r0, [r7, #28]
 8012ae2:	f003 f9a9 	bl	8015e38 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ae6:	e0df      	b.n	8012ca8 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8012cdc <tcp_input+0x740>)
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012aee:	69f8      	ldr	r0, [r7, #28]
 8012af0:	f000 fb18 	bl	8013124 <tcp_process>
 8012af4:	4603      	mov	r3, r0
 8012af6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012afc:	f113 0f0d 	cmn.w	r3, #13
 8012b00:	f000 80d4 	beq.w	8012cac <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012b04:	4b71      	ldr	r3, [pc, #452]	@ (8012ccc <tcp_input+0x730>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	f003 0308 	and.w	r3, r3, #8
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d015      	beq.n	8012b3c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d008      	beq.n	8012b2c <tcp_input+0x590>
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b20:	69fa      	ldr	r2, [r7, #28]
 8012b22:	6912      	ldr	r2, [r2, #16]
 8012b24:	f06f 010d 	mvn.w	r1, #13
 8012b28:	4610      	mov	r0, r2
 8012b2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012b2c:	69f9      	ldr	r1, [r7, #28]
 8012b2e:	486c      	ldr	r0, [pc, #432]	@ (8012ce0 <tcp_input+0x744>)
 8012b30:	f7ff fbbc 	bl	80122ac <tcp_pcb_remove>
        tcp_free(pcb);
 8012b34:	69f8      	ldr	r0, [r7, #28]
 8012b36:	f7fe f9a3 	bl	8010e80 <tcp_free>
 8012b3a:	e0da      	b.n	8012cf2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012b40:	4b63      	ldr	r3, [pc, #396]	@ (8012cd0 <tcp_input+0x734>)
 8012b42:	881b      	ldrh	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d01d      	beq.n	8012b84 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012b48:	4b61      	ldr	r3, [pc, #388]	@ (8012cd0 <tcp_input+0x734>)
 8012b4a:	881b      	ldrh	r3, [r3, #0]
 8012b4c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00a      	beq.n	8012b6e <tcp_input+0x5d2>
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b5e:	69fa      	ldr	r2, [r7, #28]
 8012b60:	6910      	ldr	r0, [r2, #16]
 8012b62:	89fa      	ldrh	r2, [r7, #14]
 8012b64:	69f9      	ldr	r1, [r7, #28]
 8012b66:	4798      	blx	r3
 8012b68:	4603      	mov	r3, r0
 8012b6a:	74fb      	strb	r3, [r7, #19]
 8012b6c:	e001      	b.n	8012b72 <tcp_input+0x5d6>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012b72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b76:	f113 0f0d 	cmn.w	r3, #13
 8012b7a:	f000 8099 	beq.w	8012cb0 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012b7e:	4b54      	ldr	r3, [pc, #336]	@ (8012cd0 <tcp_input+0x734>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012b84:	69f8      	ldr	r0, [r7, #28]
 8012b86:	f000 f915 	bl	8012db4 <tcp_input_delayed_close>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	f040 8091 	bne.w	8012cb4 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012b92:	4b4d      	ldr	r3, [pc, #308]	@ (8012cc8 <tcp_input+0x72c>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d041      	beq.n	8012c1e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d006      	beq.n	8012bb0 <tcp_input+0x614>
 8012ba2:	4b50      	ldr	r3, [pc, #320]	@ (8012ce4 <tcp_input+0x748>)
 8012ba4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012ba8:	494f      	ldr	r1, [pc, #316]	@ (8012ce8 <tcp_input+0x74c>)
 8012baa:	4850      	ldr	r0, [pc, #320]	@ (8012cec <tcp_input+0x750>)
 8012bac:	f006 fe1a 	bl	80197e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	8b5b      	ldrh	r3, [r3, #26]
 8012bb4:	f003 0310 	and.w	r3, r3, #16
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d008      	beq.n	8012bce <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012bbc:	4b42      	ldr	r3, [pc, #264]	@ (8012cc8 <tcp_input+0x72c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fd fea1 	bl	8010908 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012bc6:	69f8      	ldr	r0, [r7, #28]
 8012bc8:	f7fe fc42 	bl	8011450 <tcp_abort>
            goto aborted;
 8012bcc:	e091      	b.n	8012cf2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00c      	beq.n	8012bf2 <tcp_input+0x656>
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	6918      	ldr	r0, [r3, #16]
 8012be2:	4b39      	ldr	r3, [pc, #228]	@ (8012cc8 <tcp_input+0x72c>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	2300      	movs	r3, #0
 8012be8:	69f9      	ldr	r1, [r7, #28]
 8012bea:	47a0      	blx	r4
 8012bec:	4603      	mov	r3, r0
 8012bee:	74fb      	strb	r3, [r7, #19]
 8012bf0:	e008      	b.n	8012c04 <tcp_input+0x668>
 8012bf2:	4b35      	ldr	r3, [pc, #212]	@ (8012cc8 <tcp_input+0x72c>)
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	69f9      	ldr	r1, [r7, #28]
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	f7ff f95e 	bl	8011ebc <tcp_recv_null>
 8012c00:	4603      	mov	r3, r0
 8012c02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012c04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c08:	f113 0f0d 	cmn.w	r3, #13
 8012c0c:	d054      	beq.n	8012cb8 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012c0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d003      	beq.n	8012c1e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012c16:	4b2c      	ldr	r3, [pc, #176]	@ (8012cc8 <tcp_input+0x72c>)
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8012ccc <tcp_input+0x730>)
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f003 0320 	and.w	r3, r3, #32
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d031      	beq.n	8012c8e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d009      	beq.n	8012c46 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c36:	7b5a      	ldrb	r2, [r3, #13]
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c3c:	f042 0220 	orr.w	r2, r2, #32
 8012c40:	b2d2      	uxtb	r2, r2
 8012c42:	735a      	strb	r2, [r3, #13]
 8012c44:	e023      	b.n	8012c8e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c4a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d005      	beq.n	8012c5e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c56:	3301      	adds	r3, #1
 8012c58:	b29a      	uxth	r2, r3
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00b      	beq.n	8012c80 <tcp_input+0x6e4>
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	6918      	ldr	r0, [r3, #16]
 8012c72:	2300      	movs	r3, #0
 8012c74:	2200      	movs	r2, #0
 8012c76:	69f9      	ldr	r1, [r7, #28]
 8012c78:	47a0      	blx	r4
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	74fb      	strb	r3, [r7, #19]
 8012c7e:	e001      	b.n	8012c84 <tcp_input+0x6e8>
 8012c80:	2300      	movs	r3, #0
 8012c82:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c88:	f113 0f0d 	cmn.w	r3, #13
 8012c8c:	d016      	beq.n	8012cbc <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012c8e:	4b13      	ldr	r3, [pc, #76]	@ (8012cdc <tcp_input+0x740>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012c94:	69f8      	ldr	r0, [r7, #28]
 8012c96:	f000 f88d 	bl	8012db4 <tcp_input_delayed_close>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d127      	bne.n	8012cf0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012ca0:	69f8      	ldr	r0, [r7, #28]
 8012ca2:	f002 fac3 	bl	801522c <tcp_output>
 8012ca6:	e024      	b.n	8012cf2 <tcp_input+0x756>
        goto aborted;
 8012ca8:	bf00      	nop
 8012caa:	e022      	b.n	8012cf2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012cac:	bf00      	nop
 8012cae:	e020      	b.n	8012cf2 <tcp_input+0x756>
              goto aborted;
 8012cb0:	bf00      	nop
 8012cb2:	e01e      	b.n	8012cf2 <tcp_input+0x756>
          goto aborted;
 8012cb4:	bf00      	nop
 8012cb6:	e01c      	b.n	8012cf2 <tcp_input+0x756>
            goto aborted;
 8012cb8:	bf00      	nop
 8012cba:	e01a      	b.n	8012cf2 <tcp_input+0x756>
              goto aborted;
 8012cbc:	bf00      	nop
 8012cbe:	e018      	b.n	8012cf2 <tcp_input+0x756>
 8012cc0:	24010600 	.word	0x24010600
 8012cc4:	24010610 	.word	0x24010610
 8012cc8:	24010630 	.word	0x24010630
 8012ccc:	2401062d 	.word	0x2401062d
 8012cd0:	24010628 	.word	0x24010628
 8012cd4:	2401062c 	.word	0x2401062c
 8012cd8:	2401062a 	.word	0x2401062a
 8012cdc:	24010634 	.word	0x24010634
 8012ce0:	240105f4 	.word	0x240105f4
 8012ce4:	0801ba90 	.word	0x0801ba90
 8012ce8:	0801bc44 	.word	0x0801bc44
 8012cec:	0801badc 	.word	0x0801badc
          goto aborted;
 8012cf0:	bf00      	nop
    tcp_input_pcb = NULL;
 8012cf2:	4b27      	ldr	r3, [pc, #156]	@ (8012d90 <tcp_input+0x7f4>)
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012cf8:	4b26      	ldr	r3, [pc, #152]	@ (8012d94 <tcp_input+0x7f8>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012cfe:	4b26      	ldr	r3, [pc, #152]	@ (8012d98 <tcp_input+0x7fc>)
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d03f      	beq.n	8012d86 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012d06:	4b24      	ldr	r3, [pc, #144]	@ (8012d98 <tcp_input+0x7fc>)
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fd fdfc 	bl	8010908 <pbuf_free>
      inseg.p = NULL;
 8012d10:	4b21      	ldr	r3, [pc, #132]	@ (8012d98 <tcp_input+0x7fc>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012d16:	e036      	b.n	8012d86 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012d18:	4b20      	ldr	r3, [pc, #128]	@ (8012d9c <tcp_input+0x800>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	899b      	ldrh	r3, [r3, #12]
 8012d1e:	b29b      	uxth	r3, r3
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7fc f933 	bl	800ef8c <lwip_htons>
 8012d26:	4603      	mov	r3, r0
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	f003 0304 	and.w	r3, r3, #4
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d118      	bne.n	8012d64 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d32:	4b1b      	ldr	r3, [pc, #108]	@ (8012da0 <tcp_input+0x804>)
 8012d34:	6819      	ldr	r1, [r3, #0]
 8012d36:	4b1b      	ldr	r3, [pc, #108]	@ (8012da4 <tcp_input+0x808>)
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8012da8 <tcp_input+0x80c>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d42:	4b16      	ldr	r3, [pc, #88]	@ (8012d9c <tcp_input+0x800>)
 8012d44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d46:	885b      	ldrh	r3, [r3, #2]
 8012d48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d4a:	4a14      	ldr	r2, [pc, #80]	@ (8012d9c <tcp_input+0x800>)
 8012d4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d4e:	8812      	ldrh	r2, [r2, #0]
 8012d50:	b292      	uxth	r2, r2
 8012d52:	9202      	str	r2, [sp, #8]
 8012d54:	9301      	str	r3, [sp, #4]
 8012d56:	4b15      	ldr	r3, [pc, #84]	@ (8012dac <tcp_input+0x810>)
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	4b15      	ldr	r3, [pc, #84]	@ (8012db0 <tcp_input+0x814>)
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	2000      	movs	r0, #0
 8012d60:	f003 f818 	bl	8015d94 <tcp_rst>
    pbuf_free(p);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7fd fdcf 	bl	8010908 <pbuf_free>
  return;
 8012d6a:	e00c      	b.n	8012d86 <tcp_input+0x7ea>
    goto dropped;
 8012d6c:	bf00      	nop
 8012d6e:	e006      	b.n	8012d7e <tcp_input+0x7e2>
    goto dropped;
 8012d70:	bf00      	nop
 8012d72:	e004      	b.n	8012d7e <tcp_input+0x7e2>
    goto dropped;
 8012d74:	bf00      	nop
 8012d76:	e002      	b.n	8012d7e <tcp_input+0x7e2>
      goto dropped;
 8012d78:	bf00      	nop
 8012d7a:	e000      	b.n	8012d7e <tcp_input+0x7e2>
      goto dropped;
 8012d7c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7fd fdc2 	bl	8010908 <pbuf_free>
 8012d84:	e000      	b.n	8012d88 <tcp_input+0x7ec>
  return;
 8012d86:	bf00      	nop
}
 8012d88:	3724      	adds	r7, #36	@ 0x24
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd90      	pop	{r4, r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	24010634 	.word	0x24010634
 8012d94:	24010630 	.word	0x24010630
 8012d98:	24010600 	.word	0x24010600
 8012d9c:	24010610 	.word	0x24010610
 8012da0:	24010624 	.word	0x24010624
 8012da4:	2401062a 	.word	0x2401062a
 8012da8:	24010620 	.word	0x24010620
 8012dac:	24009b38 	.word	0x24009b38
 8012db0:	24009b3c 	.word	0x24009b3c

08012db4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d106      	bne.n	8012dd0 <tcp_input_delayed_close+0x1c>
 8012dc2:	4b17      	ldr	r3, [pc, #92]	@ (8012e20 <tcp_input_delayed_close+0x6c>)
 8012dc4:	f240 225a 	movw	r2, #602	@ 0x25a
 8012dc8:	4916      	ldr	r1, [pc, #88]	@ (8012e24 <tcp_input_delayed_close+0x70>)
 8012dca:	4817      	ldr	r0, [pc, #92]	@ (8012e28 <tcp_input_delayed_close+0x74>)
 8012dcc:	f006 fd0a 	bl	80197e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012dd0:	4b16      	ldr	r3, [pc, #88]	@ (8012e2c <tcp_input_delayed_close+0x78>)
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	f003 0310 	and.w	r3, r3, #16
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d01c      	beq.n	8012e16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f003 0310 	and.w	r3, r3, #16
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10d      	bne.n	8012e04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d008      	beq.n	8012e04 <tcp_input_delayed_close+0x50>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	6912      	ldr	r2, [r2, #16]
 8012dfc:	f06f 010e 	mvn.w	r1, #14
 8012e00:	4610      	mov	r0, r2
 8012e02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e04:	6879      	ldr	r1, [r7, #4]
 8012e06:	480a      	ldr	r0, [pc, #40]	@ (8012e30 <tcp_input_delayed_close+0x7c>)
 8012e08:	f7ff fa50 	bl	80122ac <tcp_pcb_remove>
    tcp_free(pcb);
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7fe f837 	bl	8010e80 <tcp_free>
    return 1;
 8012e12:	2301      	movs	r3, #1
 8012e14:	e000      	b.n	8012e18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	0801ba90 	.word	0x0801ba90
 8012e24:	0801bc60 	.word	0x0801bc60
 8012e28:	0801badc 	.word	0x0801badc
 8012e2c:	2401062d 	.word	0x2401062d
 8012e30:	240105f4 	.word	0x240105f4

08012e34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b08b      	sub	sp, #44	@ 0x2c
 8012e38:	af04      	add	r7, sp, #16
 8012e3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8012ffc <tcp_listen_input+0x1c8>)
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f003 0304 	and.w	r3, r3, #4
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	f040 80d2 	bne.w	8012fee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d106      	bne.n	8012e5e <tcp_listen_input+0x2a>
 8012e50:	4b6b      	ldr	r3, [pc, #428]	@ (8013000 <tcp_listen_input+0x1cc>)
 8012e52:	f240 2281 	movw	r2, #641	@ 0x281
 8012e56:	496b      	ldr	r1, [pc, #428]	@ (8013004 <tcp_listen_input+0x1d0>)
 8012e58:	486b      	ldr	r0, [pc, #428]	@ (8013008 <tcp_listen_input+0x1d4>)
 8012e5a:	f006 fcc3 	bl	80197e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012e5e:	4b67      	ldr	r3, [pc, #412]	@ (8012ffc <tcp_listen_input+0x1c8>)
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	f003 0310 	and.w	r3, r3, #16
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d019      	beq.n	8012e9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e6a:	4b68      	ldr	r3, [pc, #416]	@ (801300c <tcp_listen_input+0x1d8>)
 8012e6c:	6819      	ldr	r1, [r3, #0]
 8012e6e:	4b68      	ldr	r3, [pc, #416]	@ (8013010 <tcp_listen_input+0x1dc>)
 8012e70:	881b      	ldrh	r3, [r3, #0]
 8012e72:	461a      	mov	r2, r3
 8012e74:	4b67      	ldr	r3, [pc, #412]	@ (8013014 <tcp_listen_input+0x1e0>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e7a:	4b67      	ldr	r3, [pc, #412]	@ (8013018 <tcp_listen_input+0x1e4>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e7e:	885b      	ldrh	r3, [r3, #2]
 8012e80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e82:	4a65      	ldr	r2, [pc, #404]	@ (8013018 <tcp_listen_input+0x1e4>)
 8012e84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e86:	8812      	ldrh	r2, [r2, #0]
 8012e88:	b292      	uxth	r2, r2
 8012e8a:	9202      	str	r2, [sp, #8]
 8012e8c:	9301      	str	r3, [sp, #4]
 8012e8e:	4b63      	ldr	r3, [pc, #396]	@ (801301c <tcp_listen_input+0x1e8>)
 8012e90:	9300      	str	r3, [sp, #0]
 8012e92:	4b63      	ldr	r3, [pc, #396]	@ (8013020 <tcp_listen_input+0x1ec>)
 8012e94:	4602      	mov	r2, r0
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f002 ff7c 	bl	8015d94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012e9c:	e0a9      	b.n	8012ff2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012e9e:	4b57      	ldr	r3, [pc, #348]	@ (8012ffc <tcp_listen_input+0x1c8>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	f003 0302 	and.w	r3, r3, #2
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	f000 80a3 	beq.w	8012ff2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	7d5b      	ldrb	r3, [r3, #21]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7ff f927 	bl	8012104 <tcp_alloc>
 8012eb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d111      	bne.n	8012ee2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	699b      	ldr	r3, [r3, #24]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d00a      	beq.n	8012edc <tcp_listen_input+0xa8>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	699b      	ldr	r3, [r3, #24]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	6910      	ldr	r0, [r2, #16]
 8012ece:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	4798      	blx	r3
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	73bb      	strb	r3, [r7, #14]
      return;
 8012eda:	e08b      	b.n	8012ff4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012edc:	23f0      	movs	r3, #240	@ 0xf0
 8012ede:	73bb      	strb	r3, [r7, #14]
      return;
 8012ee0:	e088      	b.n	8012ff4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012ee2:	4b50      	ldr	r3, [pc, #320]	@ (8013024 <tcp_listen_input+0x1f0>)
 8012ee4:	695a      	ldr	r2, [r3, #20]
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012eea:	4b4e      	ldr	r3, [pc, #312]	@ (8013024 <tcp_listen_input+0x1f0>)
 8012eec:	691a      	ldr	r2, [r3, #16]
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	8ada      	ldrh	r2, [r3, #22]
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012efa:	4b47      	ldr	r3, [pc, #284]	@ (8013018 <tcp_listen_input+0x1e4>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	881b      	ldrh	r3, [r3, #0]
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	2203      	movs	r2, #3
 8012f0a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012f0c:	4b41      	ldr	r3, [pc, #260]	@ (8013014 <tcp_listen_input+0x1e0>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012f1e:	6978      	ldr	r0, [r7, #20]
 8012f20:	f7ff fa58 	bl	80123d4 <tcp_next_iss>
 8012f24:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	693a      	ldr	r2, [r7, #16]
 8012f30:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	693a      	ldr	r2, [r7, #16]
 8012f36:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	693a      	ldr	r2, [r7, #16]
 8012f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012f3e:	4b35      	ldr	r3, [pc, #212]	@ (8013014 <tcp_listen_input+0x1e0>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	1e5a      	subs	r2, r3, #1
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	691a      	ldr	r2, [r3, #16]
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	7a5b      	ldrb	r3, [r3, #9]
 8012f5a:	f003 030c 	and.w	r3, r3, #12
 8012f5e:	b2da      	uxtb	r2, r3
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	7a1a      	ldrb	r2, [r3, #8]
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8013028 <tcp_listen_input+0x1f4>)
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	60da      	str	r2, [r3, #12]
 8012f74:	4a2c      	ldr	r2, [pc, #176]	@ (8013028 <tcp_listen_input+0x1f4>)
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	6013      	str	r3, [r2, #0]
 8012f7a:	f003 f8cd 	bl	8016118 <tcp_timer_needed>
 8012f7e:	4b2b      	ldr	r3, [pc, #172]	@ (801302c <tcp_listen_input+0x1f8>)
 8012f80:	2201      	movs	r2, #1
 8012f82:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012f84:	6978      	ldr	r0, [r7, #20]
 8012f86:	f001 fd8b 	bl	8014aa0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012f8a:	4b23      	ldr	r3, [pc, #140]	@ (8013018 <tcp_listen_input+0x1e4>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	89db      	ldrh	r3, [r3, #14]
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	3304      	adds	r3, #4
 8012fac:	4618      	mov	r0, r3
 8012fae:	f005 f817 	bl	8017fe0 <ip4_route>
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	3304      	adds	r3, #4
 8012fb8:	461a      	mov	r2, r3
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7ff fa30 	bl	8012420 <tcp_eff_send_mss_netif>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012fc8:	2112      	movs	r1, #18
 8012fca:	6978      	ldr	r0, [r7, #20]
 8012fcc:	f002 f840 	bl	8015050 <tcp_enqueue_flags>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d004      	beq.n	8012fe6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012fdc:	2100      	movs	r1, #0
 8012fde:	6978      	ldr	r0, [r7, #20]
 8012fe0:	f7fe f978 	bl	80112d4 <tcp_abandon>
      return;
 8012fe4:	e006      	b.n	8012ff4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012fe6:	6978      	ldr	r0, [r7, #20]
 8012fe8:	f002 f920 	bl	801522c <tcp_output>
  return;
 8012fec:	e001      	b.n	8012ff2 <tcp_listen_input+0x1be>
    return;
 8012fee:	bf00      	nop
 8012ff0:	e000      	b.n	8012ff4 <tcp_listen_input+0x1c0>
  return;
 8012ff2:	bf00      	nop
}
 8012ff4:	371c      	adds	r7, #28
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd90      	pop	{r4, r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	2401062c 	.word	0x2401062c
 8013000:	0801ba90 	.word	0x0801ba90
 8013004:	0801bc88 	.word	0x0801bc88
 8013008:	0801badc 	.word	0x0801badc
 801300c:	24010624 	.word	0x24010624
 8013010:	2401062a 	.word	0x2401062a
 8013014:	24010620 	.word	0x24010620
 8013018:	24010610 	.word	0x24010610
 801301c:	24009b38 	.word	0x24009b38
 8013020:	24009b3c 	.word	0x24009b3c
 8013024:	24009b28 	.word	0x24009b28
 8013028:	240105f4 	.word	0x240105f4
 801302c:	240105fc 	.word	0x240105fc

08013030 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b086      	sub	sp, #24
 8013034:	af04      	add	r7, sp, #16
 8013036:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013038:	4b2f      	ldr	r3, [pc, #188]	@ (80130f8 <tcp_timewait_input+0xc8>)
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	f003 0304 	and.w	r3, r3, #4
 8013040:	2b00      	cmp	r3, #0
 8013042:	d153      	bne.n	80130ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d106      	bne.n	8013058 <tcp_timewait_input+0x28>
 801304a:	4b2c      	ldr	r3, [pc, #176]	@ (80130fc <tcp_timewait_input+0xcc>)
 801304c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013050:	492b      	ldr	r1, [pc, #172]	@ (8013100 <tcp_timewait_input+0xd0>)
 8013052:	482c      	ldr	r0, [pc, #176]	@ (8013104 <tcp_timewait_input+0xd4>)
 8013054:	f006 fbc6 	bl	80197e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013058:	4b27      	ldr	r3, [pc, #156]	@ (80130f8 <tcp_timewait_input+0xc8>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	f003 0302 	and.w	r3, r3, #2
 8013060:	2b00      	cmp	r3, #0
 8013062:	d02a      	beq.n	80130ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013064:	4b28      	ldr	r3, [pc, #160]	@ (8013108 <tcp_timewait_input+0xd8>)
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801306c:	1ad3      	subs	r3, r2, r3
 801306e:	2b00      	cmp	r3, #0
 8013070:	db2d      	blt.n	80130ce <tcp_timewait_input+0x9e>
 8013072:	4b25      	ldr	r3, [pc, #148]	@ (8013108 <tcp_timewait_input+0xd8>)
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801307a:	6879      	ldr	r1, [r7, #4]
 801307c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801307e:	440b      	add	r3, r1
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	2b00      	cmp	r3, #0
 8013084:	dc23      	bgt.n	80130ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013086:	4b21      	ldr	r3, [pc, #132]	@ (801310c <tcp_timewait_input+0xdc>)
 8013088:	6819      	ldr	r1, [r3, #0]
 801308a:	4b21      	ldr	r3, [pc, #132]	@ (8013110 <tcp_timewait_input+0xe0>)
 801308c:	881b      	ldrh	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	4b1d      	ldr	r3, [pc, #116]	@ (8013108 <tcp_timewait_input+0xd8>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013096:	4b1f      	ldr	r3, [pc, #124]	@ (8013114 <tcp_timewait_input+0xe4>)
 8013098:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801309a:	885b      	ldrh	r3, [r3, #2]
 801309c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801309e:	4a1d      	ldr	r2, [pc, #116]	@ (8013114 <tcp_timewait_input+0xe4>)
 80130a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80130a2:	8812      	ldrh	r2, [r2, #0]
 80130a4:	b292      	uxth	r2, r2
 80130a6:	9202      	str	r2, [sp, #8]
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	4b1b      	ldr	r3, [pc, #108]	@ (8013118 <tcp_timewait_input+0xe8>)
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	4b1b      	ldr	r3, [pc, #108]	@ (801311c <tcp_timewait_input+0xec>)
 80130b0:	4602      	mov	r2, r0
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f002 fe6e 	bl	8015d94 <tcp_rst>
      return;
 80130b8:	e01b      	b.n	80130f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80130ba:	4b0f      	ldr	r3, [pc, #60]	@ (80130f8 <tcp_timewait_input+0xc8>)
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	f003 0301 	and.w	r3, r3, #1
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d003      	beq.n	80130ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80130c6:	4b16      	ldr	r3, [pc, #88]	@ (8013120 <tcp_timewait_input+0xf0>)
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80130ce:	4b10      	ldr	r3, [pc, #64]	@ (8013110 <tcp_timewait_input+0xe0>)
 80130d0:	881b      	ldrh	r3, [r3, #0]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00c      	beq.n	80130f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	8b5b      	ldrh	r3, [r3, #26]
 80130da:	f043 0302 	orr.w	r3, r3, #2
 80130de:	b29a      	uxth	r2, r3
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f002 f8a1 	bl	801522c <tcp_output>
  }
  return;
 80130ea:	e001      	b.n	80130f0 <tcp_timewait_input+0xc0>
    return;
 80130ec:	bf00      	nop
 80130ee:	e000      	b.n	80130f2 <tcp_timewait_input+0xc2>
  return;
 80130f0:	bf00      	nop
}
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	2401062c 	.word	0x2401062c
 80130fc:	0801ba90 	.word	0x0801ba90
 8013100:	0801bca8 	.word	0x0801bca8
 8013104:	0801badc 	.word	0x0801badc
 8013108:	24010620 	.word	0x24010620
 801310c:	24010624 	.word	0x24010624
 8013110:	2401062a 	.word	0x2401062a
 8013114:	24010610 	.word	0x24010610
 8013118:	24009b38 	.word	0x24009b38
 801311c:	24009b3c 	.word	0x24009b3c
 8013120:	240105e8 	.word	0x240105e8

08013124 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013124:	b590      	push	{r4, r7, lr}
 8013126:	b08d      	sub	sp, #52	@ 0x34
 8013128:	af04      	add	r7, sp, #16
 801312a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801312c:	2300      	movs	r3, #0
 801312e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013130:	2300      	movs	r3, #0
 8013132:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d106      	bne.n	8013148 <tcp_process+0x24>
 801313a:	4b9d      	ldr	r3, [pc, #628]	@ (80133b0 <tcp_process+0x28c>)
 801313c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8013140:	499c      	ldr	r1, [pc, #624]	@ (80133b4 <tcp_process+0x290>)
 8013142:	489d      	ldr	r0, [pc, #628]	@ (80133b8 <tcp_process+0x294>)
 8013144:	f006 fb4e 	bl	80197e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013148:	4b9c      	ldr	r3, [pc, #624]	@ (80133bc <tcp_process+0x298>)
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	f003 0304 	and.w	r3, r3, #4
 8013150:	2b00      	cmp	r3, #0
 8013152:	d04e      	beq.n	80131f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	7d1b      	ldrb	r3, [r3, #20]
 8013158:	2b02      	cmp	r3, #2
 801315a:	d108      	bne.n	801316e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013160:	4b97      	ldr	r3, [pc, #604]	@ (80133c0 <tcp_process+0x29c>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	429a      	cmp	r2, r3
 8013166:	d123      	bne.n	80131b0 <tcp_process+0x8c>
        acceptable = 1;
 8013168:	2301      	movs	r3, #1
 801316a:	76fb      	strb	r3, [r7, #27]
 801316c:	e020      	b.n	80131b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013172:	4b94      	ldr	r3, [pc, #592]	@ (80133c4 <tcp_process+0x2a0>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	429a      	cmp	r2, r3
 8013178:	d102      	bne.n	8013180 <tcp_process+0x5c>
        acceptable = 1;
 801317a:	2301      	movs	r3, #1
 801317c:	76fb      	strb	r3, [r7, #27]
 801317e:	e017      	b.n	80131b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013180:	4b90      	ldr	r3, [pc, #576]	@ (80133c4 <tcp_process+0x2a0>)
 8013182:	681a      	ldr	r2, [r3, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013188:	1ad3      	subs	r3, r2, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	db10      	blt.n	80131b0 <tcp_process+0x8c>
 801318e:	4b8d      	ldr	r3, [pc, #564]	@ (80133c4 <tcp_process+0x2a0>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801319a:	440b      	add	r3, r1
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	dc06      	bgt.n	80131b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	8b5b      	ldrh	r3, [r3, #26]
 80131a6:	f043 0302 	orr.w	r3, r3, #2
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80131b0:	7efb      	ldrb	r3, [r7, #27]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d01b      	beq.n	80131ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	7d1b      	ldrb	r3, [r3, #20]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d106      	bne.n	80131cc <tcp_process+0xa8>
 80131be:	4b7c      	ldr	r3, [pc, #496]	@ (80133b0 <tcp_process+0x28c>)
 80131c0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80131c4:	4980      	ldr	r1, [pc, #512]	@ (80133c8 <tcp_process+0x2a4>)
 80131c6:	487c      	ldr	r0, [pc, #496]	@ (80133b8 <tcp_process+0x294>)
 80131c8:	f006 fb0c 	bl	80197e4 <iprintf>
      recv_flags |= TF_RESET;
 80131cc:	4b7f      	ldr	r3, [pc, #508]	@ (80133cc <tcp_process+0x2a8>)
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f043 0308 	orr.w	r3, r3, #8
 80131d4:	b2da      	uxtb	r2, r3
 80131d6:	4b7d      	ldr	r3, [pc, #500]	@ (80133cc <tcp_process+0x2a8>)
 80131d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	8b5b      	ldrh	r3, [r3, #26]
 80131de:	f023 0301 	bic.w	r3, r3, #1
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80131e8:	f06f 030d 	mvn.w	r3, #13
 80131ec:	e37a      	b.n	80138e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80131ee:	2300      	movs	r3, #0
 80131f0:	e378      	b.n	80138e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80131f2:	4b72      	ldr	r3, [pc, #456]	@ (80133bc <tcp_process+0x298>)
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	f003 0302 	and.w	r3, r3, #2
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d010      	beq.n	8013220 <tcp_process+0xfc>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	7d1b      	ldrb	r3, [r3, #20]
 8013202:	2b02      	cmp	r3, #2
 8013204:	d00c      	beq.n	8013220 <tcp_process+0xfc>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	7d1b      	ldrb	r3, [r3, #20]
 801320a:	2b03      	cmp	r3, #3
 801320c:	d008      	beq.n	8013220 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	8b5b      	ldrh	r3, [r3, #26]
 8013212:	f043 0302 	orr.w	r3, r3, #2
 8013216:	b29a      	uxth	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801321c:	2300      	movs	r3, #0
 801321e:	e361      	b.n	80138e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	8b5b      	ldrh	r3, [r3, #26]
 8013224:	f003 0310 	and.w	r3, r3, #16
 8013228:	2b00      	cmp	r3, #0
 801322a:	d103      	bne.n	8013234 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801322c:	4b68      	ldr	r3, [pc, #416]	@ (80133d0 <tcp_process+0x2ac>)
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2200      	movs	r2, #0
 8013238:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2200      	movs	r2, #0
 8013240:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f001 fc2b 	bl	8014aa0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	7d1b      	ldrb	r3, [r3, #20]
 801324e:	3b02      	subs	r3, #2
 8013250:	2b07      	cmp	r3, #7
 8013252:	f200 8337 	bhi.w	80138c4 <tcp_process+0x7a0>
 8013256:	a201      	add	r2, pc, #4	@ (adr r2, 801325c <tcp_process+0x138>)
 8013258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801325c:	0801327d 	.word	0x0801327d
 8013260:	080134ad 	.word	0x080134ad
 8013264:	08013625 	.word	0x08013625
 8013268:	0801364f 	.word	0x0801364f
 801326c:	08013773 	.word	0x08013773
 8013270:	08013625 	.word	0x08013625
 8013274:	080137ff 	.word	0x080137ff
 8013278:	0801388f 	.word	0x0801388f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801327c:	4b4f      	ldr	r3, [pc, #316]	@ (80133bc <tcp_process+0x298>)
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	f003 0310 	and.w	r3, r3, #16
 8013284:	2b00      	cmp	r3, #0
 8013286:	f000 80e4 	beq.w	8013452 <tcp_process+0x32e>
 801328a:	4b4c      	ldr	r3, [pc, #304]	@ (80133bc <tcp_process+0x298>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	f003 0302 	and.w	r3, r3, #2
 8013292:	2b00      	cmp	r3, #0
 8013294:	f000 80dd 	beq.w	8013452 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801329c:	1c5a      	adds	r2, r3, #1
 801329e:	4b48      	ldr	r3, [pc, #288]	@ (80133c0 <tcp_process+0x29c>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	f040 80d5 	bne.w	8013452 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80132a8:	4b46      	ldr	r3, [pc, #280]	@ (80133c4 <tcp_process+0x2a0>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	1c5a      	adds	r2, r3, #1
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80132ba:	4b41      	ldr	r3, [pc, #260]	@ (80133c0 <tcp_process+0x29c>)
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80132c2:	4b44      	ldr	r3, [pc, #272]	@ (80133d4 <tcp_process+0x2b0>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	89db      	ldrh	r3, [r3, #14]
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80132dc:	4b39      	ldr	r3, [pc, #228]	@ (80133c4 <tcp_process+0x2a0>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	1e5a      	subs	r2, r3, #1
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2204      	movs	r2, #4
 80132ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	3304      	adds	r3, #4
 80132f4:	4618      	mov	r0, r3
 80132f6:	f004 fe73 	bl	8017fe0 <ip4_route>
 80132fa:	4601      	mov	r1, r0
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	3304      	adds	r3, #4
 8013300:	461a      	mov	r2, r3
 8013302:	4620      	mov	r0, r4
 8013304:	f7ff f88c 	bl	8012420 <tcp_eff_send_mss_netif>
 8013308:	4603      	mov	r3, r0
 801330a:	461a      	mov	r2, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013314:	009a      	lsls	r2, r3, #2
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013320:	428b      	cmp	r3, r1
 8013322:	bf38      	it	cc
 8013324:	460b      	movcc	r3, r1
 8013326:	429a      	cmp	r2, r3
 8013328:	d204      	bcs.n	8013334 <tcp_process+0x210>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	b29b      	uxth	r3, r3
 8013332:	e00d      	b.n	8013350 <tcp_process+0x22c>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013338:	005b      	lsls	r3, r3, #1
 801333a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801333e:	4293      	cmp	r3, r2
 8013340:	d904      	bls.n	801334c <tcp_process+0x228>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013346:	005b      	lsls	r3, r3, #1
 8013348:	b29b      	uxth	r3, r3
 801334a:	e001      	b.n	8013350 <tcp_process+0x22c>
 801334c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013350:	687a      	ldr	r2, [r7, #4]
 8013352:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801335c:	2b00      	cmp	r3, #0
 801335e:	d106      	bne.n	801336e <tcp_process+0x24a>
 8013360:	4b13      	ldr	r3, [pc, #76]	@ (80133b0 <tcp_process+0x28c>)
 8013362:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8013366:	491c      	ldr	r1, [pc, #112]	@ (80133d8 <tcp_process+0x2b4>)
 8013368:	4813      	ldr	r0, [pc, #76]	@ (80133b8 <tcp_process+0x294>)
 801336a:	f006 fa3b 	bl	80197e4 <iprintf>
        --pcb->snd_queuelen;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013374:	3b01      	subs	r3, #1
 8013376:	b29a      	uxth	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013382:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013384:	69fb      	ldr	r3, [r7, #28]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d12a      	bne.n	80133e0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801338e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d106      	bne.n	80133a4 <tcp_process+0x280>
 8013396:	4b06      	ldr	r3, [pc, #24]	@ (80133b0 <tcp_process+0x28c>)
 8013398:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801339c:	490f      	ldr	r1, [pc, #60]	@ (80133dc <tcp_process+0x2b8>)
 801339e:	4806      	ldr	r0, [pc, #24]	@ (80133b8 <tcp_process+0x294>)
 80133a0:	f006 fa20 	bl	80197e4 <iprintf>
          pcb->unsent = rseg->next;
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	681a      	ldr	r2, [r3, #0]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80133ac:	e01c      	b.n	80133e8 <tcp_process+0x2c4>
 80133ae:	bf00      	nop
 80133b0:	0801ba90 	.word	0x0801ba90
 80133b4:	0801bcc8 	.word	0x0801bcc8
 80133b8:	0801badc 	.word	0x0801badc
 80133bc:	2401062c 	.word	0x2401062c
 80133c0:	24010624 	.word	0x24010624
 80133c4:	24010620 	.word	0x24010620
 80133c8:	0801bce4 	.word	0x0801bce4
 80133cc:	2401062d 	.word	0x2401062d
 80133d0:	240105e8 	.word	0x240105e8
 80133d4:	24010610 	.word	0x24010610
 80133d8:	0801bd04 	.word	0x0801bd04
 80133dc:	0801bd1c 	.word	0x0801bd1c
        } else {
          pcb->unacked = rseg->next;
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80133e8:	69f8      	ldr	r0, [r7, #28]
 80133ea:	f7fe fd22 	bl	8011e32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d104      	bne.n	8013400 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133fc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80133fe:	e006      	b.n	801340e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2200      	movs	r2, #0
 8013404:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2200      	movs	r2, #0
 801340a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00a      	beq.n	801342e <tcp_process+0x30a>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	6910      	ldr	r0, [r2, #16]
 8013422:	2200      	movs	r2, #0
 8013424:	6879      	ldr	r1, [r7, #4]
 8013426:	4798      	blx	r3
 8013428:	4603      	mov	r3, r0
 801342a:	76bb      	strb	r3, [r7, #26]
 801342c:	e001      	b.n	8013432 <tcp_process+0x30e>
 801342e:	2300      	movs	r3, #0
 8013430:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013432:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013436:	f113 0f0d 	cmn.w	r3, #13
 801343a:	d102      	bne.n	8013442 <tcp_process+0x31e>
          return ERR_ABRT;
 801343c:	f06f 030c 	mvn.w	r3, #12
 8013440:	e250      	b.n	80138e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8b5b      	ldrh	r3, [r3, #26]
 8013446:	f043 0302 	orr.w	r3, r3, #2
 801344a:	b29a      	uxth	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013450:	e23a      	b.n	80138c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013452:	4b98      	ldr	r3, [pc, #608]	@ (80136b4 <tcp_process+0x590>)
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	f003 0310 	and.w	r3, r3, #16
 801345a:	2b00      	cmp	r3, #0
 801345c:	f000 8234 	beq.w	80138c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013460:	4b95      	ldr	r3, [pc, #596]	@ (80136b8 <tcp_process+0x594>)
 8013462:	6819      	ldr	r1, [r3, #0]
 8013464:	4b95      	ldr	r3, [pc, #596]	@ (80136bc <tcp_process+0x598>)
 8013466:	881b      	ldrh	r3, [r3, #0]
 8013468:	461a      	mov	r2, r3
 801346a:	4b95      	ldr	r3, [pc, #596]	@ (80136c0 <tcp_process+0x59c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013470:	4b94      	ldr	r3, [pc, #592]	@ (80136c4 <tcp_process+0x5a0>)
 8013472:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013474:	885b      	ldrh	r3, [r3, #2]
 8013476:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013478:	4a92      	ldr	r2, [pc, #584]	@ (80136c4 <tcp_process+0x5a0>)
 801347a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801347c:	8812      	ldrh	r2, [r2, #0]
 801347e:	b292      	uxth	r2, r2
 8013480:	9202      	str	r2, [sp, #8]
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	4b90      	ldr	r3, [pc, #576]	@ (80136c8 <tcp_process+0x5a4>)
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	4b90      	ldr	r3, [pc, #576]	@ (80136cc <tcp_process+0x5a8>)
 801348a:	4602      	mov	r2, r0
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f002 fc81 	bl	8015d94 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013498:	2b05      	cmp	r3, #5
 801349a:	f200 8215 	bhi.w	80138c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f002 fa4d 	bl	8015944 <tcp_rexmit_rto>
      break;
 80134aa:	e20d      	b.n	80138c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80134ac:	4b81      	ldr	r3, [pc, #516]	@ (80136b4 <tcp_process+0x590>)
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	f003 0310 	and.w	r3, r3, #16
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80a1 	beq.w	80135fc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80134ba:	4b7f      	ldr	r3, [pc, #508]	@ (80136b8 <tcp_process+0x594>)
 80134bc:	681a      	ldr	r2, [r3, #0]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	3b01      	subs	r3, #1
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	db7e      	blt.n	80135c8 <tcp_process+0x4a4>
 80134ca:	4b7b      	ldr	r3, [pc, #492]	@ (80136b8 <tcp_process+0x594>)
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	dc77      	bgt.n	80135c8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2204      	movs	r2, #4
 80134dc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d102      	bne.n	80134ec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80134e6:	23fa      	movs	r3, #250	@ 0xfa
 80134e8:	76bb      	strb	r3, [r7, #26]
 80134ea:	e01d      	b.n	8013528 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134f0:	699b      	ldr	r3, [r3, #24]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d106      	bne.n	8013504 <tcp_process+0x3e0>
 80134f6:	4b76      	ldr	r3, [pc, #472]	@ (80136d0 <tcp_process+0x5ac>)
 80134f8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80134fc:	4975      	ldr	r1, [pc, #468]	@ (80136d4 <tcp_process+0x5b0>)
 80134fe:	4876      	ldr	r0, [pc, #472]	@ (80136d8 <tcp_process+0x5b4>)
 8013500:	f006 f970 	bl	80197e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013508:	699b      	ldr	r3, [r3, #24]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00a      	beq.n	8013524 <tcp_process+0x400>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	6910      	ldr	r0, [r2, #16]
 8013518:	2200      	movs	r2, #0
 801351a:	6879      	ldr	r1, [r7, #4]
 801351c:	4798      	blx	r3
 801351e:	4603      	mov	r3, r0
 8013520:	76bb      	strb	r3, [r7, #26]
 8013522:	e001      	b.n	8013528 <tcp_process+0x404>
 8013524:	23f0      	movs	r3, #240	@ 0xf0
 8013526:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013528:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00a      	beq.n	8013546 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013530:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013534:	f113 0f0d 	cmn.w	r3, #13
 8013538:	d002      	beq.n	8013540 <tcp_process+0x41c>
              tcp_abort(pcb);
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7fd ff88 	bl	8011450 <tcp_abort>
            }
            return ERR_ABRT;
 8013540:	f06f 030c 	mvn.w	r3, #12
 8013544:	e1ce      	b.n	80138e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 fae0 	bl	8013b0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801354c:	4b63      	ldr	r3, [pc, #396]	@ (80136dc <tcp_process+0x5b8>)
 801354e:	881b      	ldrh	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d005      	beq.n	8013560 <tcp_process+0x43c>
            recv_acked--;
 8013554:	4b61      	ldr	r3, [pc, #388]	@ (80136dc <tcp_process+0x5b8>)
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	3b01      	subs	r3, #1
 801355a:	b29a      	uxth	r2, r3
 801355c:	4b5f      	ldr	r3, [pc, #380]	@ (80136dc <tcp_process+0x5b8>)
 801355e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013564:	009a      	lsls	r2, r3, #2
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013570:	428b      	cmp	r3, r1
 8013572:	bf38      	it	cc
 8013574:	460b      	movcc	r3, r1
 8013576:	429a      	cmp	r2, r3
 8013578:	d204      	bcs.n	8013584 <tcp_process+0x460>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801357e:	009b      	lsls	r3, r3, #2
 8013580:	b29b      	uxth	r3, r3
 8013582:	e00d      	b.n	80135a0 <tcp_process+0x47c>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801358e:	4293      	cmp	r3, r2
 8013590:	d904      	bls.n	801359c <tcp_process+0x478>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013596:	005b      	lsls	r3, r3, #1
 8013598:	b29b      	uxth	r3, r3
 801359a:	e001      	b.n	80135a0 <tcp_process+0x47c>
 801359c:	f241 131c 	movw	r3, #4380	@ 0x111c
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80135a6:	4b4e      	ldr	r3, [pc, #312]	@ (80136e0 <tcp_process+0x5bc>)
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f003 0320 	and.w	r3, r3, #32
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d037      	beq.n	8013622 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	8b5b      	ldrh	r3, [r3, #26]
 80135b6:	f043 0302 	orr.w	r3, r3, #2
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2207      	movs	r2, #7
 80135c4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80135c6:	e02c      	b.n	8013622 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135c8:	4b3b      	ldr	r3, [pc, #236]	@ (80136b8 <tcp_process+0x594>)
 80135ca:	6819      	ldr	r1, [r3, #0]
 80135cc:	4b3b      	ldr	r3, [pc, #236]	@ (80136bc <tcp_process+0x598>)
 80135ce:	881b      	ldrh	r3, [r3, #0]
 80135d0:	461a      	mov	r2, r3
 80135d2:	4b3b      	ldr	r3, [pc, #236]	@ (80136c0 <tcp_process+0x59c>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135d8:	4b3a      	ldr	r3, [pc, #232]	@ (80136c4 <tcp_process+0x5a0>)
 80135da:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135dc:	885b      	ldrh	r3, [r3, #2]
 80135de:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80135e0:	4a38      	ldr	r2, [pc, #224]	@ (80136c4 <tcp_process+0x5a0>)
 80135e2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80135e4:	8812      	ldrh	r2, [r2, #0]
 80135e6:	b292      	uxth	r2, r2
 80135e8:	9202      	str	r2, [sp, #8]
 80135ea:	9301      	str	r3, [sp, #4]
 80135ec:	4b36      	ldr	r3, [pc, #216]	@ (80136c8 <tcp_process+0x5a4>)
 80135ee:	9300      	str	r3, [sp, #0]
 80135f0:	4b36      	ldr	r3, [pc, #216]	@ (80136cc <tcp_process+0x5a8>)
 80135f2:	4602      	mov	r2, r0
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f002 fbcd 	bl	8015d94 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80135fa:	e167      	b.n	80138cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80135fc:	4b2d      	ldr	r3, [pc, #180]	@ (80136b4 <tcp_process+0x590>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	f003 0302 	and.w	r3, r3, #2
 8013604:	2b00      	cmp	r3, #0
 8013606:	f000 8161 	beq.w	80138cc <tcp_process+0x7a8>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801360e:	1e5a      	subs	r2, r3, #1
 8013610:	4b2b      	ldr	r3, [pc, #172]	@ (80136c0 <tcp_process+0x59c>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	429a      	cmp	r2, r3
 8013616:	f040 8159 	bne.w	80138cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f002 f9b4 	bl	8015988 <tcp_rexmit>
      break;
 8013620:	e154      	b.n	80138cc <tcp_process+0x7a8>
 8013622:	e153      	b.n	80138cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 fa71 	bl	8013b0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801362a:	4b2d      	ldr	r3, [pc, #180]	@ (80136e0 <tcp_process+0x5bc>)
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	f003 0320 	and.w	r3, r3, #32
 8013632:	2b00      	cmp	r3, #0
 8013634:	f000 814c 	beq.w	80138d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	8b5b      	ldrh	r3, [r3, #26]
 801363c:	f043 0302 	orr.w	r3, r3, #2
 8013640:	b29a      	uxth	r2, r3
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2207      	movs	r2, #7
 801364a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801364c:	e140      	b.n	80138d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f000 fa5c 	bl	8013b0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013654:	4b22      	ldr	r3, [pc, #136]	@ (80136e0 <tcp_process+0x5bc>)
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	f003 0320 	and.w	r3, r3, #32
 801365c:	2b00      	cmp	r3, #0
 801365e:	d071      	beq.n	8013744 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013660:	4b14      	ldr	r3, [pc, #80]	@ (80136b4 <tcp_process+0x590>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	f003 0310 	and.w	r3, r3, #16
 8013668:	2b00      	cmp	r3, #0
 801366a:	d060      	beq.n	801372e <tcp_process+0x60a>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013670:	4b11      	ldr	r3, [pc, #68]	@ (80136b8 <tcp_process+0x594>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d15a      	bne.n	801372e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801367c:	2b00      	cmp	r3, #0
 801367e:	d156      	bne.n	801372e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	8b5b      	ldrh	r3, [r3, #26]
 8013684:	f043 0302 	orr.w	r3, r3, #2
 8013688:	b29a      	uxth	r2, r3
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7fe fdbc 	bl	801220c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013694:	4b13      	ldr	r3, [pc, #76]	@ (80136e4 <tcp_process+0x5c0>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	429a      	cmp	r2, r3
 801369c:	d105      	bne.n	80136aa <tcp_process+0x586>
 801369e:	4b11      	ldr	r3, [pc, #68]	@ (80136e4 <tcp_process+0x5c0>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	4a0f      	ldr	r2, [pc, #60]	@ (80136e4 <tcp_process+0x5c0>)
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	e02e      	b.n	8013708 <tcp_process+0x5e4>
 80136aa:	4b0e      	ldr	r3, [pc, #56]	@ (80136e4 <tcp_process+0x5c0>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	617b      	str	r3, [r7, #20]
 80136b0:	e027      	b.n	8013702 <tcp_process+0x5de>
 80136b2:	bf00      	nop
 80136b4:	2401062c 	.word	0x2401062c
 80136b8:	24010624 	.word	0x24010624
 80136bc:	2401062a 	.word	0x2401062a
 80136c0:	24010620 	.word	0x24010620
 80136c4:	24010610 	.word	0x24010610
 80136c8:	24009b38 	.word	0x24009b38
 80136cc:	24009b3c 	.word	0x24009b3c
 80136d0:	0801ba90 	.word	0x0801ba90
 80136d4:	0801bd30 	.word	0x0801bd30
 80136d8:	0801badc 	.word	0x0801badc
 80136dc:	24010628 	.word	0x24010628
 80136e0:	2401062d 	.word	0x2401062d
 80136e4:	240105f4 	.word	0x240105f4
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d104      	bne.n	80136fc <tcp_process+0x5d8>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	68da      	ldr	r2, [r3, #12]
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	60da      	str	r2, [r3, #12]
 80136fa:	e005      	b.n	8013708 <tcp_process+0x5e4>
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	617b      	str	r3, [r7, #20]
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1ef      	bne.n	80136e8 <tcp_process+0x5c4>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2200      	movs	r2, #0
 801370c:	60da      	str	r2, [r3, #12]
 801370e:	4b77      	ldr	r3, [pc, #476]	@ (80138ec <tcp_process+0x7c8>)
 8013710:	2201      	movs	r2, #1
 8013712:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	220a      	movs	r2, #10
 8013718:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801371a:	4b75      	ldr	r3, [pc, #468]	@ (80138f0 <tcp_process+0x7cc>)
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	60da      	str	r2, [r3, #12]
 8013722:	4a73      	ldr	r2, [pc, #460]	@ (80138f0 <tcp_process+0x7cc>)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6013      	str	r3, [r2, #0]
 8013728:	f002 fcf6 	bl	8016118 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801372c:	e0d2      	b.n	80138d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	8b5b      	ldrh	r3, [r3, #26]
 8013732:	f043 0302 	orr.w	r3, r3, #2
 8013736:	b29a      	uxth	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2208      	movs	r2, #8
 8013740:	751a      	strb	r2, [r3, #20]
      break;
 8013742:	e0c7      	b.n	80138d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013744:	4b6b      	ldr	r3, [pc, #428]	@ (80138f4 <tcp_process+0x7d0>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	f003 0310 	and.w	r3, r3, #16
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80c1 	beq.w	80138d4 <tcp_process+0x7b0>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013756:	4b68      	ldr	r3, [pc, #416]	@ (80138f8 <tcp_process+0x7d4>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	f040 80ba 	bne.w	80138d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013764:	2b00      	cmp	r3, #0
 8013766:	f040 80b5 	bne.w	80138d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2206      	movs	r2, #6
 801376e:	751a      	strb	r2, [r3, #20]
      break;
 8013770:	e0b0      	b.n	80138d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f000 f9ca 	bl	8013b0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013778:	4b60      	ldr	r3, [pc, #384]	@ (80138fc <tcp_process+0x7d8>)
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	f003 0320 	and.w	r3, r3, #32
 8013780:	2b00      	cmp	r3, #0
 8013782:	f000 80a9 	beq.w	80138d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	8b5b      	ldrh	r3, [r3, #26]
 801378a:	f043 0302 	orr.w	r3, r3, #2
 801378e:	b29a      	uxth	r2, r3
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7fe fd39 	bl	801220c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801379a:	4b59      	ldr	r3, [pc, #356]	@ (8013900 <tcp_process+0x7dc>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d105      	bne.n	80137b0 <tcp_process+0x68c>
 80137a4:	4b56      	ldr	r3, [pc, #344]	@ (8013900 <tcp_process+0x7dc>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	4a55      	ldr	r2, [pc, #340]	@ (8013900 <tcp_process+0x7dc>)
 80137ac:	6013      	str	r3, [r2, #0]
 80137ae:	e013      	b.n	80137d8 <tcp_process+0x6b4>
 80137b0:	4b53      	ldr	r3, [pc, #332]	@ (8013900 <tcp_process+0x7dc>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	613b      	str	r3, [r7, #16]
 80137b6:	e00c      	b.n	80137d2 <tcp_process+0x6ae>
 80137b8:	693b      	ldr	r3, [r7, #16]
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d104      	bne.n	80137cc <tcp_process+0x6a8>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	68da      	ldr	r2, [r3, #12]
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	60da      	str	r2, [r3, #12]
 80137ca:	e005      	b.n	80137d8 <tcp_process+0x6b4>
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	613b      	str	r3, [r7, #16]
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1ef      	bne.n	80137b8 <tcp_process+0x694>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2200      	movs	r2, #0
 80137dc:	60da      	str	r2, [r3, #12]
 80137de:	4b43      	ldr	r3, [pc, #268]	@ (80138ec <tcp_process+0x7c8>)
 80137e0:	2201      	movs	r2, #1
 80137e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	220a      	movs	r2, #10
 80137e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80137ea:	4b41      	ldr	r3, [pc, #260]	@ (80138f0 <tcp_process+0x7cc>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	60da      	str	r2, [r3, #12]
 80137f2:	4a3f      	ldr	r2, [pc, #252]	@ (80138f0 <tcp_process+0x7cc>)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6013      	str	r3, [r2, #0]
 80137f8:	f002 fc8e 	bl	8016118 <tcp_timer_needed>
      }
      break;
 80137fc:	e06c      	b.n	80138d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f000 f984 	bl	8013b0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013804:	4b3b      	ldr	r3, [pc, #236]	@ (80138f4 <tcp_process+0x7d0>)
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	f003 0310 	and.w	r3, r3, #16
 801380c:	2b00      	cmp	r3, #0
 801380e:	d065      	beq.n	80138dc <tcp_process+0x7b8>
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013814:	4b38      	ldr	r3, [pc, #224]	@ (80138f8 <tcp_process+0x7d4>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	429a      	cmp	r2, r3
 801381a:	d15f      	bne.n	80138dc <tcp_process+0x7b8>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013820:	2b00      	cmp	r3, #0
 8013822:	d15b      	bne.n	80138dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7fe fcf1 	bl	801220c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801382a:	4b35      	ldr	r3, [pc, #212]	@ (8013900 <tcp_process+0x7dc>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	429a      	cmp	r2, r3
 8013832:	d105      	bne.n	8013840 <tcp_process+0x71c>
 8013834:	4b32      	ldr	r3, [pc, #200]	@ (8013900 <tcp_process+0x7dc>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	68db      	ldr	r3, [r3, #12]
 801383a:	4a31      	ldr	r2, [pc, #196]	@ (8013900 <tcp_process+0x7dc>)
 801383c:	6013      	str	r3, [r2, #0]
 801383e:	e013      	b.n	8013868 <tcp_process+0x744>
 8013840:	4b2f      	ldr	r3, [pc, #188]	@ (8013900 <tcp_process+0x7dc>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	60fb      	str	r3, [r7, #12]
 8013846:	e00c      	b.n	8013862 <tcp_process+0x73e>
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	429a      	cmp	r2, r3
 8013850:	d104      	bne.n	801385c <tcp_process+0x738>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	68da      	ldr	r2, [r3, #12]
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	60da      	str	r2, [r3, #12]
 801385a:	e005      	b.n	8013868 <tcp_process+0x744>
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	60fb      	str	r3, [r7, #12]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d1ef      	bne.n	8013848 <tcp_process+0x724>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	60da      	str	r2, [r3, #12]
 801386e:	4b1f      	ldr	r3, [pc, #124]	@ (80138ec <tcp_process+0x7c8>)
 8013870:	2201      	movs	r2, #1
 8013872:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	220a      	movs	r2, #10
 8013878:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801387a:	4b1d      	ldr	r3, [pc, #116]	@ (80138f0 <tcp_process+0x7cc>)
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	60da      	str	r2, [r3, #12]
 8013882:	4a1b      	ldr	r2, [pc, #108]	@ (80138f0 <tcp_process+0x7cc>)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6013      	str	r3, [r2, #0]
 8013888:	f002 fc46 	bl	8016118 <tcp_timer_needed>
      }
      break;
 801388c:	e026      	b.n	80138dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f000 f93c 	bl	8013b0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013894:	4b17      	ldr	r3, [pc, #92]	@ (80138f4 <tcp_process+0x7d0>)
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	f003 0310 	and.w	r3, r3, #16
 801389c:	2b00      	cmp	r3, #0
 801389e:	d01f      	beq.n	80138e0 <tcp_process+0x7bc>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80138a4:	4b14      	ldr	r3, [pc, #80]	@ (80138f8 <tcp_process+0x7d4>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	429a      	cmp	r2, r3
 80138aa:	d119      	bne.n	80138e0 <tcp_process+0x7bc>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d115      	bne.n	80138e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80138b4:	4b11      	ldr	r3, [pc, #68]	@ (80138fc <tcp_process+0x7d8>)
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	f043 0310 	orr.w	r3, r3, #16
 80138bc:	b2da      	uxtb	r2, r3
 80138be:	4b0f      	ldr	r3, [pc, #60]	@ (80138fc <tcp_process+0x7d8>)
 80138c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80138c2:	e00d      	b.n	80138e0 <tcp_process+0x7bc>
    default:
      break;
 80138c4:	bf00      	nop
 80138c6:	e00c      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138c8:	bf00      	nop
 80138ca:	e00a      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138cc:	bf00      	nop
 80138ce:	e008      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138d0:	bf00      	nop
 80138d2:	e006      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138d4:	bf00      	nop
 80138d6:	e004      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138d8:	bf00      	nop
 80138da:	e002      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138dc:	bf00      	nop
 80138de:	e000      	b.n	80138e2 <tcp_process+0x7be>
      break;
 80138e0:	bf00      	nop
  }
  return ERR_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3724      	adds	r7, #36	@ 0x24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd90      	pop	{r4, r7, pc}
 80138ec:	240105fc 	.word	0x240105fc
 80138f0:	240105f8 	.word	0x240105f8
 80138f4:	2401062c 	.word	0x2401062c
 80138f8:	24010624 	.word	0x24010624
 80138fc:	2401062d 	.word	0x2401062d
 8013900:	240105f4 	.word	0x240105f4

08013904 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013904:	b590      	push	{r4, r7, lr}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d106      	bne.n	8013922 <tcp_oos_insert_segment+0x1e>
 8013914:	4b3b      	ldr	r3, [pc, #236]	@ (8013a04 <tcp_oos_insert_segment+0x100>)
 8013916:	f240 421f 	movw	r2, #1055	@ 0x41f
 801391a:	493b      	ldr	r1, [pc, #236]	@ (8013a08 <tcp_oos_insert_segment+0x104>)
 801391c:	483b      	ldr	r0, [pc, #236]	@ (8013a0c <tcp_oos_insert_segment+0x108>)
 801391e:	f005 ff61 	bl	80197e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	899b      	ldrh	r3, [r3, #12]
 8013928:	b29b      	uxth	r3, r3
 801392a:	4618      	mov	r0, r3
 801392c:	f7fb fb2e 	bl	800ef8c <lwip_htons>
 8013930:	4603      	mov	r3, r0
 8013932:	b2db      	uxtb	r3, r3
 8013934:	f003 0301 	and.w	r3, r3, #1
 8013938:	2b00      	cmp	r3, #0
 801393a:	d028      	beq.n	801398e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801393c:	6838      	ldr	r0, [r7, #0]
 801393e:	f7fe fa63 	bl	8011e08 <tcp_segs_free>
    next = NULL;
 8013942:	2300      	movs	r3, #0
 8013944:	603b      	str	r3, [r7, #0]
 8013946:	e056      	b.n	80139f6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	899b      	ldrh	r3, [r3, #12]
 801394e:	b29b      	uxth	r3, r3
 8013950:	4618      	mov	r0, r3
 8013952:	f7fb fb1b 	bl	800ef8c <lwip_htons>
 8013956:	4603      	mov	r3, r0
 8013958:	b2db      	uxtb	r3, r3
 801395a:	f003 0301 	and.w	r3, r3, #1
 801395e:	2b00      	cmp	r3, #0
 8013960:	d00d      	beq.n	801397e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	899b      	ldrh	r3, [r3, #12]
 8013968:	b29c      	uxth	r4, r3
 801396a:	2001      	movs	r0, #1
 801396c:	f7fb fb0e 	bl	800ef8c <lwip_htons>
 8013970:	4603      	mov	r3, r0
 8013972:	461a      	mov	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	4322      	orrs	r2, r4
 801397a:	b292      	uxth	r2, r2
 801397c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f7fe fa52 	bl	8011e32 <tcp_seg_free>
    while (next &&
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00e      	beq.n	80139b2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	891b      	ldrh	r3, [r3, #8]
 8013998:	461a      	mov	r2, r3
 801399a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a10 <tcp_oos_insert_segment+0x10c>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	441a      	add	r2, r3
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	68db      	ldr	r3, [r3, #12]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	6839      	ldr	r1, [r7, #0]
 80139a8:	8909      	ldrh	r1, [r1, #8]
 80139aa:	440b      	add	r3, r1
 80139ac:	1ad3      	subs	r3, r2, r3
    while (next &&
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	daca      	bge.n	8013948 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01e      	beq.n	80139f6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	891b      	ldrh	r3, [r3, #8]
 80139bc:	461a      	mov	r2, r3
 80139be:	4b14      	ldr	r3, [pc, #80]	@ (8013a10 <tcp_oos_insert_segment+0x10c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	441a      	add	r2, r3
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	685b      	ldr	r3, [r3, #4]
 80139ca:	1ad3      	subs	r3, r2, r3
    if (next &&
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	dd12      	ble.n	80139f6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	68db      	ldr	r3, [r3, #12]
 80139d4:	685b      	ldr	r3, [r3, #4]
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013a10 <tcp_oos_insert_segment+0x10c>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	685a      	ldr	r2, [r3, #4]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	891b      	ldrh	r3, [r3, #8]
 80139ee:	4619      	mov	r1, r3
 80139f0:	4610      	mov	r0, r2
 80139f2:	f7fc fe03 	bl	80105fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	601a      	str	r2, [r3, #0]
}
 80139fc:	bf00      	nop
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd90      	pop	{r4, r7, pc}
 8013a04:	0801ba90 	.word	0x0801ba90
 8013a08:	0801bd50 	.word	0x0801bd50
 8013a0c:	0801badc 	.word	0x0801badc
 8013a10:	24010620 	.word	0x24010620

08013a14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013a14:	b5b0      	push	{r4, r5, r7, lr}
 8013a16:	b086      	sub	sp, #24
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	607a      	str	r2, [r7, #4]
 8013a20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013a22:	e03e      	b.n	8013aa2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fc fff6 	bl	8010a24 <pbuf_clen>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a42:	8a7a      	ldrh	r2, [r7, #18]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d906      	bls.n	8013a56 <tcp_free_acked_segments+0x42>
 8013a48:	4b2a      	ldr	r3, [pc, #168]	@ (8013af4 <tcp_free_acked_segments+0xe0>)
 8013a4a:	f240 4257 	movw	r2, #1111	@ 0x457
 8013a4e:	492a      	ldr	r1, [pc, #168]	@ (8013af8 <tcp_free_acked_segments+0xe4>)
 8013a50:	482a      	ldr	r0, [pc, #168]	@ (8013afc <tcp_free_acked_segments+0xe8>)
 8013a52:	f005 fec7 	bl	80197e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013a5c:	8a7b      	ldrh	r3, [r7, #18]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	891a      	ldrh	r2, [r3, #8]
 8013a6c:	4b24      	ldr	r3, [pc, #144]	@ (8013b00 <tcp_free_acked_segments+0xec>)
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	4413      	add	r3, r2
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	4b22      	ldr	r3, [pc, #136]	@ (8013b00 <tcp_free_acked_segments+0xec>)
 8013a76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013a78:	6978      	ldr	r0, [r7, #20]
 8013a7a:	f7fe f9da 	bl	8011e32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00c      	beq.n	8013aa2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d109      	bne.n	8013aa2 <tcp_free_acked_segments+0x8e>
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d106      	bne.n	8013aa2 <tcp_free_acked_segments+0x8e>
 8013a94:	4b17      	ldr	r3, [pc, #92]	@ (8013af4 <tcp_free_acked_segments+0xe0>)
 8013a96:	f240 4261 	movw	r2, #1121	@ 0x461
 8013a9a:	491a      	ldr	r1, [pc, #104]	@ (8013b04 <tcp_free_acked_segments+0xf0>)
 8013a9c:	4817      	ldr	r0, [pc, #92]	@ (8013afc <tcp_free_acked_segments+0xe8>)
 8013a9e:	f005 fea1 	bl	80197e4 <iprintf>
  while (seg_list != NULL &&
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d020      	beq.n	8013aea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	685b      	ldr	r3, [r3, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fb fa81 	bl	800efb6 <lwip_htonl>
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	891b      	ldrh	r3, [r3, #8]
 8013aba:	461d      	mov	r5, r3
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	899b      	ldrh	r3, [r3, #12]
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7fb fa61 	bl	800ef8c <lwip_htons>
 8013aca:	4603      	mov	r3, r0
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	f003 0303 	and.w	r3, r3, #3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d001      	beq.n	8013ada <tcp_free_acked_segments+0xc6>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	e000      	b.n	8013adc <tcp_free_acked_segments+0xc8>
 8013ada:	2300      	movs	r3, #0
 8013adc:	442b      	add	r3, r5
 8013ade:	18e2      	adds	r2, r4, r3
 8013ae0:	4b09      	ldr	r3, [pc, #36]	@ (8013b08 <tcp_free_acked_segments+0xf4>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	dd9c      	ble.n	8013a24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013aea:	68bb      	ldr	r3, [r7, #8]
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3718      	adds	r7, #24
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bdb0      	pop	{r4, r5, r7, pc}
 8013af4:	0801ba90 	.word	0x0801ba90
 8013af8:	0801bd78 	.word	0x0801bd78
 8013afc:	0801badc 	.word	0x0801badc
 8013b00:	24010628 	.word	0x24010628
 8013b04:	0801bda0 	.word	0x0801bda0
 8013b08:	24010624 	.word	0x24010624

08013b0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013b0c:	b5b0      	push	{r4, r5, r7, lr}
 8013b0e:	b094      	sub	sp, #80	@ 0x50
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013b14:	2300      	movs	r3, #0
 8013b16:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d106      	bne.n	8013b2c <tcp_receive+0x20>
 8013b1e:	4b91      	ldr	r3, [pc, #580]	@ (8013d64 <tcp_receive+0x258>)
 8013b20:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013b24:	4990      	ldr	r1, [pc, #576]	@ (8013d68 <tcp_receive+0x25c>)
 8013b26:	4891      	ldr	r0, [pc, #580]	@ (8013d6c <tcp_receive+0x260>)
 8013b28:	f005 fe5c 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	7d1b      	ldrb	r3, [r3, #20]
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d806      	bhi.n	8013b42 <tcp_receive+0x36>
 8013b34:	4b8b      	ldr	r3, [pc, #556]	@ (8013d64 <tcp_receive+0x258>)
 8013b36:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013b3a:	498d      	ldr	r1, [pc, #564]	@ (8013d70 <tcp_receive+0x264>)
 8013b3c:	488b      	ldr	r0, [pc, #556]	@ (8013d6c <tcp_receive+0x260>)
 8013b3e:	f005 fe51 	bl	80197e4 <iprintf>

  if (flags & TCP_ACK) {
 8013b42:	4b8c      	ldr	r3, [pc, #560]	@ (8013d74 <tcp_receive+0x268>)
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	f003 0310 	and.w	r3, r3, #16
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f000 8264 	beq.w	8014018 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013b56:	461a      	mov	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b5c:	4413      	add	r3, r2
 8013b5e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b64:	4b84      	ldr	r3, [pc, #528]	@ (8013d78 <tcp_receive+0x26c>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	db1b      	blt.n	8013ba6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013b72:	4b81      	ldr	r3, [pc, #516]	@ (8013d78 <tcp_receive+0x26c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d106      	bne.n	8013b88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8013d7c <tcp_receive+0x270>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	1ad3      	subs	r3, r2, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	db0e      	blt.n	8013ba6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8013d7c <tcp_receive+0x270>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d125      	bne.n	8013be0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013b94:	4b7a      	ldr	r3, [pc, #488]	@ (8013d80 <tcp_receive+0x274>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	89db      	ldrh	r3, [r3, #14]
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d91c      	bls.n	8013be0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013ba6:	4b76      	ldr	r3, [pc, #472]	@ (8013d80 <tcp_receive+0x274>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	89db      	ldrh	r3, [r3, #14]
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d205      	bcs.n	8013bd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013bd0:	4b69      	ldr	r3, [pc, #420]	@ (8013d78 <tcp_receive+0x26c>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013bd8:	4b68      	ldr	r3, [pc, #416]	@ (8013d7c <tcp_receive+0x270>)
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013be0:	4b66      	ldr	r3, [pc, #408]	@ (8013d7c <tcp_receive+0x270>)
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	dc58      	bgt.n	8013ca0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013bee:	4b65      	ldr	r3, [pc, #404]	@ (8013d84 <tcp_receive+0x278>)
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d14b      	bne.n	8013c8e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013c00:	4413      	add	r3, r2
 8013c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d142      	bne.n	8013c8e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	db3d      	blt.n	8013c8e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013c16:	4b59      	ldr	r3, [pc, #356]	@ (8013d7c <tcp_receive+0x270>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d137      	bne.n	8013c8e <tcp_receive+0x182>
              found_dupack = 1;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013c28:	2bff      	cmp	r3, #255	@ 0xff
 8013c2a:	d007      	beq.n	8013c3c <tcp_receive+0x130>
                ++pcb->dupacks;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013c32:	3301      	adds	r3, #1
 8013c34:	b2da      	uxtb	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013c42:	2b03      	cmp	r3, #3
 8013c44:	d91b      	bls.n	8013c7e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c50:	4413      	add	r3, r2
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d30a      	bcc.n	8013c74 <tcp_receive+0x168>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c68:	4413      	add	r3, r2
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013c72:	e004      	b.n	8013c7e <tcp_receive+0x172>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013c84:	2b02      	cmp	r3, #2
 8013c86:	d902      	bls.n	8013c8e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f001 fee9 	bl	8015a60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	f040 8161 	bne.w	8013f58 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013c9e:	e15b      	b.n	8013f58 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ca0:	4b36      	ldr	r3, [pc, #216]	@ (8013d7c <tcp_receive+0x270>)
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ca8:	1ad3      	subs	r3, r2, r3
 8013caa:	3b01      	subs	r3, #1
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f2c0 814e 	blt.w	8013f4e <tcp_receive+0x442>
 8013cb2:	4b32      	ldr	r3, [pc, #200]	@ (8013d7c <tcp_receive+0x270>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f300 8146 	bgt.w	8013f4e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	8b5b      	ldrh	r3, [r3, #26]
 8013cc6:	f003 0304 	and.w	r3, r3, #4
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d010      	beq.n	8013cf0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	8b5b      	ldrh	r3, [r3, #26]
 8013cd2:	f023 0304 	bic.w	r3, r3, #4
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2200      	movs	r2, #0
 8013cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013cfe:	10db      	asrs	r3, r3, #3
 8013d00:	b21b      	sxth	r3, r3
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4413      	add	r3, r2
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	b21a      	sxth	r2, r3
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013d18:	4b18      	ldr	r3, [pc, #96]	@ (8013d7c <tcp_receive+0x270>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013d30:	4b12      	ldr	r3, [pc, #72]	@ (8013d7c <tcp_receive+0x270>)
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	7d1b      	ldrb	r3, [r3, #20]
 8013d3c:	2b03      	cmp	r3, #3
 8013d3e:	f240 8097 	bls.w	8013e70 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d245      	bcs.n	8013dde <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	8b5b      	ldrh	r3, [r3, #26]
 8013d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d014      	beq.n	8013d88 <tcp_receive+0x27c>
 8013d5e:	2301      	movs	r3, #1
 8013d60:	e013      	b.n	8013d8a <tcp_receive+0x27e>
 8013d62:	bf00      	nop
 8013d64:	0801ba90 	.word	0x0801ba90
 8013d68:	0801bdc0 	.word	0x0801bdc0
 8013d6c:	0801badc 	.word	0x0801badc
 8013d70:	0801bddc 	.word	0x0801bddc
 8013d74:	2401062c 	.word	0x2401062c
 8013d78:	24010620 	.word	0x24010620
 8013d7c:	24010624 	.word	0x24010624
 8013d80:	24010610 	.word	0x24010610
 8013d84:	2401062a 	.word	0x2401062a
 8013d88:	2302      	movs	r3, #2
 8013d8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d98:	fb12 f303 	smulbb	r3, r2, r3
 8013d9c:	b29b      	uxth	r3, r3
 8013d9e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013da0:	4293      	cmp	r3, r2
 8013da2:	bf28      	it	cs
 8013da4:	4613      	movcs	r3, r2
 8013da6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013dae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013db0:	4413      	add	r3, r2
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d309      	bcc.n	8013dd2 <tcp_receive+0x2c6>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013dc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013dc6:	4413      	add	r3, r2
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013dd0:	e04e      	b.n	8013e70 <tcp_receive+0x364>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013ddc:	e048      	b.n	8013e70 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013de4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013de6:	4413      	add	r3, r2
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d309      	bcc.n	8013e08 <tcp_receive+0x2fc>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013dfa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013dfc:	4413      	add	r3, r2
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013e06:	e004      	b.n	8013e12 <tcp_receive+0x306>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d326      	bcc.n	8013e70 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e42:	4413      	add	r3, r2
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d30a      	bcc.n	8013e66 <tcp_receive+0x35a>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e5a:	4413      	add	r3, r2
 8013e5c:	b29a      	uxth	r2, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e64:	e004      	b.n	8013e70 <tcp_receive+0x364>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e6c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e78:	4a98      	ldr	r2, [pc, #608]	@ (80140dc <tcp_receive+0x5d0>)
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff fdca 	bl	8013a14 <tcp_free_acked_segments>
 8013e80:	4602      	mov	r2, r0
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e8e:	4a94      	ldr	r2, [pc, #592]	@ (80140e0 <tcp_receive+0x5d4>)
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7ff fdbf 	bl	8013a14 <tcp_free_acked_segments>
 8013e96:	4602      	mov	r2, r0
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d104      	bne.n	8013eae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013eaa:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013eac:	e002      	b.n	8013eb4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d103      	bne.n	8013eca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013ed0:	4b84      	ldr	r3, [pc, #528]	@ (80140e4 <tcp_receive+0x5d8>)
 8013ed2:	881b      	ldrh	r3, [r3, #0]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	8b5b      	ldrh	r3, [r3, #26]
 8013ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d035      	beq.n	8013f56 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d118      	bne.n	8013f24 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00c      	beq.n	8013f14 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fb f855 	bl	800efb6 <lwip_htonl>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	dc20      	bgt.n	8013f56 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	8b5b      	ldrh	r3, [r3, #26]
 8013f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f22:	e018      	b.n	8013f56 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fb f840 	bl	800efb6 <lwip_htonl>
 8013f36:	4603      	mov	r3, r0
 8013f38:	1ae3      	subs	r3, r4, r3
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	dc0b      	bgt.n	8013f56 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	8b5b      	ldrh	r3, [r3, #26]
 8013f42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f4c:	e003      	b.n	8013f56 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f001 ff72 	bl	8015e38 <tcp_send_empty_ack>
 8013f54:	e000      	b.n	8013f58 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f56:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d05b      	beq.n	8014018 <tcp_receive+0x50c>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f64:	4b60      	ldr	r3, [pc, #384]	@ (80140e8 <tcp_receive+0x5dc>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	1ad3      	subs	r3, r2, r3
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	da54      	bge.n	8014018 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80140ec <tcp_receive+0x5e0>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	1ad3      	subs	r3, r2, r3
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013f82:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013f8c:	10db      	asrs	r3, r3, #3
 8013f8e:	b21b      	sxth	r3, r3
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	1ad3      	subs	r3, r2, r3
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013fa0:	b29a      	uxth	r2, r3
 8013fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013fa6:	4413      	add	r3, r2
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	b21a      	sxth	r2, r3
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013fb0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	da05      	bge.n	8013fc4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013fb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013fbc:	425b      	negs	r3, r3
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013fc4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013fce:	109b      	asrs	r3, r3, #2
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	1ad3      	subs	r3, r2, r3
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	b21a      	sxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013ff8:	10db      	asrs	r3, r3, #3
 8013ffa:	b21b      	sxth	r3, r3
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014004:	b29b      	uxth	r3, r3
 8014006:	4413      	add	r3, r2
 8014008:	b29b      	uxth	r3, r3
 801400a:	b21a      	sxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014018:	4b35      	ldr	r3, [pc, #212]	@ (80140f0 <tcp_receive+0x5e4>)
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 84df 	beq.w	80149e0 <tcp_receive+0xed4>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	7d1b      	ldrb	r3, [r3, #20]
 8014026:	2b06      	cmp	r3, #6
 8014028:	f200 84da 	bhi.w	80149e0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014030:	4b30      	ldr	r3, [pc, #192]	@ (80140f4 <tcp_receive+0x5e8>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	1ad3      	subs	r3, r2, r3
 8014036:	3b01      	subs	r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	f2c0 808f 	blt.w	801415c <tcp_receive+0x650>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014042:	4b2b      	ldr	r3, [pc, #172]	@ (80140f0 <tcp_receive+0x5e4>)
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	4619      	mov	r1, r3
 8014048:	4b2a      	ldr	r3, [pc, #168]	@ (80140f4 <tcp_receive+0x5e8>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	440b      	add	r3, r1
 801404e:	1ad3      	subs	r3, r2, r3
 8014050:	3301      	adds	r3, #1
 8014052:	2b00      	cmp	r3, #0
 8014054:	f300 8082 	bgt.w	801415c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014058:	4b27      	ldr	r3, [pc, #156]	@ (80140f8 <tcp_receive+0x5ec>)
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014062:	4b24      	ldr	r3, [pc, #144]	@ (80140f4 <tcp_receive+0x5e8>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	1ad3      	subs	r3, r2, r3
 8014068:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801406a:	4b23      	ldr	r3, [pc, #140]	@ (80140f8 <tcp_receive+0x5ec>)
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d106      	bne.n	8014080 <tcp_receive+0x574>
 8014072:	4b22      	ldr	r3, [pc, #136]	@ (80140fc <tcp_receive+0x5f0>)
 8014074:	f240 5294 	movw	r2, #1428	@ 0x594
 8014078:	4921      	ldr	r1, [pc, #132]	@ (8014100 <tcp_receive+0x5f4>)
 801407a:	4822      	ldr	r0, [pc, #136]	@ (8014104 <tcp_receive+0x5f8>)
 801407c:	f005 fbb2 	bl	80197e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014082:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014086:	4293      	cmp	r3, r2
 8014088:	d906      	bls.n	8014098 <tcp_receive+0x58c>
 801408a:	4b1c      	ldr	r3, [pc, #112]	@ (80140fc <tcp_receive+0x5f0>)
 801408c:	f240 5295 	movw	r2, #1429	@ 0x595
 8014090:	491d      	ldr	r1, [pc, #116]	@ (8014108 <tcp_receive+0x5fc>)
 8014092:	481c      	ldr	r0, [pc, #112]	@ (8014104 <tcp_receive+0x5f8>)
 8014094:	f005 fba6 	bl	80197e4 <iprintf>
      off = (u16_t)off32;
 8014098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801409e:	4b16      	ldr	r3, [pc, #88]	@ (80140f8 <tcp_receive+0x5ec>)
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	891b      	ldrh	r3, [r3, #8]
 80140a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d906      	bls.n	80140ba <tcp_receive+0x5ae>
 80140ac:	4b13      	ldr	r3, [pc, #76]	@ (80140fc <tcp_receive+0x5f0>)
 80140ae:	f240 5297 	movw	r2, #1431	@ 0x597
 80140b2:	4916      	ldr	r1, [pc, #88]	@ (801410c <tcp_receive+0x600>)
 80140b4:	4813      	ldr	r0, [pc, #76]	@ (8014104 <tcp_receive+0x5f8>)
 80140b6:	f005 fb95 	bl	80197e4 <iprintf>
      inseg.len -= off;
 80140ba:	4b0f      	ldr	r3, [pc, #60]	@ (80140f8 <tcp_receive+0x5ec>)
 80140bc:	891a      	ldrh	r2, [r3, #8]
 80140be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80140c2:	1ad3      	subs	r3, r2, r3
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	4b0c      	ldr	r3, [pc, #48]	@ (80140f8 <tcp_receive+0x5ec>)
 80140c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80140ca:	4b0b      	ldr	r3, [pc, #44]	@ (80140f8 <tcp_receive+0x5ec>)
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	891a      	ldrh	r2, [r3, #8]
 80140d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80140d8:	e02a      	b.n	8014130 <tcp_receive+0x624>
 80140da:	bf00      	nop
 80140dc:	0801bdf8 	.word	0x0801bdf8
 80140e0:	0801be00 	.word	0x0801be00
 80140e4:	24010628 	.word	0x24010628
 80140e8:	24010624 	.word	0x24010624
 80140ec:	240105e8 	.word	0x240105e8
 80140f0:	2401062a 	.word	0x2401062a
 80140f4:	24010620 	.word	0x24010620
 80140f8:	24010600 	.word	0x24010600
 80140fc:	0801ba90 	.word	0x0801ba90
 8014100:	0801be08 	.word	0x0801be08
 8014104:	0801badc 	.word	0x0801badc
 8014108:	0801be18 	.word	0x0801be18
 801410c:	0801be28 	.word	0x0801be28
        off -= p->len;
 8014110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014112:	895b      	ldrh	r3, [r3, #10]
 8014114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014118:	1ad3      	subs	r3, r2, r3
 801411a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801411e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014120:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014122:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014126:	2200      	movs	r2, #0
 8014128:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801412a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8014130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014132:	895b      	ldrh	r3, [r3, #10]
 8014134:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014138:	429a      	cmp	r2, r3
 801413a:	d8e9      	bhi.n	8014110 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801413c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014140:	4619      	mov	r1, r3
 8014142:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014144:	f7fc fb5a 	bl	80107fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801414c:	4a90      	ldr	r2, [pc, #576]	@ (8014390 <tcp_receive+0x884>)
 801414e:	6013      	str	r3, [r2, #0]
 8014150:	4b90      	ldr	r3, [pc, #576]	@ (8014394 <tcp_receive+0x888>)
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	4a8e      	ldr	r2, [pc, #568]	@ (8014390 <tcp_receive+0x884>)
 8014156:	6812      	ldr	r2, [r2, #0]
 8014158:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801415a:	e00d      	b.n	8014178 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801415c:	4b8c      	ldr	r3, [pc, #560]	@ (8014390 <tcp_receive+0x884>)
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014164:	1ad3      	subs	r3, r2, r3
 8014166:	2b00      	cmp	r3, #0
 8014168:	da06      	bge.n	8014178 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	8b5b      	ldrh	r3, [r3, #26]
 801416e:	f043 0302 	orr.w	r3, r3, #2
 8014172:	b29a      	uxth	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014178:	4b85      	ldr	r3, [pc, #532]	@ (8014390 <tcp_receive+0x884>)
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014180:	1ad3      	subs	r3, r2, r3
 8014182:	2b00      	cmp	r3, #0
 8014184:	f2c0 8427 	blt.w	80149d6 <tcp_receive+0xeca>
 8014188:	4b81      	ldr	r3, [pc, #516]	@ (8014390 <tcp_receive+0x884>)
 801418a:	681a      	ldr	r2, [r3, #0]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014190:	6879      	ldr	r1, [r7, #4]
 8014192:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014194:	440b      	add	r3, r1
 8014196:	1ad3      	subs	r3, r2, r3
 8014198:	3301      	adds	r3, #1
 801419a:	2b00      	cmp	r3, #0
 801419c:	f300 841b 	bgt.w	80149d6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141a4:	4b7a      	ldr	r3, [pc, #488]	@ (8014390 <tcp_receive+0x884>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	f040 8298 	bne.w	80146de <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80141ae:	4b79      	ldr	r3, [pc, #484]	@ (8014394 <tcp_receive+0x888>)
 80141b0:	891c      	ldrh	r4, [r3, #8]
 80141b2:	4b78      	ldr	r3, [pc, #480]	@ (8014394 <tcp_receive+0x888>)
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	899b      	ldrh	r3, [r3, #12]
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fa fee6 	bl	800ef8c <lwip_htons>
 80141c0:	4603      	mov	r3, r0
 80141c2:	b2db      	uxtb	r3, r3
 80141c4:	f003 0303 	and.w	r3, r3, #3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d001      	beq.n	80141d0 <tcp_receive+0x6c4>
 80141cc:	2301      	movs	r3, #1
 80141ce:	e000      	b.n	80141d2 <tcp_receive+0x6c6>
 80141d0:	2300      	movs	r3, #0
 80141d2:	4423      	add	r3, r4
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	4b70      	ldr	r3, [pc, #448]	@ (8014398 <tcp_receive+0x88c>)
 80141d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80141de:	4b6e      	ldr	r3, [pc, #440]	@ (8014398 <tcp_receive+0x88c>)
 80141e0:	881b      	ldrh	r3, [r3, #0]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d274      	bcs.n	80142d0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80141e6:	4b6b      	ldr	r3, [pc, #428]	@ (8014394 <tcp_receive+0x888>)
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	899b      	ldrh	r3, [r3, #12]
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fa fecc 	bl	800ef8c <lwip_htons>
 80141f4:	4603      	mov	r3, r0
 80141f6:	b2db      	uxtb	r3, r3
 80141f8:	f003 0301 	and.w	r3, r3, #1
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d01e      	beq.n	801423e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014200:	4b64      	ldr	r3, [pc, #400]	@ (8014394 <tcp_receive+0x888>)
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	899b      	ldrh	r3, [r3, #12]
 8014206:	b29b      	uxth	r3, r3
 8014208:	b21b      	sxth	r3, r3
 801420a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801420e:	b21c      	sxth	r4, r3
 8014210:	4b60      	ldr	r3, [pc, #384]	@ (8014394 <tcp_receive+0x888>)
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	899b      	ldrh	r3, [r3, #12]
 8014216:	b29b      	uxth	r3, r3
 8014218:	4618      	mov	r0, r3
 801421a:	f7fa feb7 	bl	800ef8c <lwip_htons>
 801421e:	4603      	mov	r3, r0
 8014220:	b2db      	uxtb	r3, r3
 8014222:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014226:	b29b      	uxth	r3, r3
 8014228:	4618      	mov	r0, r3
 801422a:	f7fa feaf 	bl	800ef8c <lwip_htons>
 801422e:	4603      	mov	r3, r0
 8014230:	b21b      	sxth	r3, r3
 8014232:	4323      	orrs	r3, r4
 8014234:	b21a      	sxth	r2, r3
 8014236:	4b57      	ldr	r3, [pc, #348]	@ (8014394 <tcp_receive+0x888>)
 8014238:	68db      	ldr	r3, [r3, #12]
 801423a:	b292      	uxth	r2, r2
 801423c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014242:	4b54      	ldr	r3, [pc, #336]	@ (8014394 <tcp_receive+0x888>)
 8014244:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014246:	4b53      	ldr	r3, [pc, #332]	@ (8014394 <tcp_receive+0x888>)
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	899b      	ldrh	r3, [r3, #12]
 801424c:	b29b      	uxth	r3, r3
 801424e:	4618      	mov	r0, r3
 8014250:	f7fa fe9c 	bl	800ef8c <lwip_htons>
 8014254:	4603      	mov	r3, r0
 8014256:	b2db      	uxtb	r3, r3
 8014258:	f003 0302 	and.w	r3, r3, #2
 801425c:	2b00      	cmp	r3, #0
 801425e:	d005      	beq.n	801426c <tcp_receive+0x760>
            inseg.len -= 1;
 8014260:	4b4c      	ldr	r3, [pc, #304]	@ (8014394 <tcp_receive+0x888>)
 8014262:	891b      	ldrh	r3, [r3, #8]
 8014264:	3b01      	subs	r3, #1
 8014266:	b29a      	uxth	r2, r3
 8014268:	4b4a      	ldr	r3, [pc, #296]	@ (8014394 <tcp_receive+0x888>)
 801426a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801426c:	4b49      	ldr	r3, [pc, #292]	@ (8014394 <tcp_receive+0x888>)
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	4a48      	ldr	r2, [pc, #288]	@ (8014394 <tcp_receive+0x888>)
 8014272:	8912      	ldrh	r2, [r2, #8]
 8014274:	4611      	mov	r1, r2
 8014276:	4618      	mov	r0, r3
 8014278:	f7fc f9c0 	bl	80105fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801427c:	4b45      	ldr	r3, [pc, #276]	@ (8014394 <tcp_receive+0x888>)
 801427e:	891c      	ldrh	r4, [r3, #8]
 8014280:	4b44      	ldr	r3, [pc, #272]	@ (8014394 <tcp_receive+0x888>)
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	899b      	ldrh	r3, [r3, #12]
 8014286:	b29b      	uxth	r3, r3
 8014288:	4618      	mov	r0, r3
 801428a:	f7fa fe7f 	bl	800ef8c <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	b2db      	uxtb	r3, r3
 8014292:	f003 0303 	and.w	r3, r3, #3
 8014296:	2b00      	cmp	r3, #0
 8014298:	d001      	beq.n	801429e <tcp_receive+0x792>
 801429a:	2301      	movs	r3, #1
 801429c:	e000      	b.n	80142a0 <tcp_receive+0x794>
 801429e:	2300      	movs	r3, #0
 80142a0:	4423      	add	r3, r4
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	4b3c      	ldr	r3, [pc, #240]	@ (8014398 <tcp_receive+0x88c>)
 80142a6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80142a8:	4b3b      	ldr	r3, [pc, #236]	@ (8014398 <tcp_receive+0x88c>)
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	461a      	mov	r2, r3
 80142ae:	4b38      	ldr	r3, [pc, #224]	@ (8014390 <tcp_receive+0x884>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	441a      	add	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142b8:	6879      	ldr	r1, [r7, #4]
 80142ba:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80142bc:	440b      	add	r3, r1
 80142be:	429a      	cmp	r2, r3
 80142c0:	d006      	beq.n	80142d0 <tcp_receive+0x7c4>
 80142c2:	4b36      	ldr	r3, [pc, #216]	@ (801439c <tcp_receive+0x890>)
 80142c4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80142c8:	4935      	ldr	r1, [pc, #212]	@ (80143a0 <tcp_receive+0x894>)
 80142ca:	4836      	ldr	r0, [pc, #216]	@ (80143a4 <tcp_receive+0x898>)
 80142cc:	f005 fa8a 	bl	80197e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f000 80e6 	beq.w	80144a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80142da:	4b2e      	ldr	r3, [pc, #184]	@ (8014394 <tcp_receive+0x888>)
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	899b      	ldrh	r3, [r3, #12]
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7fa fe52 	bl	800ef8c <lwip_htons>
 80142e8:	4603      	mov	r3, r0
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	f003 0301 	and.w	r3, r3, #1
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d010      	beq.n	8014316 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80142f4:	e00a      	b.n	801430c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80142fa:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f7fd fd93 	bl	8011e32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1f0      	bne.n	80142f6 <tcp_receive+0x7ea>
 8014314:	e0c7      	b.n	80144a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801431c:	e051      	b.n	80143c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	899b      	ldrh	r3, [r3, #12]
 8014324:	b29b      	uxth	r3, r3
 8014326:	4618      	mov	r0, r3
 8014328:	f7fa fe30 	bl	800ef8c <lwip_htons>
 801432c:	4603      	mov	r3, r0
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 0301 	and.w	r3, r3, #1
 8014334:	2b00      	cmp	r3, #0
 8014336:	d03c      	beq.n	80143b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014338:	4b16      	ldr	r3, [pc, #88]	@ (8014394 <tcp_receive+0x888>)
 801433a:	68db      	ldr	r3, [r3, #12]
 801433c:	899b      	ldrh	r3, [r3, #12]
 801433e:	b29b      	uxth	r3, r3
 8014340:	4618      	mov	r0, r3
 8014342:	f7fa fe23 	bl	800ef8c <lwip_htons>
 8014346:	4603      	mov	r3, r0
 8014348:	b2db      	uxtb	r3, r3
 801434a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801434e:	2b00      	cmp	r3, #0
 8014350:	d12f      	bne.n	80143b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014352:	4b10      	ldr	r3, [pc, #64]	@ (8014394 <tcp_receive+0x888>)
 8014354:	68db      	ldr	r3, [r3, #12]
 8014356:	899b      	ldrh	r3, [r3, #12]
 8014358:	b29c      	uxth	r4, r3
 801435a:	2001      	movs	r0, #1
 801435c:	f7fa fe16 	bl	800ef8c <lwip_htons>
 8014360:	4603      	mov	r3, r0
 8014362:	461a      	mov	r2, r3
 8014364:	4b0b      	ldr	r3, [pc, #44]	@ (8014394 <tcp_receive+0x888>)
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	4322      	orrs	r2, r4
 801436a:	b292      	uxth	r2, r2
 801436c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801436e:	4b09      	ldr	r3, [pc, #36]	@ (8014394 <tcp_receive+0x888>)
 8014370:	891c      	ldrh	r4, [r3, #8]
 8014372:	4b08      	ldr	r3, [pc, #32]	@ (8014394 <tcp_receive+0x888>)
 8014374:	68db      	ldr	r3, [r3, #12]
 8014376:	899b      	ldrh	r3, [r3, #12]
 8014378:	b29b      	uxth	r3, r3
 801437a:	4618      	mov	r0, r3
 801437c:	f7fa fe06 	bl	800ef8c <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	b2db      	uxtb	r3, r3
 8014384:	f003 0303 	and.w	r3, r3, #3
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00d      	beq.n	80143a8 <tcp_receive+0x89c>
 801438c:	2301      	movs	r3, #1
 801438e:	e00c      	b.n	80143aa <tcp_receive+0x89e>
 8014390:	24010620 	.word	0x24010620
 8014394:	24010600 	.word	0x24010600
 8014398:	2401062a 	.word	0x2401062a
 801439c:	0801ba90 	.word	0x0801ba90
 80143a0:	0801be38 	.word	0x0801be38
 80143a4:	0801badc 	.word	0x0801badc
 80143a8:	2300      	movs	r3, #0
 80143aa:	4423      	add	r3, r4
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	4b98      	ldr	r3, [pc, #608]	@ (8014610 <tcp_receive+0xb04>)
 80143b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80143b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80143b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80143bc:	6938      	ldr	r0, [r7, #16]
 80143be:	f7fd fd38 	bl	8011e32 <tcp_seg_free>
            while (next &&
 80143c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d00e      	beq.n	80143e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80143c8:	4b91      	ldr	r3, [pc, #580]	@ (8014610 <tcp_receive+0xb04>)
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	461a      	mov	r2, r3
 80143ce:	4b91      	ldr	r3, [pc, #580]	@ (8014614 <tcp_receive+0xb08>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	441a      	add	r2, r3
 80143d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143d6:	68db      	ldr	r3, [r3, #12]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80143dc:	8909      	ldrh	r1, [r1, #8]
 80143de:	440b      	add	r3, r1
 80143e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	da9b      	bge.n	801431e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80143e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d059      	beq.n	80144a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80143ec:	4b88      	ldr	r3, [pc, #544]	@ (8014610 <tcp_receive+0xb04>)
 80143ee:	881b      	ldrh	r3, [r3, #0]
 80143f0:	461a      	mov	r2, r3
 80143f2:	4b88      	ldr	r3, [pc, #544]	@ (8014614 <tcp_receive+0xb08>)
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	441a      	add	r2, r3
 80143f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014400:	2b00      	cmp	r3, #0
 8014402:	dd4d      	ble.n	80144a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014406:	68db      	ldr	r3, [r3, #12]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	b29a      	uxth	r2, r3
 801440c:	4b81      	ldr	r3, [pc, #516]	@ (8014614 <tcp_receive+0xb08>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	b29b      	uxth	r3, r3
 8014412:	1ad3      	subs	r3, r2, r3
 8014414:	b29a      	uxth	r2, r3
 8014416:	4b80      	ldr	r3, [pc, #512]	@ (8014618 <tcp_receive+0xb0c>)
 8014418:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801441a:	4b7f      	ldr	r3, [pc, #508]	@ (8014618 <tcp_receive+0xb0c>)
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	899b      	ldrh	r3, [r3, #12]
 8014420:	b29b      	uxth	r3, r3
 8014422:	4618      	mov	r0, r3
 8014424:	f7fa fdb2 	bl	800ef8c <lwip_htons>
 8014428:	4603      	mov	r3, r0
 801442a:	b2db      	uxtb	r3, r3
 801442c:	f003 0302 	and.w	r3, r3, #2
 8014430:	2b00      	cmp	r3, #0
 8014432:	d005      	beq.n	8014440 <tcp_receive+0x934>
                inseg.len -= 1;
 8014434:	4b78      	ldr	r3, [pc, #480]	@ (8014618 <tcp_receive+0xb0c>)
 8014436:	891b      	ldrh	r3, [r3, #8]
 8014438:	3b01      	subs	r3, #1
 801443a:	b29a      	uxth	r2, r3
 801443c:	4b76      	ldr	r3, [pc, #472]	@ (8014618 <tcp_receive+0xb0c>)
 801443e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014440:	4b75      	ldr	r3, [pc, #468]	@ (8014618 <tcp_receive+0xb0c>)
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	4a74      	ldr	r2, [pc, #464]	@ (8014618 <tcp_receive+0xb0c>)
 8014446:	8912      	ldrh	r2, [r2, #8]
 8014448:	4611      	mov	r1, r2
 801444a:	4618      	mov	r0, r3
 801444c:	f7fc f8d6 	bl	80105fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014450:	4b71      	ldr	r3, [pc, #452]	@ (8014618 <tcp_receive+0xb0c>)
 8014452:	891c      	ldrh	r4, [r3, #8]
 8014454:	4b70      	ldr	r3, [pc, #448]	@ (8014618 <tcp_receive+0xb0c>)
 8014456:	68db      	ldr	r3, [r3, #12]
 8014458:	899b      	ldrh	r3, [r3, #12]
 801445a:	b29b      	uxth	r3, r3
 801445c:	4618      	mov	r0, r3
 801445e:	f7fa fd95 	bl	800ef8c <lwip_htons>
 8014462:	4603      	mov	r3, r0
 8014464:	b2db      	uxtb	r3, r3
 8014466:	f003 0303 	and.w	r3, r3, #3
 801446a:	2b00      	cmp	r3, #0
 801446c:	d001      	beq.n	8014472 <tcp_receive+0x966>
 801446e:	2301      	movs	r3, #1
 8014470:	e000      	b.n	8014474 <tcp_receive+0x968>
 8014472:	2300      	movs	r3, #0
 8014474:	4423      	add	r3, r4
 8014476:	b29a      	uxth	r2, r3
 8014478:	4b65      	ldr	r3, [pc, #404]	@ (8014610 <tcp_receive+0xb04>)
 801447a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801447c:	4b64      	ldr	r3, [pc, #400]	@ (8014610 <tcp_receive+0xb04>)
 801447e:	881b      	ldrh	r3, [r3, #0]
 8014480:	461a      	mov	r2, r3
 8014482:	4b64      	ldr	r3, [pc, #400]	@ (8014614 <tcp_receive+0xb08>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	441a      	add	r2, r3
 8014488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	429a      	cmp	r2, r3
 8014490:	d006      	beq.n	80144a0 <tcp_receive+0x994>
 8014492:	4b62      	ldr	r3, [pc, #392]	@ (801461c <tcp_receive+0xb10>)
 8014494:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014498:	4961      	ldr	r1, [pc, #388]	@ (8014620 <tcp_receive+0xb14>)
 801449a:	4862      	ldr	r0, [pc, #392]	@ (8014624 <tcp_receive+0xb18>)
 801449c:	f005 f9a2 	bl	80197e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80144a4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80144a6:	4b5a      	ldr	r3, [pc, #360]	@ (8014610 <tcp_receive+0xb04>)
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	461a      	mov	r2, r3
 80144ac:	4b59      	ldr	r3, [pc, #356]	@ (8014614 <tcp_receive+0xb08>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	441a      	add	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80144ba:	4b55      	ldr	r3, [pc, #340]	@ (8014610 <tcp_receive+0xb04>)
 80144bc:	881b      	ldrh	r3, [r3, #0]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d206      	bcs.n	80144d0 <tcp_receive+0x9c4>
 80144c2:	4b56      	ldr	r3, [pc, #344]	@ (801461c <tcp_receive+0xb10>)
 80144c4:	f240 6207 	movw	r2, #1543	@ 0x607
 80144c8:	4957      	ldr	r1, [pc, #348]	@ (8014628 <tcp_receive+0xb1c>)
 80144ca:	4856      	ldr	r0, [pc, #344]	@ (8014624 <tcp_receive+0xb18>)
 80144cc:	f005 f98a 	bl	80197e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80144d4:	4b4e      	ldr	r3, [pc, #312]	@ (8014610 <tcp_receive+0xb04>)
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	1ad3      	subs	r3, r2, r3
 80144da:	b29a      	uxth	r2, r3
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7fc ffc1 	bl	8011468 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80144e6:	4b4c      	ldr	r3, [pc, #304]	@ (8014618 <tcp_receive+0xb0c>)
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	891b      	ldrh	r3, [r3, #8]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d006      	beq.n	80144fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80144f0:	4b49      	ldr	r3, [pc, #292]	@ (8014618 <tcp_receive+0xb0c>)
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	4a4d      	ldr	r2, [pc, #308]	@ (801462c <tcp_receive+0xb20>)
 80144f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80144f8:	4b47      	ldr	r3, [pc, #284]	@ (8014618 <tcp_receive+0xb0c>)
 80144fa:	2200      	movs	r2, #0
 80144fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144fe:	4b46      	ldr	r3, [pc, #280]	@ (8014618 <tcp_receive+0xb0c>)
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	899b      	ldrh	r3, [r3, #12]
 8014504:	b29b      	uxth	r3, r3
 8014506:	4618      	mov	r0, r3
 8014508:	f7fa fd40 	bl	800ef8c <lwip_htons>
 801450c:	4603      	mov	r3, r0
 801450e:	b2db      	uxtb	r3, r3
 8014510:	f003 0301 	and.w	r3, r3, #1
 8014514:	2b00      	cmp	r3, #0
 8014516:	f000 80b8 	beq.w	801468a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801451a:	4b45      	ldr	r3, [pc, #276]	@ (8014630 <tcp_receive+0xb24>)
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	f043 0320 	orr.w	r3, r3, #32
 8014522:	b2da      	uxtb	r2, r3
 8014524:	4b42      	ldr	r3, [pc, #264]	@ (8014630 <tcp_receive+0xb24>)
 8014526:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014528:	e0af      	b.n	801468a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801452e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	4a36      	ldr	r2, [pc, #216]	@ (8014614 <tcp_receive+0xb08>)
 801453a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	891b      	ldrh	r3, [r3, #8]
 8014540:	461c      	mov	r4, r3
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	68db      	ldr	r3, [r3, #12]
 8014546:	899b      	ldrh	r3, [r3, #12]
 8014548:	b29b      	uxth	r3, r3
 801454a:	4618      	mov	r0, r3
 801454c:	f7fa fd1e 	bl	800ef8c <lwip_htons>
 8014550:	4603      	mov	r3, r0
 8014552:	b2db      	uxtb	r3, r3
 8014554:	f003 0303 	and.w	r3, r3, #3
 8014558:	2b00      	cmp	r3, #0
 801455a:	d001      	beq.n	8014560 <tcp_receive+0xa54>
 801455c:	2301      	movs	r3, #1
 801455e:	e000      	b.n	8014562 <tcp_receive+0xa56>
 8014560:	2300      	movs	r3, #0
 8014562:	191a      	adds	r2, r3, r4
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014568:	441a      	add	r2, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014572:	461c      	mov	r4, r3
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	891b      	ldrh	r3, [r3, #8]
 8014578:	461d      	mov	r5, r3
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	68db      	ldr	r3, [r3, #12]
 801457e:	899b      	ldrh	r3, [r3, #12]
 8014580:	b29b      	uxth	r3, r3
 8014582:	4618      	mov	r0, r3
 8014584:	f7fa fd02 	bl	800ef8c <lwip_htons>
 8014588:	4603      	mov	r3, r0
 801458a:	b2db      	uxtb	r3, r3
 801458c:	f003 0303 	and.w	r3, r3, #3
 8014590:	2b00      	cmp	r3, #0
 8014592:	d001      	beq.n	8014598 <tcp_receive+0xa8c>
 8014594:	2301      	movs	r3, #1
 8014596:	e000      	b.n	801459a <tcp_receive+0xa8e>
 8014598:	2300      	movs	r3, #0
 801459a:	442b      	add	r3, r5
 801459c:	429c      	cmp	r4, r3
 801459e:	d206      	bcs.n	80145ae <tcp_receive+0xaa2>
 80145a0:	4b1e      	ldr	r3, [pc, #120]	@ (801461c <tcp_receive+0xb10>)
 80145a2:	f240 622b 	movw	r2, #1579	@ 0x62b
 80145a6:	4923      	ldr	r1, [pc, #140]	@ (8014634 <tcp_receive+0xb28>)
 80145a8:	481e      	ldr	r0, [pc, #120]	@ (8014624 <tcp_receive+0xb18>)
 80145aa:	f005 f91b 	bl	80197e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	891b      	ldrh	r3, [r3, #8]
 80145b2:	461c      	mov	r4, r3
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	899b      	ldrh	r3, [r3, #12]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fa fce5 	bl	800ef8c <lwip_htons>
 80145c2:	4603      	mov	r3, r0
 80145c4:	b2db      	uxtb	r3, r3
 80145c6:	f003 0303 	and.w	r3, r3, #3
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d001      	beq.n	80145d2 <tcp_receive+0xac6>
 80145ce:	2301      	movs	r3, #1
 80145d0:	e000      	b.n	80145d4 <tcp_receive+0xac8>
 80145d2:	2300      	movs	r3, #0
 80145d4:	1919      	adds	r1, r3, r4
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80145da:	b28b      	uxth	r3, r1
 80145dc:	1ad3      	subs	r3, r2, r3
 80145de:	b29a      	uxth	r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7fc ff3f 	bl	8011468 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	891b      	ldrh	r3, [r3, #8]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d028      	beq.n	8014646 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80145f4:	4b0d      	ldr	r3, [pc, #52]	@ (801462c <tcp_receive+0xb20>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d01d      	beq.n	8014638 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80145fc:	4b0b      	ldr	r3, [pc, #44]	@ (801462c <tcp_receive+0xb20>)
 80145fe:	681a      	ldr	r2, [r3, #0]
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	4619      	mov	r1, r3
 8014606:	4610      	mov	r0, r2
 8014608:	f7fc fa4c 	bl	8010aa4 <pbuf_cat>
 801460c:	e018      	b.n	8014640 <tcp_receive+0xb34>
 801460e:	bf00      	nop
 8014610:	2401062a 	.word	0x2401062a
 8014614:	24010620 	.word	0x24010620
 8014618:	24010600 	.word	0x24010600
 801461c:	0801ba90 	.word	0x0801ba90
 8014620:	0801be70 	.word	0x0801be70
 8014624:	0801badc 	.word	0x0801badc
 8014628:	0801beac 	.word	0x0801beac
 801462c:	24010630 	.word	0x24010630
 8014630:	2401062d 	.word	0x2401062d
 8014634:	0801becc 	.word	0x0801becc
            } else {
              recv_data = cseg->p;
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	685b      	ldr	r3, [r3, #4]
 801463c:	4a70      	ldr	r2, [pc, #448]	@ (8014800 <tcp_receive+0xcf4>)
 801463e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	2200      	movs	r2, #0
 8014644:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	899b      	ldrh	r3, [r3, #12]
 801464c:	b29b      	uxth	r3, r3
 801464e:	4618      	mov	r0, r3
 8014650:	f7fa fc9c 	bl	800ef8c <lwip_htons>
 8014654:	4603      	mov	r3, r0
 8014656:	b2db      	uxtb	r3, r3
 8014658:	f003 0301 	and.w	r3, r3, #1
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00d      	beq.n	801467c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014660:	4b68      	ldr	r3, [pc, #416]	@ (8014804 <tcp_receive+0xcf8>)
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	f043 0320 	orr.w	r3, r3, #32
 8014668:	b2da      	uxtb	r2, r3
 801466a:	4b66      	ldr	r3, [pc, #408]	@ (8014804 <tcp_receive+0xcf8>)
 801466c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	7d1b      	ldrb	r3, [r3, #20]
 8014672:	2b04      	cmp	r3, #4
 8014674:	d102      	bne.n	801467c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2207      	movs	r2, #7
 801467a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014684:	68b8      	ldr	r0, [r7, #8]
 8014686:	f7fd fbd4 	bl	8011e32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801468e:	2b00      	cmp	r3, #0
 8014690:	d008      	beq.n	80146a4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014696:	68db      	ldr	r3, [r3, #12]
 8014698:	685a      	ldr	r2, [r3, #4]
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801469e:	429a      	cmp	r2, r3
 80146a0:	f43f af43 	beq.w	801452a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	8b5b      	ldrh	r3, [r3, #26]
 80146a8:	f003 0301 	and.w	r3, r3, #1
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00e      	beq.n	80146ce <tcp_receive+0xbc2>
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	8b5b      	ldrh	r3, [r3, #26]
 80146b4:	f023 0301 	bic.w	r3, r3, #1
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	835a      	strh	r2, [r3, #26]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	8b5b      	ldrh	r3, [r3, #26]
 80146c2:	f043 0302 	orr.w	r3, r3, #2
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80146cc:	e187      	b.n	80149de <tcp_receive+0xed2>
        tcp_ack(pcb);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	8b5b      	ldrh	r3, [r3, #26]
 80146d2:	f043 0301 	orr.w	r3, r3, #1
 80146d6:	b29a      	uxth	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80146dc:	e17f      	b.n	80149de <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d106      	bne.n	80146f4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80146e6:	4848      	ldr	r0, [pc, #288]	@ (8014808 <tcp_receive+0xcfc>)
 80146e8:	f7fd fbbc 	bl	8011e64 <tcp_seg_copy>
 80146ec:	4602      	mov	r2, r0
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80146f2:	e16c      	b.n	80149ce <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80146f4:	2300      	movs	r3, #0
 80146f6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80146fe:	e156      	b.n	80149ae <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8014700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	685a      	ldr	r2, [r3, #4]
 8014706:	4b41      	ldr	r3, [pc, #260]	@ (801480c <tcp_receive+0xd00>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	429a      	cmp	r2, r3
 801470c:	d11d      	bne.n	801474a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801470e:	4b3e      	ldr	r3, [pc, #248]	@ (8014808 <tcp_receive+0xcfc>)
 8014710:	891a      	ldrh	r2, [r3, #8]
 8014712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014714:	891b      	ldrh	r3, [r3, #8]
 8014716:	429a      	cmp	r2, r3
 8014718:	f240 814e 	bls.w	80149b8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801471c:	483a      	ldr	r0, [pc, #232]	@ (8014808 <tcp_receive+0xcfc>)
 801471e:	f7fd fba1 	bl	8011e64 <tcp_seg_copy>
 8014722:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	2b00      	cmp	r3, #0
 8014728:	f000 8148 	beq.w	80149bc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801472c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801472e:	2b00      	cmp	r3, #0
 8014730:	d003      	beq.n	801473a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014734:	697a      	ldr	r2, [r7, #20]
 8014736:	601a      	str	r2, [r3, #0]
 8014738:	e002      	b.n	8014740 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	697a      	ldr	r2, [r7, #20]
 801473e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014740:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014742:	6978      	ldr	r0, [r7, #20]
 8014744:	f7ff f8de 	bl	8013904 <tcp_oos_insert_segment>
                }
                break;
 8014748:	e138      	b.n	80149bc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801474c:	2b00      	cmp	r3, #0
 801474e:	d117      	bne.n	8014780 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014750:	4b2e      	ldr	r3, [pc, #184]	@ (801480c <tcp_receive+0xd00>)
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	2b00      	cmp	r3, #0
 801475e:	da57      	bge.n	8014810 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014760:	4829      	ldr	r0, [pc, #164]	@ (8014808 <tcp_receive+0xcfc>)
 8014762:	f7fd fb7f 	bl	8011e64 <tcp_seg_copy>
 8014766:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	2b00      	cmp	r3, #0
 801476c:	f000 8128 	beq.w	80149c0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	69ba      	ldr	r2, [r7, #24]
 8014774:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014776:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014778:	69b8      	ldr	r0, [r7, #24]
 801477a:	f7ff f8c3 	bl	8013904 <tcp_oos_insert_segment>
                  }
                  break;
 801477e:	e11f      	b.n	80149c0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014780:	4b22      	ldr	r3, [pc, #136]	@ (801480c <tcp_receive+0xd00>)
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014786:	68db      	ldr	r3, [r3, #12]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	3b01      	subs	r3, #1
 801478e:	2b00      	cmp	r3, #0
 8014790:	db3e      	blt.n	8014810 <tcp_receive+0xd04>
 8014792:	4b1e      	ldr	r3, [pc, #120]	@ (801480c <tcp_receive+0xd00>)
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	685b      	ldr	r3, [r3, #4]
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	3301      	adds	r3, #1
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	dc35      	bgt.n	8014810 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80147a4:	4818      	ldr	r0, [pc, #96]	@ (8014808 <tcp_receive+0xcfc>)
 80147a6:	f7fd fb5d 	bl	8011e64 <tcp_seg_copy>
 80147aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80147ac:	69fb      	ldr	r3, [r7, #28]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f000 8108 	beq.w	80149c4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80147b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80147bc:	8912      	ldrh	r2, [r2, #8]
 80147be:	441a      	add	r2, r3
 80147c0:	4b12      	ldr	r3, [pc, #72]	@ (801480c <tcp_receive+0xd00>)
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	1ad3      	subs	r3, r2, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	dd12      	ble.n	80147f0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80147ca:	4b10      	ldr	r3, [pc, #64]	@ (801480c <tcp_receive+0xd00>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	b29a      	uxth	r2, r3
 80147d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	1ad3      	subs	r3, r2, r3
 80147da:	b29a      	uxth	r2, r3
 80147dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80147e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147e2:	685a      	ldr	r2, [r3, #4]
 80147e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147e6:	891b      	ldrh	r3, [r3, #8]
 80147e8:	4619      	mov	r1, r3
 80147ea:	4610      	mov	r0, r2
 80147ec:	f7fb ff06 	bl	80105fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80147f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f2:	69fa      	ldr	r2, [r7, #28]
 80147f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80147f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80147f8:	69f8      	ldr	r0, [r7, #28]
 80147fa:	f7ff f883 	bl	8013904 <tcp_oos_insert_segment>
                  }
                  break;
 80147fe:	e0e1      	b.n	80149c4 <tcp_receive+0xeb8>
 8014800:	24010630 	.word	0x24010630
 8014804:	2401062d 	.word	0x2401062d
 8014808:	24010600 	.word	0x24010600
 801480c:	24010620 	.word	0x24010620
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014812:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	f040 80c5 	bne.w	80149a8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801481e:	4b7f      	ldr	r3, [pc, #508]	@ (8014a1c <tcp_receive+0xf10>)
 8014820:	681a      	ldr	r2, [r3, #0]
 8014822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801482a:	2b00      	cmp	r3, #0
 801482c:	f340 80bc 	ble.w	80149a8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	899b      	ldrh	r3, [r3, #12]
 8014836:	b29b      	uxth	r3, r3
 8014838:	4618      	mov	r0, r3
 801483a:	f7fa fba7 	bl	800ef8c <lwip_htons>
 801483e:	4603      	mov	r3, r0
 8014840:	b2db      	uxtb	r3, r3
 8014842:	f003 0301 	and.w	r3, r3, #1
 8014846:	2b00      	cmp	r3, #0
 8014848:	f040 80be 	bne.w	80149c8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801484c:	4874      	ldr	r0, [pc, #464]	@ (8014a20 <tcp_receive+0xf14>)
 801484e:	f7fd fb09 	bl	8011e64 <tcp_seg_copy>
 8014852:	4602      	mov	r2, r0
 8014854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014856:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2b00      	cmp	r3, #0
 801485e:	f000 80b5 	beq.w	80149cc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	685b      	ldr	r3, [r3, #4]
 8014868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801486a:	8912      	ldrh	r2, [r2, #8]
 801486c:	441a      	add	r2, r3
 801486e:	4b6b      	ldr	r3, [pc, #428]	@ (8014a1c <tcp_receive+0xf10>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	2b00      	cmp	r3, #0
 8014876:	dd12      	ble.n	801489e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014878:	4b68      	ldr	r3, [pc, #416]	@ (8014a1c <tcp_receive+0xf10>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	b29a      	uxth	r2, r3
 801487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	b29b      	uxth	r3, r3
 8014886:	1ad3      	subs	r3, r2, r3
 8014888:	b29a      	uxth	r2, r3
 801488a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801488c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014890:	685a      	ldr	r2, [r3, #4]
 8014892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014894:	891b      	ldrh	r3, [r3, #8]
 8014896:	4619      	mov	r1, r3
 8014898:	4610      	mov	r0, r2
 801489a:	f7fb feaf 	bl	80105fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801489e:	4b61      	ldr	r3, [pc, #388]	@ (8014a24 <tcp_receive+0xf18>)
 80148a0:	881b      	ldrh	r3, [r3, #0]
 80148a2:	461a      	mov	r2, r3
 80148a4:	4b5d      	ldr	r3, [pc, #372]	@ (8014a1c <tcp_receive+0xf10>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	441a      	add	r2, r3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ae:	6879      	ldr	r1, [r7, #4]
 80148b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80148b2:	440b      	add	r3, r1
 80148b4:	1ad3      	subs	r3, r2, r3
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f340 8088 	ble.w	80149cc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80148bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	899b      	ldrh	r3, [r3, #12]
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7fa fb60 	bl	800ef8c <lwip_htons>
 80148cc:	4603      	mov	r3, r0
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d021      	beq.n	801491c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80148d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	899b      	ldrh	r3, [r3, #12]
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	b21b      	sxth	r3, r3
 80148e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80148e8:	b21c      	sxth	r4, r3
 80148ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	899b      	ldrh	r3, [r3, #12]
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	4618      	mov	r0, r3
 80148f6:	f7fa fb49 	bl	800ef8c <lwip_htons>
 80148fa:	4603      	mov	r3, r0
 80148fc:	b2db      	uxtb	r3, r3
 80148fe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014902:	b29b      	uxth	r3, r3
 8014904:	4618      	mov	r0, r3
 8014906:	f7fa fb41 	bl	800ef8c <lwip_htons>
 801490a:	4603      	mov	r3, r0
 801490c:	b21b      	sxth	r3, r3
 801490e:	4323      	orrs	r3, r4
 8014910:	b21a      	sxth	r2, r3
 8014912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	b292      	uxth	r2, r2
 801491a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014920:	b29a      	uxth	r2, r3
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014926:	4413      	add	r3, r2
 8014928:	b299      	uxth	r1, r3
 801492a:	4b3c      	ldr	r3, [pc, #240]	@ (8014a1c <tcp_receive+0xf10>)
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	b29a      	uxth	r2, r3
 8014930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	1a8a      	subs	r2, r1, r2
 8014936:	b292      	uxth	r2, r2
 8014938:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	891b      	ldrh	r3, [r3, #8]
 8014946:	4619      	mov	r1, r3
 8014948:	4610      	mov	r0, r2
 801494a:	f7fb fe57 	bl	80105fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	891c      	ldrh	r4, [r3, #8]
 8014954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	68db      	ldr	r3, [r3, #12]
 801495a:	899b      	ldrh	r3, [r3, #12]
 801495c:	b29b      	uxth	r3, r3
 801495e:	4618      	mov	r0, r3
 8014960:	f7fa fb14 	bl	800ef8c <lwip_htons>
 8014964:	4603      	mov	r3, r0
 8014966:	b2db      	uxtb	r3, r3
 8014968:	f003 0303 	and.w	r3, r3, #3
 801496c:	2b00      	cmp	r3, #0
 801496e:	d001      	beq.n	8014974 <tcp_receive+0xe68>
 8014970:	2301      	movs	r3, #1
 8014972:	e000      	b.n	8014976 <tcp_receive+0xe6a>
 8014974:	2300      	movs	r3, #0
 8014976:	4423      	add	r3, r4
 8014978:	b29a      	uxth	r2, r3
 801497a:	4b2a      	ldr	r3, [pc, #168]	@ (8014a24 <tcp_receive+0xf18>)
 801497c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801497e:	4b29      	ldr	r3, [pc, #164]	@ (8014a24 <tcp_receive+0xf18>)
 8014980:	881b      	ldrh	r3, [r3, #0]
 8014982:	461a      	mov	r2, r3
 8014984:	4b25      	ldr	r3, [pc, #148]	@ (8014a1c <tcp_receive+0xf10>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	441a      	add	r2, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801498e:	6879      	ldr	r1, [r7, #4]
 8014990:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014992:	440b      	add	r3, r1
 8014994:	429a      	cmp	r2, r3
 8014996:	d019      	beq.n	80149cc <tcp_receive+0xec0>
 8014998:	4b23      	ldr	r3, [pc, #140]	@ (8014a28 <tcp_receive+0xf1c>)
 801499a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801499e:	4923      	ldr	r1, [pc, #140]	@ (8014a2c <tcp_receive+0xf20>)
 80149a0:	4823      	ldr	r0, [pc, #140]	@ (8014a30 <tcp_receive+0xf24>)
 80149a2:	f004 ff1f 	bl	80197e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80149a6:	e011      	b.n	80149cc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80149a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80149ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f47f aea5 	bne.w	8014700 <tcp_receive+0xbf4>
 80149b6:	e00a      	b.n	80149ce <tcp_receive+0xec2>
                break;
 80149b8:	bf00      	nop
 80149ba:	e008      	b.n	80149ce <tcp_receive+0xec2>
                break;
 80149bc:	bf00      	nop
 80149be:	e006      	b.n	80149ce <tcp_receive+0xec2>
                  break;
 80149c0:	bf00      	nop
 80149c2:	e004      	b.n	80149ce <tcp_receive+0xec2>
                  break;
 80149c4:	bf00      	nop
 80149c6:	e002      	b.n	80149ce <tcp_receive+0xec2>
                  break;
 80149c8:	bf00      	nop
 80149ca:	e000      	b.n	80149ce <tcp_receive+0xec2>
                break;
 80149cc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f001 fa32 	bl	8015e38 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80149d4:	e003      	b.n	80149de <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f001 fa2e 	bl	8015e38 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80149dc:	e01a      	b.n	8014a14 <tcp_receive+0xf08>
 80149de:	e019      	b.n	8014a14 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80149e0:	4b0e      	ldr	r3, [pc, #56]	@ (8014a1c <tcp_receive+0xf10>)
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	db0a      	blt.n	8014a04 <tcp_receive+0xef8>
 80149ee:	4b0b      	ldr	r3, [pc, #44]	@ (8014a1c <tcp_receive+0xf10>)
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f6:	6879      	ldr	r1, [r7, #4]
 80149f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80149fa:	440b      	add	r3, r1
 80149fc:	1ad3      	subs	r3, r2, r3
 80149fe:	3301      	adds	r3, #1
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	dd07      	ble.n	8014a14 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	8b5b      	ldrh	r3, [r3, #26]
 8014a08:	f043 0302 	orr.w	r3, r3, #2
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014a12:	e7ff      	b.n	8014a14 <tcp_receive+0xf08>
 8014a14:	bf00      	nop
 8014a16:	3750      	adds	r7, #80	@ 0x50
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1c:	24010620 	.word	0x24010620
 8014a20:	24010600 	.word	0x24010600
 8014a24:	2401062a 	.word	0x2401062a
 8014a28:	0801ba90 	.word	0x0801ba90
 8014a2c:	0801be38 	.word	0x0801be38
 8014a30:	0801badc 	.word	0x0801badc

08014a34 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014a3a:	4b15      	ldr	r3, [pc, #84]	@ (8014a90 <tcp_get_next_optbyte+0x5c>)
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	1c5a      	adds	r2, r3, #1
 8014a40:	b291      	uxth	r1, r2
 8014a42:	4a13      	ldr	r2, [pc, #76]	@ (8014a90 <tcp_get_next_optbyte+0x5c>)
 8014a44:	8011      	strh	r1, [r2, #0]
 8014a46:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014a48:	4b12      	ldr	r3, [pc, #72]	@ (8014a94 <tcp_get_next_optbyte+0x60>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d004      	beq.n	8014a5a <tcp_get_next_optbyte+0x26>
 8014a50:	4b11      	ldr	r3, [pc, #68]	@ (8014a98 <tcp_get_next_optbyte+0x64>)
 8014a52:	881b      	ldrh	r3, [r3, #0]
 8014a54:	88fa      	ldrh	r2, [r7, #6]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d208      	bcs.n	8014a6c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014a5a:	4b10      	ldr	r3, [pc, #64]	@ (8014a9c <tcp_get_next_optbyte+0x68>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	3314      	adds	r3, #20
 8014a60:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014a62:	88fb      	ldrh	r3, [r7, #6]
 8014a64:	683a      	ldr	r2, [r7, #0]
 8014a66:	4413      	add	r3, r2
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	e00b      	b.n	8014a84 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014a6c:	88fb      	ldrh	r3, [r7, #6]
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	4b09      	ldr	r3, [pc, #36]	@ (8014a98 <tcp_get_next_optbyte+0x64>)
 8014a72:	881b      	ldrh	r3, [r3, #0]
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014a7a:	4b06      	ldr	r3, [pc, #24]	@ (8014a94 <tcp_get_next_optbyte+0x60>)
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	797b      	ldrb	r3, [r7, #5]
 8014a80:	4413      	add	r3, r2
 8014a82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	370c      	adds	r7, #12
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr
 8014a90:	2401061c 	.word	0x2401061c
 8014a94:	24010618 	.word	0x24010618
 8014a98:	24010616 	.word	0x24010616
 8014a9c:	24010610 	.word	0x24010610

08014aa0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <tcp_parseopt+0x1c>
 8014aae:	4b33      	ldr	r3, [pc, #204]	@ (8014b7c <tcp_parseopt+0xdc>)
 8014ab0:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014ab4:	4932      	ldr	r1, [pc, #200]	@ (8014b80 <tcp_parseopt+0xe0>)
 8014ab6:	4833      	ldr	r0, [pc, #204]	@ (8014b84 <tcp_parseopt+0xe4>)
 8014ab8:	f004 fe94 	bl	80197e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014abc:	4b32      	ldr	r3, [pc, #200]	@ (8014b88 <tcp_parseopt+0xe8>)
 8014abe:	881b      	ldrh	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d057      	beq.n	8014b74 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014ac4:	4b31      	ldr	r3, [pc, #196]	@ (8014b8c <tcp_parseopt+0xec>)
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	801a      	strh	r2, [r3, #0]
 8014aca:	e047      	b.n	8014b5c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8014acc:	f7ff ffb2 	bl	8014a34 <tcp_get_next_optbyte>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014ad4:	7bfb      	ldrb	r3, [r7, #15]
 8014ad6:	2b02      	cmp	r3, #2
 8014ad8:	d006      	beq.n	8014ae8 <tcp_parseopt+0x48>
 8014ada:	2b02      	cmp	r3, #2
 8014adc:	dc2b      	bgt.n	8014b36 <tcp_parseopt+0x96>
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d043      	beq.n	8014b6a <tcp_parseopt+0xca>
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d039      	beq.n	8014b5a <tcp_parseopt+0xba>
 8014ae6:	e026      	b.n	8014b36 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014ae8:	f7ff ffa4 	bl	8014a34 <tcp_get_next_optbyte>
 8014aec:	4603      	mov	r3, r0
 8014aee:	2b04      	cmp	r3, #4
 8014af0:	d13d      	bne.n	8014b6e <tcp_parseopt+0xce>
 8014af2:	4b26      	ldr	r3, [pc, #152]	@ (8014b8c <tcp_parseopt+0xec>)
 8014af4:	881b      	ldrh	r3, [r3, #0]
 8014af6:	3301      	adds	r3, #1
 8014af8:	4a23      	ldr	r2, [pc, #140]	@ (8014b88 <tcp_parseopt+0xe8>)
 8014afa:	8812      	ldrh	r2, [r2, #0]
 8014afc:	4293      	cmp	r3, r2
 8014afe:	da36      	bge.n	8014b6e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014b00:	f7ff ff98 	bl	8014a34 <tcp_get_next_optbyte>
 8014b04:	4603      	mov	r3, r0
 8014b06:	021b      	lsls	r3, r3, #8
 8014b08:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014b0a:	f7ff ff93 	bl	8014a34 <tcp_get_next_optbyte>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	461a      	mov	r2, r3
 8014b12:	89bb      	ldrh	r3, [r7, #12]
 8014b14:	4313      	orrs	r3, r2
 8014b16:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014b18:	89bb      	ldrh	r3, [r7, #12]
 8014b1a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014b1e:	4293      	cmp	r3, r2
 8014b20:	d804      	bhi.n	8014b2c <tcp_parseopt+0x8c>
 8014b22:	89bb      	ldrh	r3, [r7, #12]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <tcp_parseopt+0x8c>
 8014b28:	89ba      	ldrh	r2, [r7, #12]
 8014b2a:	e001      	b.n	8014b30 <tcp_parseopt+0x90>
 8014b2c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014b34:	e012      	b.n	8014b5c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014b36:	f7ff ff7d 	bl	8014a34 <tcp_get_next_optbyte>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014b3e:	7afb      	ldrb	r3, [r7, #11]
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	d916      	bls.n	8014b72 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014b44:	7afb      	ldrb	r3, [r7, #11]
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	4b10      	ldr	r3, [pc, #64]	@ (8014b8c <tcp_parseopt+0xec>)
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	3b02      	subs	r3, #2
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	4b0d      	ldr	r3, [pc, #52]	@ (8014b8c <tcp_parseopt+0xec>)
 8014b56:	801a      	strh	r2, [r3, #0]
 8014b58:	e000      	b.n	8014b5c <tcp_parseopt+0xbc>
          break;
 8014b5a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8014b8c <tcp_parseopt+0xec>)
 8014b5e:	881a      	ldrh	r2, [r3, #0]
 8014b60:	4b09      	ldr	r3, [pc, #36]	@ (8014b88 <tcp_parseopt+0xe8>)
 8014b62:	881b      	ldrh	r3, [r3, #0]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d3b1      	bcc.n	8014acc <tcp_parseopt+0x2c>
 8014b68:	e004      	b.n	8014b74 <tcp_parseopt+0xd4>
          return;
 8014b6a:	bf00      	nop
 8014b6c:	e002      	b.n	8014b74 <tcp_parseopt+0xd4>
            return;
 8014b6e:	bf00      	nop
 8014b70:	e000      	b.n	8014b74 <tcp_parseopt+0xd4>
            return;
 8014b72:	bf00      	nop
      }
    }
  }
}
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	0801ba90 	.word	0x0801ba90
 8014b80:	0801bef4 	.word	0x0801bef4
 8014b84:	0801badc 	.word	0x0801badc
 8014b88:	24010614 	.word	0x24010614
 8014b8c:	2401061c 	.word	0x2401061c

08014b90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014b90:	b480      	push	{r7}
 8014b92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014b94:	4b05      	ldr	r3, [pc, #20]	@ (8014bac <tcp_trigger_input_pcb_close+0x1c>)
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	f043 0310 	orr.w	r3, r3, #16
 8014b9c:	b2da      	uxtb	r2, r3
 8014b9e:	4b03      	ldr	r3, [pc, #12]	@ (8014bac <tcp_trigger_input_pcb_close+0x1c>)
 8014ba0:	701a      	strb	r2, [r3, #0]
}
 8014ba2:	bf00      	nop
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr
 8014bac:	2401062d 	.word	0x2401062d

08014bb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d00a      	beq.n	8014bd8 <tcp_route+0x28>
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	7a1b      	ldrb	r3, [r3, #8]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d006      	beq.n	8014bd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	7a1b      	ldrb	r3, [r3, #8]
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fb fb08 	bl	80101e4 <netif_get_by_index>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	e003      	b.n	8014be0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f003 fa01 	bl	8017fe0 <ip4_route>
 8014bde:	4603      	mov	r3, r0
  }
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3710      	adds	r7, #16
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014be8:	b590      	push	{r4, r7, lr}
 8014bea:	b087      	sub	sp, #28
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	60f8      	str	r0, [r7, #12]
 8014bf0:	60b9      	str	r1, [r7, #8]
 8014bf2:	603b      	str	r3, [r7, #0]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d105      	bne.n	8014c0a <tcp_create_segment+0x22>
 8014bfe:	4b43      	ldr	r3, [pc, #268]	@ (8014d0c <tcp_create_segment+0x124>)
 8014c00:	22a3      	movs	r2, #163	@ 0xa3
 8014c02:	4943      	ldr	r1, [pc, #268]	@ (8014d10 <tcp_create_segment+0x128>)
 8014c04:	4843      	ldr	r0, [pc, #268]	@ (8014d14 <tcp_create_segment+0x12c>)
 8014c06:	f004 fded 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d105      	bne.n	8014c1c <tcp_create_segment+0x34>
 8014c10:	4b3e      	ldr	r3, [pc, #248]	@ (8014d0c <tcp_create_segment+0x124>)
 8014c12:	22a4      	movs	r2, #164	@ 0xa4
 8014c14:	4940      	ldr	r1, [pc, #256]	@ (8014d18 <tcp_create_segment+0x130>)
 8014c16:	483f      	ldr	r0, [pc, #252]	@ (8014d14 <tcp_create_segment+0x12c>)
 8014c18:	f004 fde4 	bl	80197e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014c20:	009b      	lsls	r3, r3, #2
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	f003 0304 	and.w	r3, r3, #4
 8014c28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014c2a:	2003      	movs	r0, #3
 8014c2c:	f7fa ff4e 	bl	800facc <memp_malloc>
 8014c30:	6138      	str	r0, [r7, #16]
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d104      	bne.n	8014c42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014c38:	68b8      	ldr	r0, [r7, #8]
 8014c3a:	f7fb fe65 	bl	8010908 <pbuf_free>
    return NULL;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	e060      	b.n	8014d04 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014c48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014c4a:	693b      	ldr	r3, [r7, #16]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	68ba      	ldr	r2, [r7, #8]
 8014c54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	891a      	ldrh	r2, [r3, #8]
 8014c5a:	7dfb      	ldrb	r3, [r7, #23]
 8014c5c:	b29b      	uxth	r3, r3
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d205      	bcs.n	8014c6e <tcp_create_segment+0x86>
 8014c62:	4b2a      	ldr	r3, [pc, #168]	@ (8014d0c <tcp_create_segment+0x124>)
 8014c64:	22b0      	movs	r2, #176	@ 0xb0
 8014c66:	492d      	ldr	r1, [pc, #180]	@ (8014d1c <tcp_create_segment+0x134>)
 8014c68:	482a      	ldr	r0, [pc, #168]	@ (8014d14 <tcp_create_segment+0x12c>)
 8014c6a:	f004 fdbb 	bl	80197e4 <iprintf>
  seg->len = p->tot_len - optlen;
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	891a      	ldrh	r2, [r3, #8]
 8014c72:	7dfb      	ldrb	r3, [r7, #23]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	1ad3      	subs	r3, r2, r3
 8014c78:	b29a      	uxth	r2, r3
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014c7e:	2114      	movs	r1, #20
 8014c80:	68b8      	ldr	r0, [r7, #8]
 8014c82:	f7fb fdab 	bl	80107dc <pbuf_add_header>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d004      	beq.n	8014c96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014c8c:	6938      	ldr	r0, [r7, #16]
 8014c8e:	f7fd f8d0 	bl	8011e32 <tcp_seg_free>
    return NULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	e036      	b.n	8014d04 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	685a      	ldr	r2, [r3, #4]
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	8ada      	ldrh	r2, [r3, #22]
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	68dc      	ldr	r4, [r3, #12]
 8014ca8:	4610      	mov	r0, r2
 8014caa:	f7fa f96f 	bl	800ef8c <lwip_htons>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	8b1a      	ldrh	r2, [r3, #24]
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	68dc      	ldr	r4, [r3, #12]
 8014cba:	4610      	mov	r0, r2
 8014cbc:	f7fa f966 	bl	800ef8c <lwip_htons>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	68dc      	ldr	r4, [r3, #12]
 8014cc8:	6838      	ldr	r0, [r7, #0]
 8014cca:	f7fa f974 	bl	800efb6 <lwip_htonl>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014cd2:	7dfb      	ldrb	r3, [r7, #23]
 8014cd4:	089b      	lsrs	r3, r3, #2
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	3305      	adds	r3, #5
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	031b      	lsls	r3, r3, #12
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	79fb      	ldrb	r3, [r7, #7]
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	4313      	orrs	r3, r2
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	68dc      	ldr	r4, [r3, #12]
 8014cec:	4610      	mov	r0, r2
 8014cee:	f7fa f94d 	bl	800ef8c <lwip_htons>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	749a      	strb	r2, [r3, #18]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	74da      	strb	r2, [r3, #19]
  return seg;
 8014d02:	693b      	ldr	r3, [r7, #16]
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	371c      	adds	r7, #28
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd90      	pop	{r4, r7, pc}
 8014d0c:	0801bf10 	.word	0x0801bf10
 8014d10:	0801bf44 	.word	0x0801bf44
 8014d14:	0801bf64 	.word	0x0801bf64
 8014d18:	0801bf8c 	.word	0x0801bf8c
 8014d1c:	0801bfb0 	.word	0x0801bfb0

08014d20 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014d20:	b590      	push	{r4, r7, lr}
 8014d22:	b08b      	sub	sp, #44	@ 0x2c
 8014d24:	af02      	add	r7, sp, #8
 8014d26:	6078      	str	r0, [r7, #4]
 8014d28:	460b      	mov	r3, r1
 8014d2a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	61fb      	str	r3, [r7, #28]
 8014d30:	2300      	movs	r3, #0
 8014d32:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014d34:	2300      	movs	r3, #0
 8014d36:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d106      	bne.n	8014d4c <tcp_split_unsent_seg+0x2c>
 8014d3e:	4b95      	ldr	r3, [pc, #596]	@ (8014f94 <tcp_split_unsent_seg+0x274>)
 8014d40:	f240 324b 	movw	r2, #843	@ 0x34b
 8014d44:	4994      	ldr	r1, [pc, #592]	@ (8014f98 <tcp_split_unsent_seg+0x278>)
 8014d46:	4895      	ldr	r0, [pc, #596]	@ (8014f9c <tcp_split_unsent_seg+0x27c>)
 8014d48:	f004 fd4c 	bl	80197e4 <iprintf>

  useg = pcb->unsent;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d50:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d102      	bne.n	8014d5e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014d5c:	e116      	b.n	8014f8c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014d5e:	887b      	ldrh	r3, [r7, #2]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d109      	bne.n	8014d78 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014d64:	4b8b      	ldr	r3, [pc, #556]	@ (8014f94 <tcp_split_unsent_seg+0x274>)
 8014d66:	f240 3253 	movw	r2, #851	@ 0x353
 8014d6a:	498d      	ldr	r1, [pc, #564]	@ (8014fa0 <tcp_split_unsent_seg+0x280>)
 8014d6c:	488b      	ldr	r0, [pc, #556]	@ (8014f9c <tcp_split_unsent_seg+0x27c>)
 8014d6e:	f004 fd39 	bl	80197e4 <iprintf>
    return ERR_VAL;
 8014d72:	f06f 0305 	mvn.w	r3, #5
 8014d76:	e109      	b.n	8014f8c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	891b      	ldrh	r3, [r3, #8]
 8014d7c:	887a      	ldrh	r2, [r7, #2]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d301      	bcc.n	8014d86 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014d82:	2300      	movs	r3, #0
 8014d84:	e102      	b.n	8014f8c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014d8a:	887a      	ldrh	r2, [r7, #2]
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	d906      	bls.n	8014d9e <tcp_split_unsent_seg+0x7e>
 8014d90:	4b80      	ldr	r3, [pc, #512]	@ (8014f94 <tcp_split_unsent_seg+0x274>)
 8014d92:	f240 325b 	movw	r2, #859	@ 0x35b
 8014d96:	4983      	ldr	r1, [pc, #524]	@ (8014fa4 <tcp_split_unsent_seg+0x284>)
 8014d98:	4880      	ldr	r0, [pc, #512]	@ (8014f9c <tcp_split_unsent_seg+0x27c>)
 8014d9a:	f004 fd23 	bl	80197e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	891b      	ldrh	r3, [r3, #8]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d106      	bne.n	8014db4 <tcp_split_unsent_seg+0x94>
 8014da6:	4b7b      	ldr	r3, [pc, #492]	@ (8014f94 <tcp_split_unsent_seg+0x274>)
 8014da8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014dac:	497e      	ldr	r1, [pc, #504]	@ (8014fa8 <tcp_split_unsent_seg+0x288>)
 8014dae:	487b      	ldr	r0, [pc, #492]	@ (8014f9c <tcp_split_unsent_seg+0x27c>)
 8014db0:	f004 fd18 	bl	80197e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014db4:	697b      	ldr	r3, [r7, #20]
 8014db6:	7a9b      	ldrb	r3, [r3, #10]
 8014db8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014dba:	7bfb      	ldrb	r3, [r7, #15]
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	f003 0304 	and.w	r3, r3, #4
 8014dc4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	891a      	ldrh	r2, [r3, #8]
 8014dca:	887b      	ldrh	r3, [r7, #2]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014dd0:	7bbb      	ldrb	r3, [r7, #14]
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	89bb      	ldrh	r3, [r7, #12]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014dde:	4619      	mov	r1, r3
 8014de0:	2036      	movs	r0, #54	@ 0x36
 8014de2:	f7fb faa9 	bl	8010338 <pbuf_alloc>
 8014de6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f000 80b7 	beq.w	8014f5e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	891a      	ldrh	r2, [r3, #8]
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	b29a      	uxth	r2, r3
 8014dfe:	887b      	ldrh	r3, [r7, #2]
 8014e00:	4413      	add	r3, r2
 8014e02:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	6858      	ldr	r0, [r3, #4]
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	685a      	ldr	r2, [r3, #4]
 8014e0c:	7bbb      	ldrb	r3, [r7, #14]
 8014e0e:	18d1      	adds	r1, r2, r3
 8014e10:	897b      	ldrh	r3, [r7, #10]
 8014e12:	89ba      	ldrh	r2, [r7, #12]
 8014e14:	f7fb ff7e 	bl	8010d14 <pbuf_copy_partial>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	89bb      	ldrh	r3, [r7, #12]
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	f040 809f 	bne.w	8014f62 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	899b      	ldrh	r3, [r3, #12]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7fa f8ad 	bl	800ef8c <lwip_htons>
 8014e32:	4603      	mov	r3, r0
 8014e34:	b2db      	uxtb	r3, r3
 8014e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014e3a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014e40:	7efb      	ldrb	r3, [r7, #27]
 8014e42:	f003 0308 	and.w	r3, r3, #8
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d007      	beq.n	8014e5a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014e4a:	7efb      	ldrb	r3, [r7, #27]
 8014e4c:	f023 0308 	bic.w	r3, r3, #8
 8014e50:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014e52:	7ebb      	ldrb	r3, [r7, #26]
 8014e54:	f043 0308 	orr.w	r3, r3, #8
 8014e58:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014e5a:	7efb      	ldrb	r3, [r7, #27]
 8014e5c:	f003 0301 	and.w	r3, r3, #1
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d007      	beq.n	8014e74 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014e64:	7efb      	ldrb	r3, [r7, #27]
 8014e66:	f023 0301 	bic.w	r3, r3, #1
 8014e6a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014e6c:	7ebb      	ldrb	r3, [r7, #26]
 8014e6e:	f043 0301 	orr.w	r3, r3, #1
 8014e72:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fa f89b 	bl	800efb6 <lwip_htonl>
 8014e80:	4602      	mov	r2, r0
 8014e82:	887b      	ldrh	r3, [r7, #2]
 8014e84:	18d1      	adds	r1, r2, r3
 8014e86:	7eba      	ldrb	r2, [r7, #26]
 8014e88:	7bfb      	ldrb	r3, [r7, #15]
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	6939      	ldr	r1, [r7, #16]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff fea9 	bl	8014be8 <tcp_create_segment>
 8014e96:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d063      	beq.n	8014f66 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7fb fdbe 	bl	8010a24 <pbuf_clen>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	461a      	mov	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014eb2:	1a9b      	subs	r3, r3, r2
 8014eb4:	b29a      	uxth	r2, r3
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	6858      	ldr	r0, [r3, #4]
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	891a      	ldrh	r2, [r3, #8]
 8014ec6:	89bb      	ldrh	r3, [r7, #12]
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	4619      	mov	r1, r3
 8014ece:	f7fb fb95 	bl	80105fc <pbuf_realloc>
  useg->len -= remainder;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	891a      	ldrh	r2, [r3, #8]
 8014ed6:	89bb      	ldrh	r3, [r7, #12]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	b29a      	uxth	r2, r3
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	899b      	ldrh	r3, [r3, #12]
 8014ee6:	b29c      	uxth	r4, r3
 8014ee8:	7efb      	ldrb	r3, [r7, #27]
 8014eea:	b29b      	uxth	r3, r3
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fa f84d 	bl	800ef8c <lwip_htons>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	461a      	mov	r2, r3
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	4322      	orrs	r2, r4
 8014efc:	b292      	uxth	r2, r2
 8014efe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7fb fd8d 	bl	8010a24 <pbuf_clen>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f14:	4413      	add	r3, r2
 8014f16:	b29a      	uxth	r2, r3
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fb fd7e 	bl	8010a24 <pbuf_clen>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	461a      	mov	r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f32:	4413      	add	r3, r2
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	681a      	ldr	r2, [r3, #0]
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	69fa      	ldr	r2, [r7, #28]
 8014f48:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d103      	bne.n	8014f5a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2200      	movs	r2, #0
 8014f56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e016      	b.n	8014f8c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014f5e:	bf00      	nop
 8014f60:	e002      	b.n	8014f68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014f62:	bf00      	nop
 8014f64:	e000      	b.n	8014f68 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014f66:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014f68:	69fb      	ldr	r3, [r7, #28]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d006      	beq.n	8014f7c <tcp_split_unsent_seg+0x25c>
 8014f6e:	4b09      	ldr	r3, [pc, #36]	@ (8014f94 <tcp_split_unsent_seg+0x274>)
 8014f70:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014f74:	490d      	ldr	r1, [pc, #52]	@ (8014fac <tcp_split_unsent_seg+0x28c>)
 8014f76:	4809      	ldr	r0, [pc, #36]	@ (8014f9c <tcp_split_unsent_seg+0x27c>)
 8014f78:	f004 fc34 	bl	80197e4 <iprintf>
  if (p != NULL) {
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d002      	beq.n	8014f88 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014f82:	6938      	ldr	r0, [r7, #16]
 8014f84:	f7fb fcc0 	bl	8010908 <pbuf_free>
  }

  return ERR_MEM;
 8014f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3724      	adds	r7, #36	@ 0x24
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd90      	pop	{r4, r7, pc}
 8014f94:	0801bf10 	.word	0x0801bf10
 8014f98:	0801c2a4 	.word	0x0801c2a4
 8014f9c:	0801bf64 	.word	0x0801bf64
 8014fa0:	0801c2c8 	.word	0x0801c2c8
 8014fa4:	0801c2ec 	.word	0x0801c2ec
 8014fa8:	0801c2fc 	.word	0x0801c2fc
 8014fac:	0801c30c 	.word	0x0801c30c

08014fb0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014fb0:	b590      	push	{r4, r7, lr}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d106      	bne.n	8014fcc <tcp_send_fin+0x1c>
 8014fbe:	4b21      	ldr	r3, [pc, #132]	@ (8015044 <tcp_send_fin+0x94>)
 8014fc0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014fc4:	4920      	ldr	r1, [pc, #128]	@ (8015048 <tcp_send_fin+0x98>)
 8014fc6:	4821      	ldr	r0, [pc, #132]	@ (801504c <tcp_send_fin+0x9c>)
 8014fc8:	f004 fc0c 	bl	80197e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d02e      	beq.n	8015032 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fd8:	60fb      	str	r3, [r7, #12]
 8014fda:	e002      	b.n	8014fe2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d1f8      	bne.n	8014fdc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	68db      	ldr	r3, [r3, #12]
 8014fee:	899b      	ldrh	r3, [r3, #12]
 8014ff0:	b29b      	uxth	r3, r3
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f9 ffca 	bl	800ef8c <lwip_htons>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	f003 0307 	and.w	r3, r3, #7
 8015000:	2b00      	cmp	r3, #0
 8015002:	d116      	bne.n	8015032 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	899b      	ldrh	r3, [r3, #12]
 801500a:	b29c      	uxth	r4, r3
 801500c:	2001      	movs	r0, #1
 801500e:	f7f9 ffbd 	bl	800ef8c <lwip_htons>
 8015012:	4603      	mov	r3, r0
 8015014:	461a      	mov	r2, r3
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	4322      	orrs	r2, r4
 801501c:	b292      	uxth	r2, r2
 801501e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8b5b      	ldrh	r3, [r3, #26]
 8015024:	f043 0320 	orr.w	r3, r3, #32
 8015028:	b29a      	uxth	r2, r3
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801502e:	2300      	movs	r3, #0
 8015030:	e004      	b.n	801503c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015032:	2101      	movs	r1, #1
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f000 f80b 	bl	8015050 <tcp_enqueue_flags>
 801503a:	4603      	mov	r3, r0
}
 801503c:	4618      	mov	r0, r3
 801503e:	3714      	adds	r7, #20
 8015040:	46bd      	mov	sp, r7
 8015042:	bd90      	pop	{r4, r7, pc}
 8015044:	0801bf10 	.word	0x0801bf10
 8015048:	0801c318 	.word	0x0801c318
 801504c:	0801bf64 	.word	0x0801bf64

08015050 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	@ 0x28
 8015054:	af02      	add	r7, sp, #8
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	460b      	mov	r3, r1
 801505a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801505c:	2300      	movs	r3, #0
 801505e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015060:	2300      	movs	r3, #0
 8015062:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015064:	78fb      	ldrb	r3, [r7, #3]
 8015066:	f003 0303 	and.w	r3, r3, #3
 801506a:	2b00      	cmp	r3, #0
 801506c:	d106      	bne.n	801507c <tcp_enqueue_flags+0x2c>
 801506e:	4b67      	ldr	r3, [pc, #412]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 8015070:	f240 4211 	movw	r2, #1041	@ 0x411
 8015074:	4966      	ldr	r1, [pc, #408]	@ (8015210 <tcp_enqueue_flags+0x1c0>)
 8015076:	4867      	ldr	r0, [pc, #412]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 8015078:	f004 fbb4 	bl	80197e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d106      	bne.n	8015090 <tcp_enqueue_flags+0x40>
 8015082:	4b62      	ldr	r3, [pc, #392]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 8015084:	f240 4213 	movw	r2, #1043	@ 0x413
 8015088:	4963      	ldr	r1, [pc, #396]	@ (8015218 <tcp_enqueue_flags+0x1c8>)
 801508a:	4862      	ldr	r0, [pc, #392]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 801508c:	f004 fbaa 	bl	80197e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015090:	78fb      	ldrb	r3, [r7, #3]
 8015092:	f003 0302 	and.w	r3, r3, #2
 8015096:	2b00      	cmp	r3, #0
 8015098:	d001      	beq.n	801509e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801509a:	2301      	movs	r3, #1
 801509c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801509e:	7ffb      	ldrb	r3, [r7, #31]
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	f003 0304 	and.w	r3, r3, #4
 80150a8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80150aa:	7dfb      	ldrb	r3, [r7, #23]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80150b2:	4619      	mov	r1, r3
 80150b4:	2036      	movs	r0, #54	@ 0x36
 80150b6:	f7fb f93f 	bl	8010338 <pbuf_alloc>
 80150ba:	6138      	str	r0, [r7, #16]
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d109      	bne.n	80150d6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	8b5b      	ldrh	r3, [r3, #26]
 80150c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80150d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150d4:	e095      	b.n	8015202 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	895a      	ldrh	r2, [r3, #10]
 80150da:	7dfb      	ldrb	r3, [r7, #23]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	429a      	cmp	r2, r3
 80150e0:	d206      	bcs.n	80150f0 <tcp_enqueue_flags+0xa0>
 80150e2:	4b4a      	ldr	r3, [pc, #296]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 80150e4:	f240 4239 	movw	r2, #1081	@ 0x439
 80150e8:	494c      	ldr	r1, [pc, #304]	@ (801521c <tcp_enqueue_flags+0x1cc>)
 80150ea:	484a      	ldr	r0, [pc, #296]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 80150ec:	f004 fb7a 	bl	80197e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80150f4:	78fa      	ldrb	r2, [r7, #3]
 80150f6:	7ffb      	ldrb	r3, [r7, #31]
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	460b      	mov	r3, r1
 80150fc:	6939      	ldr	r1, [r7, #16]
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f7ff fd72 	bl	8014be8 <tcp_create_segment>
 8015104:	60f8      	str	r0, [r7, #12]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d109      	bne.n	8015120 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	8b5b      	ldrh	r3, [r3, #26]
 8015110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015114:	b29a      	uxth	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801511a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801511e:	e070      	b.n	8015202 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	f003 0303 	and.w	r3, r3, #3
 8015128:	2b00      	cmp	r3, #0
 801512a:	d006      	beq.n	801513a <tcp_enqueue_flags+0xea>
 801512c:	4b37      	ldr	r3, [pc, #220]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 801512e:	f240 4242 	movw	r2, #1090	@ 0x442
 8015132:	493b      	ldr	r1, [pc, #236]	@ (8015220 <tcp_enqueue_flags+0x1d0>)
 8015134:	4837      	ldr	r0, [pc, #220]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 8015136:	f004 fb55 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	891b      	ldrh	r3, [r3, #8]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d006      	beq.n	8015150 <tcp_enqueue_flags+0x100>
 8015142:	4b32      	ldr	r3, [pc, #200]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 8015144:	f240 4243 	movw	r2, #1091	@ 0x443
 8015148:	4936      	ldr	r1, [pc, #216]	@ (8015224 <tcp_enqueue_flags+0x1d4>)
 801514a:	4832      	ldr	r0, [pc, #200]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 801514c:	f004 fb4a 	bl	80197e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015154:	2b00      	cmp	r3, #0
 8015156:	d103      	bne.n	8015160 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	68fa      	ldr	r2, [r7, #12]
 801515c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801515e:	e00d      	b.n	801517c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015164:	61bb      	str	r3, [r7, #24]
 8015166:	e002      	b.n	801516e <tcp_enqueue_flags+0x11e>
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	61bb      	str	r3, [r7, #24]
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d1f8      	bne.n	8015168 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015176:	69bb      	ldr	r3, [r7, #24]
 8015178:	68fa      	ldr	r2, [r7, #12]
 801517a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015184:	78fb      	ldrb	r3, [r7, #3]
 8015186:	f003 0302 	and.w	r3, r3, #2
 801518a:	2b00      	cmp	r3, #0
 801518c:	d104      	bne.n	8015198 <tcp_enqueue_flags+0x148>
 801518e:	78fb      	ldrb	r3, [r7, #3]
 8015190:	f003 0301 	and.w	r3, r3, #1
 8015194:	2b00      	cmp	r3, #0
 8015196:	d004      	beq.n	80151a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801519c:	1c5a      	adds	r2, r3, #1
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80151a2:	78fb      	ldrb	r3, [r7, #3]
 80151a4:	f003 0301 	and.w	r3, r3, #1
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d006      	beq.n	80151ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	8b5b      	ldrh	r3, [r3, #26]
 80151b0:	f043 0320 	orr.w	r3, r3, #32
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fb fc30 	bl	8010a24 <pbuf_clen>
 80151c4:	4603      	mov	r3, r0
 80151c6:	461a      	mov	r2, r3
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151ce:	4413      	add	r3, r2
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d00e      	beq.n	8015200 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d10a      	bne.n	8015200 <tcp_enqueue_flags+0x1b0>
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d106      	bne.n	8015200 <tcp_enqueue_flags+0x1b0>
 80151f2:	4b06      	ldr	r3, [pc, #24]	@ (801520c <tcp_enqueue_flags+0x1bc>)
 80151f4:	f240 4265 	movw	r2, #1125	@ 0x465
 80151f8:	490b      	ldr	r1, [pc, #44]	@ (8015228 <tcp_enqueue_flags+0x1d8>)
 80151fa:	4806      	ldr	r0, [pc, #24]	@ (8015214 <tcp_enqueue_flags+0x1c4>)
 80151fc:	f004 faf2 	bl	80197e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015200:	2300      	movs	r3, #0
}
 8015202:	4618      	mov	r0, r3
 8015204:	3720      	adds	r7, #32
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
 801520a:	bf00      	nop
 801520c:	0801bf10 	.word	0x0801bf10
 8015210:	0801c334 	.word	0x0801c334
 8015214:	0801bf64 	.word	0x0801bf64
 8015218:	0801c38c 	.word	0x0801c38c
 801521c:	0801c3ac 	.word	0x0801c3ac
 8015220:	0801c3e8 	.word	0x0801c3e8
 8015224:	0801c400 	.word	0x0801c400
 8015228:	0801c42c 	.word	0x0801c42c

0801522c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801522c:	b5b0      	push	{r4, r5, r7, lr}
 801522e:	b08a      	sub	sp, #40	@ 0x28
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d106      	bne.n	8015248 <tcp_output+0x1c>
 801523a:	4b8a      	ldr	r3, [pc, #552]	@ (8015464 <tcp_output+0x238>)
 801523c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8015240:	4989      	ldr	r1, [pc, #548]	@ (8015468 <tcp_output+0x23c>)
 8015242:	488a      	ldr	r0, [pc, #552]	@ (801546c <tcp_output+0x240>)
 8015244:	f004 face 	bl	80197e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	7d1b      	ldrb	r3, [r3, #20]
 801524c:	2b01      	cmp	r3, #1
 801524e:	d106      	bne.n	801525e <tcp_output+0x32>
 8015250:	4b84      	ldr	r3, [pc, #528]	@ (8015464 <tcp_output+0x238>)
 8015252:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8015256:	4986      	ldr	r1, [pc, #536]	@ (8015470 <tcp_output+0x244>)
 8015258:	4884      	ldr	r0, [pc, #528]	@ (801546c <tcp_output+0x240>)
 801525a:	f004 fac3 	bl	80197e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801525e:	4b85      	ldr	r3, [pc, #532]	@ (8015474 <tcp_output+0x248>)
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	429a      	cmp	r2, r3
 8015266:	d101      	bne.n	801526c <tcp_output+0x40>
    return ERR_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	e1ce      	b.n	801560a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015278:	4293      	cmp	r3, r2
 801527a:	bf28      	it	cs
 801527c:	4613      	movcs	r3, r2
 801527e:	b29b      	uxth	r3, r3
 8015280:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015286:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10b      	bne.n	80152a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	8b5b      	ldrh	r3, [r3, #26]
 8015292:	f003 0302 	and.w	r3, r3, #2
 8015296:	2b00      	cmp	r3, #0
 8015298:	f000 81aa 	beq.w	80155f0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f000 fdcb 	bl	8015e38 <tcp_send_empty_ack>
 80152a2:	4603      	mov	r3, r0
 80152a4:	e1b1      	b.n	801560a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3304      	adds	r3, #4
 80152ac:	461a      	mov	r2, r3
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7ff fc7e 	bl	8014bb0 <tcp_route>
 80152b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d102      	bne.n	80152c2 <tcp_output+0x96>
    return ERR_RTE;
 80152bc:	f06f 0303 	mvn.w	r3, #3
 80152c0:	e1a3      	b.n	801560a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d003      	beq.n	80152d0 <tcp_output+0xa4>
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d111      	bne.n	80152f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d002      	beq.n	80152dc <tcp_output+0xb0>
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	3304      	adds	r3, #4
 80152da:	e000      	b.n	80152de <tcp_output+0xb2>
 80152dc:	2300      	movs	r3, #0
 80152de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d102      	bne.n	80152ec <tcp_output+0xc0>
      return ERR_RTE;
 80152e6:	f06f 0303 	mvn.w	r3, #3
 80152ea:	e18e      	b.n	801560a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	681a      	ldr	r2, [r3, #0]
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80152f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7f9 fe5b 	bl	800efb6 <lwip_htonl>
 8015300:	4602      	mov	r2, r0
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801530a:	8912      	ldrh	r2, [r2, #8]
 801530c:	4413      	add	r3, r2
 801530e:	69ba      	ldr	r2, [r7, #24]
 8015310:	429a      	cmp	r2, r3
 8015312:	d227      	bcs.n	8015364 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801531a:	461a      	mov	r2, r3
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	4293      	cmp	r3, r2
 8015320:	d114      	bne.n	801534c <tcp_output+0x120>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015326:	2b00      	cmp	r3, #0
 8015328:	d110      	bne.n	801534c <tcp_output+0x120>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015330:	2b00      	cmp	r3, #0
 8015332:	d10b      	bne.n	801534c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2200      	movs	r2, #0
 8015338:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2201      	movs	r2, #1
 8015340:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2200      	movs	r2, #0
 8015348:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	8b5b      	ldrh	r3, [r3, #26]
 8015350:	f003 0302 	and.w	r3, r3, #2
 8015354:	2b00      	cmp	r3, #0
 8015356:	f000 814d 	beq.w	80155f4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f000 fd6c 	bl	8015e38 <tcp_send_empty_ack>
 8015360:	4603      	mov	r3, r0
 8015362:	e152      	b.n	801560a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2200      	movs	r2, #0
 8015368:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015370:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015372:	6a3b      	ldr	r3, [r7, #32]
 8015374:	2b00      	cmp	r3, #0
 8015376:	f000 811c 	beq.w	80155b2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801537a:	e002      	b.n	8015382 <tcp_output+0x156>
 801537c:	6a3b      	ldr	r3, [r7, #32]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	623b      	str	r3, [r7, #32]
 8015382:	6a3b      	ldr	r3, [r7, #32]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d1f8      	bne.n	801537c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801538a:	e112      	b.n	80155b2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	899b      	ldrh	r3, [r3, #12]
 8015392:	b29b      	uxth	r3, r3
 8015394:	4618      	mov	r0, r3
 8015396:	f7f9 fdf9 	bl	800ef8c <lwip_htons>
 801539a:	4603      	mov	r3, r0
 801539c:	b2db      	uxtb	r3, r3
 801539e:	f003 0304 	and.w	r3, r3, #4
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d006      	beq.n	80153b4 <tcp_output+0x188>
 80153a6:	4b2f      	ldr	r3, [pc, #188]	@ (8015464 <tcp_output+0x238>)
 80153a8:	f240 5236 	movw	r2, #1334	@ 0x536
 80153ac:	4932      	ldr	r1, [pc, #200]	@ (8015478 <tcp_output+0x24c>)
 80153ae:	482f      	ldr	r0, [pc, #188]	@ (801546c <tcp_output+0x240>)
 80153b0:	f004 fa18 	bl	80197e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d01f      	beq.n	80153fc <tcp_output+0x1d0>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	8b5b      	ldrh	r3, [r3, #26]
 80153c0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d119      	bne.n	80153fc <tcp_output+0x1d0>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d00b      	beq.n	80153e8 <tcp_output+0x1bc>
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d110      	bne.n	80153fc <tcp_output+0x1d0>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153de:	891a      	ldrh	r2, [r3, #8]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d209      	bcs.n	80153fc <tcp_output+0x1d0>
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d004      	beq.n	80153fc <tcp_output+0x1d0>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80153f8:	2b0f      	cmp	r3, #15
 80153fa:	d901      	bls.n	8015400 <tcp_output+0x1d4>
 80153fc:	2301      	movs	r3, #1
 80153fe:	e000      	b.n	8015402 <tcp_output+0x1d6>
 8015400:	2300      	movs	r3, #0
 8015402:	2b00      	cmp	r3, #0
 8015404:	d106      	bne.n	8015414 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	8b5b      	ldrh	r3, [r3, #26]
 801540a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801540e:	2b00      	cmp	r3, #0
 8015410:	f000 80e4 	beq.w	80155dc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	7d1b      	ldrb	r3, [r3, #20]
 8015418:	2b02      	cmp	r3, #2
 801541a:	d00d      	beq.n	8015438 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	899b      	ldrh	r3, [r3, #12]
 8015422:	b29c      	uxth	r4, r3
 8015424:	2010      	movs	r0, #16
 8015426:	f7f9 fdb1 	bl	800ef8c <lwip_htons>
 801542a:	4603      	mov	r3, r0
 801542c:	461a      	mov	r2, r3
 801542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015430:	68db      	ldr	r3, [r3, #12]
 8015432:	4322      	orrs	r2, r4
 8015434:	b292      	uxth	r2, r2
 8015436:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015438:	697a      	ldr	r2, [r7, #20]
 801543a:	6879      	ldr	r1, [r7, #4]
 801543c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801543e:	f000 f909 	bl	8015654 <tcp_output_segment>
 8015442:	4603      	mov	r3, r0
 8015444:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d016      	beq.n	801547c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	8b5b      	ldrh	r3, [r3, #26]
 8015452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015456:	b29a      	uxth	r2, r3
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	835a      	strh	r2, [r3, #26]
      return err;
 801545c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015460:	e0d3      	b.n	801560a <tcp_output+0x3de>
 8015462:	bf00      	nop
 8015464:	0801bf10 	.word	0x0801bf10
 8015468:	0801c454 	.word	0x0801c454
 801546c:	0801bf64 	.word	0x0801bf64
 8015470:	0801c46c 	.word	0x0801c46c
 8015474:	24010634 	.word	0x24010634
 8015478:	0801c494 	.word	0x0801c494
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7d1b      	ldrb	r3, [r3, #20]
 8015488:	2b02      	cmp	r3, #2
 801548a:	d006      	beq.n	801549a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	8b5b      	ldrh	r3, [r3, #26]
 8015490:	f023 0303 	bic.w	r3, r3, #3
 8015494:	b29a      	uxth	r2, r3
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f9 fd88 	bl	800efb6 <lwip_htonl>
 80154a6:	4604      	mov	r4, r0
 80154a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154aa:	891b      	ldrh	r3, [r3, #8]
 80154ac:	461d      	mov	r5, r3
 80154ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	899b      	ldrh	r3, [r3, #12]
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f9 fd68 	bl	800ef8c <lwip_htons>
 80154bc:	4603      	mov	r3, r0
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	f003 0303 	and.w	r3, r3, #3
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d001      	beq.n	80154cc <tcp_output+0x2a0>
 80154c8:	2301      	movs	r3, #1
 80154ca:	e000      	b.n	80154ce <tcp_output+0x2a2>
 80154cc:	2300      	movs	r3, #0
 80154ce:	442b      	add	r3, r5
 80154d0:	4423      	add	r3, r4
 80154d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	1ad3      	subs	r3, r2, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	da02      	bge.n	80154e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80154e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e8:	891b      	ldrh	r3, [r3, #8]
 80154ea:	461c      	mov	r4, r3
 80154ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	899b      	ldrh	r3, [r3, #12]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f9 fd49 	bl	800ef8c <lwip_htons>
 80154fa:	4603      	mov	r3, r0
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	f003 0303 	and.w	r3, r3, #3
 8015502:	2b00      	cmp	r3, #0
 8015504:	d001      	beq.n	801550a <tcp_output+0x2de>
 8015506:	2301      	movs	r3, #1
 8015508:	e000      	b.n	801550c <tcp_output+0x2e0>
 801550a:	2300      	movs	r3, #0
 801550c:	4423      	add	r3, r4
 801550e:	2b00      	cmp	r3, #0
 8015510:	d049      	beq.n	80155a6 <tcp_output+0x37a>
      seg->next = NULL;
 8015512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015514:	2200      	movs	r2, #0
 8015516:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801551c:	2b00      	cmp	r3, #0
 801551e:	d105      	bne.n	801552c <tcp_output+0x300>
        pcb->unacked = seg;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015524:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015528:	623b      	str	r3, [r7, #32]
 801552a:	e03f      	b.n	80155ac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	4618      	mov	r0, r3
 8015534:	f7f9 fd3f 	bl	800efb6 <lwip_htonl>
 8015538:	4604      	mov	r4, r0
 801553a:	6a3b      	ldr	r3, [r7, #32]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	4618      	mov	r0, r3
 8015542:	f7f9 fd38 	bl	800efb6 <lwip_htonl>
 8015546:	4603      	mov	r3, r0
 8015548:	1ae3      	subs	r3, r4, r3
 801554a:	2b00      	cmp	r3, #0
 801554c:	da24      	bge.n	8015598 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	3370      	adds	r3, #112	@ 0x70
 8015552:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015554:	e002      	b.n	801555c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015556:	69fb      	ldr	r3, [r7, #28]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d011      	beq.n	8015588 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	4618      	mov	r0, r3
 801556e:	f7f9 fd22 	bl	800efb6 <lwip_htonl>
 8015572:	4604      	mov	r4, r0
 8015574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	685b      	ldr	r3, [r3, #4]
 801557a:	4618      	mov	r0, r3
 801557c:	f7f9 fd1b 	bl	800efb6 <lwip_htonl>
 8015580:	4603      	mov	r3, r0
 8015582:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015584:	2b00      	cmp	r3, #0
 8015586:	dbe6      	blt.n	8015556 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801558e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015594:	601a      	str	r2, [r3, #0]
 8015596:	e009      	b.n	80155ac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015598:	6a3b      	ldr	r3, [r7, #32]
 801559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801559c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801559e:	6a3b      	ldr	r3, [r7, #32]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	623b      	str	r3, [r7, #32]
 80155a4:	e002      	b.n	80155ac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80155a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80155a8:	f7fc fc43 	bl	8011e32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80155b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d012      	beq.n	80155de <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80155b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7f9 fcf9 	bl	800efb6 <lwip_htonl>
 80155c4:	4602      	mov	r2, r0
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155ca:	1ad3      	subs	r3, r2, r3
 80155cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155ce:	8912      	ldrh	r2, [r2, #8]
 80155d0:	4413      	add	r3, r2
  while (seg != NULL &&
 80155d2:	69ba      	ldr	r2, [r7, #24]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	f4bf aed9 	bcs.w	801538c <tcp_output+0x160>
 80155da:	e000      	b.n	80155de <tcp_output+0x3b2>
      break;
 80155dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d108      	bne.n	80155f8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2200      	movs	r2, #0
 80155ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80155ee:	e004      	b.n	80155fa <tcp_output+0x3ce>
    goto output_done;
 80155f0:	bf00      	nop
 80155f2:	e002      	b.n	80155fa <tcp_output+0x3ce>
    goto output_done;
 80155f4:	bf00      	nop
 80155f6:	e000      	b.n	80155fa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80155f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	8b5b      	ldrh	r3, [r3, #26]
 80155fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015602:	b29a      	uxth	r2, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3728      	adds	r7, #40	@ 0x28
 801560e:	46bd      	mov	sp, r7
 8015610:	bdb0      	pop	{r4, r5, r7, pc}
 8015612:	bf00      	nop

08015614 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b082      	sub	sp, #8
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d106      	bne.n	8015630 <tcp_output_segment_busy+0x1c>
 8015622:	4b09      	ldr	r3, [pc, #36]	@ (8015648 <tcp_output_segment_busy+0x34>)
 8015624:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015628:	4908      	ldr	r1, [pc, #32]	@ (801564c <tcp_output_segment_busy+0x38>)
 801562a:	4809      	ldr	r0, [pc, #36]	@ (8015650 <tcp_output_segment_busy+0x3c>)
 801562c:	f004 f8da 	bl	80197e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	685b      	ldr	r3, [r3, #4]
 8015634:	7b9b      	ldrb	r3, [r3, #14]
 8015636:	2b01      	cmp	r3, #1
 8015638:	d001      	beq.n	801563e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801563a:	2301      	movs	r3, #1
 801563c:	e000      	b.n	8015640 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801563e:	2300      	movs	r3, #0
}
 8015640:	4618      	mov	r0, r3
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	0801bf10 	.word	0x0801bf10
 801564c:	0801c4ac 	.word	0x0801c4ac
 8015650:	0801bf64 	.word	0x0801bf64

08015654 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015654:	b5b0      	push	{r4, r5, r7, lr}
 8015656:	b08c      	sub	sp, #48	@ 0x30
 8015658:	af04      	add	r7, sp, #16
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d106      	bne.n	8015674 <tcp_output_segment+0x20>
 8015666:	4b64      	ldr	r3, [pc, #400]	@ (80157f8 <tcp_output_segment+0x1a4>)
 8015668:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801566c:	4963      	ldr	r1, [pc, #396]	@ (80157fc <tcp_output_segment+0x1a8>)
 801566e:	4864      	ldr	r0, [pc, #400]	@ (8015800 <tcp_output_segment+0x1ac>)
 8015670:	f004 f8b8 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d106      	bne.n	8015688 <tcp_output_segment+0x34>
 801567a:	4b5f      	ldr	r3, [pc, #380]	@ (80157f8 <tcp_output_segment+0x1a4>)
 801567c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015680:	4960      	ldr	r1, [pc, #384]	@ (8015804 <tcp_output_segment+0x1b0>)
 8015682:	485f      	ldr	r0, [pc, #380]	@ (8015800 <tcp_output_segment+0x1ac>)
 8015684:	f004 f8ae 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d106      	bne.n	801569c <tcp_output_segment+0x48>
 801568e:	4b5a      	ldr	r3, [pc, #360]	@ (80157f8 <tcp_output_segment+0x1a4>)
 8015690:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015694:	495c      	ldr	r1, [pc, #368]	@ (8015808 <tcp_output_segment+0x1b4>)
 8015696:	485a      	ldr	r0, [pc, #360]	@ (8015800 <tcp_output_segment+0x1ac>)
 8015698:	f004 f8a4 	bl	80197e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ff ffb9 	bl	8015614 <tcp_output_segment_busy>
 80156a2:	4603      	mov	r3, r0
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d001      	beq.n	80156ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80156a8:	2300      	movs	r3, #0
 80156aa:	e0a1      	b.n	80157f0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	68dc      	ldr	r4, [r3, #12]
 80156b4:	4610      	mov	r0, r2
 80156b6:	f7f9 fc7e 	bl	800efb6 <lwip_htonl>
 80156ba:	4603      	mov	r3, r0
 80156bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	68dc      	ldr	r4, [r3, #12]
 80156c6:	4610      	mov	r0, r2
 80156c8:	f7f9 fc60 	bl	800ef8c <lwip_htons>
 80156cc:	4603      	mov	r3, r0
 80156ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80156d8:	441a      	add	r2, r3
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	3314      	adds	r3, #20
 80156e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	7a9b      	ldrb	r3, [r3, #10]
 80156ea:	f003 0301 	and.w	r3, r3, #1
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d015      	beq.n	801571e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	3304      	adds	r3, #4
 80156f6:	461a      	mov	r2, r3
 80156f8:	6879      	ldr	r1, [r7, #4]
 80156fa:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80156fe:	f7fc fe8f 	bl	8012420 <tcp_eff_send_mss_netif>
 8015702:	4603      	mov	r3, r0
 8015704:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015706:	8b7b      	ldrh	r3, [r7, #26]
 8015708:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801570c:	4618      	mov	r0, r3
 801570e:	f7f9 fc52 	bl	800efb6 <lwip_htonl>
 8015712:	4602      	mov	r2, r0
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	3304      	adds	r3, #4
 801571c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015724:	2b00      	cmp	r3, #0
 8015726:	da02      	bge.n	801572e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2200      	movs	r2, #0
 801572c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015732:	2b00      	cmp	r3, #0
 8015734:	d10c      	bne.n	8015750 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015736:	4b35      	ldr	r3, [pc, #212]	@ (801580c <tcp_output_segment+0x1b8>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	685b      	ldr	r3, [r3, #4]
 8015744:	4618      	mov	r0, r3
 8015746:	f7f9 fc36 	bl	800efb6 <lwip_htonl>
 801574a:	4602      	mov	r2, r0
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	68da      	ldr	r2, [r3, #12]
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	1ad3      	subs	r3, r2, r3
 801575c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	8959      	ldrh	r1, [r3, #10]
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	8b3a      	ldrh	r2, [r7, #24]
 801576a:	1a8a      	subs	r2, r1, r2
 801576c:	b292      	uxth	r2, r2
 801576e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	8919      	ldrh	r1, [r3, #8]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	8b3a      	ldrh	r2, [r7, #24]
 801577c:	1a8a      	subs	r2, r1, r2
 801577e:	b292      	uxth	r2, r2
 8015780:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	68fa      	ldr	r2, [r7, #12]
 8015788:	68d2      	ldr	r2, [r2, #12]
 801578a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	2200      	movs	r2, #0
 8015792:	741a      	strb	r2, [r3, #16]
 8015794:	2200      	movs	r2, #0
 8015796:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	68da      	ldr	r2, [r3, #12]
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	7a9b      	ldrb	r3, [r3, #10]
 80157a0:	f003 0301 	and.w	r3, r3, #1
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d001      	beq.n	80157ac <tcp_output_segment+0x158>
 80157a8:	2318      	movs	r3, #24
 80157aa:	e000      	b.n	80157ae <tcp_output_segment+0x15a>
 80157ac:	2314      	movs	r3, #20
 80157ae:	4413      	add	r3, r2
 80157b0:	69fa      	ldr	r2, [r7, #28]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d006      	beq.n	80157c4 <tcp_output_segment+0x170>
 80157b6:	4b10      	ldr	r3, [pc, #64]	@ (80157f8 <tcp_output_segment+0x1a4>)
 80157b8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80157bc:	4914      	ldr	r1, [pc, #80]	@ (8015810 <tcp_output_segment+0x1bc>)
 80157be:	4810      	ldr	r0, [pc, #64]	@ (8015800 <tcp_output_segment+0x1ac>)
 80157c0:	f004 f810 	bl	80197e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	6858      	ldr	r0, [r3, #4]
 80157c8:	68b9      	ldr	r1, [r7, #8]
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	1d1c      	adds	r4, r3, #4
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	7add      	ldrb	r5, [r3, #11]
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	7a9b      	ldrb	r3, [r3, #10]
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	9202      	str	r2, [sp, #8]
 80157da:	2206      	movs	r2, #6
 80157dc:	9201      	str	r2, [sp, #4]
 80157de:	9300      	str	r3, [sp, #0]
 80157e0:	462b      	mov	r3, r5
 80157e2:	4622      	mov	r2, r4
 80157e4:	f002 fdba 	bl	801835c <ip4_output_if>
 80157e8:	4603      	mov	r3, r0
 80157ea:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80157ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3720      	adds	r7, #32
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bdb0      	pop	{r4, r5, r7, pc}
 80157f8:	0801bf10 	.word	0x0801bf10
 80157fc:	0801c4d4 	.word	0x0801c4d4
 8015800:	0801bf64 	.word	0x0801bf64
 8015804:	0801c4f4 	.word	0x0801c4f4
 8015808:	0801c514 	.word	0x0801c514
 801580c:	240105e8 	.word	0x240105e8
 8015810:	0801c538 	.word	0x0801c538

08015814 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015814:	b5b0      	push	{r4, r5, r7, lr}
 8015816:	b084      	sub	sp, #16
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d106      	bne.n	8015830 <tcp_rexmit_rto_prepare+0x1c>
 8015822:	4b31      	ldr	r3, [pc, #196]	@ (80158e8 <tcp_rexmit_rto_prepare+0xd4>)
 8015824:	f240 6263 	movw	r2, #1635	@ 0x663
 8015828:	4930      	ldr	r1, [pc, #192]	@ (80158ec <tcp_rexmit_rto_prepare+0xd8>)
 801582a:	4831      	ldr	r0, [pc, #196]	@ (80158f0 <tcp_rexmit_rto_prepare+0xdc>)
 801582c:	f003 ffda 	bl	80197e4 <iprintf>

  if (pcb->unacked == NULL) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015834:	2b00      	cmp	r3, #0
 8015836:	d102      	bne.n	801583e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015838:	f06f 0305 	mvn.w	r3, #5
 801583c:	e050      	b.n	80158e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015842:	60fb      	str	r3, [r7, #12]
 8015844:	e00b      	b.n	801585e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f7ff fee4 	bl	8015614 <tcp_output_segment_busy>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d002      	beq.n	8015858 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015852:	f06f 0305 	mvn.w	r3, #5
 8015856:	e043      	b.n	80158e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	60fb      	str	r3, [r7, #12]
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d1ef      	bne.n	8015846 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7ff fed4 	bl	8015614 <tcp_output_segment_busy>
 801586c:	4603      	mov	r3, r0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d002      	beq.n	8015878 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015872:	f06f 0305 	mvn.w	r3, #5
 8015876:	e033      	b.n	80158e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2200      	movs	r2, #0
 801588c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	8b5b      	ldrh	r3, [r3, #26]
 8015892:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015896:	b29a      	uxth	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7f9 fb87 	bl	800efb6 <lwip_htonl>
 80158a8:	4604      	mov	r4, r0
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	891b      	ldrh	r3, [r3, #8]
 80158ae:	461d      	mov	r5, r3
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	899b      	ldrh	r3, [r3, #12]
 80158b6:	b29b      	uxth	r3, r3
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7f9 fb67 	bl	800ef8c <lwip_htons>
 80158be:	4603      	mov	r3, r0
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	f003 0303 	and.w	r3, r3, #3
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d001      	beq.n	80158ce <tcp_rexmit_rto_prepare+0xba>
 80158ca:	2301      	movs	r3, #1
 80158cc:	e000      	b.n	80158d0 <tcp_rexmit_rto_prepare+0xbc>
 80158ce:	2300      	movs	r3, #0
 80158d0:	442b      	add	r3, r5
 80158d2:	18e2      	adds	r2, r4, r3
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80158de:	2300      	movs	r3, #0
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bdb0      	pop	{r4, r5, r7, pc}
 80158e8:	0801bf10 	.word	0x0801bf10
 80158ec:	0801c54c 	.word	0x0801c54c
 80158f0:	0801bf64 	.word	0x0801bf64

080158f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d106      	bne.n	8015910 <tcp_rexmit_rto_commit+0x1c>
 8015902:	4b0d      	ldr	r3, [pc, #52]	@ (8015938 <tcp_rexmit_rto_commit+0x44>)
 8015904:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015908:	490c      	ldr	r1, [pc, #48]	@ (801593c <tcp_rexmit_rto_commit+0x48>)
 801590a:	480d      	ldr	r0, [pc, #52]	@ (8015940 <tcp_rexmit_rto_commit+0x4c>)
 801590c:	f003 ff6a 	bl	80197e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015916:	2bff      	cmp	r3, #255	@ 0xff
 8015918:	d007      	beq.n	801592a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015920:	3301      	adds	r3, #1
 8015922:	b2da      	uxtb	r2, r3
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7ff fc7e 	bl	801522c <tcp_output>
}
 8015930:	bf00      	nop
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	0801bf10 	.word	0x0801bf10
 801593c:	0801c570 	.word	0x0801c570
 8015940:	0801bf64 	.word	0x0801bf64

08015944 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d106      	bne.n	8015960 <tcp_rexmit_rto+0x1c>
 8015952:	4b0a      	ldr	r3, [pc, #40]	@ (801597c <tcp_rexmit_rto+0x38>)
 8015954:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015958:	4909      	ldr	r1, [pc, #36]	@ (8015980 <tcp_rexmit_rto+0x3c>)
 801595a:	480a      	ldr	r0, [pc, #40]	@ (8015984 <tcp_rexmit_rto+0x40>)
 801595c:	f003 ff42 	bl	80197e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7ff ff57 	bl	8015814 <tcp_rexmit_rto_prepare>
 8015966:	4603      	mov	r3, r0
 8015968:	2b00      	cmp	r3, #0
 801596a:	d102      	bne.n	8015972 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7ff ffc1 	bl	80158f4 <tcp_rexmit_rto_commit>
  }
}
 8015972:	bf00      	nop
 8015974:	3708      	adds	r7, #8
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	0801bf10 	.word	0x0801bf10
 8015980:	0801c594 	.word	0x0801c594
 8015984:	0801bf64 	.word	0x0801bf64

08015988 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015988:	b590      	push	{r4, r7, lr}
 801598a:	b085      	sub	sp, #20
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d106      	bne.n	80159a4 <tcp_rexmit+0x1c>
 8015996:	4b2f      	ldr	r3, [pc, #188]	@ (8015a54 <tcp_rexmit+0xcc>)
 8015998:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801599c:	492e      	ldr	r1, [pc, #184]	@ (8015a58 <tcp_rexmit+0xd0>)
 801599e:	482f      	ldr	r0, [pc, #188]	@ (8015a5c <tcp_rexmit+0xd4>)
 80159a0:	f003 ff20 	bl	80197e4 <iprintf>

  if (pcb->unacked == NULL) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d102      	bne.n	80159b2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80159ac:	f06f 0305 	mvn.w	r3, #5
 80159b0:	e04c      	b.n	8015a4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159b6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80159b8:	68b8      	ldr	r0, [r7, #8]
 80159ba:	f7ff fe2b 	bl	8015614 <tcp_output_segment_busy>
 80159be:	4603      	mov	r3, r0
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80159c4:	f06f 0305 	mvn.w	r3, #5
 80159c8:	e040      	b.n	8015a4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80159ca:	68bb      	ldr	r3, [r7, #8]
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	336c      	adds	r3, #108	@ 0x6c
 80159d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159d8:	e002      	b.n	80159e0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d011      	beq.n	8015a0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f9 fae0 	bl	800efb6 <lwip_htonl>
 80159f6:	4604      	mov	r4, r0
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7f9 fad9 	bl	800efb6 <lwip_htonl>
 8015a04:	4603      	mov	r3, r0
 8015a06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	dbe6      	blt.n	80159da <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	68ba      	ldr	r2, [r7, #8]
 8015a18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d103      	bne.n	8015a2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	2200      	movs	r2, #0
 8015a26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a30:	2bff      	cmp	r3, #255	@ 0xff
 8015a32:	d007      	beq.n	8015a44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	b2da      	uxtb	r2, r3
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015a4a:	2300      	movs	r3, #0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3714      	adds	r7, #20
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd90      	pop	{r4, r7, pc}
 8015a54:	0801bf10 	.word	0x0801bf10
 8015a58:	0801c5b0 	.word	0x0801c5b0
 8015a5c:	0801bf64 	.word	0x0801bf64

08015a60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d106      	bne.n	8015a7c <tcp_rexmit_fast+0x1c>
 8015a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8015b18 <tcp_rexmit_fast+0xb8>)
 8015a70:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015a74:	4929      	ldr	r1, [pc, #164]	@ (8015b1c <tcp_rexmit_fast+0xbc>)
 8015a76:	482a      	ldr	r0, [pc, #168]	@ (8015b20 <tcp_rexmit_fast+0xc0>)
 8015a78:	f003 feb4 	bl	80197e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d045      	beq.n	8015b10 <tcp_rexmit_fast+0xb0>
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	8b5b      	ldrh	r3, [r3, #26]
 8015a88:	f003 0304 	and.w	r3, r3, #4
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d13f      	bne.n	8015b10 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7ff ff79 	bl	8015988 <tcp_rexmit>
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d139      	bne.n	8015b10 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	bf28      	it	cs
 8015aac:	4613      	movcs	r3, r2
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	da00      	bge.n	8015ab6 <tcp_rexmit_fast+0x56>
 8015ab4:	3301      	adds	r3, #1
 8015ab6:	105b      	asrs	r3, r3, #1
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d206      	bcs.n	8015ae0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ad6:	005b      	lsls	r3, r3, #1
 8015ad8:	b29a      	uxth	r2, r3
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015aea:	4619      	mov	r1, r3
 8015aec:	0049      	lsls	r1, r1, #1
 8015aee:	440b      	add	r3, r1
 8015af0:	b29b      	uxth	r3, r3
 8015af2:	4413      	add	r3, r2
 8015af4:	b29a      	uxth	r2, r3
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	8b5b      	ldrh	r3, [r3, #26]
 8015b00:	f043 0304 	orr.w	r3, r3, #4
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015b10:	bf00      	nop
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	0801bf10 	.word	0x0801bf10
 8015b1c:	0801c5c8 	.word	0x0801c5c8
 8015b20:	0801bf64 	.word	0x0801bf64

08015b24 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b086      	sub	sp, #24
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	607b      	str	r3, [r7, #4]
 8015b2e:	460b      	mov	r3, r1
 8015b30:	817b      	strh	r3, [r7, #10]
 8015b32:	4613      	mov	r3, r2
 8015b34:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015b36:	897a      	ldrh	r2, [r7, #10]
 8015b38:	893b      	ldrh	r3, [r7, #8]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	3314      	adds	r3, #20
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015b46:	4619      	mov	r1, r3
 8015b48:	2022      	movs	r0, #34	@ 0x22
 8015b4a:	f7fa fbf5 	bl	8010338 <pbuf_alloc>
 8015b4e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d04d      	beq.n	8015bf2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015b56:	897b      	ldrh	r3, [r7, #10]
 8015b58:	3313      	adds	r3, #19
 8015b5a:	697a      	ldr	r2, [r7, #20]
 8015b5c:	8952      	ldrh	r2, [r2, #10]
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	db06      	blt.n	8015b70 <tcp_output_alloc_header_common+0x4c>
 8015b62:	4b26      	ldr	r3, [pc, #152]	@ (8015bfc <tcp_output_alloc_header_common+0xd8>)
 8015b64:	f240 7223 	movw	r2, #1827	@ 0x723
 8015b68:	4925      	ldr	r1, [pc, #148]	@ (8015c00 <tcp_output_alloc_header_common+0xdc>)
 8015b6a:	4826      	ldr	r0, [pc, #152]	@ (8015c04 <tcp_output_alloc_header_common+0xe0>)
 8015b6c:	f003 fe3a 	bl	80197e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015b76:	8c3b      	ldrh	r3, [r7, #32]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7f9 fa07 	bl	800ef8c <lwip_htons>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	461a      	mov	r2, r3
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7f9 f9ff 	bl	800ef8c <lwip_htons>
 8015b8e:	4603      	mov	r3, r0
 8015b90:	461a      	mov	r2, r3
 8015b92:	693b      	ldr	r3, [r7, #16]
 8015b94:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f7f9 fa0a 	bl	800efb6 <lwip_htonl>
 8015ba2:	4602      	mov	r2, r0
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015ba8:	897b      	ldrh	r3, [r7, #10]
 8015baa:	089b      	lsrs	r3, r3, #2
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	3305      	adds	r3, #5
 8015bb0:	b29b      	uxth	r3, r3
 8015bb2:	031b      	lsls	r3, r3, #12
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	b29b      	uxth	r3, r3
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7f9 f9e3 	bl	800ef8c <lwip_htons>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	461a      	mov	r2, r3
 8015bca:	693b      	ldr	r3, [r7, #16]
 8015bcc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015bce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7f9 f9db 	bl	800ef8c <lwip_htons>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	461a      	mov	r2, r3
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	2200      	movs	r2, #0
 8015be2:	741a      	strb	r2, [r3, #16]
 8015be4:	2200      	movs	r2, #0
 8015be6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	2200      	movs	r2, #0
 8015bec:	749a      	strb	r2, [r3, #18]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015bf2:	697b      	ldr	r3, [r7, #20]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3718      	adds	r7, #24
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	0801bf10 	.word	0x0801bf10
 8015c00:	0801c5e8 	.word	0x0801c5e8
 8015c04:	0801bf64 	.word	0x0801bf64

08015c08 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015c08:	b5b0      	push	{r4, r5, r7, lr}
 8015c0a:	b08a      	sub	sp, #40	@ 0x28
 8015c0c:	af04      	add	r7, sp, #16
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	607b      	str	r3, [r7, #4]
 8015c12:	460b      	mov	r3, r1
 8015c14:	817b      	strh	r3, [r7, #10]
 8015c16:	4613      	mov	r3, r2
 8015c18:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d106      	bne.n	8015c2e <tcp_output_alloc_header+0x26>
 8015c20:	4b15      	ldr	r3, [pc, #84]	@ (8015c78 <tcp_output_alloc_header+0x70>)
 8015c22:	f240 7242 	movw	r2, #1858	@ 0x742
 8015c26:	4915      	ldr	r1, [pc, #84]	@ (8015c7c <tcp_output_alloc_header+0x74>)
 8015c28:	4815      	ldr	r0, [pc, #84]	@ (8015c80 <tcp_output_alloc_header+0x78>)
 8015c2a:	f003 fddb 	bl	80197e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	8adb      	ldrh	r3, [r3, #22]
 8015c36:	68fa      	ldr	r2, [r7, #12]
 8015c38:	8b12      	ldrh	r2, [r2, #24]
 8015c3a:	68f9      	ldr	r1, [r7, #12]
 8015c3c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015c3e:	893d      	ldrh	r5, [r7, #8]
 8015c40:	897c      	ldrh	r4, [r7, #10]
 8015c42:	9103      	str	r1, [sp, #12]
 8015c44:	2110      	movs	r1, #16
 8015c46:	9102      	str	r1, [sp, #8]
 8015c48:	9201      	str	r2, [sp, #4]
 8015c4a:	9300      	str	r3, [sp, #0]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	462a      	mov	r2, r5
 8015c50:	4621      	mov	r1, r4
 8015c52:	f7ff ff67 	bl	8015b24 <tcp_output_alloc_header_common>
 8015c56:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d006      	beq.n	8015c6c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c62:	68fa      	ldr	r2, [r7, #12]
 8015c64:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015c66:	441a      	add	r2, r3
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015c6c:	697b      	ldr	r3, [r7, #20]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3718      	adds	r7, #24
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bdb0      	pop	{r4, r5, r7, pc}
 8015c76:	bf00      	nop
 8015c78:	0801bf10 	.word	0x0801bf10
 8015c7c:	0801c618 	.word	0x0801c618
 8015c80:	0801bf64 	.word	0x0801bf64

08015c84 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b088      	sub	sp, #32
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	4611      	mov	r1, r2
 8015c90:	461a      	mov	r2, r3
 8015c92:	460b      	mov	r3, r1
 8015c94:	71fb      	strb	r3, [r7, #7]
 8015c96:	4613      	mov	r3, r2
 8015c98:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d106      	bne.n	8015cb2 <tcp_output_fill_options+0x2e>
 8015ca4:	4b12      	ldr	r3, [pc, #72]	@ (8015cf0 <tcp_output_fill_options+0x6c>)
 8015ca6:	f240 7256 	movw	r2, #1878	@ 0x756
 8015caa:	4912      	ldr	r1, [pc, #72]	@ (8015cf4 <tcp_output_fill_options+0x70>)
 8015cac:	4812      	ldr	r0, [pc, #72]	@ (8015cf8 <tcp_output_fill_options+0x74>)
 8015cae:	f003 fd99 	bl	80197e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015cb8:	69bb      	ldr	r3, [r7, #24]
 8015cba:	3314      	adds	r3, #20
 8015cbc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015cbe:	8bfb      	ldrh	r3, [r7, #30]
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	79fb      	ldrb	r3, [r7, #7]
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	f003 0304 	and.w	r3, r3, #4
 8015ccc:	4413      	add	r3, r2
 8015cce:	3314      	adds	r3, #20
 8015cd0:	69ba      	ldr	r2, [r7, #24]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	697a      	ldr	r2, [r7, #20]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d006      	beq.n	8015ce8 <tcp_output_fill_options+0x64>
 8015cda:	4b05      	ldr	r3, [pc, #20]	@ (8015cf0 <tcp_output_fill_options+0x6c>)
 8015cdc:	f240 7275 	movw	r2, #1909	@ 0x775
 8015ce0:	4906      	ldr	r1, [pc, #24]	@ (8015cfc <tcp_output_fill_options+0x78>)
 8015ce2:	4805      	ldr	r0, [pc, #20]	@ (8015cf8 <tcp_output_fill_options+0x74>)
 8015ce4:	f003 fd7e 	bl	80197e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015ce8:	bf00      	nop
 8015cea:	3720      	adds	r7, #32
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801bf10 	.word	0x0801bf10
 8015cf4:	0801c640 	.word	0x0801c640
 8015cf8:	0801bf64 	.word	0x0801bf64
 8015cfc:	0801c538 	.word	0x0801c538

08015d00 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b08a      	sub	sp, #40	@ 0x28
 8015d04:	af04      	add	r7, sp, #16
 8015d06:	60f8      	str	r0, [r7, #12]
 8015d08:	60b9      	str	r1, [r7, #8]
 8015d0a:	607a      	str	r2, [r7, #4]
 8015d0c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d106      	bne.n	8015d22 <tcp_output_control_segment+0x22>
 8015d14:	4b1c      	ldr	r3, [pc, #112]	@ (8015d88 <tcp_output_control_segment+0x88>)
 8015d16:	f240 7287 	movw	r2, #1927	@ 0x787
 8015d1a:	491c      	ldr	r1, [pc, #112]	@ (8015d8c <tcp_output_control_segment+0x8c>)
 8015d1c:	481c      	ldr	r0, [pc, #112]	@ (8015d90 <tcp_output_control_segment+0x90>)
 8015d1e:	f003 fd61 	bl	80197e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015d22:	683a      	ldr	r2, [r7, #0]
 8015d24:	6879      	ldr	r1, [r7, #4]
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f7fe ff42 	bl	8014bb0 <tcp_route>
 8015d2c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d102      	bne.n	8015d3a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015d34:	23fc      	movs	r3, #252	@ 0xfc
 8015d36:	75fb      	strb	r3, [r7, #23]
 8015d38:	e01c      	b.n	8015d74 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d006      	beq.n	8015d4e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	7adb      	ldrb	r3, [r3, #11]
 8015d44:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	7a9b      	ldrb	r3, [r3, #10]
 8015d4a:	757b      	strb	r3, [r7, #21]
 8015d4c:	e003      	b.n	8015d56 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015d4e:	23ff      	movs	r3, #255	@ 0xff
 8015d50:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015d52:	2300      	movs	r3, #0
 8015d54:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015d56:	7dba      	ldrb	r2, [r7, #22]
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	9302      	str	r3, [sp, #8]
 8015d5c:	2306      	movs	r3, #6
 8015d5e:	9301      	str	r3, [sp, #4]
 8015d60:	7d7b      	ldrb	r3, [r7, #21]
 8015d62:	9300      	str	r3, [sp, #0]
 8015d64:	4613      	mov	r3, r2
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	6879      	ldr	r1, [r7, #4]
 8015d6a:	68b8      	ldr	r0, [r7, #8]
 8015d6c:	f002 faf6 	bl	801835c <ip4_output_if>
 8015d70:	4603      	mov	r3, r0
 8015d72:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015d74:	68b8      	ldr	r0, [r7, #8]
 8015d76:	f7fa fdc7 	bl	8010908 <pbuf_free>
  return err;
 8015d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3718      	adds	r7, #24
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	0801bf10 	.word	0x0801bf10
 8015d8c:	0801c668 	.word	0x0801c668
 8015d90:	0801bf64 	.word	0x0801bf64

08015d94 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015d94:	b590      	push	{r4, r7, lr}
 8015d96:	b08b      	sub	sp, #44	@ 0x2c
 8015d98:	af04      	add	r7, sp, #16
 8015d9a:	60f8      	str	r0, [r7, #12]
 8015d9c:	60b9      	str	r1, [r7, #8]
 8015d9e:	607a      	str	r2, [r7, #4]
 8015da0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d106      	bne.n	8015db6 <tcp_rst+0x22>
 8015da8:	4b1f      	ldr	r3, [pc, #124]	@ (8015e28 <tcp_rst+0x94>)
 8015daa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015dae:	491f      	ldr	r1, [pc, #124]	@ (8015e2c <tcp_rst+0x98>)
 8015db0:	481f      	ldr	r0, [pc, #124]	@ (8015e30 <tcp_rst+0x9c>)
 8015db2:	f003 fd17 	bl	80197e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d106      	bne.n	8015dca <tcp_rst+0x36>
 8015dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8015e28 <tcp_rst+0x94>)
 8015dbe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015dc2:	491c      	ldr	r1, [pc, #112]	@ (8015e34 <tcp_rst+0xa0>)
 8015dc4:	481a      	ldr	r0, [pc, #104]	@ (8015e30 <tcp_rst+0x9c>)
 8015dc6:	f003 fd0d 	bl	80197e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015dca:	2300      	movs	r3, #0
 8015dcc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015dce:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8015dd2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015dd4:	7dfb      	ldrb	r3, [r7, #23]
 8015dd6:	b29c      	uxth	r4, r3
 8015dd8:	68b8      	ldr	r0, [r7, #8]
 8015dda:	f7f9 f8ec 	bl	800efb6 <lwip_htonl>
 8015dde:	4602      	mov	r2, r0
 8015de0:	8abb      	ldrh	r3, [r7, #20]
 8015de2:	9303      	str	r3, [sp, #12]
 8015de4:	2314      	movs	r3, #20
 8015de6:	9302      	str	r3, [sp, #8]
 8015de8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015dea:	9301      	str	r3, [sp, #4]
 8015dec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015dee:	9300      	str	r3, [sp, #0]
 8015df0:	4613      	mov	r3, r2
 8015df2:	2200      	movs	r2, #0
 8015df4:	4621      	mov	r1, r4
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7ff fe94 	bl	8015b24 <tcp_output_alloc_header_common>
 8015dfc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d00c      	beq.n	8015e1e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	2200      	movs	r2, #0
 8015e08:	6939      	ldr	r1, [r7, #16]
 8015e0a:	68f8      	ldr	r0, [r7, #12]
 8015e0c:	f7ff ff3a 	bl	8015c84 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e12:	683a      	ldr	r2, [r7, #0]
 8015e14:	6939      	ldr	r1, [r7, #16]
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7ff ff72 	bl	8015d00 <tcp_output_control_segment>
 8015e1c:	e000      	b.n	8015e20 <tcp_rst+0x8c>
    return;
 8015e1e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015e20:	371c      	adds	r7, #28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd90      	pop	{r4, r7, pc}
 8015e26:	bf00      	nop
 8015e28:	0801bf10 	.word	0x0801bf10
 8015e2c:	0801c694 	.word	0x0801c694
 8015e30:	0801bf64 	.word	0x0801bf64
 8015e34:	0801c6b0 	.word	0x0801c6b0

08015e38 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015e38:	b590      	push	{r4, r7, lr}
 8015e3a:	b087      	sub	sp, #28
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015e40:	2300      	movs	r3, #0
 8015e42:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d106      	bne.n	8015e5c <tcp_send_empty_ack+0x24>
 8015e4e:	4b28      	ldr	r3, [pc, #160]	@ (8015ef0 <tcp_send_empty_ack+0xb8>)
 8015e50:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015e54:	4927      	ldr	r1, [pc, #156]	@ (8015ef4 <tcp_send_empty_ack+0xbc>)
 8015e56:	4828      	ldr	r0, [pc, #160]	@ (8015ef8 <tcp_send_empty_ack+0xc0>)
 8015e58:	f003 fcc4 	bl	80197e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015e5c:	7dfb      	ldrb	r3, [r7, #23]
 8015e5e:	009b      	lsls	r3, r3, #2
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	f003 0304 	and.w	r3, r3, #4
 8015e66:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015e68:	7d7b      	ldrb	r3, [r7, #21]
 8015e6a:	b29c      	uxth	r4, r3
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7f9 f8a0 	bl	800efb6 <lwip_htonl>
 8015e76:	4603      	mov	r3, r0
 8015e78:	2200      	movs	r2, #0
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f7ff fec3 	bl	8015c08 <tcp_output_alloc_header>
 8015e82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d109      	bne.n	8015e9e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	8b5b      	ldrh	r3, [r3, #26]
 8015e8e:	f043 0303 	orr.w	r3, r3, #3
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015e98:	f06f 0301 	mvn.w	r3, #1
 8015e9c:	e023      	b.n	8015ee6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015e9e:	7dbb      	ldrb	r3, [r7, #22]
 8015ea0:	7dfa      	ldrb	r2, [r7, #23]
 8015ea2:	6939      	ldr	r1, [r7, #16]
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f7ff feed 	bl	8015c84 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	3304      	adds	r3, #4
 8015eb0:	6939      	ldr	r1, [r7, #16]
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7ff ff24 	bl	8015d00 <tcp_output_control_segment>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d007      	beq.n	8015ed4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	8b5b      	ldrh	r3, [r3, #26]
 8015ec8:	f043 0303 	orr.w	r3, r3, #3
 8015ecc:	b29a      	uxth	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	835a      	strh	r2, [r3, #26]
 8015ed2:	e006      	b.n	8015ee2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	8b5b      	ldrh	r3, [r3, #26]
 8015ed8:	f023 0303 	bic.w	r3, r3, #3
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	371c      	adds	r7, #28
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd90      	pop	{r4, r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	0801bf10 	.word	0x0801bf10
 8015ef4:	0801c6cc 	.word	0x0801c6cc
 8015ef8:	0801bf64 	.word	0x0801bf64

08015efc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015efc:	b590      	push	{r4, r7, lr}
 8015efe:	b087      	sub	sp, #28
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f04:	2300      	movs	r3, #0
 8015f06:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d106      	bne.n	8015f1c <tcp_keepalive+0x20>
 8015f0e:	4b18      	ldr	r3, [pc, #96]	@ (8015f70 <tcp_keepalive+0x74>)
 8015f10:	f640 0224 	movw	r2, #2084	@ 0x824
 8015f14:	4917      	ldr	r1, [pc, #92]	@ (8015f74 <tcp_keepalive+0x78>)
 8015f16:	4818      	ldr	r0, [pc, #96]	@ (8015f78 <tcp_keepalive+0x7c>)
 8015f18:	f003 fc64 	bl	80197e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015f1c:	7dfb      	ldrb	r3, [r7, #23]
 8015f1e:	b29c      	uxth	r4, r3
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015f24:	3b01      	subs	r3, #1
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f9 f845 	bl	800efb6 <lwip_htonl>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	2200      	movs	r2, #0
 8015f30:	4621      	mov	r1, r4
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff fe68 	bl	8015c08 <tcp_output_alloc_header>
 8015f38:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d102      	bne.n	8015f46 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f44:	e010      	b.n	8015f68 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015f46:	7dfb      	ldrb	r3, [r7, #23]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	6939      	ldr	r1, [r7, #16]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f7ff fe99 	bl	8015c84 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	3304      	adds	r3, #4
 8015f58:	6939      	ldr	r1, [r7, #16]
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7ff fed0 	bl	8015d00 <tcp_output_control_segment>
 8015f60:	4603      	mov	r3, r0
 8015f62:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	371c      	adds	r7, #28
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd90      	pop	{r4, r7, pc}
 8015f70:	0801bf10 	.word	0x0801bf10
 8015f74:	0801c6ec 	.word	0x0801c6ec
 8015f78:	0801bf64 	.word	0x0801bf64

08015f7c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015f7c:	b590      	push	{r4, r7, lr}
 8015f7e:	b08b      	sub	sp, #44	@ 0x2c
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015f84:	2300      	movs	r3, #0
 8015f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d106      	bne.n	8015f9e <tcp_zero_window_probe+0x22>
 8015f90:	4b4c      	ldr	r3, [pc, #304]	@ (80160c4 <tcp_zero_window_probe+0x148>)
 8015f92:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015f96:	494c      	ldr	r1, [pc, #304]	@ (80160c8 <tcp_zero_window_probe+0x14c>)
 8015f98:	484c      	ldr	r0, [pc, #304]	@ (80160cc <tcp_zero_window_probe+0x150>)
 8015f9a:	f003 fc23 	bl	80197e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fa2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d101      	bne.n	8015fae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015faa:	2300      	movs	r3, #0
 8015fac:	e086      	b.n	80160bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015fb4:	2bff      	cmp	r3, #255	@ 0xff
 8015fb6:	d007      	beq.n	8015fc8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	b2da      	uxtb	r2, r3
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015fc8:	6a3b      	ldr	r3, [r7, #32]
 8015fca:	68db      	ldr	r3, [r3, #12]
 8015fcc:	899b      	ldrh	r3, [r3, #12]
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f8 ffdb 	bl	800ef8c <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	f003 0301 	and.w	r3, r3, #1
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d005      	beq.n	8015fee <tcp_zero_window_probe+0x72>
 8015fe2:	6a3b      	ldr	r3, [r7, #32]
 8015fe4:	891b      	ldrh	r3, [r3, #8]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d101      	bne.n	8015fee <tcp_zero_window_probe+0x72>
 8015fea:	2301      	movs	r3, #1
 8015fec:	e000      	b.n	8015ff0 <tcp_zero_window_probe+0x74>
 8015fee:	2300      	movs	r3, #0
 8015ff0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015ff2:	7ffb      	ldrb	r3, [r7, #31]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	bf0c      	ite	eq
 8015ff8:	2301      	moveq	r3, #1
 8015ffa:	2300      	movne	r3, #0
 8015ffc:	b2db      	uxtb	r3, r3
 8015ffe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016004:	b299      	uxth	r1, r3
 8016006:	6a3b      	ldr	r3, [r7, #32]
 8016008:	68db      	ldr	r3, [r3, #12]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	8bba      	ldrh	r2, [r7, #28]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff fdfa 	bl	8015c08 <tcp_output_alloc_header>
 8016014:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d102      	bne.n	8016022 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801601c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016020:	e04c      	b.n	80160bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016022:	69bb      	ldr	r3, [r7, #24]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016028:	7ffb      	ldrb	r3, [r7, #31]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d011      	beq.n	8016052 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	899b      	ldrh	r3, [r3, #12]
 8016032:	b29b      	uxth	r3, r3
 8016034:	b21b      	sxth	r3, r3
 8016036:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801603a:	b21c      	sxth	r4, r3
 801603c:	2011      	movs	r0, #17
 801603e:	f7f8 ffa5 	bl	800ef8c <lwip_htons>
 8016042:	4603      	mov	r3, r0
 8016044:	b21b      	sxth	r3, r3
 8016046:	4323      	orrs	r3, r4
 8016048:	b21b      	sxth	r3, r3
 801604a:	b29a      	uxth	r2, r3
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	819a      	strh	r2, [r3, #12]
 8016050:	e010      	b.n	8016074 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	3314      	adds	r3, #20
 8016058:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801605a:	6a3b      	ldr	r3, [r7, #32]
 801605c:	6858      	ldr	r0, [r3, #4]
 801605e:	6a3b      	ldr	r3, [r7, #32]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	891a      	ldrh	r2, [r3, #8]
 8016064:	6a3b      	ldr	r3, [r7, #32]
 8016066:	891b      	ldrh	r3, [r3, #8]
 8016068:	1ad3      	subs	r3, r2, r3
 801606a:	b29b      	uxth	r3, r3
 801606c:	2201      	movs	r2, #1
 801606e:	6939      	ldr	r1, [r7, #16]
 8016070:	f7fa fe50 	bl	8010d14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016074:	6a3b      	ldr	r3, [r7, #32]
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	4618      	mov	r0, r3
 801607c:	f7f8 ff9b 	bl	800efb6 <lwip_htonl>
 8016080:	4603      	mov	r3, r0
 8016082:	3301      	adds	r3, #1
 8016084:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	1ad3      	subs	r3, r2, r3
 801608e:	2b00      	cmp	r3, #0
 8016090:	da02      	bge.n	8016098 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	68fa      	ldr	r2, [r7, #12]
 8016096:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801609c:	2200      	movs	r2, #0
 801609e:	69b9      	ldr	r1, [r7, #24]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ff fdef 	bl	8015c84 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	3304      	adds	r3, #4
 80160ac:	69b9      	ldr	r1, [r7, #24]
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f7ff fe26 	bl	8015d00 <tcp_output_control_segment>
 80160b4:	4603      	mov	r3, r0
 80160b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80160b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80160bc:	4618      	mov	r0, r3
 80160be:	372c      	adds	r7, #44	@ 0x2c
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd90      	pop	{r4, r7, pc}
 80160c4:	0801bf10 	.word	0x0801bf10
 80160c8:	0801c708 	.word	0x0801c708
 80160cc:	0801bf64 	.word	0x0801bf64

080160d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80160d8:	f7fa ff0a 	bl	8010ef0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80160dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016108 <tcpip_tcp_timer+0x38>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d103      	bne.n	80160ec <tcpip_tcp_timer+0x1c>
 80160e4:	4b09      	ldr	r3, [pc, #36]	@ (801610c <tcpip_tcp_timer+0x3c>)
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d005      	beq.n	80160f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80160ec:	2200      	movs	r2, #0
 80160ee:	4908      	ldr	r1, [pc, #32]	@ (8016110 <tcpip_tcp_timer+0x40>)
 80160f0:	20fa      	movs	r0, #250	@ 0xfa
 80160f2:	f000 f8f3 	bl	80162dc <sys_timeout>
 80160f6:	e003      	b.n	8016100 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80160f8:	4b06      	ldr	r3, [pc, #24]	@ (8016114 <tcpip_tcp_timer+0x44>)
 80160fa:	2200      	movs	r2, #0
 80160fc:	601a      	str	r2, [r3, #0]
  }
}
 80160fe:	bf00      	nop
 8016100:	bf00      	nop
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	240105f4 	.word	0x240105f4
 801610c:	240105f8 	.word	0x240105f8
 8016110:	080160d1 	.word	0x080160d1
 8016114:	24010640 	.word	0x24010640

08016118 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801611c:	4b0a      	ldr	r3, [pc, #40]	@ (8016148 <tcp_timer_needed+0x30>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d10f      	bne.n	8016144 <tcp_timer_needed+0x2c>
 8016124:	4b09      	ldr	r3, [pc, #36]	@ (801614c <tcp_timer_needed+0x34>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d103      	bne.n	8016134 <tcp_timer_needed+0x1c>
 801612c:	4b08      	ldr	r3, [pc, #32]	@ (8016150 <tcp_timer_needed+0x38>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d007      	beq.n	8016144 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016134:	4b04      	ldr	r3, [pc, #16]	@ (8016148 <tcp_timer_needed+0x30>)
 8016136:	2201      	movs	r2, #1
 8016138:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801613a:	2200      	movs	r2, #0
 801613c:	4905      	ldr	r1, [pc, #20]	@ (8016154 <tcp_timer_needed+0x3c>)
 801613e:	20fa      	movs	r0, #250	@ 0xfa
 8016140:	f000 f8cc 	bl	80162dc <sys_timeout>
  }
}
 8016144:	bf00      	nop
 8016146:	bd80      	pop	{r7, pc}
 8016148:	24010640 	.word	0x24010640
 801614c:	240105f4 	.word	0x240105f4
 8016150:	240105f8 	.word	0x240105f8
 8016154:	080160d1 	.word	0x080160d1

08016158 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b086      	sub	sp, #24
 801615c:	af00      	add	r7, sp, #0
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016164:	200a      	movs	r0, #10
 8016166:	f7f9 fcb1 	bl	800facc <memp_malloc>
 801616a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d109      	bne.n	8016186 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d151      	bne.n	801621c <sys_timeout_abs+0xc4>
 8016178:	4b2a      	ldr	r3, [pc, #168]	@ (8016224 <sys_timeout_abs+0xcc>)
 801617a:	22be      	movs	r2, #190	@ 0xbe
 801617c:	492a      	ldr	r1, [pc, #168]	@ (8016228 <sys_timeout_abs+0xd0>)
 801617e:	482b      	ldr	r0, [pc, #172]	@ (801622c <sys_timeout_abs+0xd4>)
 8016180:	f003 fb30 	bl	80197e4 <iprintf>
    return;
 8016184:	e04a      	b.n	801621c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	2200      	movs	r2, #0
 801618a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801618c:	693b      	ldr	r3, [r7, #16]
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801619e:	4b24      	ldr	r3, [pc, #144]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d103      	bne.n	80161ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80161a6:	4a22      	ldr	r2, [pc, #136]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	6013      	str	r3, [r2, #0]
    return;
 80161ac:	e037      	b.n	801621e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	685a      	ldr	r2, [r3, #4]
 80161b2:	4b1f      	ldr	r3, [pc, #124]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	0fdb      	lsrs	r3, r3, #31
 80161bc:	f003 0301 	and.w	r3, r3, #1
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d007      	beq.n	80161d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80161c6:	4b1a      	ldr	r3, [pc, #104]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80161ce:	4a18      	ldr	r2, [pc, #96]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	6013      	str	r3, [r2, #0]
 80161d4:	e023      	b.n	801621e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80161d6:	4b16      	ldr	r3, [pc, #88]	@ (8016230 <sys_timeout_abs+0xd8>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	617b      	str	r3, [r7, #20]
 80161dc:	e01a      	b.n	8016214 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00b      	beq.n	80161fe <sys_timeout_abs+0xa6>
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	685a      	ldr	r2, [r3, #4]
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	1ad3      	subs	r3, r2, r3
 80161f2:	0fdb      	lsrs	r3, r3, #31
 80161f4:	f003 0301 	and.w	r3, r3, #1
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d007      	beq.n	801620e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016206:	697b      	ldr	r3, [r7, #20]
 8016208:	693a      	ldr	r2, [r7, #16]
 801620a:	601a      	str	r2, [r3, #0]
        break;
 801620c:	e007      	b.n	801621e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	617b      	str	r3, [r7, #20]
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d1e1      	bne.n	80161de <sys_timeout_abs+0x86>
 801621a:	e000      	b.n	801621e <sys_timeout_abs+0xc6>
    return;
 801621c:	bf00      	nop
      }
    }
  }
}
 801621e:	3718      	adds	r7, #24
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}
 8016224:	0801c72c 	.word	0x0801c72c
 8016228:	0801c760 	.word	0x0801c760
 801622c:	0801c7a0 	.word	0x0801c7a0
 8016230:	24010638 	.word	0x24010638

08016234 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016240:	697b      	ldr	r3, [r7, #20]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	4798      	blx	r3

  now = sys_now();
 8016246:	f7f5 fa53 	bl	800b6f0 <sys_now>
 801624a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801624c:	697b      	ldr	r3, [r7, #20]
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	4b0f      	ldr	r3, [pc, #60]	@ (8016290 <lwip_cyclic_timer+0x5c>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	4413      	add	r3, r2
 8016256:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016258:	68fa      	ldr	r2, [r7, #12]
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	1ad3      	subs	r3, r2, r3
 801625e:	0fdb      	lsrs	r3, r3, #31
 8016260:	f003 0301 	and.w	r3, r3, #1
 8016264:	b2db      	uxtb	r3, r3
 8016266:	2b00      	cmp	r3, #0
 8016268:	d009      	beq.n	801627e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	681a      	ldr	r2, [r3, #0]
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	4413      	add	r3, r2
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	4907      	ldr	r1, [pc, #28]	@ (8016294 <lwip_cyclic_timer+0x60>)
 8016276:	4618      	mov	r0, r3
 8016278:	f7ff ff6e 	bl	8016158 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801627c:	e004      	b.n	8016288 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	4904      	ldr	r1, [pc, #16]	@ (8016294 <lwip_cyclic_timer+0x60>)
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	f7ff ff68 	bl	8016158 <sys_timeout_abs>
}
 8016288:	bf00      	nop
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	2401063c 	.word	0x2401063c
 8016294:	08016235 	.word	0x08016235

08016298 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801629e:	2301      	movs	r3, #1
 80162a0:	607b      	str	r3, [r7, #4]
 80162a2:	e00e      	b.n	80162c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80162a4:	4a0b      	ldr	r2, [pc, #44]	@ (80162d4 <sys_timeouts_init+0x3c>)
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	00db      	lsls	r3, r3, #3
 80162b0:	4a08      	ldr	r2, [pc, #32]	@ (80162d4 <sys_timeouts_init+0x3c>)
 80162b2:	4413      	add	r3, r2
 80162b4:	461a      	mov	r2, r3
 80162b6:	4908      	ldr	r1, [pc, #32]	@ (80162d8 <sys_timeouts_init+0x40>)
 80162b8:	f000 f810 	bl	80162dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	3301      	adds	r3, #1
 80162c0:	607b      	str	r3, [r7, #4]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2b02      	cmp	r3, #2
 80162c6:	d9ed      	bls.n	80162a4 <sys_timeouts_init+0xc>
  }
}
 80162c8:	bf00      	nop
 80162ca:	bf00      	nop
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	0801d358 	.word	0x0801d358
 80162d8:	08016235 	.word	0x08016235

080162dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b086      	sub	sp, #24
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	60f8      	str	r0, [r7, #12]
 80162e4:	60b9      	str	r1, [r7, #8]
 80162e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80162ee:	d306      	bcc.n	80162fe <sys_timeout+0x22>
 80162f0:	4b0a      	ldr	r3, [pc, #40]	@ (801631c <sys_timeout+0x40>)
 80162f2:	f240 1229 	movw	r2, #297	@ 0x129
 80162f6:	490a      	ldr	r1, [pc, #40]	@ (8016320 <sys_timeout+0x44>)
 80162f8:	480a      	ldr	r0, [pc, #40]	@ (8016324 <sys_timeout+0x48>)
 80162fa:	f003 fa73 	bl	80197e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80162fe:	f7f5 f9f7 	bl	800b6f0 <sys_now>
 8016302:	4602      	mov	r2, r0
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	4413      	add	r3, r2
 8016308:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	68b9      	ldr	r1, [r7, #8]
 801630e:	6978      	ldr	r0, [r7, #20]
 8016310:	f7ff ff22 	bl	8016158 <sys_timeout_abs>
#endif
}
 8016314:	bf00      	nop
 8016316:	3718      	adds	r7, #24
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	0801c72c 	.word	0x0801c72c
 8016320:	0801c7c8 	.word	0x0801c7c8
 8016324:	0801c7a0 	.word	0x0801c7a0

08016328 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801632e:	f7f5 f9df 	bl	800b6f0 <sys_now>
 8016332:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016334:	4b17      	ldr	r3, [pc, #92]	@ (8016394 <sys_check_timeouts+0x6c>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d022      	beq.n	8016386 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	685b      	ldr	r3, [r3, #4]
 8016344:	68fa      	ldr	r2, [r7, #12]
 8016346:	1ad3      	subs	r3, r2, r3
 8016348:	0fdb      	lsrs	r3, r3, #31
 801634a:	f003 0301 	and.w	r3, r3, #1
 801634e:	b2db      	uxtb	r3, r3
 8016350:	2b00      	cmp	r3, #0
 8016352:	d11a      	bne.n	801638a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4a0e      	ldr	r2, [pc, #56]	@ (8016394 <sys_check_timeouts+0x6c>)
 801635a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	689b      	ldr	r3, [r3, #8]
 8016360:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	4a0a      	ldr	r2, [pc, #40]	@ (8016398 <sys_check_timeouts+0x70>)
 801636e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016370:	68b9      	ldr	r1, [r7, #8]
 8016372:	200a      	movs	r0, #10
 8016374:	f7f9 fc20 	bl	800fbb8 <memp_free>
    if (handler != NULL) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d0da      	beq.n	8016334 <sys_check_timeouts+0xc>
      handler(arg);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6838      	ldr	r0, [r7, #0]
 8016382:	4798      	blx	r3
  do {
 8016384:	e7d6      	b.n	8016334 <sys_check_timeouts+0xc>
      return;
 8016386:	bf00      	nop
 8016388:	e000      	b.n	801638c <sys_check_timeouts+0x64>
      return;
 801638a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801638c:	3710      	adds	r7, #16
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	24010638 	.word	0x24010638
 8016398:	2401063c 	.word	0x2401063c

0801639c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80163a2:	4b16      	ldr	r3, [pc, #88]	@ (80163fc <sys_timeouts_sleeptime+0x60>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d102      	bne.n	80163b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80163aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80163ae:	e020      	b.n	80163f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80163b0:	f7f5 f99e 	bl	800b6f0 <sys_now>
 80163b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80163b6:	4b11      	ldr	r3, [pc, #68]	@ (80163fc <sys_timeouts_sleeptime+0x60>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	685a      	ldr	r2, [r3, #4]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	1ad3      	subs	r3, r2, r3
 80163c0:	0fdb      	lsrs	r3, r3, #31
 80163c2:	f003 0301 	and.w	r3, r3, #1
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d001      	beq.n	80163d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80163cc:	2300      	movs	r3, #0
 80163ce:	e010      	b.n	80163f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80163d0:	4b0a      	ldr	r3, [pc, #40]	@ (80163fc <sys_timeouts_sleeptime+0x60>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	685a      	ldr	r2, [r3, #4]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	1ad3      	subs	r3, r2, r3
 80163da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	da06      	bge.n	80163f0 <sys_timeouts_sleeptime+0x54>
 80163e2:	4b07      	ldr	r3, [pc, #28]	@ (8016400 <sys_timeouts_sleeptime+0x64>)
 80163e4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80163e8:	4906      	ldr	r1, [pc, #24]	@ (8016404 <sys_timeouts_sleeptime+0x68>)
 80163ea:	4807      	ldr	r0, [pc, #28]	@ (8016408 <sys_timeouts_sleeptime+0x6c>)
 80163ec:	f003 f9fa 	bl	80197e4 <iprintf>
    return ret;
 80163f0:	683b      	ldr	r3, [r7, #0]
  }
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3708      	adds	r7, #8
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	24010638 	.word	0x24010638
 8016400:	0801c72c 	.word	0x0801c72c
 8016404:	0801c800 	.word	0x0801c800
 8016408:	0801c7a0 	.word	0x0801c7a0

0801640c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016410:	f003 f8e8 	bl	80195e4 <rand>
 8016414:	4603      	mov	r3, r0
 8016416:	b29b      	uxth	r3, r3
 8016418:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801641c:	b29b      	uxth	r3, r3
 801641e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8016422:	b29a      	uxth	r2, r3
 8016424:	4b01      	ldr	r3, [pc, #4]	@ (801642c <udp_init+0x20>)
 8016426:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016428:	bf00      	nop
 801642a:	bd80      	pop	{r7, pc}
 801642c:	24004a00 	.word	0x24004a00

08016430 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016430:	b480      	push	{r7}
 8016432:	b083      	sub	sp, #12
 8016434:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801643a:	4b17      	ldr	r3, [pc, #92]	@ (8016498 <udp_new_port+0x68>)
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	1c5a      	adds	r2, r3, #1
 8016440:	b291      	uxth	r1, r2
 8016442:	4a15      	ldr	r2, [pc, #84]	@ (8016498 <udp_new_port+0x68>)
 8016444:	8011      	strh	r1, [r2, #0]
 8016446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801644a:	4293      	cmp	r3, r2
 801644c:	d103      	bne.n	8016456 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801644e:	4b12      	ldr	r3, [pc, #72]	@ (8016498 <udp_new_port+0x68>)
 8016450:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016454:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016456:	4b11      	ldr	r3, [pc, #68]	@ (801649c <udp_new_port+0x6c>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	603b      	str	r3, [r7, #0]
 801645c:	e011      	b.n	8016482 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	8a5a      	ldrh	r2, [r3, #18]
 8016462:	4b0d      	ldr	r3, [pc, #52]	@ (8016498 <udp_new_port+0x68>)
 8016464:	881b      	ldrh	r3, [r3, #0]
 8016466:	429a      	cmp	r2, r3
 8016468:	d108      	bne.n	801647c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801646a:	88fb      	ldrh	r3, [r7, #6]
 801646c:	3301      	adds	r3, #1
 801646e:	80fb      	strh	r3, [r7, #6]
 8016470:	88fb      	ldrh	r3, [r7, #6]
 8016472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016476:	d3e0      	bcc.n	801643a <udp_new_port+0xa>
        return 0;
 8016478:	2300      	movs	r3, #0
 801647a:	e007      	b.n	801648c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	603b      	str	r3, [r7, #0]
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d1ea      	bne.n	801645e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016488:	4b03      	ldr	r3, [pc, #12]	@ (8016498 <udp_new_port+0x68>)
 801648a:	881b      	ldrh	r3, [r3, #0]
}
 801648c:	4618      	mov	r0, r3
 801648e:	370c      	adds	r7, #12
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr
 8016498:	24004a00 	.word	0x24004a00
 801649c:	24010644 	.word	0x24010644

080164a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	60f8      	str	r0, [r7, #12]
 80164a8:	60b9      	str	r1, [r7, #8]
 80164aa:	4613      	mov	r3, r2
 80164ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d105      	bne.n	80164c0 <udp_input_local_match+0x20>
 80164b4:	4b27      	ldr	r3, [pc, #156]	@ (8016554 <udp_input_local_match+0xb4>)
 80164b6:	2287      	movs	r2, #135	@ 0x87
 80164b8:	4927      	ldr	r1, [pc, #156]	@ (8016558 <udp_input_local_match+0xb8>)
 80164ba:	4828      	ldr	r0, [pc, #160]	@ (801655c <udp_input_local_match+0xbc>)
 80164bc:	f003 f992 	bl	80197e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d105      	bne.n	80164d2 <udp_input_local_match+0x32>
 80164c6:	4b23      	ldr	r3, [pc, #140]	@ (8016554 <udp_input_local_match+0xb4>)
 80164c8:	2288      	movs	r2, #136	@ 0x88
 80164ca:	4925      	ldr	r1, [pc, #148]	@ (8016560 <udp_input_local_match+0xc0>)
 80164cc:	4823      	ldr	r0, [pc, #140]	@ (801655c <udp_input_local_match+0xbc>)
 80164ce:	f003 f989 	bl	80197e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	7a1b      	ldrb	r3, [r3, #8]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00b      	beq.n	80164f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	7a1a      	ldrb	r2, [r3, #8]
 80164de:	4b21      	ldr	r3, [pc, #132]	@ (8016564 <udp_input_local_match+0xc4>)
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164e6:	3301      	adds	r3, #1
 80164e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d001      	beq.n	80164f2 <udp_input_local_match+0x52>
    return 0;
 80164ee:	2300      	movs	r3, #0
 80164f0:	e02b      	b.n	801654a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80164f2:	79fb      	ldrb	r3, [r7, #7]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d018      	beq.n	801652a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d013      	beq.n	8016526 <udp_input_local_match+0x86>
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d00f      	beq.n	8016526 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016506:	4b17      	ldr	r3, [pc, #92]	@ (8016564 <udp_input_local_match+0xc4>)
 8016508:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801650a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801650e:	d00a      	beq.n	8016526 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681a      	ldr	r2, [r3, #0]
 8016514:	4b13      	ldr	r3, [pc, #76]	@ (8016564 <udp_input_local_match+0xc4>)
 8016516:	695b      	ldr	r3, [r3, #20]
 8016518:	405a      	eors	r2, r3
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	3308      	adds	r3, #8
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016522:	2b00      	cmp	r3, #0
 8016524:	d110      	bne.n	8016548 <udp_input_local_match+0xa8>
          return 1;
 8016526:	2301      	movs	r3, #1
 8016528:	e00f      	b.n	801654a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d009      	beq.n	8016544 <udp_input_local_match+0xa4>
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d005      	beq.n	8016544 <udp_input_local_match+0xa4>
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	4b09      	ldr	r3, [pc, #36]	@ (8016564 <udp_input_local_match+0xc4>)
 801653e:	695b      	ldr	r3, [r3, #20]
 8016540:	429a      	cmp	r2, r3
 8016542:	d101      	bne.n	8016548 <udp_input_local_match+0xa8>
        return 1;
 8016544:	2301      	movs	r3, #1
 8016546:	e000      	b.n	801654a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016548:	2300      	movs	r3, #0
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	0801c814 	.word	0x0801c814
 8016558:	0801c844 	.word	0x0801c844
 801655c:	0801c868 	.word	0x0801c868
 8016560:	0801c890 	.word	0x0801c890
 8016564:	24009b28 	.word	0x24009b28

08016568 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016568:	b590      	push	{r4, r7, lr}
 801656a:	b08d      	sub	sp, #52	@ 0x34
 801656c:	af02      	add	r7, sp, #8
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016572:	2300      	movs	r3, #0
 8016574:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d105      	bne.n	8016588 <udp_input+0x20>
 801657c:	4b7c      	ldr	r3, [pc, #496]	@ (8016770 <udp_input+0x208>)
 801657e:	22cf      	movs	r2, #207	@ 0xcf
 8016580:	497c      	ldr	r1, [pc, #496]	@ (8016774 <udp_input+0x20c>)
 8016582:	487d      	ldr	r0, [pc, #500]	@ (8016778 <udp_input+0x210>)
 8016584:	f003 f92e 	bl	80197e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d105      	bne.n	801659a <udp_input+0x32>
 801658e:	4b78      	ldr	r3, [pc, #480]	@ (8016770 <udp_input+0x208>)
 8016590:	22d0      	movs	r2, #208	@ 0xd0
 8016592:	497a      	ldr	r1, [pc, #488]	@ (801677c <udp_input+0x214>)
 8016594:	4878      	ldr	r0, [pc, #480]	@ (8016778 <udp_input+0x210>)
 8016596:	f003 f925 	bl	80197e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	895b      	ldrh	r3, [r3, #10]
 801659e:	2b07      	cmp	r3, #7
 80165a0:	d803      	bhi.n	80165aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f7fa f9b0 	bl	8010908 <pbuf_free>
    goto end;
 80165a8:	e0de      	b.n	8016768 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80165b0:	4b73      	ldr	r3, [pc, #460]	@ (8016780 <udp_input+0x218>)
 80165b2:	695b      	ldr	r3, [r3, #20]
 80165b4:	4a72      	ldr	r2, [pc, #456]	@ (8016780 <udp_input+0x218>)
 80165b6:	6812      	ldr	r2, [r2, #0]
 80165b8:	4611      	mov	r1, r2
 80165ba:	4618      	mov	r0, r3
 80165bc:	f001 ffa6 	bl	801850c <ip4_addr_isbroadcast_u32>
 80165c0:	4603      	mov	r3, r0
 80165c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f8 fcde 	bl	800ef8c <lwip_htons>
 80165d0:	4603      	mov	r3, r0
 80165d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	885b      	ldrh	r3, [r3, #2]
 80165d8:	b29b      	uxth	r3, r3
 80165da:	4618      	mov	r0, r3
 80165dc:	f7f8 fcd6 	bl	800ef8c <lwip_htons>
 80165e0:	4603      	mov	r3, r0
 80165e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80165e4:	2300      	movs	r3, #0
 80165e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80165e8:	2300      	movs	r3, #0
 80165ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80165ec:	2300      	movs	r3, #0
 80165ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80165f0:	4b64      	ldr	r3, [pc, #400]	@ (8016784 <udp_input+0x21c>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80165f6:	e054      	b.n	80166a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80165f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165fa:	8a5b      	ldrh	r3, [r3, #18]
 80165fc:	89fa      	ldrh	r2, [r7, #14]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d14a      	bne.n	8016698 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016602:	7cfb      	ldrb	r3, [r7, #19]
 8016604:	461a      	mov	r2, r3
 8016606:	6839      	ldr	r1, [r7, #0]
 8016608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801660a:	f7ff ff49 	bl	80164a0 <udp_input_local_match>
 801660e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016610:	2b00      	cmp	r3, #0
 8016612:	d041      	beq.n	8016698 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016616:	7c1b      	ldrb	r3, [r3, #16]
 8016618:	f003 0304 	and.w	r3, r3, #4
 801661c:	2b00      	cmp	r3, #0
 801661e:	d11d      	bne.n	801665c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d102      	bne.n	801662c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016628:	61fb      	str	r3, [r7, #28]
 801662a:	e017      	b.n	801665c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801662c:	7cfb      	ldrb	r3, [r7, #19]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d014      	beq.n	801665c <udp_input+0xf4>
 8016632:	4b53      	ldr	r3, [pc, #332]	@ (8016780 <udp_input+0x218>)
 8016634:	695b      	ldr	r3, [r3, #20]
 8016636:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801663a:	d10f      	bne.n	801665c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	681a      	ldr	r2, [r3, #0]
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	3304      	adds	r3, #4
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	429a      	cmp	r2, r3
 8016648:	d008      	beq.n	801665c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801664c:	681a      	ldr	r2, [r3, #0]
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	3304      	adds	r3, #4
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	429a      	cmp	r2, r3
 8016656:	d101      	bne.n	801665c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665e:	8a9b      	ldrh	r3, [r3, #20]
 8016660:	8a3a      	ldrh	r2, [r7, #16]
 8016662:	429a      	cmp	r2, r3
 8016664:	d118      	bne.n	8016698 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016668:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801666a:	2b00      	cmp	r3, #0
 801666c:	d005      	beq.n	801667a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016670:	685a      	ldr	r2, [r3, #4]
 8016672:	4b43      	ldr	r3, [pc, #268]	@ (8016780 <udp_input+0x218>)
 8016674:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016676:	429a      	cmp	r2, r3
 8016678:	d10e      	bne.n	8016698 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801667a:	6a3b      	ldr	r3, [r7, #32]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d014      	beq.n	80166aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016682:	68da      	ldr	r2, [r3, #12]
 8016684:	6a3b      	ldr	r3, [r7, #32]
 8016686:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016688:	4b3e      	ldr	r3, [pc, #248]	@ (8016784 <udp_input+0x21c>)
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016690:	4a3c      	ldr	r2, [pc, #240]	@ (8016784 <udp_input+0x21c>)
 8016692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016694:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016696:	e008      	b.n	80166aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8016698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80166a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d1a7      	bne.n	80165f8 <udp_input+0x90>
 80166a8:	e000      	b.n	80166ac <udp_input+0x144>
        break;
 80166aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80166ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d101      	bne.n	80166b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80166b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <udp_input+0x15a>
    for_us = 1;
 80166bc:	2301      	movs	r3, #1
 80166be:	76fb      	strb	r3, [r7, #27]
 80166c0:	e00a      	b.n	80166d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	3304      	adds	r3, #4
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	4b2d      	ldr	r3, [pc, #180]	@ (8016780 <udp_input+0x218>)
 80166ca:	695b      	ldr	r3, [r3, #20]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	bf0c      	ite	eq
 80166d0:	2301      	moveq	r3, #1
 80166d2:	2300      	movne	r3, #0
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80166d8:	7efb      	ldrb	r3, [r7, #27]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d041      	beq.n	8016762 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80166de:	2108      	movs	r1, #8
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f7fa f88b 	bl	80107fc <pbuf_remove_header>
 80166e6:	4603      	mov	r3, r0
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d00a      	beq.n	8016702 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80166ec:	4b20      	ldr	r3, [pc, #128]	@ (8016770 <udp_input+0x208>)
 80166ee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80166f2:	4925      	ldr	r1, [pc, #148]	@ (8016788 <udp_input+0x220>)
 80166f4:	4820      	ldr	r0, [pc, #128]	@ (8016778 <udp_input+0x210>)
 80166f6:	f003 f875 	bl	80197e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f7fa f904 	bl	8010908 <pbuf_free>
      goto end;
 8016700:	e032      	b.n	8016768 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016704:	2b00      	cmp	r3, #0
 8016706:	d012      	beq.n	801672e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801670a:	699b      	ldr	r3, [r3, #24]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00a      	beq.n	8016726 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016712:	699c      	ldr	r4, [r3, #24]
 8016714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016716:	69d8      	ldr	r0, [r3, #28]
 8016718:	8a3b      	ldrh	r3, [r7, #16]
 801671a:	9300      	str	r3, [sp, #0]
 801671c:	4b1b      	ldr	r3, [pc, #108]	@ (801678c <udp_input+0x224>)
 801671e:	687a      	ldr	r2, [r7, #4]
 8016720:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016722:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016724:	e021      	b.n	801676a <udp_input+0x202>
        pbuf_free(p);
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f7fa f8ee 	bl	8010908 <pbuf_free>
        goto end;
 801672c:	e01c      	b.n	8016768 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801672e:	7cfb      	ldrb	r3, [r7, #19]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d112      	bne.n	801675a <udp_input+0x1f2>
 8016734:	4b12      	ldr	r3, [pc, #72]	@ (8016780 <udp_input+0x218>)
 8016736:	695b      	ldr	r3, [r3, #20]
 8016738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801673c:	2be0      	cmp	r3, #224	@ 0xe0
 801673e:	d00c      	beq.n	801675a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016740:	4b0f      	ldr	r3, [pc, #60]	@ (8016780 <udp_input+0x218>)
 8016742:	899b      	ldrh	r3, [r3, #12]
 8016744:	3308      	adds	r3, #8
 8016746:	b29b      	uxth	r3, r3
 8016748:	b21b      	sxth	r3, r3
 801674a:	4619      	mov	r1, r3
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f7fa f8c8 	bl	80108e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016752:	2103      	movs	r1, #3
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f001 fbaf 	bl	8017eb8 <icmp_dest_unreach>
      pbuf_free(p);
 801675a:	6878      	ldr	r0, [r7, #4]
 801675c:	f7fa f8d4 	bl	8010908 <pbuf_free>
  return;
 8016760:	e003      	b.n	801676a <udp_input+0x202>
    pbuf_free(p);
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f7fa f8d0 	bl	8010908 <pbuf_free>
  return;
 8016768:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801676a:	372c      	adds	r7, #44	@ 0x2c
 801676c:	46bd      	mov	sp, r7
 801676e:	bd90      	pop	{r4, r7, pc}
 8016770:	0801c814 	.word	0x0801c814
 8016774:	0801c8b8 	.word	0x0801c8b8
 8016778:	0801c868 	.word	0x0801c868
 801677c:	0801c8d0 	.word	0x0801c8d0
 8016780:	24009b28 	.word	0x24009b28
 8016784:	24010644 	.word	0x24010644
 8016788:	0801c8ec 	.word	0x0801c8ec
 801678c:	24009b38 	.word	0x24009b38

08016790 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d109      	bne.n	80167b4 <udp_send+0x24>
 80167a0:	4b11      	ldr	r3, [pc, #68]	@ (80167e8 <udp_send+0x58>)
 80167a2:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80167a6:	4911      	ldr	r1, [pc, #68]	@ (80167ec <udp_send+0x5c>)
 80167a8:	4811      	ldr	r0, [pc, #68]	@ (80167f0 <udp_send+0x60>)
 80167aa:	f003 f81b 	bl	80197e4 <iprintf>
 80167ae:	f06f 030f 	mvn.w	r3, #15
 80167b2:	e015      	b.n	80167e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d109      	bne.n	80167ce <udp_send+0x3e>
 80167ba:	4b0b      	ldr	r3, [pc, #44]	@ (80167e8 <udp_send+0x58>)
 80167bc:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80167c0:	490c      	ldr	r1, [pc, #48]	@ (80167f4 <udp_send+0x64>)
 80167c2:	480b      	ldr	r0, [pc, #44]	@ (80167f0 <udp_send+0x60>)
 80167c4:	f003 f80e 	bl	80197e4 <iprintf>
 80167c8:	f06f 030f 	mvn.w	r3, #15
 80167cc:	e008      	b.n	80167e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	1d1a      	adds	r2, r3, #4
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	8a9b      	ldrh	r3, [r3, #20]
 80167d6:	6839      	ldr	r1, [r7, #0]
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f000 f80d 	bl	80167f8 <udp_sendto>
 80167de:	4603      	mov	r3, r0
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	0801c814 	.word	0x0801c814
 80167ec:	0801c908 	.word	0x0801c908
 80167f0:	0801c868 	.word	0x0801c868
 80167f4:	0801c920 	.word	0x0801c920

080167f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b088      	sub	sp, #32
 80167fc:	af02      	add	r7, sp, #8
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	607a      	str	r2, [r7, #4]
 8016804:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d109      	bne.n	8016820 <udp_sendto+0x28>
 801680c:	4b23      	ldr	r3, [pc, #140]	@ (801689c <udp_sendto+0xa4>)
 801680e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016812:	4923      	ldr	r1, [pc, #140]	@ (80168a0 <udp_sendto+0xa8>)
 8016814:	4823      	ldr	r0, [pc, #140]	@ (80168a4 <udp_sendto+0xac>)
 8016816:	f002 ffe5 	bl	80197e4 <iprintf>
 801681a:	f06f 030f 	mvn.w	r3, #15
 801681e:	e038      	b.n	8016892 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d109      	bne.n	801683a <udp_sendto+0x42>
 8016826:	4b1d      	ldr	r3, [pc, #116]	@ (801689c <udp_sendto+0xa4>)
 8016828:	f240 2219 	movw	r2, #537	@ 0x219
 801682c:	491e      	ldr	r1, [pc, #120]	@ (80168a8 <udp_sendto+0xb0>)
 801682e:	481d      	ldr	r0, [pc, #116]	@ (80168a4 <udp_sendto+0xac>)
 8016830:	f002 ffd8 	bl	80197e4 <iprintf>
 8016834:	f06f 030f 	mvn.w	r3, #15
 8016838:	e02b      	b.n	8016892 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d109      	bne.n	8016854 <udp_sendto+0x5c>
 8016840:	4b16      	ldr	r3, [pc, #88]	@ (801689c <udp_sendto+0xa4>)
 8016842:	f240 221a 	movw	r2, #538	@ 0x21a
 8016846:	4919      	ldr	r1, [pc, #100]	@ (80168ac <udp_sendto+0xb4>)
 8016848:	4816      	ldr	r0, [pc, #88]	@ (80168a4 <udp_sendto+0xac>)
 801684a:	f002 ffcb 	bl	80197e4 <iprintf>
 801684e:	f06f 030f 	mvn.w	r3, #15
 8016852:	e01e      	b.n	8016892 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	7a1b      	ldrb	r3, [r3, #8]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d006      	beq.n	801686a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	7a1b      	ldrb	r3, [r3, #8]
 8016860:	4618      	mov	r0, r3
 8016862:	f7f9 fcbf 	bl	80101e4 <netif_get_by_index>
 8016866:	6178      	str	r0, [r7, #20]
 8016868:	e003      	b.n	8016872 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f001 fbb8 	bl	8017fe0 <ip4_route>
 8016870:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d102      	bne.n	801687e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016878:	f06f 0303 	mvn.w	r3, #3
 801687c:	e009      	b.n	8016892 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801687e:	887a      	ldrh	r2, [r7, #2]
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	4613      	mov	r3, r2
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	68b9      	ldr	r1, [r7, #8]
 801688a:	68f8      	ldr	r0, [r7, #12]
 801688c:	f000 f810 	bl	80168b0 <udp_sendto_if>
 8016890:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016892:	4618      	mov	r0, r3
 8016894:	3718      	adds	r7, #24
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	0801c814 	.word	0x0801c814
 80168a0:	0801c938 	.word	0x0801c938
 80168a4:	0801c868 	.word	0x0801c868
 80168a8:	0801c950 	.word	0x0801c950
 80168ac:	0801c96c 	.word	0x0801c96c

080168b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b088      	sub	sp, #32
 80168b4:	af02      	add	r7, sp, #8
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	607a      	str	r2, [r7, #4]
 80168bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d109      	bne.n	80168d8 <udp_sendto_if+0x28>
 80168c4:	4b2e      	ldr	r3, [pc, #184]	@ (8016980 <udp_sendto_if+0xd0>)
 80168c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80168ca:	492e      	ldr	r1, [pc, #184]	@ (8016984 <udp_sendto_if+0xd4>)
 80168cc:	482e      	ldr	r0, [pc, #184]	@ (8016988 <udp_sendto_if+0xd8>)
 80168ce:	f002 ff89 	bl	80197e4 <iprintf>
 80168d2:	f06f 030f 	mvn.w	r3, #15
 80168d6:	e04f      	b.n	8016978 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d109      	bne.n	80168f2 <udp_sendto_if+0x42>
 80168de:	4b28      	ldr	r3, [pc, #160]	@ (8016980 <udp_sendto_if+0xd0>)
 80168e0:	f240 2281 	movw	r2, #641	@ 0x281
 80168e4:	4929      	ldr	r1, [pc, #164]	@ (801698c <udp_sendto_if+0xdc>)
 80168e6:	4828      	ldr	r0, [pc, #160]	@ (8016988 <udp_sendto_if+0xd8>)
 80168e8:	f002 ff7c 	bl	80197e4 <iprintf>
 80168ec:	f06f 030f 	mvn.w	r3, #15
 80168f0:	e042      	b.n	8016978 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d109      	bne.n	801690c <udp_sendto_if+0x5c>
 80168f8:	4b21      	ldr	r3, [pc, #132]	@ (8016980 <udp_sendto_if+0xd0>)
 80168fa:	f240 2282 	movw	r2, #642	@ 0x282
 80168fe:	4924      	ldr	r1, [pc, #144]	@ (8016990 <udp_sendto_if+0xe0>)
 8016900:	4821      	ldr	r0, [pc, #132]	@ (8016988 <udp_sendto_if+0xd8>)
 8016902:	f002 ff6f 	bl	80197e4 <iprintf>
 8016906:	f06f 030f 	mvn.w	r3, #15
 801690a:	e035      	b.n	8016978 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801690c:	6a3b      	ldr	r3, [r7, #32]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d109      	bne.n	8016926 <udp_sendto_if+0x76>
 8016912:	4b1b      	ldr	r3, [pc, #108]	@ (8016980 <udp_sendto_if+0xd0>)
 8016914:	f240 2283 	movw	r2, #643	@ 0x283
 8016918:	491e      	ldr	r1, [pc, #120]	@ (8016994 <udp_sendto_if+0xe4>)
 801691a:	481b      	ldr	r0, [pc, #108]	@ (8016988 <udp_sendto_if+0xd8>)
 801691c:	f002 ff62 	bl	80197e4 <iprintf>
 8016920:	f06f 030f 	mvn.w	r3, #15
 8016924:	e028      	b.n	8016978 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d009      	beq.n	8016940 <udp_sendto_if+0x90>
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d005      	beq.n	8016940 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801693c:	2be0      	cmp	r3, #224	@ 0xe0
 801693e:	d103      	bne.n	8016948 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016940:	6a3b      	ldr	r3, [r7, #32]
 8016942:	3304      	adds	r3, #4
 8016944:	617b      	str	r3, [r7, #20]
 8016946:	e00b      	b.n	8016960 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	681a      	ldr	r2, [r3, #0]
 801694c:	6a3b      	ldr	r3, [r7, #32]
 801694e:	3304      	adds	r3, #4
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d002      	beq.n	801695c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016956:	f06f 0303 	mvn.w	r3, #3
 801695a:	e00d      	b.n	8016978 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016960:	887a      	ldrh	r2, [r7, #2]
 8016962:	697b      	ldr	r3, [r7, #20]
 8016964:	9301      	str	r3, [sp, #4]
 8016966:	6a3b      	ldr	r3, [r7, #32]
 8016968:	9300      	str	r3, [sp, #0]
 801696a:	4613      	mov	r3, r2
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	68b9      	ldr	r1, [r7, #8]
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	f000 f811 	bl	8016998 <udp_sendto_if_src>
 8016976:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016978:	4618      	mov	r0, r3
 801697a:	3718      	adds	r7, #24
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	0801c814 	.word	0x0801c814
 8016984:	0801c988 	.word	0x0801c988
 8016988:	0801c868 	.word	0x0801c868
 801698c:	0801c9a4 	.word	0x0801c9a4
 8016990:	0801c9c0 	.word	0x0801c9c0
 8016994:	0801c9e0 	.word	0x0801c9e0

08016998 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b08c      	sub	sp, #48	@ 0x30
 801699c:	af04      	add	r7, sp, #16
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
 80169a4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d109      	bne.n	80169c0 <udp_sendto_if_src+0x28>
 80169ac:	4b65      	ldr	r3, [pc, #404]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 80169ae:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80169b2:	4965      	ldr	r1, [pc, #404]	@ (8016b48 <udp_sendto_if_src+0x1b0>)
 80169b4:	4865      	ldr	r0, [pc, #404]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 80169b6:	f002 ff15 	bl	80197e4 <iprintf>
 80169ba:	f06f 030f 	mvn.w	r3, #15
 80169be:	e0bc      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d109      	bne.n	80169da <udp_sendto_if_src+0x42>
 80169c6:	4b5f      	ldr	r3, [pc, #380]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 80169c8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80169cc:	4960      	ldr	r1, [pc, #384]	@ (8016b50 <udp_sendto_if_src+0x1b8>)
 80169ce:	485f      	ldr	r0, [pc, #380]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 80169d0:	f002 ff08 	bl	80197e4 <iprintf>
 80169d4:	f06f 030f 	mvn.w	r3, #15
 80169d8:	e0af      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d109      	bne.n	80169f4 <udp_sendto_if_src+0x5c>
 80169e0:	4b58      	ldr	r3, [pc, #352]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 80169e2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80169e6:	495b      	ldr	r1, [pc, #364]	@ (8016b54 <udp_sendto_if_src+0x1bc>)
 80169e8:	4858      	ldr	r0, [pc, #352]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 80169ea:	f002 fefb 	bl	80197e4 <iprintf>
 80169ee:	f06f 030f 	mvn.w	r3, #15
 80169f2:	e0a2      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80169f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d109      	bne.n	8016a0e <udp_sendto_if_src+0x76>
 80169fa:	4b52      	ldr	r3, [pc, #328]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 80169fc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8016a00:	4955      	ldr	r1, [pc, #340]	@ (8016b58 <udp_sendto_if_src+0x1c0>)
 8016a02:	4852      	ldr	r0, [pc, #328]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 8016a04:	f002 feee 	bl	80197e4 <iprintf>
 8016a08:	f06f 030f 	mvn.w	r3, #15
 8016a0c:	e095      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d109      	bne.n	8016a28 <udp_sendto_if_src+0x90>
 8016a14:	4b4b      	ldr	r3, [pc, #300]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 8016a16:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8016a1a:	4950      	ldr	r1, [pc, #320]	@ (8016b5c <udp_sendto_if_src+0x1c4>)
 8016a1c:	484b      	ldr	r0, [pc, #300]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 8016a1e:	f002 fee1 	bl	80197e4 <iprintf>
 8016a22:	f06f 030f 	mvn.w	r3, #15
 8016a26:	e088      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	8a5b      	ldrh	r3, [r3, #18]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10f      	bne.n	8016a50 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016a30:	68f9      	ldr	r1, [r7, #12]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	8a5b      	ldrh	r3, [r3, #18]
 8016a36:	461a      	mov	r2, r3
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	f000 f893 	bl	8016b64 <udp_bind>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016a42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d002      	beq.n	8016a50 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016a4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016a4e:	e074      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	891b      	ldrh	r3, [r3, #8]
 8016a54:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d902      	bls.n	8016a62 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016a5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a60:	e06b      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016a62:	2108      	movs	r1, #8
 8016a64:	68b8      	ldr	r0, [r7, #8]
 8016a66:	f7f9 feb9 	bl	80107dc <pbuf_add_header>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d015      	beq.n	8016a9c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016a70:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a74:	2108      	movs	r1, #8
 8016a76:	2022      	movs	r0, #34	@ 0x22
 8016a78:	f7f9 fc5e 	bl	8010338 <pbuf_alloc>
 8016a7c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d102      	bne.n	8016a8a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a88:	e057      	b.n	8016b3a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	891b      	ldrh	r3, [r3, #8]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d006      	beq.n	8016aa0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016a92:	68b9      	ldr	r1, [r7, #8]
 8016a94:	69f8      	ldr	r0, [r7, #28]
 8016a96:	f7fa f85b 	bl	8010b50 <pbuf_chain>
 8016a9a:	e001      	b.n	8016aa0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016aa0:	69fb      	ldr	r3, [r7, #28]
 8016aa2:	895b      	ldrh	r3, [r3, #10]
 8016aa4:	2b07      	cmp	r3, #7
 8016aa6:	d806      	bhi.n	8016ab6 <udp_sendto_if_src+0x11e>
 8016aa8:	4b26      	ldr	r3, [pc, #152]	@ (8016b44 <udp_sendto_if_src+0x1ac>)
 8016aaa:	f240 320d 	movw	r2, #781	@ 0x30d
 8016aae:	492c      	ldr	r1, [pc, #176]	@ (8016b60 <udp_sendto_if_src+0x1c8>)
 8016ab0:	4826      	ldr	r0, [pc, #152]	@ (8016b4c <udp_sendto_if_src+0x1b4>)
 8016ab2:	f002 fe97 	bl	80197e4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	8a5b      	ldrh	r3, [r3, #18]
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7f8 fa63 	bl	800ef8c <lwip_htons>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	461a      	mov	r2, r3
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016ace:	887b      	ldrh	r3, [r7, #2]
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7f8 fa5b 	bl	800ef8c <lwip_htons>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	461a      	mov	r2, r3
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	719a      	strb	r2, [r3, #6]
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016ae8:	69fb      	ldr	r3, [r7, #28]
 8016aea:	891b      	ldrh	r3, [r3, #8]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7f8 fa4d 	bl	800ef8c <lwip_htons>
 8016af2:	4603      	mov	r3, r0
 8016af4:	461a      	mov	r2, r3
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016afa:	2311      	movs	r3, #17
 8016afc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	7adb      	ldrb	r3, [r3, #11]
 8016b02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	7a9b      	ldrb	r3, [r3, #10]
 8016b08:	7cb9      	ldrb	r1, [r7, #18]
 8016b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b0c:	9202      	str	r2, [sp, #8]
 8016b0e:	7cfa      	ldrb	r2, [r7, #19]
 8016b10:	9201      	str	r2, [sp, #4]
 8016b12:	9300      	str	r3, [sp, #0]
 8016b14:	460b      	mov	r3, r1
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016b1a:	69f8      	ldr	r0, [r7, #28]
 8016b1c:	f001 fc48 	bl	80183b0 <ip4_output_if_src>
 8016b20:	4603      	mov	r3, r0
 8016b22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016b24:	69fa      	ldr	r2, [r7, #28]
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d004      	beq.n	8016b36 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016b2c:	69f8      	ldr	r0, [r7, #28]
 8016b2e:	f7f9 feeb 	bl	8010908 <pbuf_free>
    q = NULL;
 8016b32:	2300      	movs	r3, #0
 8016b34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016b36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3720      	adds	r7, #32
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	0801c814 	.word	0x0801c814
 8016b48:	0801ca00 	.word	0x0801ca00
 8016b4c:	0801c868 	.word	0x0801c868
 8016b50:	0801ca20 	.word	0x0801ca20
 8016b54:	0801ca40 	.word	0x0801ca40
 8016b58:	0801ca64 	.word	0x0801ca64
 8016b5c:	0801ca88 	.word	0x0801ca88
 8016b60:	0801caac 	.word	0x0801caac

08016b64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b086      	sub	sp, #24
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	4613      	mov	r3, r2
 8016b70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d101      	bne.n	8016b7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016b78:	4b39      	ldr	r3, [pc, #228]	@ (8016c60 <udp_bind+0xfc>)
 8016b7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d109      	bne.n	8016b96 <udp_bind+0x32>
 8016b82:	4b38      	ldr	r3, [pc, #224]	@ (8016c64 <udp_bind+0x100>)
 8016b84:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016b88:	4937      	ldr	r1, [pc, #220]	@ (8016c68 <udp_bind+0x104>)
 8016b8a:	4838      	ldr	r0, [pc, #224]	@ (8016c6c <udp_bind+0x108>)
 8016b8c:	f002 fe2a 	bl	80197e4 <iprintf>
 8016b90:	f06f 030f 	mvn.w	r3, #15
 8016b94:	e060      	b.n	8016c58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016b96:	2300      	movs	r3, #0
 8016b98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016b9a:	4b35      	ldr	r3, [pc, #212]	@ (8016c70 <udp_bind+0x10c>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	617b      	str	r3, [r7, #20]
 8016ba0:	e009      	b.n	8016bb6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d102      	bne.n	8016bb0 <udp_bind+0x4c>
      rebind = 1;
 8016baa:	2301      	movs	r3, #1
 8016bac:	74fb      	strb	r3, [r7, #19]
      break;
 8016bae:	e005      	b.n	8016bbc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	617b      	str	r3, [r7, #20]
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d1f2      	bne.n	8016ba2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016bbc:	88fb      	ldrh	r3, [r7, #6]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d109      	bne.n	8016bd6 <udp_bind+0x72>
    port = udp_new_port();
 8016bc2:	f7ff fc35 	bl	8016430 <udp_new_port>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016bca:	88fb      	ldrh	r3, [r7, #6]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d12c      	bne.n	8016c2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016bd0:	f06f 0307 	mvn.w	r3, #7
 8016bd4:	e040      	b.n	8016c58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016bd6:	4b26      	ldr	r3, [pc, #152]	@ (8016c70 <udp_bind+0x10c>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	617b      	str	r3, [r7, #20]
 8016bdc:	e022      	b.n	8016c24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016bde:	68fa      	ldr	r2, [r7, #12]
 8016be0:	697b      	ldr	r3, [r7, #20]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d01b      	beq.n	8016c1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	8a5b      	ldrh	r3, [r3, #18]
 8016bea:	88fa      	ldrh	r2, [r7, #6]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d116      	bne.n	8016c1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016bf0:	697b      	ldr	r3, [r7, #20]
 8016bf2:	681a      	ldr	r2, [r3, #0]
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	d00d      	beq.n	8016c18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d00a      	beq.n	8016c18 <udp_bind+0xb4>
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d006      	beq.n	8016c18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016c0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d003      	beq.n	8016c18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d102      	bne.n	8016c1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016c18:	f06f 0307 	mvn.w	r3, #7
 8016c1c:	e01c      	b.n	8016c58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016c1e:	697b      	ldr	r3, [r7, #20]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	617b      	str	r3, [r7, #20]
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d1d9      	bne.n	8016bde <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d002      	beq.n	8016c36 <udp_bind+0xd2>
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	e000      	b.n	8016c38 <udp_bind+0xd4>
 8016c36:	2300      	movs	r3, #0
 8016c38:	68fa      	ldr	r2, [r7, #12]
 8016c3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	88fa      	ldrh	r2, [r7, #6]
 8016c40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016c42:	7cfb      	ldrb	r3, [r7, #19]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d106      	bne.n	8016c56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016c48:	4b09      	ldr	r3, [pc, #36]	@ (8016c70 <udp_bind+0x10c>)
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016c50:	4a07      	ldr	r2, [pc, #28]	@ (8016c70 <udp_bind+0x10c>)
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016c56:	2300      	movs	r3, #0
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3718      	adds	r7, #24
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	0801d370 	.word	0x0801d370
 8016c64:	0801c814 	.word	0x0801c814
 8016c68:	0801cadc 	.word	0x0801cadc
 8016c6c:	0801c868 	.word	0x0801c868
 8016c70:	24010644 	.word	0x24010644

08016c74 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	60b9      	str	r1, [r7, #8]
 8016c7e:	4613      	mov	r3, r2
 8016c80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d109      	bne.n	8016c9c <udp_connect+0x28>
 8016c88:	4b2c      	ldr	r3, [pc, #176]	@ (8016d3c <udp_connect+0xc8>)
 8016c8a:	f240 4235 	movw	r2, #1077	@ 0x435
 8016c8e:	492c      	ldr	r1, [pc, #176]	@ (8016d40 <udp_connect+0xcc>)
 8016c90:	482c      	ldr	r0, [pc, #176]	@ (8016d44 <udp_connect+0xd0>)
 8016c92:	f002 fda7 	bl	80197e4 <iprintf>
 8016c96:	f06f 030f 	mvn.w	r3, #15
 8016c9a:	e04b      	b.n	8016d34 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d109      	bne.n	8016cb6 <udp_connect+0x42>
 8016ca2:	4b26      	ldr	r3, [pc, #152]	@ (8016d3c <udp_connect+0xc8>)
 8016ca4:	f240 4236 	movw	r2, #1078	@ 0x436
 8016ca8:	4927      	ldr	r1, [pc, #156]	@ (8016d48 <udp_connect+0xd4>)
 8016caa:	4826      	ldr	r0, [pc, #152]	@ (8016d44 <udp_connect+0xd0>)
 8016cac:	f002 fd9a 	bl	80197e4 <iprintf>
 8016cb0:	f06f 030f 	mvn.w	r3, #15
 8016cb4:	e03e      	b.n	8016d34 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	8a5b      	ldrh	r3, [r3, #18]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d10f      	bne.n	8016cde <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016cbe:	68f9      	ldr	r1, [r7, #12]
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	8a5b      	ldrh	r3, [r3, #18]
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	68f8      	ldr	r0, [r7, #12]
 8016cc8:	f7ff ff4c 	bl	8016b64 <udp_bind>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016cd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d002      	beq.n	8016cde <udp_connect+0x6a>
      return err;
 8016cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cdc:	e02a      	b.n	8016d34 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016cde:	68bb      	ldr	r3, [r7, #8]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d002      	beq.n	8016cea <udp_connect+0x76>
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	e000      	b.n	8016cec <udp_connect+0x78>
 8016cea:	2300      	movs	r3, #0
 8016cec:	68fa      	ldr	r2, [r7, #12]
 8016cee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	88fa      	ldrh	r2, [r7, #6]
 8016cf4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	7c1b      	ldrb	r3, [r3, #16]
 8016cfa:	f043 0304 	orr.w	r3, r3, #4
 8016cfe:	b2da      	uxtb	r2, r3
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016d04:	4b11      	ldr	r3, [pc, #68]	@ (8016d4c <udp_connect+0xd8>)
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	617b      	str	r3, [r7, #20]
 8016d0a:	e008      	b.n	8016d1e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016d0c:	68fa      	ldr	r2, [r7, #12]
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d101      	bne.n	8016d18 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016d14:	2300      	movs	r3, #0
 8016d16:	e00d      	b.n	8016d34 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	68db      	ldr	r3, [r3, #12]
 8016d1c:	617b      	str	r3, [r7, #20]
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1f3      	bne.n	8016d0c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016d24:	4b09      	ldr	r3, [pc, #36]	@ (8016d4c <udp_connect+0xd8>)
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016d2c:	4a07      	ldr	r2, [pc, #28]	@ (8016d4c <udp_connect+0xd8>)
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016d32:	2300      	movs	r3, #0
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3718      	adds	r7, #24
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	0801c814 	.word	0x0801c814
 8016d40:	0801caf4 	.word	0x0801caf4
 8016d44:	0801c868 	.word	0x0801c868
 8016d48:	0801cb10 	.word	0x0801cb10
 8016d4c:	24010644 	.word	0x24010644

08016d50 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016d56:	2000      	movs	r0, #0
 8016d58:	f7f8 feb8 	bl	800facc <memp_malloc>
 8016d5c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d007      	beq.n	8016d74 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016d64:	2220      	movs	r2, #32
 8016d66:	2100      	movs	r1, #0
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f002 fd5d 	bl	8019828 <memset>
    pcb->ttl = UDP_TTL;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	22ff      	movs	r2, #255	@ 0xff
 8016d72:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016d74:	687b      	ldr	r3, [r7, #4]
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3708      	adds	r7, #8
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
	...

08016d80 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b085      	sub	sp, #20
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d01e      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d01a      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d98:	683b      	ldr	r3, [r7, #0]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d017      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
 8016d9e:	683b      	ldr	r3, [r7, #0]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d013      	beq.n	8016dce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016da6:	4b0d      	ldr	r3, [pc, #52]	@ (8016ddc <udp_netif_ip_addr_changed+0x5c>)
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	60fb      	str	r3, [r7, #12]
 8016dac:	e00c      	b.n	8016dc8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d103      	bne.n	8016dc2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	68db      	ldr	r3, [r3, #12]
 8016dc6:	60fb      	str	r3, [r7, #12]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d1ef      	bne.n	8016dae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016dce:	bf00      	nop
 8016dd0:	3714      	adds	r7, #20
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd8:	4770      	bx	lr
 8016dda:	bf00      	nop
 8016ddc:	24010644 	.word	0x24010644

08016de0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016de8:	4915      	ldr	r1, [pc, #84]	@ (8016e40 <etharp_free_entry+0x60>)
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	4613      	mov	r3, r2
 8016dee:	005b      	lsls	r3, r3, #1
 8016df0:	4413      	add	r3, r2
 8016df2:	00db      	lsls	r3, r3, #3
 8016df4:	440b      	add	r3, r1
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d013      	beq.n	8016e24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016dfc:	4910      	ldr	r1, [pc, #64]	@ (8016e40 <etharp_free_entry+0x60>)
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	4613      	mov	r3, r2
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	4413      	add	r3, r2
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	440b      	add	r3, r1
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7f9 fd7b 	bl	8010908 <pbuf_free>
    arp_table[i].q = NULL;
 8016e12:	490b      	ldr	r1, [pc, #44]	@ (8016e40 <etharp_free_entry+0x60>)
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	4613      	mov	r3, r2
 8016e18:	005b      	lsls	r3, r3, #1
 8016e1a:	4413      	add	r3, r2
 8016e1c:	00db      	lsls	r3, r3, #3
 8016e1e:	440b      	add	r3, r1
 8016e20:	2200      	movs	r2, #0
 8016e22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016e24:	4906      	ldr	r1, [pc, #24]	@ (8016e40 <etharp_free_entry+0x60>)
 8016e26:	687a      	ldr	r2, [r7, #4]
 8016e28:	4613      	mov	r3, r2
 8016e2a:	005b      	lsls	r3, r3, #1
 8016e2c:	4413      	add	r3, r2
 8016e2e:	00db      	lsls	r3, r3, #3
 8016e30:	440b      	add	r3, r1
 8016e32:	3314      	adds	r3, #20
 8016e34:	2200      	movs	r2, #0
 8016e36:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016e38:	bf00      	nop
 8016e3a:	3708      	adds	r7, #8
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	24010648 	.word	0x24010648

08016e44 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	607b      	str	r3, [r7, #4]
 8016e4e:	e096      	b.n	8016f7e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016e50:	494f      	ldr	r1, [pc, #316]	@ (8016f90 <etharp_tmr+0x14c>)
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	4613      	mov	r3, r2
 8016e56:	005b      	lsls	r3, r3, #1
 8016e58:	4413      	add	r3, r2
 8016e5a:	00db      	lsls	r3, r3, #3
 8016e5c:	440b      	add	r3, r1
 8016e5e:	3314      	adds	r3, #20
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016e64:	78fb      	ldrb	r3, [r7, #3]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 8086 	beq.w	8016f78 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016e6c:	4948      	ldr	r1, [pc, #288]	@ (8016f90 <etharp_tmr+0x14c>)
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	4613      	mov	r3, r2
 8016e72:	005b      	lsls	r3, r3, #1
 8016e74:	4413      	add	r3, r2
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	440b      	add	r3, r1
 8016e7a:	3312      	adds	r3, #18
 8016e7c:	881b      	ldrh	r3, [r3, #0]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	b298      	uxth	r0, r3
 8016e82:	4943      	ldr	r1, [pc, #268]	@ (8016f90 <etharp_tmr+0x14c>)
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	4613      	mov	r3, r2
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4413      	add	r3, r2
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	3312      	adds	r3, #18
 8016e92:	4602      	mov	r2, r0
 8016e94:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016e96:	493e      	ldr	r1, [pc, #248]	@ (8016f90 <etharp_tmr+0x14c>)
 8016e98:	687a      	ldr	r2, [r7, #4]
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	00db      	lsls	r3, r3, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	3312      	adds	r3, #18
 8016ea6:	881b      	ldrh	r3, [r3, #0]
 8016ea8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016eac:	d215      	bcs.n	8016eda <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016eae:	4938      	ldr	r1, [pc, #224]	@ (8016f90 <etharp_tmr+0x14c>)
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	4413      	add	r3, r2
 8016eb8:	00db      	lsls	r3, r3, #3
 8016eba:	440b      	add	r3, r1
 8016ebc:	3314      	adds	r3, #20
 8016ebe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	d10e      	bne.n	8016ee2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ec4:	4932      	ldr	r1, [pc, #200]	@ (8016f90 <etharp_tmr+0x14c>)
 8016ec6:	687a      	ldr	r2, [r7, #4]
 8016ec8:	4613      	mov	r3, r2
 8016eca:	005b      	lsls	r3, r3, #1
 8016ecc:	4413      	add	r3, r2
 8016ece:	00db      	lsls	r3, r3, #3
 8016ed0:	440b      	add	r3, r1
 8016ed2:	3312      	adds	r3, #18
 8016ed4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ed6:	2b04      	cmp	r3, #4
 8016ed8:	d903      	bls.n	8016ee2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f7ff ff80 	bl	8016de0 <etharp_free_entry>
 8016ee0:	e04a      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ee2:	492b      	ldr	r1, [pc, #172]	@ (8016f90 <etharp_tmr+0x14c>)
 8016ee4:	687a      	ldr	r2, [r7, #4]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4413      	add	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	440b      	add	r3, r1
 8016ef0:	3314      	adds	r3, #20
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	2b03      	cmp	r3, #3
 8016ef6:	d10a      	bne.n	8016f0e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016ef8:	4925      	ldr	r1, [pc, #148]	@ (8016f90 <etharp_tmr+0x14c>)
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	4613      	mov	r3, r2
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	4413      	add	r3, r2
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	440b      	add	r3, r1
 8016f06:	3314      	adds	r3, #20
 8016f08:	2204      	movs	r2, #4
 8016f0a:	701a      	strb	r2, [r3, #0]
 8016f0c:	e034      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016f0e:	4920      	ldr	r1, [pc, #128]	@ (8016f90 <etharp_tmr+0x14c>)
 8016f10:	687a      	ldr	r2, [r7, #4]
 8016f12:	4613      	mov	r3, r2
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	4413      	add	r3, r2
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	440b      	add	r3, r1
 8016f1c:	3314      	adds	r3, #20
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	2b04      	cmp	r3, #4
 8016f22:	d10a      	bne.n	8016f3a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016f24:	491a      	ldr	r1, [pc, #104]	@ (8016f90 <etharp_tmr+0x14c>)
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	4613      	mov	r3, r2
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	4413      	add	r3, r2
 8016f2e:	00db      	lsls	r3, r3, #3
 8016f30:	440b      	add	r3, r1
 8016f32:	3314      	adds	r3, #20
 8016f34:	2202      	movs	r2, #2
 8016f36:	701a      	strb	r2, [r3, #0]
 8016f38:	e01e      	b.n	8016f78 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f3a:	4915      	ldr	r1, [pc, #84]	@ (8016f90 <etharp_tmr+0x14c>)
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	4613      	mov	r3, r2
 8016f40:	005b      	lsls	r3, r3, #1
 8016f42:	4413      	add	r3, r2
 8016f44:	00db      	lsls	r3, r3, #3
 8016f46:	440b      	add	r3, r1
 8016f48:	3314      	adds	r3, #20
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	d113      	bne.n	8016f78 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016f50:	490f      	ldr	r1, [pc, #60]	@ (8016f90 <etharp_tmr+0x14c>)
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	4613      	mov	r3, r2
 8016f56:	005b      	lsls	r3, r3, #1
 8016f58:	4413      	add	r3, r2
 8016f5a:	00db      	lsls	r3, r3, #3
 8016f5c:	440b      	add	r3, r1
 8016f5e:	3308      	adds	r3, #8
 8016f60:	6818      	ldr	r0, [r3, #0]
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	4613      	mov	r3, r2
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	4413      	add	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	4a08      	ldr	r2, [pc, #32]	@ (8016f90 <etharp_tmr+0x14c>)
 8016f6e:	4413      	add	r3, r2
 8016f70:	3304      	adds	r3, #4
 8016f72:	4619      	mov	r1, r3
 8016f74:	f000 fe6e 	bl	8017c54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	607b      	str	r3, [r7, #4]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2b09      	cmp	r3, #9
 8016f82:	f77f af65 	ble.w	8016e50 <etharp_tmr+0xc>
      }
    }
  }
}
 8016f86:	bf00      	nop
 8016f88:	bf00      	nop
 8016f8a:	3708      	adds	r7, #8
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	24010648 	.word	0x24010648

08016f94 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b08a      	sub	sp, #40	@ 0x28
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	607a      	str	r2, [r7, #4]
 8016fa0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016fa2:	230a      	movs	r3, #10
 8016fa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016faa:	230a      	movs	r3, #10
 8016fac:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016fb2:	230a      	movs	r3, #10
 8016fb4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	83bb      	strh	r3, [r7, #28]
 8016fba:	2300      	movs	r3, #0
 8016fbc:	837b      	strh	r3, [r7, #26]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	843b      	strh	r3, [r7, #32]
 8016fc6:	e0ae      	b.n	8017126 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016fc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fcc:	49a6      	ldr	r1, [pc, #664]	@ (8017268 <etharp_find_entry+0x2d4>)
 8016fce:	4613      	mov	r3, r2
 8016fd0:	005b      	lsls	r3, r3, #1
 8016fd2:	4413      	add	r3, r2
 8016fd4:	00db      	lsls	r3, r3, #3
 8016fd6:	440b      	add	r3, r1
 8016fd8:	3314      	adds	r3, #20
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016fde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016fe2:	2b0a      	cmp	r3, #10
 8016fe4:	d105      	bne.n	8016ff2 <etharp_find_entry+0x5e>
 8016fe6:	7dfb      	ldrb	r3, [r7, #23]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d102      	bne.n	8016ff2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016fec:	8c3b      	ldrh	r3, [r7, #32]
 8016fee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016ff0:	e095      	b.n	801711e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016ff2:	7dfb      	ldrb	r3, [r7, #23]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f000 8092 	beq.w	801711e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016ffa:	7dfb      	ldrb	r3, [r7, #23]
 8016ffc:	2b01      	cmp	r3, #1
 8016ffe:	d009      	beq.n	8017014 <etharp_find_entry+0x80>
 8017000:	7dfb      	ldrb	r3, [r7, #23]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d806      	bhi.n	8017014 <etharp_find_entry+0x80>
 8017006:	4b99      	ldr	r3, [pc, #612]	@ (801726c <etharp_find_entry+0x2d8>)
 8017008:	f240 1223 	movw	r2, #291	@ 0x123
 801700c:	4998      	ldr	r1, [pc, #608]	@ (8017270 <etharp_find_entry+0x2dc>)
 801700e:	4899      	ldr	r0, [pc, #612]	@ (8017274 <etharp_find_entry+0x2e0>)
 8017010:	f002 fbe8 	bl	80197e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d020      	beq.n	801705c <etharp_find_entry+0xc8>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	6819      	ldr	r1, [r3, #0]
 801701e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017022:	4891      	ldr	r0, [pc, #580]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017024:	4613      	mov	r3, r2
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	4413      	add	r3, r2
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	4403      	add	r3, r0
 801702e:	3304      	adds	r3, #4
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	4299      	cmp	r1, r3
 8017034:	d112      	bne.n	801705c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d00c      	beq.n	8017056 <etharp_find_entry+0xc2>
 801703c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017040:	4989      	ldr	r1, [pc, #548]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017042:	4613      	mov	r3, r2
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	4413      	add	r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	440b      	add	r3, r1
 801704c:	3308      	adds	r3, #8
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	687a      	ldr	r2, [r7, #4]
 8017052:	429a      	cmp	r2, r3
 8017054:	d102      	bne.n	801705c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017056:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801705a:	e100      	b.n	801725e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801705c:	7dfb      	ldrb	r3, [r7, #23]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d140      	bne.n	80170e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017062:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017066:	4980      	ldr	r1, [pc, #512]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017068:	4613      	mov	r3, r2
 801706a:	005b      	lsls	r3, r3, #1
 801706c:	4413      	add	r3, r2
 801706e:	00db      	lsls	r3, r3, #3
 8017070:	440b      	add	r3, r1
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d01a      	beq.n	80170ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017078:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801707c:	497a      	ldr	r1, [pc, #488]	@ (8017268 <etharp_find_entry+0x2d4>)
 801707e:	4613      	mov	r3, r2
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	4413      	add	r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	440b      	add	r3, r1
 8017088:	3312      	adds	r3, #18
 801708a:	881b      	ldrh	r3, [r3, #0]
 801708c:	8bba      	ldrh	r2, [r7, #28]
 801708e:	429a      	cmp	r2, r3
 8017090:	d845      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_queue = i;
 8017092:	8c3b      	ldrh	r3, [r7, #32]
 8017094:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017096:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801709a:	4973      	ldr	r1, [pc, #460]	@ (8017268 <etharp_find_entry+0x2d4>)
 801709c:	4613      	mov	r3, r2
 801709e:	005b      	lsls	r3, r3, #1
 80170a0:	4413      	add	r3, r2
 80170a2:	00db      	lsls	r3, r3, #3
 80170a4:	440b      	add	r3, r1
 80170a6:	3312      	adds	r3, #18
 80170a8:	881b      	ldrh	r3, [r3, #0]
 80170aa:	83bb      	strh	r3, [r7, #28]
 80170ac:	e037      	b.n	801711e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80170ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170b2:	496d      	ldr	r1, [pc, #436]	@ (8017268 <etharp_find_entry+0x2d4>)
 80170b4:	4613      	mov	r3, r2
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	4413      	add	r3, r2
 80170ba:	00db      	lsls	r3, r3, #3
 80170bc:	440b      	add	r3, r1
 80170be:	3312      	adds	r3, #18
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	8b7a      	ldrh	r2, [r7, #26]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d82a      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_pending = i;
 80170c8:	8c3b      	ldrh	r3, [r7, #32]
 80170ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80170cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170d0:	4965      	ldr	r1, [pc, #404]	@ (8017268 <etharp_find_entry+0x2d4>)
 80170d2:	4613      	mov	r3, r2
 80170d4:	005b      	lsls	r3, r3, #1
 80170d6:	4413      	add	r3, r2
 80170d8:	00db      	lsls	r3, r3, #3
 80170da:	440b      	add	r3, r1
 80170dc:	3312      	adds	r3, #18
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	837b      	strh	r3, [r7, #26]
 80170e2:	e01c      	b.n	801711e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80170e4:	7dfb      	ldrb	r3, [r7, #23]
 80170e6:	2b01      	cmp	r3, #1
 80170e8:	d919      	bls.n	801711e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80170ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ee:	495e      	ldr	r1, [pc, #376]	@ (8017268 <etharp_find_entry+0x2d4>)
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	440b      	add	r3, r1
 80170fa:	3312      	adds	r3, #18
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	8b3a      	ldrh	r2, [r7, #24]
 8017100:	429a      	cmp	r2, r3
 8017102:	d80c      	bhi.n	801711e <etharp_find_entry+0x18a>
            old_stable = i;
 8017104:	8c3b      	ldrh	r3, [r7, #32]
 8017106:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8017108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801710c:	4956      	ldr	r1, [pc, #344]	@ (8017268 <etharp_find_entry+0x2d4>)
 801710e:	4613      	mov	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	4413      	add	r3, r2
 8017114:	00db      	lsls	r3, r3, #3
 8017116:	440b      	add	r3, r1
 8017118:	3312      	adds	r3, #18
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801711e:	8c3b      	ldrh	r3, [r7, #32]
 8017120:	3301      	adds	r3, #1
 8017122:	b29b      	uxth	r3, r3
 8017124:	843b      	strh	r3, [r7, #32]
 8017126:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801712a:	2b09      	cmp	r3, #9
 801712c:	f77f af4c 	ble.w	8016fc8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017130:	7afb      	ldrb	r3, [r7, #11]
 8017132:	f003 0302 	and.w	r3, r3, #2
 8017136:	2b00      	cmp	r3, #0
 8017138:	d108      	bne.n	801714c <etharp_find_entry+0x1b8>
 801713a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801713e:	2b0a      	cmp	r3, #10
 8017140:	d107      	bne.n	8017152 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017142:	7afb      	ldrb	r3, [r7, #11]
 8017144:	f003 0301 	and.w	r3, r3, #1
 8017148:	2b00      	cmp	r3, #0
 801714a:	d102      	bne.n	8017152 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801714c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017150:	e085      	b.n	801725e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017152:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017156:	2b09      	cmp	r3, #9
 8017158:	dc02      	bgt.n	8017160 <etharp_find_entry+0x1cc>
    i = empty;
 801715a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801715c:	843b      	strh	r3, [r7, #32]
 801715e:	e039      	b.n	80171d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017160:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017164:	2b09      	cmp	r3, #9
 8017166:	dc14      	bgt.n	8017192 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801716a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801716c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017170:	493d      	ldr	r1, [pc, #244]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017172:	4613      	mov	r3, r2
 8017174:	005b      	lsls	r3, r3, #1
 8017176:	4413      	add	r3, r2
 8017178:	00db      	lsls	r3, r3, #3
 801717a:	440b      	add	r3, r1
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d018      	beq.n	80171b4 <etharp_find_entry+0x220>
 8017182:	4b3a      	ldr	r3, [pc, #232]	@ (801726c <etharp_find_entry+0x2d8>)
 8017184:	f240 126d 	movw	r2, #365	@ 0x16d
 8017188:	493b      	ldr	r1, [pc, #236]	@ (8017278 <etharp_find_entry+0x2e4>)
 801718a:	483a      	ldr	r0, [pc, #232]	@ (8017274 <etharp_find_entry+0x2e0>)
 801718c:	f002 fb2a 	bl	80197e4 <iprintf>
 8017190:	e010      	b.n	80171b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017192:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017196:	2b09      	cmp	r3, #9
 8017198:	dc02      	bgt.n	80171a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801719a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801719c:	843b      	strh	r3, [r7, #32]
 801719e:	e009      	b.n	80171b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80171a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80171a4:	2b09      	cmp	r3, #9
 80171a6:	dc02      	bgt.n	80171ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80171a8:	8bfb      	ldrh	r3, [r7, #30]
 80171aa:	843b      	strh	r3, [r7, #32]
 80171ac:	e002      	b.n	80171b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80171ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80171b2:	e054      	b.n	801725e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171b8:	2b09      	cmp	r3, #9
 80171ba:	dd06      	ble.n	80171ca <etharp_find_entry+0x236>
 80171bc:	4b2b      	ldr	r3, [pc, #172]	@ (801726c <etharp_find_entry+0x2d8>)
 80171be:	f240 127f 	movw	r2, #383	@ 0x17f
 80171c2:	492e      	ldr	r1, [pc, #184]	@ (801727c <etharp_find_entry+0x2e8>)
 80171c4:	482b      	ldr	r0, [pc, #172]	@ (8017274 <etharp_find_entry+0x2e0>)
 80171c6:	f002 fb0d 	bl	80197e4 <iprintf>
    etharp_free_entry(i);
 80171ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7ff fe06 	bl	8016de0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171d8:	2b09      	cmp	r3, #9
 80171da:	dd06      	ble.n	80171ea <etharp_find_entry+0x256>
 80171dc:	4b23      	ldr	r3, [pc, #140]	@ (801726c <etharp_find_entry+0x2d8>)
 80171de:	f240 1283 	movw	r2, #387	@ 0x183
 80171e2:	4926      	ldr	r1, [pc, #152]	@ (801727c <etharp_find_entry+0x2e8>)
 80171e4:	4823      	ldr	r0, [pc, #140]	@ (8017274 <etharp_find_entry+0x2e0>)
 80171e6:	f002 fafd 	bl	80197e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80171ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ee:	491e      	ldr	r1, [pc, #120]	@ (8017268 <etharp_find_entry+0x2d4>)
 80171f0:	4613      	mov	r3, r2
 80171f2:	005b      	lsls	r3, r3, #1
 80171f4:	4413      	add	r3, r2
 80171f6:	00db      	lsls	r3, r3, #3
 80171f8:	440b      	add	r3, r1
 80171fa:	3314      	adds	r3, #20
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d006      	beq.n	8017210 <etharp_find_entry+0x27c>
 8017202:	4b1a      	ldr	r3, [pc, #104]	@ (801726c <etharp_find_entry+0x2d8>)
 8017204:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8017208:	491d      	ldr	r1, [pc, #116]	@ (8017280 <etharp_find_entry+0x2ec>)
 801720a:	481a      	ldr	r0, [pc, #104]	@ (8017274 <etharp_find_entry+0x2e0>)
 801720c:	f002 faea 	bl	80197e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d00b      	beq.n	801722e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	6819      	ldr	r1, [r3, #0]
 801721e:	4812      	ldr	r0, [pc, #72]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017220:	4613      	mov	r3, r2
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	4413      	add	r3, r2
 8017226:	00db      	lsls	r3, r3, #3
 8017228:	4403      	add	r3, r0
 801722a:	3304      	adds	r3, #4
 801722c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801722e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017232:	490d      	ldr	r1, [pc, #52]	@ (8017268 <etharp_find_entry+0x2d4>)
 8017234:	4613      	mov	r3, r2
 8017236:	005b      	lsls	r3, r3, #1
 8017238:	4413      	add	r3, r2
 801723a:	00db      	lsls	r3, r3, #3
 801723c:	440b      	add	r3, r1
 801723e:	3312      	adds	r3, #18
 8017240:	2200      	movs	r2, #0
 8017242:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017248:	4907      	ldr	r1, [pc, #28]	@ (8017268 <etharp_find_entry+0x2d4>)
 801724a:	4613      	mov	r3, r2
 801724c:	005b      	lsls	r3, r3, #1
 801724e:	4413      	add	r3, r2
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	440b      	add	r3, r1
 8017254:	3308      	adds	r3, #8
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801725a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3728      	adds	r7, #40	@ 0x28
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	24010648 	.word	0x24010648
 801726c:	0801cb78 	.word	0x0801cb78
 8017270:	0801cbb0 	.word	0x0801cbb0
 8017274:	0801cbf0 	.word	0x0801cbf0
 8017278:	0801cc18 	.word	0x0801cc18
 801727c:	0801cc30 	.word	0x0801cc30
 8017280:	0801cc44 	.word	0x0801cc44

08017284 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b088      	sub	sp, #32
 8017288:	af02      	add	r7, sp, #8
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	607a      	str	r2, [r7, #4]
 8017290:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017298:	2b06      	cmp	r3, #6
 801729a:	d006      	beq.n	80172aa <etharp_update_arp_entry+0x26>
 801729c:	4b48      	ldr	r3, [pc, #288]	@ (80173c0 <etharp_update_arp_entry+0x13c>)
 801729e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80172a2:	4948      	ldr	r1, [pc, #288]	@ (80173c4 <etharp_update_arp_entry+0x140>)
 80172a4:	4848      	ldr	r0, [pc, #288]	@ (80173c8 <etharp_update_arp_entry+0x144>)
 80172a6:	f002 fa9d 	bl	80197e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d012      	beq.n	80172d6 <etharp_update_arp_entry+0x52>
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d00e      	beq.n	80172d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	68f9      	ldr	r1, [r7, #12]
 80172be:	4618      	mov	r0, r3
 80172c0:	f001 f924 	bl	801850c <ip4_addr_isbroadcast_u32>
 80172c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d105      	bne.n	80172d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172d2:	2be0      	cmp	r3, #224	@ 0xe0
 80172d4:	d102      	bne.n	80172dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80172d6:	f06f 030f 	mvn.w	r3, #15
 80172da:	e06c      	b.n	80173b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80172dc:	78fb      	ldrb	r3, [r7, #3]
 80172de:	68fa      	ldr	r2, [r7, #12]
 80172e0:	4619      	mov	r1, r3
 80172e2:	68b8      	ldr	r0, [r7, #8]
 80172e4:	f7ff fe56 	bl	8016f94 <etharp_find_entry>
 80172e8:	4603      	mov	r3, r0
 80172ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80172ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	da02      	bge.n	80172fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80172f4:	8afb      	ldrh	r3, [r7, #22]
 80172f6:	b25b      	sxtb	r3, r3
 80172f8:	e05d      	b.n	80173b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80172fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80172fe:	4933      	ldr	r1, [pc, #204]	@ (80173cc <etharp_update_arp_entry+0x148>)
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	440b      	add	r3, r1
 801730a:	3314      	adds	r3, #20
 801730c:	2202      	movs	r2, #2
 801730e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017310:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017314:	492d      	ldr	r1, [pc, #180]	@ (80173cc <etharp_update_arp_entry+0x148>)
 8017316:	4613      	mov	r3, r2
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4413      	add	r3, r2
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	440b      	add	r3, r1
 8017320:	3308      	adds	r3, #8
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017326:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801732a:	4613      	mov	r3, r2
 801732c:	005b      	lsls	r3, r3, #1
 801732e:	4413      	add	r3, r2
 8017330:	00db      	lsls	r3, r3, #3
 8017332:	3308      	adds	r3, #8
 8017334:	4a25      	ldr	r2, [pc, #148]	@ (80173cc <etharp_update_arp_entry+0x148>)
 8017336:	4413      	add	r3, r2
 8017338:	3304      	adds	r3, #4
 801733a:	2206      	movs	r2, #6
 801733c:	6879      	ldr	r1, [r7, #4]
 801733e:	4618      	mov	r0, r3
 8017340:	f002 faf7 	bl	8019932 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017344:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017348:	4920      	ldr	r1, [pc, #128]	@ (80173cc <etharp_update_arp_entry+0x148>)
 801734a:	4613      	mov	r3, r2
 801734c:	005b      	lsls	r3, r3, #1
 801734e:	4413      	add	r3, r2
 8017350:	00db      	lsls	r3, r3, #3
 8017352:	440b      	add	r3, r1
 8017354:	3312      	adds	r3, #18
 8017356:	2200      	movs	r2, #0
 8017358:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801735a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801735e:	491b      	ldr	r1, [pc, #108]	@ (80173cc <etharp_update_arp_entry+0x148>)
 8017360:	4613      	mov	r3, r2
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	4413      	add	r3, r2
 8017366:	00db      	lsls	r3, r3, #3
 8017368:	440b      	add	r3, r1
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d021      	beq.n	80173b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017370:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017374:	4915      	ldr	r1, [pc, #84]	@ (80173cc <etharp_update_arp_entry+0x148>)
 8017376:	4613      	mov	r3, r2
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	4413      	add	r3, r2
 801737c:	00db      	lsls	r3, r3, #3
 801737e:	440b      	add	r3, r1
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017388:	4910      	ldr	r1, [pc, #64]	@ (80173cc <etharp_update_arp_entry+0x148>)
 801738a:	4613      	mov	r3, r2
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	4413      	add	r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	440b      	add	r3, r1
 8017394:	2200      	movs	r2, #0
 8017396:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801739e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80173a2:	9300      	str	r3, [sp, #0]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6939      	ldr	r1, [r7, #16]
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f001 ffbd 	bl	8019328 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80173ae:	6938      	ldr	r0, [r7, #16]
 80173b0:	f7f9 faaa 	bl	8010908 <pbuf_free>
  }
  return ERR_OK;
 80173b4:	2300      	movs	r3, #0
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3718      	adds	r7, #24
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
 80173be:	bf00      	nop
 80173c0:	0801cb78 	.word	0x0801cb78
 80173c4:	0801cc70 	.word	0x0801cc70
 80173c8:	0801cbf0 	.word	0x0801cbf0
 80173cc:	24010648 	.word	0x24010648

080173d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80173d8:	2300      	movs	r3, #0
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	e01e      	b.n	801741c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80173de:	4913      	ldr	r1, [pc, #76]	@ (801742c <etharp_cleanup_netif+0x5c>)
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	440b      	add	r3, r1
 80173ec:	3314      	adds	r3, #20
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80173f2:	7afb      	ldrb	r3, [r7, #11]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d00e      	beq.n	8017416 <etharp_cleanup_netif+0x46>
 80173f8:	490c      	ldr	r1, [pc, #48]	@ (801742c <etharp_cleanup_netif+0x5c>)
 80173fa:	68fa      	ldr	r2, [r7, #12]
 80173fc:	4613      	mov	r3, r2
 80173fe:	005b      	lsls	r3, r3, #1
 8017400:	4413      	add	r3, r2
 8017402:	00db      	lsls	r3, r3, #3
 8017404:	440b      	add	r3, r1
 8017406:	3308      	adds	r3, #8
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	429a      	cmp	r2, r3
 801740e:	d102      	bne.n	8017416 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f7ff fce5 	bl	8016de0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	3301      	adds	r3, #1
 801741a:	60fb      	str	r3, [r7, #12]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2b09      	cmp	r3, #9
 8017420:	dddd      	ble.n	80173de <etharp_cleanup_netif+0xe>
    }
  }
}
 8017422:	bf00      	nop
 8017424:	bf00      	nop
 8017426:	3710      	adds	r7, #16
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	24010648 	.word	0x24010648

08017430 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017430:	b5b0      	push	{r4, r5, r7, lr}
 8017432:	b08a      	sub	sp, #40	@ 0x28
 8017434:	af04      	add	r7, sp, #16
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d107      	bne.n	8017450 <etharp_input+0x20>
 8017440:	4b3d      	ldr	r3, [pc, #244]	@ (8017538 <etharp_input+0x108>)
 8017442:	f240 228a 	movw	r2, #650	@ 0x28a
 8017446:	493d      	ldr	r1, [pc, #244]	@ (801753c <etharp_input+0x10c>)
 8017448:	483d      	ldr	r0, [pc, #244]	@ (8017540 <etharp_input+0x110>)
 801744a:	f002 f9cb 	bl	80197e4 <iprintf>
 801744e:	e06f      	b.n	8017530 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	b29b      	uxth	r3, r3
 801745c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017460:	d10c      	bne.n	801747c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017466:	2b06      	cmp	r3, #6
 8017468:	d108      	bne.n	801747c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801746e:	2b04      	cmp	r3, #4
 8017470:	d104      	bne.n	801747c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017472:	693b      	ldr	r3, [r7, #16]
 8017474:	885b      	ldrh	r3, [r3, #2]
 8017476:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017478:	2b08      	cmp	r3, #8
 801747a:	d003      	beq.n	8017484 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f7f9 fa43 	bl	8010908 <pbuf_free>
    return;
 8017482:	e055      	b.n	8017530 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	330e      	adds	r3, #14
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	3318      	adds	r3, #24
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	3304      	adds	r3, #4
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d102      	bne.n	80174a4 <etharp_input+0x74>
    for_us = 0;
 801749e:	2300      	movs	r3, #0
 80174a0:	75fb      	strb	r3, [r7, #23]
 80174a2:	e009      	b.n	80174b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80174a4:	68ba      	ldr	r2, [r7, #8]
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	3304      	adds	r3, #4
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	bf0c      	ite	eq
 80174b0:	2301      	moveq	r3, #1
 80174b2:	2300      	movne	r3, #0
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	f103 0208 	add.w	r2, r3, #8
 80174be:	7dfb      	ldrb	r3, [r7, #23]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d001      	beq.n	80174c8 <etharp_input+0x98>
 80174c4:	2301      	movs	r3, #1
 80174c6:	e000      	b.n	80174ca <etharp_input+0x9a>
 80174c8:	2302      	movs	r3, #2
 80174ca:	f107 010c 	add.w	r1, r7, #12
 80174ce:	6838      	ldr	r0, [r7, #0]
 80174d0:	f7ff fed8 	bl	8017284 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	88db      	ldrh	r3, [r3, #6]
 80174d8:	b29b      	uxth	r3, r3
 80174da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80174de:	d003      	beq.n	80174e8 <etharp_input+0xb8>
 80174e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174e4:	d01e      	beq.n	8017524 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80174e6:	e020      	b.n	801752a <etharp_input+0xfa>
      if (for_us) {
 80174e8:	7dfb      	ldrb	r3, [r7, #23]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d01c      	beq.n	8017528 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80174f4:	693b      	ldr	r3, [r7, #16]
 80174f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017504:	693a      	ldr	r2, [r7, #16]
 8017506:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017508:	2102      	movs	r1, #2
 801750a:	9103      	str	r1, [sp, #12]
 801750c:	f107 010c 	add.w	r1, r7, #12
 8017510:	9102      	str	r1, [sp, #8]
 8017512:	9201      	str	r2, [sp, #4]
 8017514:	9300      	str	r3, [sp, #0]
 8017516:	462b      	mov	r3, r5
 8017518:	4622      	mov	r2, r4
 801751a:	4601      	mov	r1, r0
 801751c:	6838      	ldr	r0, [r7, #0]
 801751e:	f000 faeb 	bl	8017af8 <etharp_raw>
      break;
 8017522:	e001      	b.n	8017528 <etharp_input+0xf8>
      break;
 8017524:	bf00      	nop
 8017526:	e000      	b.n	801752a <etharp_input+0xfa>
      break;
 8017528:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7f9 f9ec 	bl	8010908 <pbuf_free>
}
 8017530:	3718      	adds	r7, #24
 8017532:	46bd      	mov	sp, r7
 8017534:	bdb0      	pop	{r4, r5, r7, pc}
 8017536:	bf00      	nop
 8017538:	0801cb78 	.word	0x0801cb78
 801753c:	0801ccc8 	.word	0x0801ccc8
 8017540:	0801cbf0 	.word	0x0801cbf0

08017544 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af02      	add	r7, sp, #8
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	4613      	mov	r3, r2
 8017550:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017552:	79fa      	ldrb	r2, [r7, #7]
 8017554:	4944      	ldr	r1, [pc, #272]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 8017556:	4613      	mov	r3, r2
 8017558:	005b      	lsls	r3, r3, #1
 801755a:	4413      	add	r3, r2
 801755c:	00db      	lsls	r3, r3, #3
 801755e:	440b      	add	r3, r1
 8017560:	3314      	adds	r3, #20
 8017562:	781b      	ldrb	r3, [r3, #0]
 8017564:	2b01      	cmp	r3, #1
 8017566:	d806      	bhi.n	8017576 <etharp_output_to_arp_index+0x32>
 8017568:	4b40      	ldr	r3, [pc, #256]	@ (801766c <etharp_output_to_arp_index+0x128>)
 801756a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801756e:	4940      	ldr	r1, [pc, #256]	@ (8017670 <etharp_output_to_arp_index+0x12c>)
 8017570:	4840      	ldr	r0, [pc, #256]	@ (8017674 <etharp_output_to_arp_index+0x130>)
 8017572:	f002 f937 	bl	80197e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017576:	79fa      	ldrb	r2, [r7, #7]
 8017578:	493b      	ldr	r1, [pc, #236]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 801757a:	4613      	mov	r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4413      	add	r3, r2
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	440b      	add	r3, r1
 8017584:	3314      	adds	r3, #20
 8017586:	781b      	ldrb	r3, [r3, #0]
 8017588:	2b02      	cmp	r3, #2
 801758a:	d153      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801758c:	79fa      	ldrb	r2, [r7, #7]
 801758e:	4936      	ldr	r1, [pc, #216]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 8017590:	4613      	mov	r3, r2
 8017592:	005b      	lsls	r3, r3, #1
 8017594:	4413      	add	r3, r2
 8017596:	00db      	lsls	r3, r3, #3
 8017598:	440b      	add	r3, r1
 801759a:	3312      	adds	r3, #18
 801759c:	881b      	ldrh	r3, [r3, #0]
 801759e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80175a2:	d919      	bls.n	80175d8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80175a4:	79fa      	ldrb	r2, [r7, #7]
 80175a6:	4613      	mov	r3, r2
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	4413      	add	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	4a2e      	ldr	r2, [pc, #184]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 80175b0:	4413      	add	r3, r2
 80175b2:	3304      	adds	r3, #4
 80175b4:	4619      	mov	r1, r3
 80175b6:	68f8      	ldr	r0, [r7, #12]
 80175b8:	f000 fb4c 	bl	8017c54 <etharp_request>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d138      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80175c2:	79fa      	ldrb	r2, [r7, #7]
 80175c4:	4928      	ldr	r1, [pc, #160]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 80175c6:	4613      	mov	r3, r2
 80175c8:	005b      	lsls	r3, r3, #1
 80175ca:	4413      	add	r3, r2
 80175cc:	00db      	lsls	r3, r3, #3
 80175ce:	440b      	add	r3, r1
 80175d0:	3314      	adds	r3, #20
 80175d2:	2203      	movs	r2, #3
 80175d4:	701a      	strb	r2, [r3, #0]
 80175d6:	e02d      	b.n	8017634 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80175d8:	79fa      	ldrb	r2, [r7, #7]
 80175da:	4923      	ldr	r1, [pc, #140]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 80175dc:	4613      	mov	r3, r2
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	440b      	add	r3, r1
 80175e6:	3312      	adds	r3, #18
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80175ee:	d321      	bcc.n	8017634 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80175f0:	79fa      	ldrb	r2, [r7, #7]
 80175f2:	4613      	mov	r3, r2
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	4413      	add	r3, r2
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	4a1b      	ldr	r2, [pc, #108]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 80175fc:	4413      	add	r3, r2
 80175fe:	1d19      	adds	r1, r3, #4
 8017600:	79fa      	ldrb	r2, [r7, #7]
 8017602:	4613      	mov	r3, r2
 8017604:	005b      	lsls	r3, r3, #1
 8017606:	4413      	add	r3, r2
 8017608:	00db      	lsls	r3, r3, #3
 801760a:	3308      	adds	r3, #8
 801760c:	4a16      	ldr	r2, [pc, #88]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 801760e:	4413      	add	r3, r2
 8017610:	3304      	adds	r3, #4
 8017612:	461a      	mov	r2, r3
 8017614:	68f8      	ldr	r0, [r7, #12]
 8017616:	f000 fafb 	bl	8017c10 <etharp_request_dst>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d109      	bne.n	8017634 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017620:	79fa      	ldrb	r2, [r7, #7]
 8017622:	4911      	ldr	r1, [pc, #68]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 8017624:	4613      	mov	r3, r2
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	4413      	add	r3, r2
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	440b      	add	r3, r1
 801762e:	3314      	adds	r3, #20
 8017630:	2203      	movs	r2, #3
 8017632:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801763a:	79fa      	ldrb	r2, [r7, #7]
 801763c:	4613      	mov	r3, r2
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	4413      	add	r3, r2
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	3308      	adds	r3, #8
 8017646:	4a08      	ldr	r2, [pc, #32]	@ (8017668 <etharp_output_to_arp_index+0x124>)
 8017648:	4413      	add	r3, r2
 801764a:	3304      	adds	r3, #4
 801764c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017650:	9200      	str	r2, [sp, #0]
 8017652:	460a      	mov	r2, r1
 8017654:	68b9      	ldr	r1, [r7, #8]
 8017656:	68f8      	ldr	r0, [r7, #12]
 8017658:	f001 fe66 	bl	8019328 <ethernet_output>
 801765c:	4603      	mov	r3, r0
}
 801765e:	4618      	mov	r0, r3
 8017660:	3710      	adds	r7, #16
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}
 8017666:	bf00      	nop
 8017668:	24010648 	.word	0x24010648
 801766c:	0801cb78 	.word	0x0801cb78
 8017670:	0801cce8 	.word	0x0801cce8
 8017674:	0801cbf0 	.word	0x0801cbf0

08017678 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b08a      	sub	sp, #40	@ 0x28
 801767c:	af02      	add	r7, sp, #8
 801767e:	60f8      	str	r0, [r7, #12]
 8017680:	60b9      	str	r1, [r7, #8]
 8017682:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d106      	bne.n	801769c <etharp_output+0x24>
 801768e:	4b73      	ldr	r3, [pc, #460]	@ (801785c <etharp_output+0x1e4>)
 8017690:	f240 321e 	movw	r2, #798	@ 0x31e
 8017694:	4972      	ldr	r1, [pc, #456]	@ (8017860 <etharp_output+0x1e8>)
 8017696:	4873      	ldr	r0, [pc, #460]	@ (8017864 <etharp_output+0x1ec>)
 8017698:	f002 f8a4 	bl	80197e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d106      	bne.n	80176b0 <etharp_output+0x38>
 80176a2:	4b6e      	ldr	r3, [pc, #440]	@ (801785c <etharp_output+0x1e4>)
 80176a4:	f240 321f 	movw	r2, #799	@ 0x31f
 80176a8:	496f      	ldr	r1, [pc, #444]	@ (8017868 <etharp_output+0x1f0>)
 80176aa:	486e      	ldr	r0, [pc, #440]	@ (8017864 <etharp_output+0x1ec>)
 80176ac:	f002 f89a 	bl	80197e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d106      	bne.n	80176c4 <etharp_output+0x4c>
 80176b6:	4b69      	ldr	r3, [pc, #420]	@ (801785c <etharp_output+0x1e4>)
 80176b8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80176bc:	496b      	ldr	r1, [pc, #428]	@ (801786c <etharp_output+0x1f4>)
 80176be:	4869      	ldr	r0, [pc, #420]	@ (8017864 <etharp_output+0x1ec>)
 80176c0:	f002 f890 	bl	80197e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	68f9      	ldr	r1, [r7, #12]
 80176ca:	4618      	mov	r0, r3
 80176cc:	f000 ff1e 	bl	801850c <ip4_addr_isbroadcast_u32>
 80176d0:	4603      	mov	r3, r0
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d002      	beq.n	80176dc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80176d6:	4b66      	ldr	r3, [pc, #408]	@ (8017870 <etharp_output+0x1f8>)
 80176d8:	61fb      	str	r3, [r7, #28]
 80176da:	e0af      	b.n	801783c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80176e4:	2be0      	cmp	r3, #224	@ 0xe0
 80176e6:	d118      	bne.n	801771a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80176e8:	2301      	movs	r3, #1
 80176ea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80176ec:	2300      	movs	r3, #0
 80176ee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80176f0:	235e      	movs	r3, #94	@ 0x5e
 80176f2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	3301      	adds	r3, #1
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	3302      	adds	r3, #2
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	3303      	adds	r3, #3
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017712:	f107 0310 	add.w	r3, r7, #16
 8017716:	61fb      	str	r3, [r7, #28]
 8017718:	e090      	b.n	801783c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	3304      	adds	r3, #4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	405a      	eors	r2, r3
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3308      	adds	r3, #8
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	4013      	ands	r3, r2
 801772e:	2b00      	cmp	r3, #0
 8017730:	d012      	beq.n	8017758 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017738:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801773c:	4293      	cmp	r3, r2
 801773e:	d00b      	beq.n	8017758 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	330c      	adds	r3, #12
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d003      	beq.n	8017752 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	330c      	adds	r3, #12
 801774e:	61bb      	str	r3, [r7, #24]
 8017750:	e002      	b.n	8017758 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017752:	f06f 0303 	mvn.w	r3, #3
 8017756:	e07d      	b.n	8017854 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017758:	4b46      	ldr	r3, [pc, #280]	@ (8017874 <etharp_output+0x1fc>)
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	4619      	mov	r1, r3
 801775e:	4a46      	ldr	r2, [pc, #280]	@ (8017878 <etharp_output+0x200>)
 8017760:	460b      	mov	r3, r1
 8017762:	005b      	lsls	r3, r3, #1
 8017764:	440b      	add	r3, r1
 8017766:	00db      	lsls	r3, r3, #3
 8017768:	4413      	add	r3, r2
 801776a:	3314      	adds	r3, #20
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d925      	bls.n	80177be <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017772:	4b40      	ldr	r3, [pc, #256]	@ (8017874 <etharp_output+0x1fc>)
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	4619      	mov	r1, r3
 8017778:	4a3f      	ldr	r2, [pc, #252]	@ (8017878 <etharp_output+0x200>)
 801777a:	460b      	mov	r3, r1
 801777c:	005b      	lsls	r3, r3, #1
 801777e:	440b      	add	r3, r1
 8017780:	00db      	lsls	r3, r3, #3
 8017782:	4413      	add	r3, r2
 8017784:	3308      	adds	r3, #8
 8017786:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017788:	68fa      	ldr	r2, [r7, #12]
 801778a:	429a      	cmp	r2, r3
 801778c:	d117      	bne.n	80177be <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801778e:	69bb      	ldr	r3, [r7, #24]
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	4b38      	ldr	r3, [pc, #224]	@ (8017874 <etharp_output+0x1fc>)
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	4618      	mov	r0, r3
 8017798:	4937      	ldr	r1, [pc, #220]	@ (8017878 <etharp_output+0x200>)
 801779a:	4603      	mov	r3, r0
 801779c:	005b      	lsls	r3, r3, #1
 801779e:	4403      	add	r3, r0
 80177a0:	00db      	lsls	r3, r3, #3
 80177a2:	440b      	add	r3, r1
 80177a4:	3304      	adds	r3, #4
 80177a6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d108      	bne.n	80177be <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80177ac:	4b31      	ldr	r3, [pc, #196]	@ (8017874 <etharp_output+0x1fc>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	461a      	mov	r2, r3
 80177b2:	68b9      	ldr	r1, [r7, #8]
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f7ff fec5 	bl	8017544 <etharp_output_to_arp_index>
 80177ba:	4603      	mov	r3, r0
 80177bc:	e04a      	b.n	8017854 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80177be:	2300      	movs	r3, #0
 80177c0:	75fb      	strb	r3, [r7, #23]
 80177c2:	e031      	b.n	8017828 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177c4:	7dfa      	ldrb	r2, [r7, #23]
 80177c6:	492c      	ldr	r1, [pc, #176]	@ (8017878 <etharp_output+0x200>)
 80177c8:	4613      	mov	r3, r2
 80177ca:	005b      	lsls	r3, r3, #1
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	3314      	adds	r3, #20
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	2b01      	cmp	r3, #1
 80177d8:	d923      	bls.n	8017822 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80177da:	7dfa      	ldrb	r2, [r7, #23]
 80177dc:	4926      	ldr	r1, [pc, #152]	@ (8017878 <etharp_output+0x200>)
 80177de:	4613      	mov	r3, r2
 80177e0:	005b      	lsls	r3, r3, #1
 80177e2:	4413      	add	r3, r2
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	440b      	add	r3, r1
 80177e8:	3308      	adds	r3, #8
 80177ea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177ec:	68fa      	ldr	r2, [r7, #12]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d117      	bne.n	8017822 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80177f2:	69bb      	ldr	r3, [r7, #24]
 80177f4:	6819      	ldr	r1, [r3, #0]
 80177f6:	7dfa      	ldrb	r2, [r7, #23]
 80177f8:	481f      	ldr	r0, [pc, #124]	@ (8017878 <etharp_output+0x200>)
 80177fa:	4613      	mov	r3, r2
 80177fc:	005b      	lsls	r3, r3, #1
 80177fe:	4413      	add	r3, r2
 8017800:	00db      	lsls	r3, r3, #3
 8017802:	4403      	add	r3, r0
 8017804:	3304      	adds	r3, #4
 8017806:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017808:	4299      	cmp	r1, r3
 801780a:	d10a      	bne.n	8017822 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801780c:	4a19      	ldr	r2, [pc, #100]	@ (8017874 <etharp_output+0x1fc>)
 801780e:	7dfb      	ldrb	r3, [r7, #23]
 8017810:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017812:	7dfb      	ldrb	r3, [r7, #23]
 8017814:	461a      	mov	r2, r3
 8017816:	68b9      	ldr	r1, [r7, #8]
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	f7ff fe93 	bl	8017544 <etharp_output_to_arp_index>
 801781e:	4603      	mov	r3, r0
 8017820:	e018      	b.n	8017854 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017822:	7dfb      	ldrb	r3, [r7, #23]
 8017824:	3301      	adds	r3, #1
 8017826:	75fb      	strb	r3, [r7, #23]
 8017828:	7dfb      	ldrb	r3, [r7, #23]
 801782a:	2b09      	cmp	r3, #9
 801782c:	d9ca      	bls.n	80177c4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801782e:	68ba      	ldr	r2, [r7, #8]
 8017830:	69b9      	ldr	r1, [r7, #24]
 8017832:	68f8      	ldr	r0, [r7, #12]
 8017834:	f000 f822 	bl	801787c <etharp_query>
 8017838:	4603      	mov	r3, r0
 801783a:	e00b      	b.n	8017854 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8017842:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	68b9      	ldr	r1, [r7, #8]
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f001 fd6b 	bl	8019328 <ethernet_output>
 8017852:	4603      	mov	r3, r0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3720      	adds	r7, #32
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}
 801785c:	0801cb78 	.word	0x0801cb78
 8017860:	0801ccc8 	.word	0x0801ccc8
 8017864:	0801cbf0 	.word	0x0801cbf0
 8017868:	0801cd18 	.word	0x0801cd18
 801786c:	0801ccb8 	.word	0x0801ccb8
 8017870:	0801d374 	.word	0x0801d374
 8017874:	24010738 	.word	0x24010738
 8017878:	24010648 	.word	0x24010648

0801787c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08c      	sub	sp, #48	@ 0x30
 8017880:	af02      	add	r7, sp, #8
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	3326      	adds	r3, #38	@ 0x26
 801788c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801788e:	23ff      	movs	r3, #255	@ 0xff
 8017890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017894:	2300      	movs	r3, #0
 8017896:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	68f9      	ldr	r1, [r7, #12]
 801789e:	4618      	mov	r0, r3
 80178a0:	f000 fe34 	bl	801850c <ip4_addr_isbroadcast_u32>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d10c      	bne.n	80178c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178b2:	2be0      	cmp	r3, #224	@ 0xe0
 80178b4:	d006      	beq.n	80178c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d003      	beq.n	80178c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d102      	bne.n	80178ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178c4:	f06f 030f 	mvn.w	r3, #15
 80178c8:	e101      	b.n	8017ace <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80178ca:	68fa      	ldr	r2, [r7, #12]
 80178cc:	2101      	movs	r1, #1
 80178ce:	68b8      	ldr	r0, [r7, #8]
 80178d0:	f7ff fb60 	bl	8016f94 <etharp_find_entry>
 80178d4:	4603      	mov	r3, r0
 80178d6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80178d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	da02      	bge.n	80178e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80178e0:	8a7b      	ldrh	r3, [r7, #18]
 80178e2:	b25b      	sxtb	r3, r3
 80178e4:	e0f3      	b.n	8017ace <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80178e6:	8a7b      	ldrh	r3, [r7, #18]
 80178e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80178ea:	d906      	bls.n	80178fa <etharp_query+0x7e>
 80178ec:	4b7a      	ldr	r3, [pc, #488]	@ (8017ad8 <etharp_query+0x25c>)
 80178ee:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80178f2:	497a      	ldr	r1, [pc, #488]	@ (8017adc <etharp_query+0x260>)
 80178f4:	487a      	ldr	r0, [pc, #488]	@ (8017ae0 <etharp_query+0x264>)
 80178f6:	f001 ff75 	bl	80197e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80178fa:	8a7b      	ldrh	r3, [r7, #18]
 80178fc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80178fe:	7c7a      	ldrb	r2, [r7, #17]
 8017900:	4978      	ldr	r1, [pc, #480]	@ (8017ae4 <etharp_query+0x268>)
 8017902:	4613      	mov	r3, r2
 8017904:	005b      	lsls	r3, r3, #1
 8017906:	4413      	add	r3, r2
 8017908:	00db      	lsls	r3, r3, #3
 801790a:	440b      	add	r3, r1
 801790c:	3314      	adds	r3, #20
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d115      	bne.n	8017940 <etharp_query+0xc4>
    is_new_entry = 1;
 8017914:	2301      	movs	r3, #1
 8017916:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017918:	7c7a      	ldrb	r2, [r7, #17]
 801791a:	4972      	ldr	r1, [pc, #456]	@ (8017ae4 <etharp_query+0x268>)
 801791c:	4613      	mov	r3, r2
 801791e:	005b      	lsls	r3, r3, #1
 8017920:	4413      	add	r3, r2
 8017922:	00db      	lsls	r3, r3, #3
 8017924:	440b      	add	r3, r1
 8017926:	3314      	adds	r3, #20
 8017928:	2201      	movs	r2, #1
 801792a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801792c:	7c7a      	ldrb	r2, [r7, #17]
 801792e:	496d      	ldr	r1, [pc, #436]	@ (8017ae4 <etharp_query+0x268>)
 8017930:	4613      	mov	r3, r2
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	4413      	add	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	440b      	add	r3, r1
 801793a:	3308      	adds	r3, #8
 801793c:	68fa      	ldr	r2, [r7, #12]
 801793e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017940:	7c7a      	ldrb	r2, [r7, #17]
 8017942:	4968      	ldr	r1, [pc, #416]	@ (8017ae4 <etharp_query+0x268>)
 8017944:	4613      	mov	r3, r2
 8017946:	005b      	lsls	r3, r3, #1
 8017948:	4413      	add	r3, r2
 801794a:	00db      	lsls	r3, r3, #3
 801794c:	440b      	add	r3, r1
 801794e:	3314      	adds	r3, #20
 8017950:	781b      	ldrb	r3, [r3, #0]
 8017952:	2b01      	cmp	r3, #1
 8017954:	d011      	beq.n	801797a <etharp_query+0xfe>
 8017956:	7c7a      	ldrb	r2, [r7, #17]
 8017958:	4962      	ldr	r1, [pc, #392]	@ (8017ae4 <etharp_query+0x268>)
 801795a:	4613      	mov	r3, r2
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	4413      	add	r3, r2
 8017960:	00db      	lsls	r3, r3, #3
 8017962:	440b      	add	r3, r1
 8017964:	3314      	adds	r3, #20
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	2b01      	cmp	r3, #1
 801796a:	d806      	bhi.n	801797a <etharp_query+0xfe>
 801796c:	4b5a      	ldr	r3, [pc, #360]	@ (8017ad8 <etharp_query+0x25c>)
 801796e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8017972:	495d      	ldr	r1, [pc, #372]	@ (8017ae8 <etharp_query+0x26c>)
 8017974:	485a      	ldr	r0, [pc, #360]	@ (8017ae0 <etharp_query+0x264>)
 8017976:	f001 ff35 	bl	80197e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801797a:	6a3b      	ldr	r3, [r7, #32]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <etharp_query+0x10a>
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d10c      	bne.n	80179a0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017986:	68b9      	ldr	r1, [r7, #8]
 8017988:	68f8      	ldr	r0, [r7, #12]
 801798a:	f000 f963 	bl	8017c54 <etharp_request>
 801798e:	4603      	mov	r3, r0
 8017990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d102      	bne.n	80179a0 <etharp_query+0x124>
      return result;
 801799a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801799e:	e096      	b.n	8017ace <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d106      	bne.n	80179b4 <etharp_query+0x138>
 80179a6:	4b4c      	ldr	r3, [pc, #304]	@ (8017ad8 <etharp_query+0x25c>)
 80179a8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80179ac:	494f      	ldr	r1, [pc, #316]	@ (8017aec <etharp_query+0x270>)
 80179ae:	484c      	ldr	r0, [pc, #304]	@ (8017ae0 <etharp_query+0x264>)
 80179b0:	f001 ff18 	bl	80197e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80179b4:	7c7a      	ldrb	r2, [r7, #17]
 80179b6:	494b      	ldr	r1, [pc, #300]	@ (8017ae4 <etharp_query+0x268>)
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	440b      	add	r3, r1
 80179c2:	3314      	adds	r3, #20
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	2b01      	cmp	r3, #1
 80179c8:	d917      	bls.n	80179fa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80179ca:	4a49      	ldr	r2, [pc, #292]	@ (8017af0 <etharp_query+0x274>)
 80179cc:	7c7b      	ldrb	r3, [r7, #17]
 80179ce:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80179d0:	7c7a      	ldrb	r2, [r7, #17]
 80179d2:	4613      	mov	r3, r2
 80179d4:	005b      	lsls	r3, r3, #1
 80179d6:	4413      	add	r3, r2
 80179d8:	00db      	lsls	r3, r3, #3
 80179da:	3308      	adds	r3, #8
 80179dc:	4a41      	ldr	r2, [pc, #260]	@ (8017ae4 <etharp_query+0x268>)
 80179de:	4413      	add	r3, r2
 80179e0:	3304      	adds	r3, #4
 80179e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80179e6:	9200      	str	r2, [sp, #0]
 80179e8:	697a      	ldr	r2, [r7, #20]
 80179ea:	6879      	ldr	r1, [r7, #4]
 80179ec:	68f8      	ldr	r0, [r7, #12]
 80179ee:	f001 fc9b 	bl	8019328 <ethernet_output>
 80179f2:	4603      	mov	r3, r0
 80179f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80179f8:	e067      	b.n	8017aca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80179fa:	7c7a      	ldrb	r2, [r7, #17]
 80179fc:	4939      	ldr	r1, [pc, #228]	@ (8017ae4 <etharp_query+0x268>)
 80179fe:	4613      	mov	r3, r2
 8017a00:	005b      	lsls	r3, r3, #1
 8017a02:	4413      	add	r3, r2
 8017a04:	00db      	lsls	r3, r3, #3
 8017a06:	440b      	add	r3, r1
 8017a08:	3314      	adds	r3, #20
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	2b01      	cmp	r3, #1
 8017a0e:	d15c      	bne.n	8017aca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017a10:	2300      	movs	r3, #0
 8017a12:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a18:	e01c      	b.n	8017a54 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017a1a:	69fb      	ldr	r3, [r7, #28]
 8017a1c:	895a      	ldrh	r2, [r3, #10]
 8017a1e:	69fb      	ldr	r3, [r7, #28]
 8017a20:	891b      	ldrh	r3, [r3, #8]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	d10a      	bne.n	8017a3c <etharp_query+0x1c0>
 8017a26:	69fb      	ldr	r3, [r7, #28]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d006      	beq.n	8017a3c <etharp_query+0x1c0>
 8017a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8017ad8 <etharp_query+0x25c>)
 8017a30:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017a34:	492f      	ldr	r1, [pc, #188]	@ (8017af4 <etharp_query+0x278>)
 8017a36:	482a      	ldr	r0, [pc, #168]	@ (8017ae0 <etharp_query+0x264>)
 8017a38:	f001 fed4 	bl	80197e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	7b1b      	ldrb	r3, [r3, #12]
 8017a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d002      	beq.n	8017a4e <etharp_query+0x1d2>
        copy_needed = 1;
 8017a48:	2301      	movs	r3, #1
 8017a4a:	61bb      	str	r3, [r7, #24]
        break;
 8017a4c:	e005      	b.n	8017a5a <etharp_query+0x1de>
      }
      p = p->next;
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d1df      	bne.n	8017a1a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d007      	beq.n	8017a70 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8017a66:	200e      	movs	r0, #14
 8017a68:	f7f9 f9c6 	bl	8010df8 <pbuf_clone>
 8017a6c:	61f8      	str	r0, [r7, #28]
 8017a6e:	e004      	b.n	8017a7a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017a74:	69f8      	ldr	r0, [r7, #28]
 8017a76:	f7f8 ffed 	bl	8010a54 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017a7a:	69fb      	ldr	r3, [r7, #28]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d021      	beq.n	8017ac4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017a80:	7c7a      	ldrb	r2, [r7, #17]
 8017a82:	4918      	ldr	r1, [pc, #96]	@ (8017ae4 <etharp_query+0x268>)
 8017a84:	4613      	mov	r3, r2
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	4413      	add	r3, r2
 8017a8a:	00db      	lsls	r3, r3, #3
 8017a8c:	440b      	add	r3, r1
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d00a      	beq.n	8017aaa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017a94:	7c7a      	ldrb	r2, [r7, #17]
 8017a96:	4913      	ldr	r1, [pc, #76]	@ (8017ae4 <etharp_query+0x268>)
 8017a98:	4613      	mov	r3, r2
 8017a9a:	005b      	lsls	r3, r3, #1
 8017a9c:	4413      	add	r3, r2
 8017a9e:	00db      	lsls	r3, r3, #3
 8017aa0:	440b      	add	r3, r1
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7f8 ff2f 	bl	8010908 <pbuf_free>
      }
      arp_table[i].q = p;
 8017aaa:	7c7a      	ldrb	r2, [r7, #17]
 8017aac:	490d      	ldr	r1, [pc, #52]	@ (8017ae4 <etharp_query+0x268>)
 8017aae:	4613      	mov	r3, r2
 8017ab0:	005b      	lsls	r3, r3, #1
 8017ab2:	4413      	add	r3, r2
 8017ab4:	00db      	lsls	r3, r3, #3
 8017ab6:	440b      	add	r3, r1
 8017ab8:	69fa      	ldr	r2, [r7, #28]
 8017aba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017ac2:	e002      	b.n	8017aca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017ac4:	23ff      	movs	r3, #255	@ 0xff
 8017ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3728      	adds	r7, #40	@ 0x28
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	0801cb78 	.word	0x0801cb78
 8017adc:	0801cd24 	.word	0x0801cd24
 8017ae0:	0801cbf0 	.word	0x0801cbf0
 8017ae4:	24010648 	.word	0x24010648
 8017ae8:	0801cd34 	.word	0x0801cd34
 8017aec:	0801cd18 	.word	0x0801cd18
 8017af0:	24010738 	.word	0x24010738
 8017af4:	0801cd5c 	.word	0x0801cd5c

08017af8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b08a      	sub	sp, #40	@ 0x28
 8017afc:	af02      	add	r7, sp, #8
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	607a      	str	r2, [r7, #4]
 8017b04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017b06:	2300      	movs	r3, #0
 8017b08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d106      	bne.n	8017b1e <etharp_raw+0x26>
 8017b10:	4b3a      	ldr	r3, [pc, #232]	@ (8017bfc <etharp_raw+0x104>)
 8017b12:	f240 4257 	movw	r2, #1111	@ 0x457
 8017b16:	493a      	ldr	r1, [pc, #232]	@ (8017c00 <etharp_raw+0x108>)
 8017b18:	483a      	ldr	r0, [pc, #232]	@ (8017c04 <etharp_raw+0x10c>)
 8017b1a:	f001 fe63 	bl	80197e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017b1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b22:	211c      	movs	r1, #28
 8017b24:	200e      	movs	r0, #14
 8017b26:	f7f8 fc07 	bl	8010338 <pbuf_alloc>
 8017b2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d102      	bne.n	8017b38 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b36:	e05d      	b.n	8017bf4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	895b      	ldrh	r3, [r3, #10]
 8017b3c:	2b1b      	cmp	r3, #27
 8017b3e:	d806      	bhi.n	8017b4e <etharp_raw+0x56>
 8017b40:	4b2e      	ldr	r3, [pc, #184]	@ (8017bfc <etharp_raw+0x104>)
 8017b42:	f240 4262 	movw	r2, #1122	@ 0x462
 8017b46:	4930      	ldr	r1, [pc, #192]	@ (8017c08 <etharp_raw+0x110>)
 8017b48:	482e      	ldr	r0, [pc, #184]	@ (8017c04 <etharp_raw+0x10c>)
 8017b4a:	f001 fe4b 	bl	80197e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017b4e:	69bb      	ldr	r3, [r7, #24]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017b54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7f7 fa18 	bl	800ef8c <lwip_htons>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	461a      	mov	r2, r3
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017b6a:	2b06      	cmp	r3, #6
 8017b6c:	d006      	beq.n	8017b7c <etharp_raw+0x84>
 8017b6e:	4b23      	ldr	r3, [pc, #140]	@ (8017bfc <etharp_raw+0x104>)
 8017b70:	f240 4269 	movw	r2, #1129	@ 0x469
 8017b74:	4925      	ldr	r1, [pc, #148]	@ (8017c0c <etharp_raw+0x114>)
 8017b76:	4823      	ldr	r0, [pc, #140]	@ (8017c04 <etharp_raw+0x10c>)
 8017b78:	f001 fe34 	bl	80197e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	3308      	adds	r3, #8
 8017b80:	2206      	movs	r2, #6
 8017b82:	6839      	ldr	r1, [r7, #0]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f001 fed4 	bl	8019932 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	3312      	adds	r3, #18
 8017b8e:	2206      	movs	r2, #6
 8017b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017b92:	4618      	mov	r0, r3
 8017b94:	f001 fecd 	bl	8019932 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	330e      	adds	r3, #14
 8017b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b9e:	6812      	ldr	r2, [r2, #0]
 8017ba0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	3318      	adds	r3, #24
 8017ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ba8:	6812      	ldr	r2, [r2, #0]
 8017baa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	701a      	strb	r2, [r3, #0]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	f042 0201 	orr.w	r2, r2, #1
 8017bb8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f042 0208 	orr.w	r2, r2, #8
 8017bc2:	709a      	strb	r2, [r3, #2]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	2206      	movs	r2, #6
 8017bcc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	2204      	movs	r2, #4
 8017bd2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017bd4:	f640 0306 	movw	r3, #2054	@ 0x806
 8017bd8:	9300      	str	r3, [sp, #0]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	68ba      	ldr	r2, [r7, #8]
 8017bde:	69b9      	ldr	r1, [r7, #24]
 8017be0:	68f8      	ldr	r0, [r7, #12]
 8017be2:	f001 fba1 	bl	8019328 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017be6:	69b8      	ldr	r0, [r7, #24]
 8017be8:	f7f8 fe8e 	bl	8010908 <pbuf_free>
  p = NULL;
 8017bec:	2300      	movs	r3, #0
 8017bee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017bf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3720      	adds	r7, #32
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	0801cb78 	.word	0x0801cb78
 8017c00:	0801ccc8 	.word	0x0801ccc8
 8017c04:	0801cbf0 	.word	0x0801cbf0
 8017c08:	0801cd78 	.word	0x0801cd78
 8017c0c:	0801cdac 	.word	0x0801cdac

08017c10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b088      	sub	sp, #32
 8017c14:	af04      	add	r7, sp, #16
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	9203      	str	r2, [sp, #12]
 8017c30:	68ba      	ldr	r2, [r7, #8]
 8017c32:	9202      	str	r2, [sp, #8]
 8017c34:	4a06      	ldr	r2, [pc, #24]	@ (8017c50 <etharp_request_dst+0x40>)
 8017c36:	9201      	str	r2, [sp, #4]
 8017c38:	9300      	str	r3, [sp, #0]
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	68f8      	ldr	r0, [r7, #12]
 8017c40:	f7ff ff5a 	bl	8017af8 <etharp_raw>
 8017c44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017c46:	4618      	mov	r0, r3
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
 8017c4e:	bf00      	nop
 8017c50:	0801d37c 	.word	0x0801d37c

08017c54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017c5e:	4a05      	ldr	r2, [pc, #20]	@ (8017c74 <etharp_request+0x20>)
 8017c60:	6839      	ldr	r1, [r7, #0]
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7ff ffd4 	bl	8017c10 <etharp_request_dst>
 8017c68:	4603      	mov	r3, r0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	0801d374 	.word	0x0801d374

08017c78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b08e      	sub	sp, #56	@ 0x38
 8017c7c:	af04      	add	r7, sp, #16
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017c82:	4b87      	ldr	r3, [pc, #540]	@ (8017ea0 <icmp_input+0x228>)
 8017c84:	689b      	ldr	r3, [r3, #8]
 8017c86:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	f003 030f 	and.w	r3, r3, #15
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	b2db      	uxtb	r3, r3
 8017c96:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017c98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c9a:	2b13      	cmp	r3, #19
 8017c9c:	f240 80e8 	bls.w	8017e70 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	895b      	ldrh	r3, [r3, #10]
 8017ca4:	2b03      	cmp	r3, #3
 8017ca6:	f240 80e5 	bls.w	8017e74 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017cb4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f000 80d2 	beq.w	8017e62 <icmp_input+0x1ea>
 8017cbe:	2b08      	cmp	r3, #8
 8017cc0:	f040 80d2 	bne.w	8017e68 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017cc4:	4b77      	ldr	r3, [pc, #476]	@ (8017ea4 <icmp_input+0x22c>)
 8017cc6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017cc8:	4b75      	ldr	r3, [pc, #468]	@ (8017ea0 <icmp_input+0x228>)
 8017cca:	695b      	ldr	r3, [r3, #20]
 8017ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017cd0:	2be0      	cmp	r3, #224	@ 0xe0
 8017cd2:	f000 80d6 	beq.w	8017e82 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017cd6:	4b72      	ldr	r3, [pc, #456]	@ (8017ea0 <icmp_input+0x228>)
 8017cd8:	695b      	ldr	r3, [r3, #20]
 8017cda:	4a71      	ldr	r2, [pc, #452]	@ (8017ea0 <icmp_input+0x228>)
 8017cdc:	6812      	ldr	r2, [r2, #0]
 8017cde:	4611      	mov	r1, r2
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f000 fc13 	bl	801850c <ip4_addr_isbroadcast_u32>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	f040 80cc 	bne.w	8017e86 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	891b      	ldrh	r3, [r3, #8]
 8017cf2:	2b07      	cmp	r3, #7
 8017cf4:	f240 80c0 	bls.w	8017e78 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f7f7 f9e4 	bl	800f0c6 <inet_chksum_pbuf>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d003      	beq.n	8017d0c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f7f8 fdff 	bl	8010908 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017d0a:	e0c5      	b.n	8017e98 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017d0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d0e:	330e      	adds	r3, #14
 8017d10:	4619      	mov	r1, r3
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7f8 fd62 	bl	80107dc <pbuf_add_header>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d04b      	beq.n	8017db6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	891a      	ldrh	r2, [r3, #8]
 8017d22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d24:	4413      	add	r3, r2
 8017d26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	891b      	ldrh	r3, [r3, #8]
 8017d2c:	8b7a      	ldrh	r2, [r7, #26]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	f0c0 80ab 	bcc.w	8017e8a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017d34:	8b7b      	ldrh	r3, [r7, #26]
 8017d36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	200e      	movs	r0, #14
 8017d3e:	f7f8 fafb 	bl	8010338 <pbuf_alloc>
 8017d42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f000 80a1 	beq.w	8017e8e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	895b      	ldrh	r3, [r3, #10]
 8017d50:	461a      	mov	r2, r3
 8017d52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d54:	3308      	adds	r3, #8
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d203      	bcs.n	8017d62 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017d5a:	6978      	ldr	r0, [r7, #20]
 8017d5c:	f7f8 fdd4 	bl	8010908 <pbuf_free>
          goto icmperr;
 8017d60:	e096      	b.n	8017e90 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f001 fde1 	bl	8019932 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017d70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d72:	4619      	mov	r1, r3
 8017d74:	6978      	ldr	r0, [r7, #20]
 8017d76:	f7f8 fd41 	bl	80107fc <pbuf_remove_header>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d009      	beq.n	8017d94 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017d80:	4b49      	ldr	r3, [pc, #292]	@ (8017ea8 <icmp_input+0x230>)
 8017d82:	22b6      	movs	r2, #182	@ 0xb6
 8017d84:	4949      	ldr	r1, [pc, #292]	@ (8017eac <icmp_input+0x234>)
 8017d86:	484a      	ldr	r0, [pc, #296]	@ (8017eb0 <icmp_input+0x238>)
 8017d88:	f001 fd2c 	bl	80197e4 <iprintf>
          pbuf_free(r);
 8017d8c:	6978      	ldr	r0, [r7, #20]
 8017d8e:	f7f8 fdbb 	bl	8010908 <pbuf_free>
          goto icmperr;
 8017d92:	e07d      	b.n	8017e90 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017d94:	6879      	ldr	r1, [r7, #4]
 8017d96:	6978      	ldr	r0, [r7, #20]
 8017d98:	f7f8 feea 	bl	8010b70 <pbuf_copy>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d003      	beq.n	8017daa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017da2:	6978      	ldr	r0, [r7, #20]
 8017da4:	f7f8 fdb0 	bl	8010908 <pbuf_free>
          goto icmperr;
 8017da8:	e072      	b.n	8017e90 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f7f8 fdac 	bl	8010908 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	607b      	str	r3, [r7, #4]
 8017db4:	e00f      	b.n	8017dd6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017db6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017db8:	330e      	adds	r3, #14
 8017dba:	4619      	mov	r1, r3
 8017dbc:	6878      	ldr	r0, [r7, #4]
 8017dbe:	f7f8 fd1d 	bl	80107fc <pbuf_remove_header>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d006      	beq.n	8017dd6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017dc8:	4b37      	ldr	r3, [pc, #220]	@ (8017ea8 <icmp_input+0x230>)
 8017dca:	22c7      	movs	r2, #199	@ 0xc7
 8017dcc:	4939      	ldr	r1, [pc, #228]	@ (8017eb4 <icmp_input+0x23c>)
 8017dce:	4838      	ldr	r0, [pc, #224]	@ (8017eb0 <icmp_input+0x238>)
 8017dd0:	f001 fd08 	bl	80197e4 <iprintf>
          goto icmperr;
 8017dd4:	e05c      	b.n	8017e90 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ddc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dde:	4619      	mov	r1, r3
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f7f8 fcfb 	bl	80107dc <pbuf_add_header>
 8017de6:	4603      	mov	r3, r0
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d13c      	bne.n	8017e66 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017dfa:	4b29      	ldr	r3, [pc, #164]	@ (8017ea0 <icmp_input+0x228>)
 8017dfc:	691a      	ldr	r2, [r3, #16]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	2200      	movs	r2, #0
 8017e06:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	885b      	ldrh	r3, [r3, #2]
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d907      	bls.n	8017e26 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	885b      	ldrh	r3, [r3, #2]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	3309      	adds	r3, #9
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	805a      	strh	r2, [r3, #2]
 8017e24:	e006      	b.n	8017e34 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	885b      	ldrh	r3, [r3, #2]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	3308      	adds	r3, #8
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	22ff      	movs	r2, #255	@ 0xff
 8017e38:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	729a      	strb	r2, [r3, #10]
 8017e40:	2200      	movs	r2, #0
 8017e42:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017e44:	683b      	ldr	r3, [r7, #0]
 8017e46:	9302      	str	r3, [sp, #8]
 8017e48:	2301      	movs	r3, #1
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	9300      	str	r3, [sp, #0]
 8017e50:	23ff      	movs	r3, #255	@ 0xff
 8017e52:	2200      	movs	r2, #0
 8017e54:	69f9      	ldr	r1, [r7, #28]
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f000 fa80 	bl	801835c <ip4_output_if>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017e60:	e001      	b.n	8017e66 <icmp_input+0x1ee>
      break;
 8017e62:	bf00      	nop
 8017e64:	e000      	b.n	8017e68 <icmp_input+0x1f0>
      break;
 8017e66:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f7f8 fd4d 	bl	8010908 <pbuf_free>
  return;
 8017e6e:	e013      	b.n	8017e98 <icmp_input+0x220>
    goto lenerr;
 8017e70:	bf00      	nop
 8017e72:	e002      	b.n	8017e7a <icmp_input+0x202>
    goto lenerr;
 8017e74:	bf00      	nop
 8017e76:	e000      	b.n	8017e7a <icmp_input+0x202>
        goto lenerr;
 8017e78:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f7f8 fd44 	bl	8010908 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e80:	e00a      	b.n	8017e98 <icmp_input+0x220>
        goto icmperr;
 8017e82:	bf00      	nop
 8017e84:	e004      	b.n	8017e90 <icmp_input+0x218>
        goto icmperr;
 8017e86:	bf00      	nop
 8017e88:	e002      	b.n	8017e90 <icmp_input+0x218>
          goto icmperr;
 8017e8a:	bf00      	nop
 8017e8c:	e000      	b.n	8017e90 <icmp_input+0x218>
          goto icmperr;
 8017e8e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7f8 fd39 	bl	8010908 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e96:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017e98:	3728      	adds	r7, #40	@ 0x28
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	24009b28 	.word	0x24009b28
 8017ea4:	24009b3c 	.word	0x24009b3c
 8017ea8:	0801cdf0 	.word	0x0801cdf0
 8017eac:	0801ce28 	.word	0x0801ce28
 8017eb0:	0801ce60 	.word	0x0801ce60
 8017eb4:	0801ce88 	.word	0x0801ce88

08017eb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017ec4:	78fb      	ldrb	r3, [r7, #3]
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	2103      	movs	r1, #3
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f000 f814 	bl	8017ef8 <icmp_send_response>
}
 8017ed0:	bf00      	nop
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}

08017ed8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b082      	sub	sp, #8
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ee4:	78fb      	ldrb	r3, [r7, #3]
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	210b      	movs	r1, #11
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f000 f804 	bl	8017ef8 <icmp_send_response>
}
 8017ef0:	bf00      	nop
 8017ef2:	3708      	adds	r7, #8
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b08c      	sub	sp, #48	@ 0x30
 8017efc:	af04      	add	r7, sp, #16
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	460b      	mov	r3, r1
 8017f02:	70fb      	strb	r3, [r7, #3]
 8017f04:	4613      	mov	r3, r2
 8017f06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017f08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017f0c:	2124      	movs	r1, #36	@ 0x24
 8017f0e:	2022      	movs	r0, #34	@ 0x22
 8017f10:	f7f8 fa12 	bl	8010338 <pbuf_alloc>
 8017f14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d056      	beq.n	8017fca <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	895b      	ldrh	r3, [r3, #10]
 8017f20:	2b23      	cmp	r3, #35	@ 0x23
 8017f22:	d806      	bhi.n	8017f32 <icmp_send_response+0x3a>
 8017f24:	4b2b      	ldr	r3, [pc, #172]	@ (8017fd4 <icmp_send_response+0xdc>)
 8017f26:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017f2a:	492b      	ldr	r1, [pc, #172]	@ (8017fd8 <icmp_send_response+0xe0>)
 8017f2c:	482b      	ldr	r0, [pc, #172]	@ (8017fdc <icmp_send_response+0xe4>)
 8017f2e:	f001 fc59 	bl	80197e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	78fa      	ldrb	r2, [r7, #3]
 8017f42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017f44:	697b      	ldr	r3, [r7, #20]
 8017f46:	78ba      	ldrb	r2, [r7, #2]
 8017f48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017f4a:	697b      	ldr	r3, [r7, #20]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	711a      	strb	r2, [r3, #4]
 8017f50:	2200      	movs	r2, #0
 8017f52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	2200      	movs	r2, #0
 8017f58:	719a      	strb	r2, [r3, #6]
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	f103 0008 	add.w	r0, r3, #8
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	221c      	movs	r2, #28
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	f001 fce0 	bl	8019932 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	68db      	ldr	r3, [r3, #12]
 8017f76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017f78:	f107 030c 	add.w	r3, r7, #12
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f000 f82f 	bl	8017fe0 <ip4_route>
 8017f82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d01b      	beq.n	8017fc2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	709a      	strb	r2, [r3, #2]
 8017f90:	2200      	movs	r2, #0
 8017f92:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	895b      	ldrh	r3, [r3, #10]
 8017f98:	4619      	mov	r1, r3
 8017f9a:	6978      	ldr	r0, [r7, #20]
 8017f9c:	f7f7 f881 	bl	800f0a2 <inet_chksum>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	697b      	ldr	r3, [r7, #20]
 8017fa6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017fa8:	f107 020c 	add.w	r2, r7, #12
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	9302      	str	r3, [sp, #8]
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	9301      	str	r3, [sp, #4]
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	9300      	str	r3, [sp, #0]
 8017fb8:	23ff      	movs	r3, #255	@ 0xff
 8017fba:	2100      	movs	r1, #0
 8017fbc:	69f8      	ldr	r0, [r7, #28]
 8017fbe:	f000 f9cd 	bl	801835c <ip4_output_if>
  }
  pbuf_free(q);
 8017fc2:	69f8      	ldr	r0, [r7, #28]
 8017fc4:	f7f8 fca0 	bl	8010908 <pbuf_free>
 8017fc8:	e000      	b.n	8017fcc <icmp_send_response+0xd4>
    return;
 8017fca:	bf00      	nop
}
 8017fcc:	3720      	adds	r7, #32
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	0801cdf0 	.word	0x0801cdf0
 8017fd8:	0801cebc 	.word	0x0801cebc
 8017fdc:	0801ce60 	.word	0x0801ce60

08017fe0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b085      	sub	sp, #20
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017fe8:	4b33      	ldr	r3, [pc, #204]	@ (80180b8 <ip4_route+0xd8>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	60fb      	str	r3, [r7, #12]
 8017fee:	e036      	b.n	801805e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017ff6:	f003 0301 	and.w	r3, r3, #1
 8017ffa:	b2db      	uxtb	r3, r3
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d02b      	beq.n	8018058 <ip4_route+0x78>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018006:	089b      	lsrs	r3, r3, #2
 8018008:	f003 0301 	and.w	r3, r3, #1
 801800c:	b2db      	uxtb	r3, r3
 801800e:	2b00      	cmp	r3, #0
 8018010:	d022      	beq.n	8018058 <ip4_route+0x78>
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	3304      	adds	r3, #4
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d01d      	beq.n	8018058 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	681a      	ldr	r2, [r3, #0]
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	3304      	adds	r3, #4
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	405a      	eors	r2, r3
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	3308      	adds	r3, #8
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4013      	ands	r3, r2
 8018030:	2b00      	cmp	r3, #0
 8018032:	d101      	bne.n	8018038 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	e038      	b.n	80180aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801803e:	f003 0302 	and.w	r3, r3, #2
 8018042:	2b00      	cmp	r3, #0
 8018044:	d108      	bne.n	8018058 <ip4_route+0x78>
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681a      	ldr	r2, [r3, #0]
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	330c      	adds	r3, #12
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	429a      	cmp	r2, r3
 8018052:	d101      	bne.n	8018058 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	e028      	b.n	80180aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	60fb      	str	r3, [r7, #12]
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d1c5      	bne.n	8017ff0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018064:	4b15      	ldr	r3, [pc, #84]	@ (80180bc <ip4_route+0xdc>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d01a      	beq.n	80180a2 <ip4_route+0xc2>
 801806c:	4b13      	ldr	r3, [pc, #76]	@ (80180bc <ip4_route+0xdc>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018074:	f003 0301 	and.w	r3, r3, #1
 8018078:	2b00      	cmp	r3, #0
 801807a:	d012      	beq.n	80180a2 <ip4_route+0xc2>
 801807c:	4b0f      	ldr	r3, [pc, #60]	@ (80180bc <ip4_route+0xdc>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018084:	f003 0304 	and.w	r3, r3, #4
 8018088:	2b00      	cmp	r3, #0
 801808a:	d00a      	beq.n	80180a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801808c:	4b0b      	ldr	r3, [pc, #44]	@ (80180bc <ip4_route+0xdc>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	3304      	adds	r3, #4
 8018092:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018094:	2b00      	cmp	r3, #0
 8018096:	d004      	beq.n	80180a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b7f      	cmp	r3, #127	@ 0x7f
 80180a0:	d101      	bne.n	80180a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80180a2:	2300      	movs	r3, #0
 80180a4:	e001      	b.n	80180aa <ip4_route+0xca>
  }

  return netif_default;
 80180a6:	4b05      	ldr	r3, [pc, #20]	@ (80180bc <ip4_route+0xdc>)
 80180a8:	681b      	ldr	r3, [r3, #0]
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3714      	adds	r7, #20
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr
 80180b6:	bf00      	nop
 80180b8:	240105dc 	.word	0x240105dc
 80180bc:	240105e0 	.word	0x240105e0

080180c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80180ce:	f003 0301 	and.w	r3, r3, #1
 80180d2:	b2db      	uxtb	r3, r3
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d016      	beq.n	8018106 <ip4_input_accept+0x46>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	3304      	adds	r3, #4
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d011      	beq.n	8018106 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180e2:	4b0b      	ldr	r3, [pc, #44]	@ (8018110 <ip4_input_accept+0x50>)
 80180e4:	695a      	ldr	r2, [r3, #20]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	3304      	adds	r3, #4
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	429a      	cmp	r2, r3
 80180ee:	d008      	beq.n	8018102 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80180f0:	4b07      	ldr	r3, [pc, #28]	@ (8018110 <ip4_input_accept+0x50>)
 80180f2:	695b      	ldr	r3, [r3, #20]
 80180f4:	6879      	ldr	r1, [r7, #4]
 80180f6:	4618      	mov	r0, r3
 80180f8:	f000 fa08 	bl	801850c <ip4_addr_isbroadcast_u32>
 80180fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d001      	beq.n	8018106 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018102:	2301      	movs	r3, #1
 8018104:	e000      	b.n	8018108 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018106:	2300      	movs	r3, #0
}
 8018108:	4618      	mov	r0, r3
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}
 8018110:	24009b28 	.word	0x24009b28

08018114 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b086      	sub	sp, #24
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	781b      	ldrb	r3, [r3, #0]
 8018128:	091b      	lsrs	r3, r3, #4
 801812a:	b2db      	uxtb	r3, r3
 801812c:	2b04      	cmp	r3, #4
 801812e:	d004      	beq.n	801813a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f7f8 fbe9 	bl	8010908 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018136:	2300      	movs	r3, #0
 8018138:	e107      	b.n	801834a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801813a:	697b      	ldr	r3, [r7, #20]
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	f003 030f 	and.w	r3, r3, #15
 8018142:	b2db      	uxtb	r3, r3
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	b2db      	uxtb	r3, r3
 8018148:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	885b      	ldrh	r3, [r3, #2]
 801814e:	b29b      	uxth	r3, r3
 8018150:	4618      	mov	r0, r3
 8018152:	f7f6 ff1b 	bl	800ef8c <lwip_htons>
 8018156:	4603      	mov	r3, r0
 8018158:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	891b      	ldrh	r3, [r3, #8]
 801815e:	89ba      	ldrh	r2, [r7, #12]
 8018160:	429a      	cmp	r2, r3
 8018162:	d204      	bcs.n	801816e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018164:	89bb      	ldrh	r3, [r7, #12]
 8018166:	4619      	mov	r1, r3
 8018168:	6878      	ldr	r0, [r7, #4]
 801816a:	f7f8 fa47 	bl	80105fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	895b      	ldrh	r3, [r3, #10]
 8018172:	89fa      	ldrh	r2, [r7, #14]
 8018174:	429a      	cmp	r2, r3
 8018176:	d807      	bhi.n	8018188 <ip4_input+0x74>
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	891b      	ldrh	r3, [r3, #8]
 801817c:	89ba      	ldrh	r2, [r7, #12]
 801817e:	429a      	cmp	r2, r3
 8018180:	d802      	bhi.n	8018188 <ip4_input+0x74>
 8018182:	89fb      	ldrh	r3, [r7, #14]
 8018184:	2b13      	cmp	r3, #19
 8018186:	d804      	bhi.n	8018192 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f7f8 fbbd 	bl	8010908 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801818e:	2300      	movs	r3, #0
 8018190:	e0db      	b.n	801834a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	691b      	ldr	r3, [r3, #16]
 8018196:	4a6f      	ldr	r2, [pc, #444]	@ (8018354 <ip4_input+0x240>)
 8018198:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801819a:	697b      	ldr	r3, [r7, #20]
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	4a6d      	ldr	r2, [pc, #436]	@ (8018354 <ip4_input+0x240>)
 80181a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80181a2:	4b6c      	ldr	r3, [pc, #432]	@ (8018354 <ip4_input+0x240>)
 80181a4:	695b      	ldr	r3, [r3, #20]
 80181a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80181aa:	2be0      	cmp	r3, #224	@ 0xe0
 80181ac:	d112      	bne.n	80181d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80181b4:	f003 0301 	and.w	r3, r3, #1
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d007      	beq.n	80181ce <ip4_input+0xba>
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	3304      	adds	r3, #4
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d002      	beq.n	80181ce <ip4_input+0xba>
      netif = inp;
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	613b      	str	r3, [r7, #16]
 80181cc:	e02a      	b.n	8018224 <ip4_input+0x110>
    } else {
      netif = NULL;
 80181ce:	2300      	movs	r3, #0
 80181d0:	613b      	str	r3, [r7, #16]
 80181d2:	e027      	b.n	8018224 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80181d4:	6838      	ldr	r0, [r7, #0]
 80181d6:	f7ff ff73 	bl	80180c0 <ip4_input_accept>
 80181da:	4603      	mov	r3, r0
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d002      	beq.n	80181e6 <ip4_input+0xd2>
      netif = inp;
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	613b      	str	r3, [r7, #16]
 80181e4:	e01e      	b.n	8018224 <ip4_input+0x110>
    } else {
      netif = NULL;
 80181e6:	2300      	movs	r3, #0
 80181e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80181ea:	4b5a      	ldr	r3, [pc, #360]	@ (8018354 <ip4_input+0x240>)
 80181ec:	695b      	ldr	r3, [r3, #20]
 80181ee:	b2db      	uxtb	r3, r3
 80181f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80181f2:	d017      	beq.n	8018224 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80181f4:	4b58      	ldr	r3, [pc, #352]	@ (8018358 <ip4_input+0x244>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	613b      	str	r3, [r7, #16]
 80181fa:	e00e      	b.n	801821a <ip4_input+0x106>
          if (netif == inp) {
 80181fc:	693a      	ldr	r2, [r7, #16]
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	429a      	cmp	r2, r3
 8018202:	d006      	beq.n	8018212 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018204:	6938      	ldr	r0, [r7, #16]
 8018206:	f7ff ff5b 	bl	80180c0 <ip4_input_accept>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d108      	bne.n	8018222 <ip4_input+0x10e>
 8018210:	e000      	b.n	8018214 <ip4_input+0x100>
            continue;
 8018212:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018214:	693b      	ldr	r3, [r7, #16]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	613b      	str	r3, [r7, #16]
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1ed      	bne.n	80181fc <ip4_input+0xe8>
 8018220:	e000      	b.n	8018224 <ip4_input+0x110>
            break;
 8018222:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018224:	4b4b      	ldr	r3, [pc, #300]	@ (8018354 <ip4_input+0x240>)
 8018226:	691b      	ldr	r3, [r3, #16]
 8018228:	6839      	ldr	r1, [r7, #0]
 801822a:	4618      	mov	r0, r3
 801822c:	f000 f96e 	bl	801850c <ip4_addr_isbroadcast_u32>
 8018230:	4603      	mov	r3, r0
 8018232:	2b00      	cmp	r3, #0
 8018234:	d105      	bne.n	8018242 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018236:	4b47      	ldr	r3, [pc, #284]	@ (8018354 <ip4_input+0x240>)
 8018238:	691b      	ldr	r3, [r3, #16]
 801823a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801823e:	2be0      	cmp	r3, #224	@ 0xe0
 8018240:	d104      	bne.n	801824c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f7f8 fb60 	bl	8010908 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018248:	2300      	movs	r3, #0
 801824a:	e07e      	b.n	801834a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d104      	bne.n	801825c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7f8 fb58 	bl	8010908 <pbuf_free>
    return ERR_OK;
 8018258:	2300      	movs	r3, #0
 801825a:	e076      	b.n	801834a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	88db      	ldrh	r3, [r3, #6]
 8018260:	b29b      	uxth	r3, r3
 8018262:	461a      	mov	r2, r3
 8018264:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8018268:	4013      	ands	r3, r2
 801826a:	2b00      	cmp	r3, #0
 801826c:	d00b      	beq.n	8018286 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f000 fc92 	bl	8018b98 <ip4_reass>
 8018274:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d101      	bne.n	8018280 <ip4_input+0x16c>
      return ERR_OK;
 801827c:	2300      	movs	r3, #0
 801827e:	e064      	b.n	801834a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018286:	4a33      	ldr	r2, [pc, #204]	@ (8018354 <ip4_input+0x240>)
 8018288:	693b      	ldr	r3, [r7, #16]
 801828a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801828c:	4a31      	ldr	r2, [pc, #196]	@ (8018354 <ip4_input+0x240>)
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018292:	4a30      	ldr	r2, [pc, #192]	@ (8018354 <ip4_input+0x240>)
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	f003 030f 	and.w	r3, r3, #15
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	009b      	lsls	r3, r3, #2
 80182a4:	b2db      	uxtb	r3, r3
 80182a6:	461a      	mov	r2, r3
 80182a8:	4b2a      	ldr	r3, [pc, #168]	@ (8018354 <ip4_input+0x240>)
 80182aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80182ac:	89fb      	ldrh	r3, [r7, #14]
 80182ae:	4619      	mov	r1, r3
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	f7f8 faa3 	bl	80107fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	7a5b      	ldrb	r3, [r3, #9]
 80182ba:	2b11      	cmp	r3, #17
 80182bc:	d006      	beq.n	80182cc <ip4_input+0x1b8>
 80182be:	2b11      	cmp	r3, #17
 80182c0:	dc13      	bgt.n	80182ea <ip4_input+0x1d6>
 80182c2:	2b01      	cmp	r3, #1
 80182c4:	d00c      	beq.n	80182e0 <ip4_input+0x1cc>
 80182c6:	2b06      	cmp	r3, #6
 80182c8:	d005      	beq.n	80182d6 <ip4_input+0x1c2>
 80182ca:	e00e      	b.n	80182ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80182cc:	6839      	ldr	r1, [r7, #0]
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f7fe f94a 	bl	8016568 <udp_input>
        break;
 80182d4:	e026      	b.n	8018324 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80182d6:	6839      	ldr	r1, [r7, #0]
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f7fa f95f 	bl	801259c <tcp_input>
        break;
 80182de:	e021      	b.n	8018324 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80182e0:	6839      	ldr	r1, [r7, #0]
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f7ff fcc8 	bl	8017c78 <icmp_input>
        break;
 80182e8:	e01c      	b.n	8018324 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80182ea:	4b1a      	ldr	r3, [pc, #104]	@ (8018354 <ip4_input+0x240>)
 80182ec:	695b      	ldr	r3, [r3, #20]
 80182ee:	6939      	ldr	r1, [r7, #16]
 80182f0:	4618      	mov	r0, r3
 80182f2:	f000 f90b 	bl	801850c <ip4_addr_isbroadcast_u32>
 80182f6:	4603      	mov	r3, r0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d10f      	bne.n	801831c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80182fc:	4b15      	ldr	r3, [pc, #84]	@ (8018354 <ip4_input+0x240>)
 80182fe:	695b      	ldr	r3, [r3, #20]
 8018300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018304:	2be0      	cmp	r3, #224	@ 0xe0
 8018306:	d009      	beq.n	801831c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801830c:	4619      	mov	r1, r3
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7f8 fae7 	bl	80108e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018314:	2102      	movs	r1, #2
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7ff fdce 	bl	8017eb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f7f8 faf3 	bl	8010908 <pbuf_free>
        break;
 8018322:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018324:	4b0b      	ldr	r3, [pc, #44]	@ (8018354 <ip4_input+0x240>)
 8018326:	2200      	movs	r2, #0
 8018328:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801832a:	4b0a      	ldr	r3, [pc, #40]	@ (8018354 <ip4_input+0x240>)
 801832c:	2200      	movs	r2, #0
 801832e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018330:	4b08      	ldr	r3, [pc, #32]	@ (8018354 <ip4_input+0x240>)
 8018332:	2200      	movs	r2, #0
 8018334:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018336:	4b07      	ldr	r3, [pc, #28]	@ (8018354 <ip4_input+0x240>)
 8018338:	2200      	movs	r2, #0
 801833a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801833c:	4b05      	ldr	r3, [pc, #20]	@ (8018354 <ip4_input+0x240>)
 801833e:	2200      	movs	r2, #0
 8018340:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018342:	4b04      	ldr	r3, [pc, #16]	@ (8018354 <ip4_input+0x240>)
 8018344:	2200      	movs	r2, #0
 8018346:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018348:	2300      	movs	r3, #0
}
 801834a:	4618      	mov	r0, r3
 801834c:	3718      	adds	r7, #24
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	24009b28 	.word	0x24009b28
 8018358:	240105dc 	.word	0x240105dc

0801835c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b08a      	sub	sp, #40	@ 0x28
 8018360:	af04      	add	r7, sp, #16
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	60b9      	str	r1, [r7, #8]
 8018366:	607a      	str	r2, [r7, #4]
 8018368:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d009      	beq.n	8018388 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018374:	68bb      	ldr	r3, [r7, #8]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d003      	beq.n	8018382 <ip4_output_if+0x26>
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d102      	bne.n	8018388 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018384:	3304      	adds	r3, #4
 8018386:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018388:	78fa      	ldrb	r2, [r7, #3]
 801838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801838c:	9302      	str	r3, [sp, #8]
 801838e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	4613      	mov	r3, r2
 801839c:	687a      	ldr	r2, [r7, #4]
 801839e:	6979      	ldr	r1, [r7, #20]
 80183a0:	68f8      	ldr	r0, [r7, #12]
 80183a2:	f000 f805 	bl	80183b0 <ip4_output_if_src>
 80183a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3718      	adds	r7, #24
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b088      	sub	sp, #32
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	60f8      	str	r0, [r7, #12]
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	607a      	str	r2, [r7, #4]
 80183bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	7b9b      	ldrb	r3, [r3, #14]
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d006      	beq.n	80183d4 <ip4_output_if_src+0x24>
 80183c6:	4b4b      	ldr	r3, [pc, #300]	@ (80184f4 <ip4_output_if_src+0x144>)
 80183c8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80183cc:	494a      	ldr	r1, [pc, #296]	@ (80184f8 <ip4_output_if_src+0x148>)
 80183ce:	484b      	ldr	r0, [pc, #300]	@ (80184fc <ip4_output_if_src+0x14c>)
 80183d0:	f001 fa08 	bl	80197e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d060      	beq.n	801849c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80183da:	2314      	movs	r3, #20
 80183dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80183de:	2114      	movs	r1, #20
 80183e0:	68f8      	ldr	r0, [r7, #12]
 80183e2:	f7f8 f9fb 	bl	80107dc <pbuf_add_header>
 80183e6:	4603      	mov	r3, r0
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d002      	beq.n	80183f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80183ec:	f06f 0301 	mvn.w	r3, #1
 80183f0:	e07c      	b.n	80184ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	895b      	ldrh	r3, [r3, #10]
 80183fc:	2b13      	cmp	r3, #19
 80183fe:	d806      	bhi.n	801840e <ip4_output_if_src+0x5e>
 8018400:	4b3c      	ldr	r3, [pc, #240]	@ (80184f4 <ip4_output_if_src+0x144>)
 8018402:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8018406:	493e      	ldr	r1, [pc, #248]	@ (8018500 <ip4_output_if_src+0x150>)
 8018408:	483c      	ldr	r0, [pc, #240]	@ (80184fc <ip4_output_if_src+0x14c>)
 801840a:	f001 f9eb 	bl	80197e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801840e:	69fb      	ldr	r3, [r7, #28]
 8018410:	78fa      	ldrb	r2, [r7, #3]
 8018412:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801841a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681a      	ldr	r2, [r3, #0]
 8018420:	69fb      	ldr	r3, [r7, #28]
 8018422:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018424:	8b7b      	ldrh	r3, [r7, #26]
 8018426:	089b      	lsrs	r3, r3, #2
 8018428:	b29b      	uxth	r3, r3
 801842a:	b2db      	uxtb	r3, r3
 801842c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018430:	b2da      	uxtb	r2, r3
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801843c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	891b      	ldrh	r3, [r3, #8]
 8018442:	4618      	mov	r0, r3
 8018444:	f7f6 fda2 	bl	800ef8c <lwip_htons>
 8018448:	4603      	mov	r3, r0
 801844a:	461a      	mov	r2, r3
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	2200      	movs	r2, #0
 8018454:	719a      	strb	r2, [r3, #6]
 8018456:	2200      	movs	r2, #0
 8018458:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801845a:	4b2a      	ldr	r3, [pc, #168]	@ (8018504 <ip4_output_if_src+0x154>)
 801845c:	881b      	ldrh	r3, [r3, #0]
 801845e:	4618      	mov	r0, r3
 8018460:	f7f6 fd94 	bl	800ef8c <lwip_htons>
 8018464:	4603      	mov	r3, r0
 8018466:	461a      	mov	r2, r3
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801846c:	4b25      	ldr	r3, [pc, #148]	@ (8018504 <ip4_output_if_src+0x154>)
 801846e:	881b      	ldrh	r3, [r3, #0]
 8018470:	3301      	adds	r3, #1
 8018472:	b29a      	uxth	r2, r3
 8018474:	4b23      	ldr	r3, [pc, #140]	@ (8018504 <ip4_output_if_src+0x154>)
 8018476:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d104      	bne.n	8018488 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801847e:	4b22      	ldr	r3, [pc, #136]	@ (8018508 <ip4_output_if_src+0x158>)
 8018480:	681a      	ldr	r2, [r3, #0]
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	60da      	str	r2, [r3, #12]
 8018486:	e003      	b.n	8018490 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018488:	68bb      	ldr	r3, [r7, #8]
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	69fb      	ldr	r3, [r7, #28]
 801848e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018490:	69fb      	ldr	r3, [r7, #28]
 8018492:	2200      	movs	r2, #0
 8018494:	729a      	strb	r2, [r3, #10]
 8018496:	2200      	movs	r2, #0
 8018498:	72da      	strb	r2, [r3, #11]
 801849a:	e00f      	b.n	80184bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	895b      	ldrh	r3, [r3, #10]
 80184a0:	2b13      	cmp	r3, #19
 80184a2:	d802      	bhi.n	80184aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184a4:	f06f 0301 	mvn.w	r3, #1
 80184a8:	e020      	b.n	80184ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	685b      	ldr	r3, [r3, #4]
 80184ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	691b      	ldr	r3, [r3, #16]
 80184b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80184b6:	f107 0314 	add.w	r3, r7, #20
 80184ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80184bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d00c      	beq.n	80184de <ip4_output_if_src+0x12e>
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	891a      	ldrh	r2, [r3, #8]
 80184c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d906      	bls.n	80184de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80184d4:	68f8      	ldr	r0, [r7, #12]
 80184d6:	f000 fd53 	bl	8018f80 <ip4_frag>
 80184da:	4603      	mov	r3, r0
 80184dc:	e006      	b.n	80184ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80184de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	687a      	ldr	r2, [r7, #4]
 80184e4:	68f9      	ldr	r1, [r7, #12]
 80184e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80184e8:	4798      	blx	r3
 80184ea:	4603      	mov	r3, r0
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3720      	adds	r7, #32
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}
 80184f4:	0801cee8 	.word	0x0801cee8
 80184f8:	0801cf1c 	.word	0x0801cf1c
 80184fc:	0801cf28 	.word	0x0801cf28
 8018500:	0801cf50 	.word	0x0801cf50
 8018504:	2401073a 	.word	0x2401073a
 8018508:	0801d370 	.word	0x0801d370

0801850c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801850c:	b480      	push	{r7}
 801850e:	b085      	sub	sp, #20
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018520:	d002      	beq.n	8018528 <ip4_addr_isbroadcast_u32+0x1c>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d101      	bne.n	801852c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018528:	2301      	movs	r3, #1
 801852a:	e02a      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018532:	f003 0302 	and.w	r3, r3, #2
 8018536:	2b00      	cmp	r3, #0
 8018538:	d101      	bne.n	801853e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801853a:	2300      	movs	r3, #0
 801853c:	e021      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	3304      	adds	r3, #4
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	429a      	cmp	r2, r3
 8018548:	d101      	bne.n	801854e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801854a:	2300      	movs	r3, #0
 801854c:	e019      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801854e:	68fa      	ldr	r2, [r7, #12]
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	3304      	adds	r3, #4
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	405a      	eors	r2, r3
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	3308      	adds	r3, #8
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	4013      	ands	r3, r2
 8018560:	2b00      	cmp	r3, #0
 8018562:	d10d      	bne.n	8018580 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	3308      	adds	r3, #8
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	43da      	mvns	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	3308      	adds	r3, #8
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018578:	429a      	cmp	r2, r3
 801857a:	d101      	bne.n	8018580 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801857c:	2301      	movs	r3, #1
 801857e:	e000      	b.n	8018582 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018580:	2300      	movs	r3, #0
  }
}
 8018582:	4618      	mov	r0, r3
 8018584:	3714      	adds	r7, #20
 8018586:	46bd      	mov	sp, r7
 8018588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858c:	4770      	bx	lr
	...

08018590 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018596:	2300      	movs	r3, #0
 8018598:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801859a:	4b12      	ldr	r3, [pc, #72]	@ (80185e4 <ip_reass_tmr+0x54>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80185a0:	e018      	b.n	80185d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	7fdb      	ldrb	r3, [r3, #31]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d00b      	beq.n	80185c2 <ip_reass_tmr+0x32>
      r->timer--;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	7fdb      	ldrb	r3, [r3, #31]
 80185ae:	3b01      	subs	r3, #1
 80185b0:	b2da      	uxtb	r2, r3
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	60fb      	str	r3, [r7, #12]
 80185c0:	e008      	b.n	80185d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80185cc:	68b9      	ldr	r1, [r7, #8]
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f000 f80a 	bl	80185e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d1e3      	bne.n	80185a2 <ip_reass_tmr+0x12>
    }
  }
}
 80185da:	bf00      	nop
 80185dc:	bf00      	nop
 80185de:	3710      	adds	r7, #16
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	2401073c 	.word	0x2401073c

080185e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b088      	sub	sp, #32
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80185f2:	2300      	movs	r3, #0
 80185f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80185f6:	683a      	ldr	r2, [r7, #0]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	429a      	cmp	r2, r3
 80185fc:	d105      	bne.n	801860a <ip_reass_free_complete_datagram+0x22>
 80185fe:	4b45      	ldr	r3, [pc, #276]	@ (8018714 <ip_reass_free_complete_datagram+0x12c>)
 8018600:	22ab      	movs	r2, #171	@ 0xab
 8018602:	4945      	ldr	r1, [pc, #276]	@ (8018718 <ip_reass_free_complete_datagram+0x130>)
 8018604:	4845      	ldr	r0, [pc, #276]	@ (801871c <ip_reass_free_complete_datagram+0x134>)
 8018606:	f001 f8ed 	bl	80197e4 <iprintf>
  if (prev != NULL) {
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d00a      	beq.n	8018626 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018610:	683b      	ldr	r3, [r7, #0]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	687a      	ldr	r2, [r7, #4]
 8018616:	429a      	cmp	r2, r3
 8018618:	d005      	beq.n	8018626 <ip_reass_free_complete_datagram+0x3e>
 801861a:	4b3e      	ldr	r3, [pc, #248]	@ (8018714 <ip_reass_free_complete_datagram+0x12c>)
 801861c:	22ad      	movs	r2, #173	@ 0xad
 801861e:	4940      	ldr	r1, [pc, #256]	@ (8018720 <ip_reass_free_complete_datagram+0x138>)
 8018620:	483e      	ldr	r0, [pc, #248]	@ (801871c <ip_reass_free_complete_datagram+0x134>)
 8018622:	f001 f8df 	bl	80197e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	685b      	ldr	r3, [r3, #4]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	889b      	ldrh	r3, [r3, #4]
 8018632:	b29b      	uxth	r3, r3
 8018634:	2b00      	cmp	r3, #0
 8018636:	d12a      	bne.n	801868e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	681a      	ldr	r2, [r3, #0]
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	6858      	ldr	r0, [r3, #4]
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	3308      	adds	r3, #8
 801864e:	2214      	movs	r2, #20
 8018650:	4619      	mov	r1, r3
 8018652:	f001 f96e 	bl	8019932 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018656:	2101      	movs	r1, #1
 8018658:	69b8      	ldr	r0, [r7, #24]
 801865a:	f7ff fc3d 	bl	8017ed8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801865e:	69b8      	ldr	r0, [r7, #24]
 8018660:	f7f8 f9e0 	bl	8010a24 <pbuf_clen>
 8018664:	4603      	mov	r3, r0
 8018666:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018668:	8bfa      	ldrh	r2, [r7, #30]
 801866a:	8a7b      	ldrh	r3, [r7, #18]
 801866c:	4413      	add	r3, r2
 801866e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018672:	db05      	blt.n	8018680 <ip_reass_free_complete_datagram+0x98>
 8018674:	4b27      	ldr	r3, [pc, #156]	@ (8018714 <ip_reass_free_complete_datagram+0x12c>)
 8018676:	22bc      	movs	r2, #188	@ 0xbc
 8018678:	492a      	ldr	r1, [pc, #168]	@ (8018724 <ip_reass_free_complete_datagram+0x13c>)
 801867a:	4828      	ldr	r0, [pc, #160]	@ (801871c <ip_reass_free_complete_datagram+0x134>)
 801867c:	f001 f8b2 	bl	80197e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018680:	8bfa      	ldrh	r2, [r7, #30]
 8018682:	8a7b      	ldrh	r3, [r7, #18]
 8018684:	4413      	add	r3, r2
 8018686:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018688:	69b8      	ldr	r0, [r7, #24]
 801868a:	f7f8 f93d 	bl	8010908 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018694:	e01f      	b.n	80186d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018696:	69bb      	ldr	r3, [r7, #24]
 8018698:	685b      	ldr	r3, [r3, #4]
 801869a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801869c:	69bb      	ldr	r3, [r7, #24]
 801869e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80186a6:	68f8      	ldr	r0, [r7, #12]
 80186a8:	f7f8 f9bc 	bl	8010a24 <pbuf_clen>
 80186ac:	4603      	mov	r3, r0
 80186ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186b0:	8bfa      	ldrh	r2, [r7, #30]
 80186b2:	8a7b      	ldrh	r3, [r7, #18]
 80186b4:	4413      	add	r3, r2
 80186b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80186ba:	db05      	blt.n	80186c8 <ip_reass_free_complete_datagram+0xe0>
 80186bc:	4b15      	ldr	r3, [pc, #84]	@ (8018714 <ip_reass_free_complete_datagram+0x12c>)
 80186be:	22cc      	movs	r2, #204	@ 0xcc
 80186c0:	4918      	ldr	r1, [pc, #96]	@ (8018724 <ip_reass_free_complete_datagram+0x13c>)
 80186c2:	4816      	ldr	r0, [pc, #88]	@ (801871c <ip_reass_free_complete_datagram+0x134>)
 80186c4:	f001 f88e 	bl	80197e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186c8:	8bfa      	ldrh	r2, [r7, #30]
 80186ca:	8a7b      	ldrh	r3, [r7, #18]
 80186cc:	4413      	add	r3, r2
 80186ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80186d0:	68f8      	ldr	r0, [r7, #12]
 80186d2:	f7f8 f919 	bl	8010908 <pbuf_free>
  while (p != NULL) {
 80186d6:	69bb      	ldr	r3, [r7, #24]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d1dc      	bne.n	8018696 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80186dc:	6839      	ldr	r1, [r7, #0]
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f000 f8c2 	bl	8018868 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80186e4:	4b10      	ldr	r3, [pc, #64]	@ (8018728 <ip_reass_free_complete_datagram+0x140>)
 80186e6:	881b      	ldrh	r3, [r3, #0]
 80186e8:	8bfa      	ldrh	r2, [r7, #30]
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d905      	bls.n	80186fa <ip_reass_free_complete_datagram+0x112>
 80186ee:	4b09      	ldr	r3, [pc, #36]	@ (8018714 <ip_reass_free_complete_datagram+0x12c>)
 80186f0:	22d2      	movs	r2, #210	@ 0xd2
 80186f2:	490e      	ldr	r1, [pc, #56]	@ (801872c <ip_reass_free_complete_datagram+0x144>)
 80186f4:	4809      	ldr	r0, [pc, #36]	@ (801871c <ip_reass_free_complete_datagram+0x134>)
 80186f6:	f001 f875 	bl	80197e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80186fa:	4b0b      	ldr	r3, [pc, #44]	@ (8018728 <ip_reass_free_complete_datagram+0x140>)
 80186fc:	881a      	ldrh	r2, [r3, #0]
 80186fe:	8bfb      	ldrh	r3, [r7, #30]
 8018700:	1ad3      	subs	r3, r2, r3
 8018702:	b29a      	uxth	r2, r3
 8018704:	4b08      	ldr	r3, [pc, #32]	@ (8018728 <ip_reass_free_complete_datagram+0x140>)
 8018706:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018708:	8bfb      	ldrh	r3, [r7, #30]
}
 801870a:	4618      	mov	r0, r3
 801870c:	3720      	adds	r7, #32
 801870e:	46bd      	mov	sp, r7
 8018710:	bd80      	pop	{r7, pc}
 8018712:	bf00      	nop
 8018714:	0801cf80 	.word	0x0801cf80
 8018718:	0801cfbc 	.word	0x0801cfbc
 801871c:	0801cfc8 	.word	0x0801cfc8
 8018720:	0801cff0 	.word	0x0801cff0
 8018724:	0801d004 	.word	0x0801d004
 8018728:	24010740 	.word	0x24010740
 801872c:	0801d024 	.word	0x0801d024

08018730 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b08a      	sub	sp, #40	@ 0x28
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801873a:	2300      	movs	r3, #0
 801873c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801873e:	2300      	movs	r3, #0
 8018740:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018742:	2300      	movs	r3, #0
 8018744:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018746:	2300      	movs	r3, #0
 8018748:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801874a:	2300      	movs	r3, #0
 801874c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801874e:	4b28      	ldr	r3, [pc, #160]	@ (80187f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018754:	e030      	b.n	80187b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018758:	695a      	ldr	r2, [r3, #20]
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	68db      	ldr	r3, [r3, #12]
 801875e:	429a      	cmp	r2, r3
 8018760:	d10c      	bne.n	801877c <ip_reass_remove_oldest_datagram+0x4c>
 8018762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018764:	699a      	ldr	r2, [r3, #24]
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	691b      	ldr	r3, [r3, #16]
 801876a:	429a      	cmp	r2, r3
 801876c:	d106      	bne.n	801877c <ip_reass_remove_oldest_datagram+0x4c>
 801876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018770:	899a      	ldrh	r2, [r3, #12]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	889b      	ldrh	r3, [r3, #4]
 8018776:	b29b      	uxth	r3, r3
 8018778:	429a      	cmp	r2, r3
 801877a:	d014      	beq.n	80187a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801877c:	693b      	ldr	r3, [r7, #16]
 801877e:	3301      	adds	r3, #1
 8018780:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018782:	6a3b      	ldr	r3, [r7, #32]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d104      	bne.n	8018792 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801878a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	61bb      	str	r3, [r7, #24]
 8018790:	e009      	b.n	80187a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018794:	7fda      	ldrb	r2, [r3, #31]
 8018796:	6a3b      	ldr	r3, [r7, #32]
 8018798:	7fdb      	ldrb	r3, [r3, #31]
 801879a:	429a      	cmp	r2, r3
 801879c:	d803      	bhi.n	80187a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80187a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d001      	beq.n	80187b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80187b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d1cb      	bne.n	8018756 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80187be:	6a3b      	ldr	r3, [r7, #32]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d008      	beq.n	80187d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80187c4:	69b9      	ldr	r1, [r7, #24]
 80187c6:	6a38      	ldr	r0, [r7, #32]
 80187c8:	f7ff ff0e 	bl	80185e8 <ip_reass_free_complete_datagram>
 80187cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80187ce:	697a      	ldr	r2, [r7, #20]
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	4413      	add	r3, r2
 80187d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80187d6:	697a      	ldr	r2, [r7, #20]
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	429a      	cmp	r2, r3
 80187dc:	da02      	bge.n	80187e4 <ip_reass_remove_oldest_datagram+0xb4>
 80187de:	693b      	ldr	r3, [r7, #16]
 80187e0:	2b01      	cmp	r3, #1
 80187e2:	dcac      	bgt.n	801873e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80187e4:	697b      	ldr	r3, [r7, #20]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3728      	adds	r7, #40	@ 0x28
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	2401073c 	.word	0x2401073c

080187f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80187fe:	2004      	movs	r0, #4
 8018800:	f7f7 f964 	bl	800facc <memp_malloc>
 8018804:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d110      	bne.n	801882e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801880c:	6839      	ldr	r1, [r7, #0]
 801880e:	6878      	ldr	r0, [r7, #4]
 8018810:	f7ff ff8e 	bl	8018730 <ip_reass_remove_oldest_datagram>
 8018814:	4602      	mov	r2, r0
 8018816:	683b      	ldr	r3, [r7, #0]
 8018818:	4293      	cmp	r3, r2
 801881a:	dc03      	bgt.n	8018824 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801881c:	2004      	movs	r0, #4
 801881e:	f7f7 f955 	bl	800facc <memp_malloc>
 8018822:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d101      	bne.n	801882e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801882a:	2300      	movs	r3, #0
 801882c:	e016      	b.n	801885c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801882e:	2220      	movs	r2, #32
 8018830:	2100      	movs	r1, #0
 8018832:	68f8      	ldr	r0, [r7, #12]
 8018834:	f000 fff8 	bl	8019828 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	220f      	movs	r2, #15
 801883c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801883e:	4b09      	ldr	r3, [pc, #36]	@ (8018864 <ip_reass_enqueue_new_datagram+0x70>)
 8018840:	681a      	ldr	r2, [r3, #0]
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018846:	4a07      	ldr	r2, [pc, #28]	@ (8018864 <ip_reass_enqueue_new_datagram+0x70>)
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	3308      	adds	r3, #8
 8018850:	2214      	movs	r2, #20
 8018852:	6879      	ldr	r1, [r7, #4]
 8018854:	4618      	mov	r0, r3
 8018856:	f001 f86c 	bl	8019932 <memcpy>
  return ipr;
 801885a:	68fb      	ldr	r3, [r7, #12]
}
 801885c:	4618      	mov	r0, r3
 801885e:	3710      	adds	r7, #16
 8018860:	46bd      	mov	sp, r7
 8018862:	bd80      	pop	{r7, pc}
 8018864:	2401073c 	.word	0x2401073c

08018868 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
 8018870:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018872:	4b10      	ldr	r3, [pc, #64]	@ (80188b4 <ip_reass_dequeue_datagram+0x4c>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	429a      	cmp	r2, r3
 801887a:	d104      	bne.n	8018886 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	4a0c      	ldr	r2, [pc, #48]	@ (80188b4 <ip_reass_dequeue_datagram+0x4c>)
 8018882:	6013      	str	r3, [r2, #0]
 8018884:	e00d      	b.n	80188a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d106      	bne.n	801889a <ip_reass_dequeue_datagram+0x32>
 801888c:	4b0a      	ldr	r3, [pc, #40]	@ (80188b8 <ip_reass_dequeue_datagram+0x50>)
 801888e:	f240 1245 	movw	r2, #325	@ 0x145
 8018892:	490a      	ldr	r1, [pc, #40]	@ (80188bc <ip_reass_dequeue_datagram+0x54>)
 8018894:	480a      	ldr	r0, [pc, #40]	@ (80188c0 <ip_reass_dequeue_datagram+0x58>)
 8018896:	f000 ffa5 	bl	80197e4 <iprintf>
    prev->next = ipr->next;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681a      	ldr	r2, [r3, #0]
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80188a2:	6879      	ldr	r1, [r7, #4]
 80188a4:	2004      	movs	r0, #4
 80188a6:	f7f7 f987 	bl	800fbb8 <memp_free>
}
 80188aa:	bf00      	nop
 80188ac:	3708      	adds	r7, #8
 80188ae:	46bd      	mov	sp, r7
 80188b0:	bd80      	pop	{r7, pc}
 80188b2:	bf00      	nop
 80188b4:	2401073c 	.word	0x2401073c
 80188b8:	0801cf80 	.word	0x0801cf80
 80188bc:	0801d048 	.word	0x0801d048
 80188c0:	0801cfc8 	.word	0x0801cfc8

080188c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b08c      	sub	sp, #48	@ 0x30
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	60f8      	str	r0, [r7, #12]
 80188cc:	60b9      	str	r1, [r7, #8]
 80188ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80188d0:	2300      	movs	r3, #0
 80188d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80188d4:	2301      	movs	r3, #1
 80188d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80188d8:	68bb      	ldr	r3, [r7, #8]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80188de:	69fb      	ldr	r3, [r7, #28]
 80188e0:	885b      	ldrh	r3, [r3, #2]
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7f6 fb51 	bl	800ef8c <lwip_htons>
 80188ea:	4603      	mov	r3, r0
 80188ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80188ee:	69fb      	ldr	r3, [r7, #28]
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	f003 030f 	and.w	r3, r3, #15
 80188f6:	b2db      	uxtb	r3, r3
 80188f8:	009b      	lsls	r3, r3, #2
 80188fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80188fc:	7e7b      	ldrb	r3, [r7, #25]
 80188fe:	b29b      	uxth	r3, r3
 8018900:	8b7a      	ldrh	r2, [r7, #26]
 8018902:	429a      	cmp	r2, r3
 8018904:	d202      	bcs.n	801890c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801890a:	e135      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801890c:	7e7b      	ldrb	r3, [r7, #25]
 801890e:	b29b      	uxth	r3, r3
 8018910:	8b7a      	ldrh	r2, [r7, #26]
 8018912:	1ad3      	subs	r3, r2, r3
 8018914:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	88db      	ldrh	r3, [r3, #6]
 801891a:	b29b      	uxth	r3, r3
 801891c:	4618      	mov	r0, r3
 801891e:	f7f6 fb35 	bl	800ef8c <lwip_htons>
 8018922:	4603      	mov	r3, r0
 8018924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018928:	b29b      	uxth	r3, r3
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	685b      	ldr	r3, [r3, #4]
 8018932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018936:	2200      	movs	r2, #0
 8018938:	701a      	strb	r2, [r3, #0]
 801893a:	2200      	movs	r2, #0
 801893c:	705a      	strb	r2, [r3, #1]
 801893e:	2200      	movs	r2, #0
 8018940:	709a      	strb	r2, [r3, #2]
 8018942:	2200      	movs	r2, #0
 8018944:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018948:	8afa      	ldrh	r2, [r7, #22]
 801894a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801894c:	8afa      	ldrh	r2, [r7, #22]
 801894e:	8b7b      	ldrh	r3, [r7, #26]
 8018950:	4413      	add	r3, r2
 8018952:	b29a      	uxth	r2, r3
 8018954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018956:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801895a:	88db      	ldrh	r3, [r3, #6]
 801895c:	b29b      	uxth	r3, r3
 801895e:	8afa      	ldrh	r2, [r7, #22]
 8018960:	429a      	cmp	r2, r3
 8018962:	d902      	bls.n	801896a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018968:	e106      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	685b      	ldr	r3, [r3, #4]
 801896e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018970:	e068      	b.n	8018a44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018974:	685b      	ldr	r3, [r3, #4]
 8018976:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801897a:	889b      	ldrh	r3, [r3, #4]
 801897c:	b29a      	uxth	r2, r3
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	889b      	ldrh	r3, [r3, #4]
 8018982:	b29b      	uxth	r3, r3
 8018984:	429a      	cmp	r2, r3
 8018986:	d235      	bcs.n	80189f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801898a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801898c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018990:	2b00      	cmp	r3, #0
 8018992:	d020      	beq.n	80189d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018996:	889b      	ldrh	r3, [r3, #4]
 8018998:	b29a      	uxth	r2, r3
 801899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801899c:	88db      	ldrh	r3, [r3, #6]
 801899e:	b29b      	uxth	r3, r3
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d307      	bcc.n	80189b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80189a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189a6:	88db      	ldrh	r3, [r3, #6]
 80189a8:	b29a      	uxth	r2, r3
 80189aa:	693b      	ldr	r3, [r7, #16]
 80189ac:	889b      	ldrh	r3, [r3, #4]
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d902      	bls.n	80189ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189b8:	e0de      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80189ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189bc:	68ba      	ldr	r2, [r7, #8]
 80189be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80189c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189c2:	88db      	ldrh	r3, [r3, #6]
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189c8:	889b      	ldrh	r3, [r3, #4]
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d03d      	beq.n	8018a4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80189d0:	2300      	movs	r3, #0
 80189d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80189d4:	e03a      	b.n	8018a4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80189d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189d8:	88db      	ldrh	r3, [r3, #6]
 80189da:	b29a      	uxth	r2, r3
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	889b      	ldrh	r3, [r3, #4]
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	429a      	cmp	r2, r3
 80189e4:	d902      	bls.n	80189ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189ea:	e0c5      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	68ba      	ldr	r2, [r7, #8]
 80189f0:	605a      	str	r2, [r3, #4]
      break;
 80189f2:	e02b      	b.n	8018a4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80189f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189f6:	889b      	ldrh	r3, [r3, #4]
 80189f8:	b29a      	uxth	r2, r3
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	889b      	ldrh	r3, [r3, #4]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d102      	bne.n	8018a0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018a08:	e0b6      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a0c:	889b      	ldrh	r3, [r3, #4]
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	693b      	ldr	r3, [r7, #16]
 8018a12:	88db      	ldrh	r3, [r3, #6]
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d202      	bcs.n	8018a20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018a1e:	e0ab      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d009      	beq.n	8018a3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a28:	88db      	ldrh	r3, [r3, #6]
 8018a2a:	b29a      	uxth	r2, r3
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	889b      	ldrh	r3, [r3, #4]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d001      	beq.n	8018a3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a36:	2300      	movs	r3, #0
 8018a38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a3a:	693b      	ldr	r3, [r7, #16]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d193      	bne.n	8018972 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a4a:	e000      	b.n	8018a4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d12d      	bne.n	8018ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d01c      	beq.n	8018a94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a5c:	88db      	ldrh	r3, [r3, #6]
 8018a5e:	b29a      	uxth	r2, r3
 8018a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a62:	889b      	ldrh	r3, [r3, #4]
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d906      	bls.n	8018a78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018a6a:	4b45      	ldr	r3, [pc, #276]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a6c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018a70:	4944      	ldr	r1, [pc, #272]	@ (8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018a72:	4845      	ldr	r0, [pc, #276]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a74:	f000 feb6 	bl	80197e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a7a:	68ba      	ldr	r2, [r7, #8]
 8018a7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a80:	88db      	ldrh	r3, [r3, #6]
 8018a82:	b29a      	uxth	r2, r3
 8018a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a86:	889b      	ldrh	r3, [r3, #4]
 8018a88:	b29b      	uxth	r3, r3
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d010      	beq.n	8018ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	623b      	str	r3, [r7, #32]
 8018a92:	e00d      	b.n	8018ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	685b      	ldr	r3, [r3, #4]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d006      	beq.n	8018aaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018a9c:	4b38      	ldr	r3, [pc, #224]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a9e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018aa2:	493a      	ldr	r1, [pc, #232]	@ (8018b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018aa4:	4838      	ldr	r0, [pc, #224]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018aa6:	f000 fe9d 	bl	80197e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	68ba      	ldr	r2, [r7, #8]
 8018aae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d105      	bne.n	8018ac2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	7f9b      	ldrb	r3, [r3, #30]
 8018aba:	f003 0301 	and.w	r3, r3, #1
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d059      	beq.n	8018b76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018ac2:	6a3b      	ldr	r3, [r7, #32]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d04f      	beq.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	685b      	ldr	r3, [r3, #4]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d006      	beq.n	8018ade <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	889b      	ldrh	r3, [r3, #4]
 8018ad8:	b29b      	uxth	r3, r3
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d002      	beq.n	8018ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	623b      	str	r3, [r7, #32]
 8018ae2:	e041      	b.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018aee:	e012      	b.n	8018b16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018af8:	88db      	ldrh	r3, [r3, #6]
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018afe:	889b      	ldrh	r3, [r3, #4]
 8018b00:	b29b      	uxth	r3, r3
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d002      	beq.n	8018b0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018b06:	2300      	movs	r3, #0
 8018b08:	623b      	str	r3, [r7, #32]
            break;
 8018b0a:	e007      	b.n	8018b1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d1e9      	bne.n	8018af0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b1c:	6a3b      	ldr	r3, [r7, #32]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d022      	beq.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d106      	bne.n	8018b38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b2a:	4b15      	ldr	r3, [pc, #84]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b2c:	f240 12df 	movw	r2, #479	@ 0x1df
 8018b30:	4917      	ldr	r1, [pc, #92]	@ (8018b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b32:	4815      	ldr	r0, [pc, #84]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b34:	f000 fe56 	bl	80197e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	685b      	ldr	r3, [r3, #4]
 8018b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d106      	bne.n	8018b52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b44:	4b0e      	ldr	r3, [pc, #56]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b46:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018b4a:	4911      	ldr	r1, [pc, #68]	@ (8018b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b4c:	480e      	ldr	r0, [pc, #56]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b4e:	f000 fe49 	bl	80197e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d006      	beq.n	8018b68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018b5a:	4b09      	ldr	r3, [pc, #36]	@ (8018b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b5c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018b60:	490c      	ldr	r1, [pc, #48]	@ (8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018b62:	4809      	ldr	r0, [pc, #36]	@ (8018b88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b64:	f000 fe3e 	bl	80197e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018b68:	6a3b      	ldr	r3, [r7, #32]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	bf14      	ite	ne
 8018b6e:	2301      	movne	r3, #1
 8018b70:	2300      	moveq	r3, #0
 8018b72:	b2db      	uxtb	r3, r3
 8018b74:	e000      	b.n	8018b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018b76:	2300      	movs	r3, #0
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3730      	adds	r7, #48	@ 0x30
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	0801cf80 	.word	0x0801cf80
 8018b84:	0801d064 	.word	0x0801d064
 8018b88:	0801cfc8 	.word	0x0801cfc8
 8018b8c:	0801d084 	.word	0x0801d084
 8018b90:	0801d0bc 	.word	0x0801d0bc
 8018b94:	0801d0cc 	.word	0x0801d0cc

08018b98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b08e      	sub	sp, #56	@ 0x38
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	685b      	ldr	r3, [r3, #4]
 8018ba4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	f003 030f 	and.w	r3, r3, #15
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	009b      	lsls	r3, r3, #2
 8018bb2:	b2db      	uxtb	r3, r3
 8018bb4:	2b14      	cmp	r3, #20
 8018bb6:	f040 8171 	bne.w	8018e9c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbc:	88db      	ldrh	r3, [r3, #6]
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7f6 f9e3 	bl	800ef8c <lwip_htons>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	00db      	lsls	r3, r3, #3
 8018bd0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bd4:	885b      	ldrh	r3, [r3, #2]
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f7f6 f9d7 	bl	800ef8c <lwip_htons>
 8018bde:	4603      	mov	r3, r0
 8018be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018be4:	781b      	ldrb	r3, [r3, #0]
 8018be6:	f003 030f 	and.w	r3, r3, #15
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018bfa:	429a      	cmp	r2, r3
 8018bfc:	f0c0 8150 	bcc.w	8018ea0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018c00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018c08:	1ad3      	subs	r3, r2, r3
 8018c0a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c0c:	6878      	ldr	r0, [r7, #4]
 8018c0e:	f7f7 ff09 	bl	8010a24 <pbuf_clen>
 8018c12:	4603      	mov	r3, r0
 8018c14:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c16:	4b8c      	ldr	r3, [pc, #560]	@ (8018e48 <ip4_reass+0x2b0>)
 8018c18:	881b      	ldrh	r3, [r3, #0]
 8018c1a:	461a      	mov	r2, r3
 8018c1c:	8c3b      	ldrh	r3, [r7, #32]
 8018c1e:	4413      	add	r3, r2
 8018c20:	2b0a      	cmp	r3, #10
 8018c22:	dd10      	ble.n	8018c46 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c24:	8c3b      	ldrh	r3, [r7, #32]
 8018c26:	4619      	mov	r1, r3
 8018c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c2a:	f7ff fd81 	bl	8018730 <ip_reass_remove_oldest_datagram>
 8018c2e:	4603      	mov	r3, r0
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 8137 	beq.w	8018ea4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c36:	4b84      	ldr	r3, [pc, #528]	@ (8018e48 <ip4_reass+0x2b0>)
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	461a      	mov	r2, r3
 8018c3c:	8c3b      	ldrh	r3, [r7, #32]
 8018c3e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c40:	2b0a      	cmp	r3, #10
 8018c42:	f300 812f 	bgt.w	8018ea4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c46:	4b81      	ldr	r3, [pc, #516]	@ (8018e4c <ip4_reass+0x2b4>)
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c4c:	e015      	b.n	8018c7a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c50:	695a      	ldr	r2, [r3, #20]
 8018c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d10c      	bne.n	8018c74 <ip4_reass+0xdc>
 8018c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c5c:	699a      	ldr	r2, [r3, #24]
 8018c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c60:	691b      	ldr	r3, [r3, #16]
 8018c62:	429a      	cmp	r2, r3
 8018c64:	d106      	bne.n	8018c74 <ip4_reass+0xdc>
 8018c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c68:	899a      	ldrh	r2, [r3, #12]
 8018c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c6c:	889b      	ldrh	r3, [r3, #4]
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	429a      	cmp	r2, r3
 8018c72:	d006      	beq.n	8018c82 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8018c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d1e6      	bne.n	8018c4e <ip4_reass+0xb6>
 8018c80:	e000      	b.n	8018c84 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018c82:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d109      	bne.n	8018c9e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018c8a:	8c3b      	ldrh	r3, [r7, #32]
 8018c8c:	4619      	mov	r1, r3
 8018c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018c90:	f7ff fdb0 	bl	80187f4 <ip_reass_enqueue_new_datagram>
 8018c94:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d11c      	bne.n	8018cd6 <ip4_reass+0x13e>
      goto nullreturn;
 8018c9c:	e105      	b.n	8018eaa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ca0:	88db      	ldrh	r3, [r3, #6]
 8018ca2:	b29b      	uxth	r3, r3
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f7f6 f971 	bl	800ef8c <lwip_htons>
 8018caa:	4603      	mov	r3, r0
 8018cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d110      	bne.n	8018cd6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cb6:	89db      	ldrh	r3, [r3, #14]
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7f6 f967 	bl	800ef8c <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d006      	beq.n	8018cd6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cca:	3308      	adds	r3, #8
 8018ccc:	2214      	movs	r2, #20
 8018cce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f000 fe2e 	bl	8019932 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cd8:	88db      	ldrh	r3, [r3, #6]
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	f003 0320 	and.w	r3, r3, #32
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	bf0c      	ite	eq
 8018ce4:	2301      	moveq	r3, #1
 8018ce6:	2300      	movne	r3, #0
 8018ce8:	b2db      	uxtb	r3, r3
 8018cea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018cec:	69fb      	ldr	r3, [r7, #28]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d00e      	beq.n	8018d10 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018cf2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018cf6:	4413      	add	r3, r2
 8018cf8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018cfa:	8b7a      	ldrh	r2, [r7, #26]
 8018cfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018cfe:	429a      	cmp	r2, r3
 8018d00:	f0c0 80a0 	bcc.w	8018e44 <ip4_reass+0x2ac>
 8018d04:	8b7b      	ldrh	r3, [r7, #26]
 8018d06:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	f200 809a 	bhi.w	8018e44 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d10:	69fa      	ldr	r2, [r7, #28]
 8018d12:	6879      	ldr	r1, [r7, #4]
 8018d14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018d16:	f7ff fdd5 	bl	80188c4 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d1a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018d22:	f000 809b 	beq.w	8018e5c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d26:	4b48      	ldr	r3, [pc, #288]	@ (8018e48 <ip4_reass+0x2b0>)
 8018d28:	881a      	ldrh	r2, [r3, #0]
 8018d2a:	8c3b      	ldrh	r3, [r7, #32]
 8018d2c:	4413      	add	r3, r2
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	4b45      	ldr	r3, [pc, #276]	@ (8018e48 <ip4_reass+0x2b0>)
 8018d32:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d34:	69fb      	ldr	r3, [r7, #28]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d00d      	beq.n	8018d56 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018d3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018d3e:	4413      	add	r3, r2
 8018d40:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d44:	8a7a      	ldrh	r2, [r7, #18]
 8018d46:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d4a:	7f9b      	ldrb	r3, [r3, #30]
 8018d4c:	f043 0301 	orr.w	r3, r3, #1
 8018d50:	b2da      	uxtb	r2, r3
 8018d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d54:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018d56:	697b      	ldr	r3, [r7, #20]
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d171      	bne.n	8018e40 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d5e:	8b9b      	ldrh	r3, [r3, #28]
 8018d60:	3314      	adds	r3, #20
 8018d62:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d78:	3308      	adds	r3, #8
 8018d7a:	2214      	movs	r2, #20
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018d80:	f000 fdd7 	bl	8019932 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018d84:	8a3b      	ldrh	r3, [r7, #16]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7f6 f900 	bl	800ef8c <lwip_htons>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	461a      	mov	r2, r3
 8018d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d92:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d96:	2200      	movs	r2, #0
 8018d98:	719a      	strb	r2, [r3, #6]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018da0:	2200      	movs	r2, #0
 8018da2:	729a      	strb	r2, [r3, #10]
 8018da4:	2200      	movs	r2, #0
 8018da6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018daa:	685b      	ldr	r3, [r3, #4]
 8018dac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018dae:	e00d      	b.n	8018dcc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018db6:	2114      	movs	r1, #20
 8018db8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018dba:	f7f7 fd1f 	bl	80107fc <pbuf_remove_header>
      pbuf_cat(p, r);
 8018dbe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018dc0:	6878      	ldr	r0, [r7, #4]
 8018dc2:	f7f7 fe6f 	bl	8010aa4 <pbuf_cat>
      r = iprh->next_pbuf;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d1ee      	bne.n	8018db0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8018e4c <ip4_reass+0x2b4>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d102      	bne.n	8018de2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018de0:	e010      	b.n	8018e04 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018de2:	4b1a      	ldr	r3, [pc, #104]	@ (8018e4c <ip4_reass+0x2b4>)
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018de8:	e007      	b.n	8018dfa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d006      	beq.n	8018e02 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d1f4      	bne.n	8018dea <ip4_reass+0x252>
 8018e00:	e000      	b.n	8018e04 <ip4_reass+0x26c>
          break;
 8018e02:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e08:	f7ff fd2e 	bl	8018868 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7f7 fe09 	bl	8010a24 <pbuf_clen>
 8018e12:	4603      	mov	r3, r0
 8018e14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e16:	4b0c      	ldr	r3, [pc, #48]	@ (8018e48 <ip4_reass+0x2b0>)
 8018e18:	881b      	ldrh	r3, [r3, #0]
 8018e1a:	8c3a      	ldrh	r2, [r7, #32]
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d906      	bls.n	8018e2e <ip4_reass+0x296>
 8018e20:	4b0b      	ldr	r3, [pc, #44]	@ (8018e50 <ip4_reass+0x2b8>)
 8018e22:	f240 229b 	movw	r2, #667	@ 0x29b
 8018e26:	490b      	ldr	r1, [pc, #44]	@ (8018e54 <ip4_reass+0x2bc>)
 8018e28:	480b      	ldr	r0, [pc, #44]	@ (8018e58 <ip4_reass+0x2c0>)
 8018e2a:	f000 fcdb 	bl	80197e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e2e:	4b06      	ldr	r3, [pc, #24]	@ (8018e48 <ip4_reass+0x2b0>)
 8018e30:	881a      	ldrh	r2, [r3, #0]
 8018e32:	8c3b      	ldrh	r3, [r7, #32]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	b29a      	uxth	r2, r3
 8018e38:	4b03      	ldr	r3, [pc, #12]	@ (8018e48 <ip4_reass+0x2b0>)
 8018e3a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	e038      	b.n	8018eb2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e40:	2300      	movs	r3, #0
 8018e42:	e036      	b.n	8018eb2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018e44:	bf00      	nop
 8018e46:	e00a      	b.n	8018e5e <ip4_reass+0x2c6>
 8018e48:	24010740 	.word	0x24010740
 8018e4c:	2401073c 	.word	0x2401073c
 8018e50:	0801cf80 	.word	0x0801cf80
 8018e54:	0801d0f0 	.word	0x0801d0f0
 8018e58:	0801cfc8 	.word	0x0801cfc8
    goto nullreturn_ipr;
 8018e5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d106      	bne.n	8018e72 <ip4_reass+0x2da>
 8018e64:	4b15      	ldr	r3, [pc, #84]	@ (8018ebc <ip4_reass+0x324>)
 8018e66:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018e6a:	4915      	ldr	r1, [pc, #84]	@ (8018ec0 <ip4_reass+0x328>)
 8018e6c:	4815      	ldr	r0, [pc, #84]	@ (8018ec4 <ip4_reass+0x32c>)
 8018e6e:	f000 fcb9 	bl	80197e4 <iprintf>
  if (ipr->p == NULL) {
 8018e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e74:	685b      	ldr	r3, [r3, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d116      	bne.n	8018ea8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018e7a:	4b13      	ldr	r3, [pc, #76]	@ (8018ec8 <ip4_reass+0x330>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e80:	429a      	cmp	r2, r3
 8018e82:	d006      	beq.n	8018e92 <ip4_reass+0x2fa>
 8018e84:	4b0d      	ldr	r3, [pc, #52]	@ (8018ebc <ip4_reass+0x324>)
 8018e86:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018e8a:	4910      	ldr	r1, [pc, #64]	@ (8018ecc <ip4_reass+0x334>)
 8018e8c:	480d      	ldr	r0, [pc, #52]	@ (8018ec4 <ip4_reass+0x32c>)
 8018e8e:	f000 fca9 	bl	80197e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018e92:	2100      	movs	r1, #0
 8018e94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018e96:	f7ff fce7 	bl	8018868 <ip_reass_dequeue_datagram>
 8018e9a:	e006      	b.n	8018eaa <ip4_reass+0x312>
    goto nullreturn;
 8018e9c:	bf00      	nop
 8018e9e:	e004      	b.n	8018eaa <ip4_reass+0x312>
    goto nullreturn;
 8018ea0:	bf00      	nop
 8018ea2:	e002      	b.n	8018eaa <ip4_reass+0x312>
      goto nullreturn;
 8018ea4:	bf00      	nop
 8018ea6:	e000      	b.n	8018eaa <ip4_reass+0x312>
  }

nullreturn:
 8018ea8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018eaa:	6878      	ldr	r0, [r7, #4]
 8018eac:	f7f7 fd2c 	bl	8010908 <pbuf_free>
  return NULL;
 8018eb0:	2300      	movs	r3, #0
}
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	3738      	adds	r7, #56	@ 0x38
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}
 8018eba:	bf00      	nop
 8018ebc:	0801cf80 	.word	0x0801cf80
 8018ec0:	0801d10c 	.word	0x0801d10c
 8018ec4:	0801cfc8 	.word	0x0801cfc8
 8018ec8:	2401073c 	.word	0x2401073c
 8018ecc:	0801d118 	.word	0x0801d118

08018ed0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018ed4:	2005      	movs	r0, #5
 8018ed6:	f7f6 fdf9 	bl	800facc <memp_malloc>
 8018eda:	4603      	mov	r3, r0
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b082      	sub	sp, #8
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d106      	bne.n	8018efc <ip_frag_free_pbuf_custom_ref+0x1c>
 8018eee:	4b07      	ldr	r3, [pc, #28]	@ (8018f0c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018ef0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018ef4:	4906      	ldr	r1, [pc, #24]	@ (8018f10 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018ef6:	4807      	ldr	r0, [pc, #28]	@ (8018f14 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018ef8:	f000 fc74 	bl	80197e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018efc:	6879      	ldr	r1, [r7, #4]
 8018efe:	2005      	movs	r0, #5
 8018f00:	f7f6 fe5a 	bl	800fbb8 <memp_free>
}
 8018f04:	bf00      	nop
 8018f06:	3708      	adds	r7, #8
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}
 8018f0c:	0801cf80 	.word	0x0801cf80
 8018f10:	0801d138 	.word	0x0801d138
 8018f14:	0801cfc8 	.word	0x0801cfc8

08018f18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b084      	sub	sp, #16
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d106      	bne.n	8018f38 <ipfrag_free_pbuf_custom+0x20>
 8018f2a:	4b11      	ldr	r3, [pc, #68]	@ (8018f70 <ipfrag_free_pbuf_custom+0x58>)
 8018f2c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018f30:	4910      	ldr	r1, [pc, #64]	@ (8018f74 <ipfrag_free_pbuf_custom+0x5c>)
 8018f32:	4811      	ldr	r0, [pc, #68]	@ (8018f78 <ipfrag_free_pbuf_custom+0x60>)
 8018f34:	f000 fc56 	bl	80197e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f38:	68fa      	ldr	r2, [r7, #12]
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d006      	beq.n	8018f4e <ipfrag_free_pbuf_custom+0x36>
 8018f40:	4b0b      	ldr	r3, [pc, #44]	@ (8018f70 <ipfrag_free_pbuf_custom+0x58>)
 8018f42:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018f46:	490d      	ldr	r1, [pc, #52]	@ (8018f7c <ipfrag_free_pbuf_custom+0x64>)
 8018f48:	480b      	ldr	r0, [pc, #44]	@ (8018f78 <ipfrag_free_pbuf_custom+0x60>)
 8018f4a:	f000 fc4b 	bl	80197e4 <iprintf>
  if (pcr->original != NULL) {
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	695b      	ldr	r3, [r3, #20]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d004      	beq.n	8018f60 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	695b      	ldr	r3, [r3, #20]
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7f7 fcd4 	bl	8010908 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018f60:	68f8      	ldr	r0, [r7, #12]
 8018f62:	f7ff ffbd 	bl	8018ee0 <ip_frag_free_pbuf_custom_ref>
}
 8018f66:	bf00      	nop
 8018f68:	3710      	adds	r7, #16
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	0801cf80 	.word	0x0801cf80
 8018f74:	0801d144 	.word	0x0801d144
 8018f78:	0801cfc8 	.word	0x0801cfc8
 8018f7c:	0801d150 	.word	0x0801d150

08018f80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b094      	sub	sp, #80	@ 0x50
 8018f84:	af02      	add	r7, sp, #8
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018f96:	3b14      	subs	r3, #20
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	da00      	bge.n	8018f9e <ip4_frag+0x1e>
 8018f9c:	3307      	adds	r3, #7
 8018f9e:	10db      	asrs	r3, r3, #3
 8018fa0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018fa2:	2314      	movs	r3, #20
 8018fa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	685b      	ldr	r3, [r3, #4]
 8018faa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	f003 030f 	and.w	r3, r3, #15
 8018fb8:	b2db      	uxtb	r3, r3
 8018fba:	009b      	lsls	r3, r3, #2
 8018fbc:	b2db      	uxtb	r3, r3
 8018fbe:	2b14      	cmp	r3, #20
 8018fc0:	d002      	beq.n	8018fc8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018fc2:	f06f 0305 	mvn.w	r3, #5
 8018fc6:	e110      	b.n	80191ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	895b      	ldrh	r3, [r3, #10]
 8018fcc:	2b13      	cmp	r3, #19
 8018fce:	d809      	bhi.n	8018fe4 <ip4_frag+0x64>
 8018fd0:	4b88      	ldr	r3, [pc, #544]	@ (80191f4 <ip4_frag+0x274>)
 8018fd2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018fd6:	4988      	ldr	r1, [pc, #544]	@ (80191f8 <ip4_frag+0x278>)
 8018fd8:	4888      	ldr	r0, [pc, #544]	@ (80191fc <ip4_frag+0x27c>)
 8018fda:	f000 fc03 	bl	80197e4 <iprintf>
 8018fde:	f06f 0305 	mvn.w	r3, #5
 8018fe2:	e102      	b.n	80191ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fe6:	88db      	ldrh	r3, [r3, #6]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7f5 ffce 	bl	800ef8c <lwip_htons>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018ff4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018ff6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018ffe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019004:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	891b      	ldrh	r3, [r3, #8]
 801900a:	3b14      	subs	r3, #20
 801900c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019010:	e0e1      	b.n	80191d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019012:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019014:	00db      	lsls	r3, r3, #3
 8019016:	b29b      	uxth	r3, r3
 8019018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801901c:	4293      	cmp	r3, r2
 801901e:	bf28      	it	cs
 8019020:	4613      	movcs	r3, r2
 8019022:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019024:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019028:	2114      	movs	r1, #20
 801902a:	200e      	movs	r0, #14
 801902c:	f7f7 f984 	bl	8010338 <pbuf_alloc>
 8019030:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019034:	2b00      	cmp	r3, #0
 8019036:	f000 80d5 	beq.w	80191e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801903c:	895b      	ldrh	r3, [r3, #10]
 801903e:	2b13      	cmp	r3, #19
 8019040:	d806      	bhi.n	8019050 <ip4_frag+0xd0>
 8019042:	4b6c      	ldr	r3, [pc, #432]	@ (80191f4 <ip4_frag+0x274>)
 8019044:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8019048:	496d      	ldr	r1, [pc, #436]	@ (8019200 <ip4_frag+0x280>)
 801904a:	486c      	ldr	r0, [pc, #432]	@ (80191fc <ip4_frag+0x27c>)
 801904c:	f000 fbca 	bl	80197e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019052:	685b      	ldr	r3, [r3, #4]
 8019054:	2214      	movs	r2, #20
 8019056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019058:	4618      	mov	r0, r3
 801905a:	f000 fc6a 	bl	8019932 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019064:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019066:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801906a:	e064      	b.n	8019136 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	895a      	ldrh	r2, [r3, #10]
 8019070:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	895b      	ldrh	r3, [r3, #10]
 801907a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801907c:	429a      	cmp	r2, r3
 801907e:	d906      	bls.n	801908e <ip4_frag+0x10e>
 8019080:	4b5c      	ldr	r3, [pc, #368]	@ (80191f4 <ip4_frag+0x274>)
 8019082:	f240 322d 	movw	r2, #813	@ 0x32d
 8019086:	495f      	ldr	r1, [pc, #380]	@ (8019204 <ip4_frag+0x284>)
 8019088:	485c      	ldr	r0, [pc, #368]	@ (80191fc <ip4_frag+0x27c>)
 801908a:	f000 fbab 	bl	80197e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801908e:	8bfa      	ldrh	r2, [r7, #30]
 8019090:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019094:	4293      	cmp	r3, r2
 8019096:	bf28      	it	cs
 8019098:	4613      	movcs	r3, r2
 801909a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801909e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d105      	bne.n	80190b2 <ip4_frag+0x132>
        poff = 0;
 80190a6:	2300      	movs	r3, #0
 80190a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	60fb      	str	r3, [r7, #12]
        continue;
 80190b0:	e041      	b.n	8019136 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190b2:	f7ff ff0d 	bl	8018ed0 <ip_frag_alloc_pbuf_custom_ref>
 80190b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190b8:	69bb      	ldr	r3, [r7, #24]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d103      	bne.n	80190c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80190c0:	f7f7 fc22 	bl	8010908 <pbuf_free>
        goto memerr;
 80190c4:	e08f      	b.n	80191e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190ce:	4413      	add	r3, r2
 80190d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80190d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80190d8:	9201      	str	r2, [sp, #4]
 80190da:	9300      	str	r3, [sp, #0]
 80190dc:	4603      	mov	r3, r0
 80190de:	2241      	movs	r2, #65	@ 0x41
 80190e0:	2000      	movs	r0, #0
 80190e2:	f7f7 fa57 	bl	8010594 <pbuf_alloced_custom>
 80190e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80190e8:	697b      	ldr	r3, [r7, #20]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d106      	bne.n	80190fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80190ee:	69b8      	ldr	r0, [r7, #24]
 80190f0:	f7ff fef6 	bl	8018ee0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80190f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80190f6:	f7f7 fc07 	bl	8010908 <pbuf_free>
        goto memerr;
 80190fa:	e074      	b.n	80191e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7f7 fca9 	bl	8010a54 <pbuf_ref>
      pcr->original = p;
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	68fa      	ldr	r2, [r7, #12]
 8019106:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019108:	69bb      	ldr	r3, [r7, #24]
 801910a:	4a3f      	ldr	r2, [pc, #252]	@ (8019208 <ip4_frag+0x288>)
 801910c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801910e:	6979      	ldr	r1, [r7, #20]
 8019110:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019112:	f7f7 fcc7 	bl	8010aa4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019116:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801911a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801911e:	1ad3      	subs	r3, r2, r3
 8019120:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019124:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019128:	2b00      	cmp	r3, #0
 801912a:	d004      	beq.n	8019136 <ip4_frag+0x1b6>
        poff = 0;
 801912c:	2300      	movs	r3, #0
 801912e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019136:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801913a:	2b00      	cmp	r3, #0
 801913c:	d196      	bne.n	801906c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801913e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019140:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019144:	4413      	add	r3, r2
 8019146:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801914c:	f1a3 0213 	sub.w	r2, r3, #19
 8019150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019154:	429a      	cmp	r2, r3
 8019156:	bfcc      	ite	gt
 8019158:	2301      	movgt	r3, #1
 801915a:	2300      	movle	r3, #0
 801915c:	b2db      	uxtb	r3, r3
 801915e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019160:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019168:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801916a:	6a3b      	ldr	r3, [r7, #32]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d002      	beq.n	8019176 <ip4_frag+0x1f6>
 8019170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019172:	2b00      	cmp	r3, #0
 8019174:	d003      	beq.n	801917e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019176:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019178:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801917c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801917e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019180:	4618      	mov	r0, r3
 8019182:	f7f5 ff03 	bl	800ef8c <lwip_htons>
 8019186:	4603      	mov	r3, r0
 8019188:	461a      	mov	r2, r3
 801918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801918c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801918e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019190:	3314      	adds	r3, #20
 8019192:	b29b      	uxth	r3, r3
 8019194:	4618      	mov	r0, r3
 8019196:	f7f5 fef9 	bl	800ef8c <lwip_htons>
 801919a:	4603      	mov	r3, r0
 801919c:	461a      	mov	r2, r3
 801919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80191a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191a4:	2200      	movs	r2, #0
 80191a6:	729a      	strb	r2, [r3, #10]
 80191a8:	2200      	movs	r2, #0
 80191aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	695b      	ldr	r3, [r3, #20]
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80191b4:	68b8      	ldr	r0, [r7, #8]
 80191b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80191ba:	f7f7 fba5 	bl	8010908 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80191c4:	1ad3      	subs	r3, r2, r3
 80191c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80191ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80191ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80191d0:	4413      	add	r3, r2
 80191d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80191d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80191da:	2b00      	cmp	r3, #0
 80191dc:	f47f af19 	bne.w	8019012 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80191e0:	2300      	movs	r3, #0
 80191e2:	e002      	b.n	80191ea <ip4_frag+0x26a>
      goto memerr;
 80191e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80191e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	3748      	adds	r7, #72	@ 0x48
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}
 80191f2:	bf00      	nop
 80191f4:	0801cf80 	.word	0x0801cf80
 80191f8:	0801d15c 	.word	0x0801d15c
 80191fc:	0801cfc8 	.word	0x0801cfc8
 8019200:	0801d178 	.word	0x0801d178
 8019204:	0801d198 	.word	0x0801d198
 8019208:	08018f19 	.word	0x08018f19

0801920c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019216:	230e      	movs	r3, #14
 8019218:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	895b      	ldrh	r3, [r3, #10]
 801921e:	2b0e      	cmp	r3, #14
 8019220:	d96e      	bls.n	8019300 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	7bdb      	ldrb	r3, [r3, #15]
 8019226:	2b00      	cmp	r3, #0
 8019228:	d106      	bne.n	8019238 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019230:	3301      	adds	r3, #1
 8019232:	b2da      	uxtb	r2, r3
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	685b      	ldr	r3, [r3, #4]
 801923c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	7b1a      	ldrb	r2, [r3, #12]
 8019242:	7b5b      	ldrb	r3, [r3, #13]
 8019244:	021b      	lsls	r3, r3, #8
 8019246:	4313      	orrs	r3, r2
 8019248:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	f003 0301 	and.w	r3, r3, #1
 8019252:	2b00      	cmp	r3, #0
 8019254:	d023      	beq.n	801929e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	781b      	ldrb	r3, [r3, #0]
 801925a:	2b01      	cmp	r3, #1
 801925c:	d10f      	bne.n	801927e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801925e:	693b      	ldr	r3, [r7, #16]
 8019260:	785b      	ldrb	r3, [r3, #1]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d11b      	bne.n	801929e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801926a:	2b5e      	cmp	r3, #94	@ 0x5e
 801926c:	d117      	bne.n	801929e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	7b5b      	ldrb	r3, [r3, #13]
 8019272:	f043 0310 	orr.w	r3, r3, #16
 8019276:	b2da      	uxtb	r2, r3
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	735a      	strb	r2, [r3, #13]
 801927c:	e00f      	b.n	801929e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2206      	movs	r2, #6
 8019282:	4928      	ldr	r1, [pc, #160]	@ (8019324 <ethernet_input+0x118>)
 8019284:	4618      	mov	r0, r3
 8019286:	f000 fabf 	bl	8019808 <memcmp>
 801928a:	4603      	mov	r3, r0
 801928c:	2b00      	cmp	r3, #0
 801928e:	d106      	bne.n	801929e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	7b5b      	ldrb	r3, [r3, #13]
 8019294:	f043 0308 	orr.w	r3, r3, #8
 8019298:	b2da      	uxtb	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801929e:	89fb      	ldrh	r3, [r7, #14]
 80192a0:	2b08      	cmp	r3, #8
 80192a2:	d003      	beq.n	80192ac <ethernet_input+0xa0>
 80192a4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80192a8:	d014      	beq.n	80192d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80192aa:	e032      	b.n	8019312 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192ac:	683b      	ldr	r3, [r7, #0]
 80192ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80192b2:	f003 0308 	and.w	r3, r3, #8
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d024      	beq.n	8019304 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192ba:	8afb      	ldrh	r3, [r7, #22]
 80192bc:	4619      	mov	r1, r3
 80192be:	6878      	ldr	r0, [r7, #4]
 80192c0:	f7f7 fa9c 	bl	80107fc <pbuf_remove_header>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d11e      	bne.n	8019308 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80192ca:	6839      	ldr	r1, [r7, #0]
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	f7fe ff21 	bl	8018114 <ip4_input>
      break;
 80192d2:	e013      	b.n	80192fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80192da:	f003 0308 	and.w	r3, r3, #8
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d014      	beq.n	801930c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192e2:	8afb      	ldrh	r3, [r7, #22]
 80192e4:	4619      	mov	r1, r3
 80192e6:	6878      	ldr	r0, [r7, #4]
 80192e8:	f7f7 fa88 	bl	80107fc <pbuf_remove_header>
 80192ec:	4603      	mov	r3, r0
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d10e      	bne.n	8019310 <ethernet_input+0x104>
        etharp_input(p, netif);
 80192f2:	6839      	ldr	r1, [r7, #0]
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f7fe f89b 	bl	8017430 <etharp_input>
      break;
 80192fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80192fc:	2300      	movs	r3, #0
 80192fe:	e00c      	b.n	801931a <ethernet_input+0x10e>
    goto free_and_return;
 8019300:	bf00      	nop
 8019302:	e006      	b.n	8019312 <ethernet_input+0x106>
        goto free_and_return;
 8019304:	bf00      	nop
 8019306:	e004      	b.n	8019312 <ethernet_input+0x106>
        goto free_and_return;
 8019308:	bf00      	nop
 801930a:	e002      	b.n	8019312 <ethernet_input+0x106>
        goto free_and_return;
 801930c:	bf00      	nop
 801930e:	e000      	b.n	8019312 <ethernet_input+0x106>
        goto free_and_return;
 8019310:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019312:	6878      	ldr	r0, [r7, #4]
 8019314:	f7f7 faf8 	bl	8010908 <pbuf_free>
  return ERR_OK;
 8019318:	2300      	movs	r3, #0
}
 801931a:	4618      	mov	r0, r3
 801931c:	3718      	adds	r7, #24
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop
 8019324:	0801d374 	.word	0x0801d374

08019328 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019328:	b580      	push	{r7, lr}
 801932a:	b086      	sub	sp, #24
 801932c:	af00      	add	r7, sp, #0
 801932e:	60f8      	str	r0, [r7, #12]
 8019330:	60b9      	str	r1, [r7, #8]
 8019332:	607a      	str	r2, [r7, #4]
 8019334:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019336:	8c3b      	ldrh	r3, [r7, #32]
 8019338:	4618      	mov	r0, r3
 801933a:	f7f5 fe27 	bl	800ef8c <lwip_htons>
 801933e:	4603      	mov	r3, r0
 8019340:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019342:	210e      	movs	r1, #14
 8019344:	68b8      	ldr	r0, [r7, #8]
 8019346:	f7f7 fa49 	bl	80107dc <pbuf_add_header>
 801934a:	4603      	mov	r3, r0
 801934c:	2b00      	cmp	r3, #0
 801934e:	d125      	bne.n	801939c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	685b      	ldr	r3, [r3, #4]
 8019354:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	8afa      	ldrh	r2, [r7, #22]
 801935a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801935c:	693b      	ldr	r3, [r7, #16]
 801935e:	2206      	movs	r2, #6
 8019360:	6839      	ldr	r1, [r7, #0]
 8019362:	4618      	mov	r0, r3
 8019364:	f000 fae5 	bl	8019932 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	3306      	adds	r3, #6
 801936c:	2206      	movs	r2, #6
 801936e:	6879      	ldr	r1, [r7, #4]
 8019370:	4618      	mov	r0, r3
 8019372:	f000 fade 	bl	8019932 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801937c:	2b06      	cmp	r3, #6
 801937e:	d006      	beq.n	801938e <ethernet_output+0x66>
 8019380:	4b0a      	ldr	r3, [pc, #40]	@ (80193ac <ethernet_output+0x84>)
 8019382:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8019386:	490a      	ldr	r1, [pc, #40]	@ (80193b0 <ethernet_output+0x88>)
 8019388:	480a      	ldr	r0, [pc, #40]	@ (80193b4 <ethernet_output+0x8c>)
 801938a:	f000 fa2b 	bl	80197e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	699b      	ldr	r3, [r3, #24]
 8019392:	68b9      	ldr	r1, [r7, #8]
 8019394:	68f8      	ldr	r0, [r7, #12]
 8019396:	4798      	blx	r3
 8019398:	4603      	mov	r3, r0
 801939a:	e002      	b.n	80193a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801939c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801939e:	f06f 0301 	mvn.w	r3, #1
}
 80193a2:	4618      	mov	r0, r3
 80193a4:	3718      	adds	r7, #24
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	0801d1a8 	.word	0x0801d1a8
 80193b0:	0801d1e0 	.word	0x0801d1e0
 80193b4:	0801d214 	.word	0x0801d214

080193b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b086      	sub	sp, #24
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	60bb      	str	r3, [r7, #8]
 80193c6:	2304      	movs	r3, #4
 80193c8:	60fb      	str	r3, [r7, #12]
 80193ca:	2300      	movs	r3, #0
 80193cc:	613b      	str	r3, [r7, #16]
 80193ce:	2300      	movs	r3, #0
 80193d0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80193d2:	f107 0308 	add.w	r3, r7, #8
 80193d6:	2100      	movs	r1, #0
 80193d8:	4618      	mov	r0, r3
 80193da:	f7f2 fdd9 	bl	800bf90 <osMessageCreate>
 80193de:	4602      	mov	r2, r0
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d102      	bne.n	80193f2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80193ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80193f0:	e000      	b.n	80193f4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80193f2:	2300      	movs	r3, #0
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3718      	adds	r7, #24
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}

080193fc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b084      	sub	sp, #16
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	6839      	ldr	r1, [r7, #0]
 801940c:	2200      	movs	r2, #0
 801940e:	4618      	mov	r0, r3
 8019410:	f7f2 fde6 	bl	800bfe0 <osMessagePut>
 8019414:	4603      	mov	r3, r0
 8019416:	2b00      	cmp	r3, #0
 8019418:	d102      	bne.n	8019420 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801941a:	2300      	movs	r3, #0
 801941c:	73fb      	strb	r3, [r7, #15]
 801941e:	e001      	b.n	8019424 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019420:	23ff      	movs	r3, #255	@ 0xff
 8019422:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019424:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019428:	4618      	mov	r0, r3
 801942a:	3710      	adds	r7, #16
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}

08019430 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b08c      	sub	sp, #48	@ 0x30
 8019434:	af00      	add	r7, sp, #0
 8019436:	61f8      	str	r0, [r7, #28]
 8019438:	61b9      	str	r1, [r7, #24]
 801943a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801943c:	f7f2 fbe6 	bl	800bc0c <osKernelSysTick>
 8019440:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d017      	beq.n	8019478 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019448:	69fb      	ldr	r3, [r7, #28]
 801944a:	6819      	ldr	r1, [r3, #0]
 801944c:	f107 0320 	add.w	r3, r7, #32
 8019450:	697a      	ldr	r2, [r7, #20]
 8019452:	4618      	mov	r0, r3
 8019454:	f7f2 fe04 	bl	800c060 <osMessageGet>

    if(event.status == osEventMessage)
 8019458:	6a3b      	ldr	r3, [r7, #32]
 801945a:	2b10      	cmp	r3, #16
 801945c:	d109      	bne.n	8019472 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019460:	461a      	mov	r2, r3
 8019462:	69bb      	ldr	r3, [r7, #24]
 8019464:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019466:	f7f2 fbd1 	bl	800bc0c <osKernelSysTick>
 801946a:	4602      	mov	r2, r0
 801946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801946e:	1ad3      	subs	r3, r2, r3
 8019470:	e019      	b.n	80194a6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019476:	e016      	b.n	80194a6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019478:	69fb      	ldr	r3, [r7, #28]
 801947a:	6819      	ldr	r1, [r3, #0]
 801947c:	463b      	mov	r3, r7
 801947e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019482:	4618      	mov	r0, r3
 8019484:	f7f2 fdec 	bl	800c060 <osMessageGet>
 8019488:	f107 0320 	add.w	r3, r7, #32
 801948c:	463a      	mov	r2, r7
 801948e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019490:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019496:	461a      	mov	r2, r3
 8019498:	69bb      	ldr	r3, [r7, #24]
 801949a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801949c:	f7f2 fbb6 	bl	800bc0c <osKernelSysTick>
 80194a0:	4602      	mov	r2, r0
 80194a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194a4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3730      	adds	r7, #48	@ 0x30
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}

080194ae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80194ae:	b480      	push	{r7}
 80194b0:	b083      	sub	sp, #12
 80194b2:	af00      	add	r7, sp, #0
 80194b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d101      	bne.n	80194c2 <sys_mbox_valid+0x14>
    return 0;
 80194be:	2300      	movs	r3, #0
 80194c0:	e000      	b.n	80194c4 <sys_mbox_valid+0x16>
  else
    return 1;
 80194c2:	2301      	movs	r3, #1
}
 80194c4:	4618      	mov	r0, r3
 80194c6:	370c      	adds	r7, #12
 80194c8:	46bd      	mov	sp, r7
 80194ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ce:	4770      	bx	lr

080194d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80194d4:	4803      	ldr	r0, [pc, #12]	@ (80194e4 <sys_init+0x14>)
 80194d6:	f7f2 fc09 	bl	800bcec <osMutexCreate>
 80194da:	4603      	mov	r3, r0
 80194dc:	4a02      	ldr	r2, [pc, #8]	@ (80194e8 <sys_init+0x18>)
 80194de:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80194e0:	bf00      	nop
 80194e2:	bd80      	pop	{r7, pc}
 80194e4:	0801d384 	.word	0x0801d384
 80194e8:	24010744 	.word	0x24010744

080194ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80194f4:	2300      	movs	r3, #0
 80194f6:	60bb      	str	r3, [r7, #8]
 80194f8:	2300      	movs	r3, #0
 80194fa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80194fc:	f107 0308 	add.w	r3, r7, #8
 8019500:	4618      	mov	r0, r3
 8019502:	f7f2 fbf3 	bl	800bcec <osMutexCreate>
 8019506:	4602      	mov	r2, r0
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d102      	bne.n	801951a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019518:	e000      	b.n	801951c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801951a:	2300      	movs	r3, #0
}
 801951c:	4618      	mov	r0, r3
 801951e:	3710      	adds	r7, #16
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b082      	sub	sp, #8
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8019534:	4618      	mov	r0, r3
 8019536:	f7f2 fbf1 	bl	800bd1c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801953a:	bf00      	nop
 801953c:	3708      	adds	r7, #8
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}

08019542 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019542:	b580      	push	{r7, lr}
 8019544:	b082      	sub	sp, #8
 8019546:	af00      	add	r7, sp, #0
 8019548:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	4618      	mov	r0, r3
 8019550:	f7f2 fc32 	bl	800bdb8 <osMutexRelease>
}
 8019554:	bf00      	nop
 8019556:	3708      	adds	r7, #8
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b08c      	sub	sp, #48	@ 0x30
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	607a      	str	r2, [r7, #4]
 8019568:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801956a:	f107 0314 	add.w	r3, r7, #20
 801956e:	2200      	movs	r2, #0
 8019570:	601a      	str	r2, [r3, #0]
 8019572:	605a      	str	r2, [r3, #4]
 8019574:	609a      	str	r2, [r3, #8]
 8019576:	60da      	str	r2, [r3, #12]
 8019578:	611a      	str	r2, [r3, #16]
 801957a:	615a      	str	r2, [r3, #20]
 801957c:	619a      	str	r2, [r3, #24]
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	617b      	str	r3, [r7, #20]
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	61bb      	str	r3, [r7, #24]
 8019586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019588:	b21b      	sxth	r3, r3
 801958a:	83bb      	strh	r3, [r7, #28]
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019590:	f107 0314 	add.w	r3, r7, #20
 8019594:	6879      	ldr	r1, [r7, #4]
 8019596:	4618      	mov	r0, r3
 8019598:	f7f2 fb48 	bl	800bc2c <osThreadCreate>
 801959c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801959e:	4618      	mov	r0, r3
 80195a0:	3730      	adds	r7, #48	@ 0x30
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
	...

080195a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80195ac:	4b04      	ldr	r3, [pc, #16]	@ (80195c0 <sys_arch_protect+0x18>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7f2 fbb1 	bl	800bd1c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80195ba:	2301      	movs	r3, #1
}
 80195bc:	4618      	mov	r0, r3
 80195be:	bd80      	pop	{r7, pc}
 80195c0:	24010744 	.word	0x24010744

080195c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b082      	sub	sp, #8
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80195cc:	4b04      	ldr	r3, [pc, #16]	@ (80195e0 <sys_arch_unprotect+0x1c>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7f2 fbf1 	bl	800bdb8 <osMutexRelease>
}
 80195d6:	bf00      	nop
 80195d8:	3708      	adds	r7, #8
 80195da:	46bd      	mov	sp, r7
 80195dc:	bd80      	pop	{r7, pc}
 80195de:	bf00      	nop
 80195e0:	24010744 	.word	0x24010744

080195e4 <rand>:
 80195e4:	4b16      	ldr	r3, [pc, #88]	@ (8019640 <rand+0x5c>)
 80195e6:	b510      	push	{r4, lr}
 80195e8:	681c      	ldr	r4, [r3, #0]
 80195ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80195ec:	b9b3      	cbnz	r3, 801961c <rand+0x38>
 80195ee:	2018      	movs	r0, #24
 80195f0:	f000 fb58 	bl	8019ca4 <malloc>
 80195f4:	4602      	mov	r2, r0
 80195f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80195f8:	b920      	cbnz	r0, 8019604 <rand+0x20>
 80195fa:	4b12      	ldr	r3, [pc, #72]	@ (8019644 <rand+0x60>)
 80195fc:	4812      	ldr	r0, [pc, #72]	@ (8019648 <rand+0x64>)
 80195fe:	2152      	movs	r1, #82	@ 0x52
 8019600:	f000 f9a6 	bl	8019950 <__assert_func>
 8019604:	4911      	ldr	r1, [pc, #68]	@ (801964c <rand+0x68>)
 8019606:	4b12      	ldr	r3, [pc, #72]	@ (8019650 <rand+0x6c>)
 8019608:	e9c0 1300 	strd	r1, r3, [r0]
 801960c:	4b11      	ldr	r3, [pc, #68]	@ (8019654 <rand+0x70>)
 801960e:	6083      	str	r3, [r0, #8]
 8019610:	230b      	movs	r3, #11
 8019612:	8183      	strh	r3, [r0, #12]
 8019614:	2100      	movs	r1, #0
 8019616:	2001      	movs	r0, #1
 8019618:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801961c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801961e:	480e      	ldr	r0, [pc, #56]	@ (8019658 <rand+0x74>)
 8019620:	690b      	ldr	r3, [r1, #16]
 8019622:	694c      	ldr	r4, [r1, #20]
 8019624:	4a0d      	ldr	r2, [pc, #52]	@ (801965c <rand+0x78>)
 8019626:	4358      	muls	r0, r3
 8019628:	fb02 0004 	mla	r0, r2, r4, r0
 801962c:	fba3 3202 	umull	r3, r2, r3, r2
 8019630:	3301      	adds	r3, #1
 8019632:	eb40 0002 	adc.w	r0, r0, r2
 8019636:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801963a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801963e:	bd10      	pop	{r4, pc}
 8019640:	24004a10 	.word	0x24004a10
 8019644:	0801d38c 	.word	0x0801d38c
 8019648:	0801d3a3 	.word	0x0801d3a3
 801964c:	abcd330e 	.word	0xabcd330e
 8019650:	e66d1234 	.word	0xe66d1234
 8019654:	0005deec 	.word	0x0005deec
 8019658:	5851f42d 	.word	0x5851f42d
 801965c:	4c957f2d 	.word	0x4c957f2d

08019660 <std>:
 8019660:	2300      	movs	r3, #0
 8019662:	b510      	push	{r4, lr}
 8019664:	4604      	mov	r4, r0
 8019666:	e9c0 3300 	strd	r3, r3, [r0]
 801966a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801966e:	6083      	str	r3, [r0, #8]
 8019670:	8181      	strh	r1, [r0, #12]
 8019672:	6643      	str	r3, [r0, #100]	@ 0x64
 8019674:	81c2      	strh	r2, [r0, #14]
 8019676:	6183      	str	r3, [r0, #24]
 8019678:	4619      	mov	r1, r3
 801967a:	2208      	movs	r2, #8
 801967c:	305c      	adds	r0, #92	@ 0x5c
 801967e:	f000 f8d3 	bl	8019828 <memset>
 8019682:	4b0d      	ldr	r3, [pc, #52]	@ (80196b8 <std+0x58>)
 8019684:	6263      	str	r3, [r4, #36]	@ 0x24
 8019686:	4b0d      	ldr	r3, [pc, #52]	@ (80196bc <std+0x5c>)
 8019688:	62a3      	str	r3, [r4, #40]	@ 0x28
 801968a:	4b0d      	ldr	r3, [pc, #52]	@ (80196c0 <std+0x60>)
 801968c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801968e:	4b0d      	ldr	r3, [pc, #52]	@ (80196c4 <std+0x64>)
 8019690:	6323      	str	r3, [r4, #48]	@ 0x30
 8019692:	4b0d      	ldr	r3, [pc, #52]	@ (80196c8 <std+0x68>)
 8019694:	6224      	str	r4, [r4, #32]
 8019696:	429c      	cmp	r4, r3
 8019698:	d006      	beq.n	80196a8 <std+0x48>
 801969a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801969e:	4294      	cmp	r4, r2
 80196a0:	d002      	beq.n	80196a8 <std+0x48>
 80196a2:	33d0      	adds	r3, #208	@ 0xd0
 80196a4:	429c      	cmp	r4, r3
 80196a6:	d105      	bne.n	80196b4 <std+0x54>
 80196a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80196ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196b0:	f000 b93c 	b.w	801992c <__retarget_lock_init_recursive>
 80196b4:	bd10      	pop	{r4, pc}
 80196b6:	bf00      	nop
 80196b8:	0801a285 	.word	0x0801a285
 80196bc:	0801a2a7 	.word	0x0801a2a7
 80196c0:	0801a2df 	.word	0x0801a2df
 80196c4:	0801a303 	.word	0x0801a303
 80196c8:	24010748 	.word	0x24010748

080196cc <stdio_exit_handler>:
 80196cc:	4a02      	ldr	r2, [pc, #8]	@ (80196d8 <stdio_exit_handler+0xc>)
 80196ce:	4903      	ldr	r1, [pc, #12]	@ (80196dc <stdio_exit_handler+0x10>)
 80196d0:	4803      	ldr	r0, [pc, #12]	@ (80196e0 <stdio_exit_handler+0x14>)
 80196d2:	f000 b869 	b.w	80197a8 <_fwalk_sglue>
 80196d6:	bf00      	nop
 80196d8:	24004a04 	.word	0x24004a04
 80196dc:	0801a21d 	.word	0x0801a21d
 80196e0:	24004a14 	.word	0x24004a14

080196e4 <cleanup_stdio>:
 80196e4:	6841      	ldr	r1, [r0, #4]
 80196e6:	4b0c      	ldr	r3, [pc, #48]	@ (8019718 <cleanup_stdio+0x34>)
 80196e8:	4299      	cmp	r1, r3
 80196ea:	b510      	push	{r4, lr}
 80196ec:	4604      	mov	r4, r0
 80196ee:	d001      	beq.n	80196f4 <cleanup_stdio+0x10>
 80196f0:	f000 fd94 	bl	801a21c <_fflush_r>
 80196f4:	68a1      	ldr	r1, [r4, #8]
 80196f6:	4b09      	ldr	r3, [pc, #36]	@ (801971c <cleanup_stdio+0x38>)
 80196f8:	4299      	cmp	r1, r3
 80196fa:	d002      	beq.n	8019702 <cleanup_stdio+0x1e>
 80196fc:	4620      	mov	r0, r4
 80196fe:	f000 fd8d 	bl	801a21c <_fflush_r>
 8019702:	68e1      	ldr	r1, [r4, #12]
 8019704:	4b06      	ldr	r3, [pc, #24]	@ (8019720 <cleanup_stdio+0x3c>)
 8019706:	4299      	cmp	r1, r3
 8019708:	d004      	beq.n	8019714 <cleanup_stdio+0x30>
 801970a:	4620      	mov	r0, r4
 801970c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019710:	f000 bd84 	b.w	801a21c <_fflush_r>
 8019714:	bd10      	pop	{r4, pc}
 8019716:	bf00      	nop
 8019718:	24010748 	.word	0x24010748
 801971c:	240107b0 	.word	0x240107b0
 8019720:	24010818 	.word	0x24010818

08019724 <global_stdio_init.part.0>:
 8019724:	b510      	push	{r4, lr}
 8019726:	4b0b      	ldr	r3, [pc, #44]	@ (8019754 <global_stdio_init.part.0+0x30>)
 8019728:	4c0b      	ldr	r4, [pc, #44]	@ (8019758 <global_stdio_init.part.0+0x34>)
 801972a:	4a0c      	ldr	r2, [pc, #48]	@ (801975c <global_stdio_init.part.0+0x38>)
 801972c:	601a      	str	r2, [r3, #0]
 801972e:	4620      	mov	r0, r4
 8019730:	2200      	movs	r2, #0
 8019732:	2104      	movs	r1, #4
 8019734:	f7ff ff94 	bl	8019660 <std>
 8019738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801973c:	2201      	movs	r2, #1
 801973e:	2109      	movs	r1, #9
 8019740:	f7ff ff8e 	bl	8019660 <std>
 8019744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019748:	2202      	movs	r2, #2
 801974a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801974e:	2112      	movs	r1, #18
 8019750:	f7ff bf86 	b.w	8019660 <std>
 8019754:	24010880 	.word	0x24010880
 8019758:	24010748 	.word	0x24010748
 801975c:	080196cd 	.word	0x080196cd

08019760 <__sfp_lock_acquire>:
 8019760:	4801      	ldr	r0, [pc, #4]	@ (8019768 <__sfp_lock_acquire+0x8>)
 8019762:	f000 b8e4 	b.w	801992e <__retarget_lock_acquire_recursive>
 8019766:	bf00      	nop
 8019768:	24010889 	.word	0x24010889

0801976c <__sfp_lock_release>:
 801976c:	4801      	ldr	r0, [pc, #4]	@ (8019774 <__sfp_lock_release+0x8>)
 801976e:	f000 b8df 	b.w	8019930 <__retarget_lock_release_recursive>
 8019772:	bf00      	nop
 8019774:	24010889 	.word	0x24010889

08019778 <__sinit>:
 8019778:	b510      	push	{r4, lr}
 801977a:	4604      	mov	r4, r0
 801977c:	f7ff fff0 	bl	8019760 <__sfp_lock_acquire>
 8019780:	6a23      	ldr	r3, [r4, #32]
 8019782:	b11b      	cbz	r3, 801978c <__sinit+0x14>
 8019784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019788:	f7ff bff0 	b.w	801976c <__sfp_lock_release>
 801978c:	4b04      	ldr	r3, [pc, #16]	@ (80197a0 <__sinit+0x28>)
 801978e:	6223      	str	r3, [r4, #32]
 8019790:	4b04      	ldr	r3, [pc, #16]	@ (80197a4 <__sinit+0x2c>)
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d1f5      	bne.n	8019784 <__sinit+0xc>
 8019798:	f7ff ffc4 	bl	8019724 <global_stdio_init.part.0>
 801979c:	e7f2      	b.n	8019784 <__sinit+0xc>
 801979e:	bf00      	nop
 80197a0:	080196e5 	.word	0x080196e5
 80197a4:	24010880 	.word	0x24010880

080197a8 <_fwalk_sglue>:
 80197a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80197ac:	4607      	mov	r7, r0
 80197ae:	4688      	mov	r8, r1
 80197b0:	4614      	mov	r4, r2
 80197b2:	2600      	movs	r6, #0
 80197b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80197b8:	f1b9 0901 	subs.w	r9, r9, #1
 80197bc:	d505      	bpl.n	80197ca <_fwalk_sglue+0x22>
 80197be:	6824      	ldr	r4, [r4, #0]
 80197c0:	2c00      	cmp	r4, #0
 80197c2:	d1f7      	bne.n	80197b4 <_fwalk_sglue+0xc>
 80197c4:	4630      	mov	r0, r6
 80197c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ca:	89ab      	ldrh	r3, [r5, #12]
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d907      	bls.n	80197e0 <_fwalk_sglue+0x38>
 80197d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197d4:	3301      	adds	r3, #1
 80197d6:	d003      	beq.n	80197e0 <_fwalk_sglue+0x38>
 80197d8:	4629      	mov	r1, r5
 80197da:	4638      	mov	r0, r7
 80197dc:	47c0      	blx	r8
 80197de:	4306      	orrs	r6, r0
 80197e0:	3568      	adds	r5, #104	@ 0x68
 80197e2:	e7e9      	b.n	80197b8 <_fwalk_sglue+0x10>

080197e4 <iprintf>:
 80197e4:	b40f      	push	{r0, r1, r2, r3}
 80197e6:	b507      	push	{r0, r1, r2, lr}
 80197e8:	4906      	ldr	r1, [pc, #24]	@ (8019804 <iprintf+0x20>)
 80197ea:	ab04      	add	r3, sp, #16
 80197ec:	6808      	ldr	r0, [r1, #0]
 80197ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80197f2:	6881      	ldr	r1, [r0, #8]
 80197f4:	9301      	str	r3, [sp, #4]
 80197f6:	f000 f93d 	bl	8019a74 <_vfiprintf_r>
 80197fa:	b003      	add	sp, #12
 80197fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019800:	b004      	add	sp, #16
 8019802:	4770      	bx	lr
 8019804:	24004a10 	.word	0x24004a10

08019808 <memcmp>:
 8019808:	b510      	push	{r4, lr}
 801980a:	3901      	subs	r1, #1
 801980c:	4402      	add	r2, r0
 801980e:	4290      	cmp	r0, r2
 8019810:	d101      	bne.n	8019816 <memcmp+0xe>
 8019812:	2000      	movs	r0, #0
 8019814:	e005      	b.n	8019822 <memcmp+0x1a>
 8019816:	7803      	ldrb	r3, [r0, #0]
 8019818:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801981c:	42a3      	cmp	r3, r4
 801981e:	d001      	beq.n	8019824 <memcmp+0x1c>
 8019820:	1b18      	subs	r0, r3, r4
 8019822:	bd10      	pop	{r4, pc}
 8019824:	3001      	adds	r0, #1
 8019826:	e7f2      	b.n	801980e <memcmp+0x6>

08019828 <memset>:
 8019828:	4402      	add	r2, r0
 801982a:	4603      	mov	r3, r0
 801982c:	4293      	cmp	r3, r2
 801982e:	d100      	bne.n	8019832 <memset+0xa>
 8019830:	4770      	bx	lr
 8019832:	f803 1b01 	strb.w	r1, [r3], #1
 8019836:	e7f9      	b.n	801982c <memset+0x4>

08019838 <_reclaim_reent>:
 8019838:	4b29      	ldr	r3, [pc, #164]	@ (80198e0 <_reclaim_reent+0xa8>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4283      	cmp	r3, r0
 801983e:	b570      	push	{r4, r5, r6, lr}
 8019840:	4604      	mov	r4, r0
 8019842:	d04b      	beq.n	80198dc <_reclaim_reent+0xa4>
 8019844:	69c3      	ldr	r3, [r0, #28]
 8019846:	b1ab      	cbz	r3, 8019874 <_reclaim_reent+0x3c>
 8019848:	68db      	ldr	r3, [r3, #12]
 801984a:	b16b      	cbz	r3, 8019868 <_reclaim_reent+0x30>
 801984c:	2500      	movs	r5, #0
 801984e:	69e3      	ldr	r3, [r4, #28]
 8019850:	68db      	ldr	r3, [r3, #12]
 8019852:	5959      	ldr	r1, [r3, r5]
 8019854:	2900      	cmp	r1, #0
 8019856:	d13b      	bne.n	80198d0 <_reclaim_reent+0x98>
 8019858:	3504      	adds	r5, #4
 801985a:	2d80      	cmp	r5, #128	@ 0x80
 801985c:	d1f7      	bne.n	801984e <_reclaim_reent+0x16>
 801985e:	69e3      	ldr	r3, [r4, #28]
 8019860:	4620      	mov	r0, r4
 8019862:	68d9      	ldr	r1, [r3, #12]
 8019864:	f000 f892 	bl	801998c <_free_r>
 8019868:	69e3      	ldr	r3, [r4, #28]
 801986a:	6819      	ldr	r1, [r3, #0]
 801986c:	b111      	cbz	r1, 8019874 <_reclaim_reent+0x3c>
 801986e:	4620      	mov	r0, r4
 8019870:	f000 f88c 	bl	801998c <_free_r>
 8019874:	6961      	ldr	r1, [r4, #20]
 8019876:	b111      	cbz	r1, 801987e <_reclaim_reent+0x46>
 8019878:	4620      	mov	r0, r4
 801987a:	f000 f887 	bl	801998c <_free_r>
 801987e:	69e1      	ldr	r1, [r4, #28]
 8019880:	b111      	cbz	r1, 8019888 <_reclaim_reent+0x50>
 8019882:	4620      	mov	r0, r4
 8019884:	f000 f882 	bl	801998c <_free_r>
 8019888:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801988a:	b111      	cbz	r1, 8019892 <_reclaim_reent+0x5a>
 801988c:	4620      	mov	r0, r4
 801988e:	f000 f87d 	bl	801998c <_free_r>
 8019892:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019894:	b111      	cbz	r1, 801989c <_reclaim_reent+0x64>
 8019896:	4620      	mov	r0, r4
 8019898:	f000 f878 	bl	801998c <_free_r>
 801989c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801989e:	b111      	cbz	r1, 80198a6 <_reclaim_reent+0x6e>
 80198a0:	4620      	mov	r0, r4
 80198a2:	f000 f873 	bl	801998c <_free_r>
 80198a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80198a8:	b111      	cbz	r1, 80198b0 <_reclaim_reent+0x78>
 80198aa:	4620      	mov	r0, r4
 80198ac:	f000 f86e 	bl	801998c <_free_r>
 80198b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80198b2:	b111      	cbz	r1, 80198ba <_reclaim_reent+0x82>
 80198b4:	4620      	mov	r0, r4
 80198b6:	f000 f869 	bl	801998c <_free_r>
 80198ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80198bc:	b111      	cbz	r1, 80198c4 <_reclaim_reent+0x8c>
 80198be:	4620      	mov	r0, r4
 80198c0:	f000 f864 	bl	801998c <_free_r>
 80198c4:	6a23      	ldr	r3, [r4, #32]
 80198c6:	b14b      	cbz	r3, 80198dc <_reclaim_reent+0xa4>
 80198c8:	4620      	mov	r0, r4
 80198ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198ce:	4718      	bx	r3
 80198d0:	680e      	ldr	r6, [r1, #0]
 80198d2:	4620      	mov	r0, r4
 80198d4:	f000 f85a 	bl	801998c <_free_r>
 80198d8:	4631      	mov	r1, r6
 80198da:	e7bb      	b.n	8019854 <_reclaim_reent+0x1c>
 80198dc:	bd70      	pop	{r4, r5, r6, pc}
 80198de:	bf00      	nop
 80198e0:	24004a10 	.word	0x24004a10

080198e4 <__libc_init_array>:
 80198e4:	b570      	push	{r4, r5, r6, lr}
 80198e6:	4d0d      	ldr	r5, [pc, #52]	@ (801991c <__libc_init_array+0x38>)
 80198e8:	4c0d      	ldr	r4, [pc, #52]	@ (8019920 <__libc_init_array+0x3c>)
 80198ea:	1b64      	subs	r4, r4, r5
 80198ec:	10a4      	asrs	r4, r4, #2
 80198ee:	2600      	movs	r6, #0
 80198f0:	42a6      	cmp	r6, r4
 80198f2:	d109      	bne.n	8019908 <__libc_init_array+0x24>
 80198f4:	4d0b      	ldr	r5, [pc, #44]	@ (8019924 <__libc_init_array+0x40>)
 80198f6:	4c0c      	ldr	r4, [pc, #48]	@ (8019928 <__libc_init_array+0x44>)
 80198f8:	f000 fed4 	bl	801a6a4 <_init>
 80198fc:	1b64      	subs	r4, r4, r5
 80198fe:	10a4      	asrs	r4, r4, #2
 8019900:	2600      	movs	r6, #0
 8019902:	42a6      	cmp	r6, r4
 8019904:	d105      	bne.n	8019912 <__libc_init_array+0x2e>
 8019906:	bd70      	pop	{r4, r5, r6, pc}
 8019908:	f855 3b04 	ldr.w	r3, [r5], #4
 801990c:	4798      	blx	r3
 801990e:	3601      	adds	r6, #1
 8019910:	e7ee      	b.n	80198f0 <__libc_init_array+0xc>
 8019912:	f855 3b04 	ldr.w	r3, [r5], #4
 8019916:	4798      	blx	r3
 8019918:	3601      	adds	r6, #1
 801991a:	e7f2      	b.n	8019902 <__libc_init_array+0x1e>
 801991c:	0801d474 	.word	0x0801d474
 8019920:	0801d474 	.word	0x0801d474
 8019924:	0801d474 	.word	0x0801d474
 8019928:	0801d478 	.word	0x0801d478

0801992c <__retarget_lock_init_recursive>:
 801992c:	4770      	bx	lr

0801992e <__retarget_lock_acquire_recursive>:
 801992e:	4770      	bx	lr

08019930 <__retarget_lock_release_recursive>:
 8019930:	4770      	bx	lr

08019932 <memcpy>:
 8019932:	440a      	add	r2, r1
 8019934:	4291      	cmp	r1, r2
 8019936:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801993a:	d100      	bne.n	801993e <memcpy+0xc>
 801993c:	4770      	bx	lr
 801993e:	b510      	push	{r4, lr}
 8019940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019948:	4291      	cmp	r1, r2
 801994a:	d1f9      	bne.n	8019940 <memcpy+0xe>
 801994c:	bd10      	pop	{r4, pc}
	...

08019950 <__assert_func>:
 8019950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019952:	4614      	mov	r4, r2
 8019954:	461a      	mov	r2, r3
 8019956:	4b09      	ldr	r3, [pc, #36]	@ (801997c <__assert_func+0x2c>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	4605      	mov	r5, r0
 801995c:	68d8      	ldr	r0, [r3, #12]
 801995e:	b954      	cbnz	r4, 8019976 <__assert_func+0x26>
 8019960:	4b07      	ldr	r3, [pc, #28]	@ (8019980 <__assert_func+0x30>)
 8019962:	461c      	mov	r4, r3
 8019964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019968:	9100      	str	r1, [sp, #0]
 801996a:	462b      	mov	r3, r5
 801996c:	4905      	ldr	r1, [pc, #20]	@ (8019984 <__assert_func+0x34>)
 801996e:	f000 fccd 	bl	801a30c <fiprintf>
 8019972:	f000 fe4b 	bl	801a60c <abort>
 8019976:	4b04      	ldr	r3, [pc, #16]	@ (8019988 <__assert_func+0x38>)
 8019978:	e7f4      	b.n	8019964 <__assert_func+0x14>
 801997a:	bf00      	nop
 801997c:	24004a10 	.word	0x24004a10
 8019980:	0801d436 	.word	0x0801d436
 8019984:	0801d408 	.word	0x0801d408
 8019988:	0801d3fb 	.word	0x0801d3fb

0801998c <_free_r>:
 801998c:	b538      	push	{r3, r4, r5, lr}
 801998e:	4605      	mov	r5, r0
 8019990:	2900      	cmp	r1, #0
 8019992:	d041      	beq.n	8019a18 <_free_r+0x8c>
 8019994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019998:	1f0c      	subs	r4, r1, #4
 801999a:	2b00      	cmp	r3, #0
 801999c:	bfb8      	it	lt
 801999e:	18e4      	addlt	r4, r4, r3
 80199a0:	f000 fc64 	bl	801a26c <__malloc_lock>
 80199a4:	4a1d      	ldr	r2, [pc, #116]	@ (8019a1c <_free_r+0x90>)
 80199a6:	6813      	ldr	r3, [r2, #0]
 80199a8:	b933      	cbnz	r3, 80199b8 <_free_r+0x2c>
 80199aa:	6063      	str	r3, [r4, #4]
 80199ac:	6014      	str	r4, [r2, #0]
 80199ae:	4628      	mov	r0, r5
 80199b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199b4:	f000 bc60 	b.w	801a278 <__malloc_unlock>
 80199b8:	42a3      	cmp	r3, r4
 80199ba:	d908      	bls.n	80199ce <_free_r+0x42>
 80199bc:	6820      	ldr	r0, [r4, #0]
 80199be:	1821      	adds	r1, r4, r0
 80199c0:	428b      	cmp	r3, r1
 80199c2:	bf01      	itttt	eq
 80199c4:	6819      	ldreq	r1, [r3, #0]
 80199c6:	685b      	ldreq	r3, [r3, #4]
 80199c8:	1809      	addeq	r1, r1, r0
 80199ca:	6021      	streq	r1, [r4, #0]
 80199cc:	e7ed      	b.n	80199aa <_free_r+0x1e>
 80199ce:	461a      	mov	r2, r3
 80199d0:	685b      	ldr	r3, [r3, #4]
 80199d2:	b10b      	cbz	r3, 80199d8 <_free_r+0x4c>
 80199d4:	42a3      	cmp	r3, r4
 80199d6:	d9fa      	bls.n	80199ce <_free_r+0x42>
 80199d8:	6811      	ldr	r1, [r2, #0]
 80199da:	1850      	adds	r0, r2, r1
 80199dc:	42a0      	cmp	r0, r4
 80199de:	d10b      	bne.n	80199f8 <_free_r+0x6c>
 80199e0:	6820      	ldr	r0, [r4, #0]
 80199e2:	4401      	add	r1, r0
 80199e4:	1850      	adds	r0, r2, r1
 80199e6:	4283      	cmp	r3, r0
 80199e8:	6011      	str	r1, [r2, #0]
 80199ea:	d1e0      	bne.n	80199ae <_free_r+0x22>
 80199ec:	6818      	ldr	r0, [r3, #0]
 80199ee:	685b      	ldr	r3, [r3, #4]
 80199f0:	6053      	str	r3, [r2, #4]
 80199f2:	4408      	add	r0, r1
 80199f4:	6010      	str	r0, [r2, #0]
 80199f6:	e7da      	b.n	80199ae <_free_r+0x22>
 80199f8:	d902      	bls.n	8019a00 <_free_r+0x74>
 80199fa:	230c      	movs	r3, #12
 80199fc:	602b      	str	r3, [r5, #0]
 80199fe:	e7d6      	b.n	80199ae <_free_r+0x22>
 8019a00:	6820      	ldr	r0, [r4, #0]
 8019a02:	1821      	adds	r1, r4, r0
 8019a04:	428b      	cmp	r3, r1
 8019a06:	bf04      	itt	eq
 8019a08:	6819      	ldreq	r1, [r3, #0]
 8019a0a:	685b      	ldreq	r3, [r3, #4]
 8019a0c:	6063      	str	r3, [r4, #4]
 8019a0e:	bf04      	itt	eq
 8019a10:	1809      	addeq	r1, r1, r0
 8019a12:	6021      	streq	r1, [r4, #0]
 8019a14:	6054      	str	r4, [r2, #4]
 8019a16:	e7ca      	b.n	80199ae <_free_r+0x22>
 8019a18:	bd38      	pop	{r3, r4, r5, pc}
 8019a1a:	bf00      	nop
 8019a1c:	24010890 	.word	0x24010890

08019a20 <__sfputc_r>:
 8019a20:	6893      	ldr	r3, [r2, #8]
 8019a22:	3b01      	subs	r3, #1
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	b410      	push	{r4}
 8019a28:	6093      	str	r3, [r2, #8]
 8019a2a:	da08      	bge.n	8019a3e <__sfputc_r+0x1e>
 8019a2c:	6994      	ldr	r4, [r2, #24]
 8019a2e:	42a3      	cmp	r3, r4
 8019a30:	db01      	blt.n	8019a36 <__sfputc_r+0x16>
 8019a32:	290a      	cmp	r1, #10
 8019a34:	d103      	bne.n	8019a3e <__sfputc_r+0x1e>
 8019a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a3a:	f000 bc79 	b.w	801a330 <__swbuf_r>
 8019a3e:	6813      	ldr	r3, [r2, #0]
 8019a40:	1c58      	adds	r0, r3, #1
 8019a42:	6010      	str	r0, [r2, #0]
 8019a44:	7019      	strb	r1, [r3, #0]
 8019a46:	4608      	mov	r0, r1
 8019a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a4c:	4770      	bx	lr

08019a4e <__sfputs_r>:
 8019a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a50:	4606      	mov	r6, r0
 8019a52:	460f      	mov	r7, r1
 8019a54:	4614      	mov	r4, r2
 8019a56:	18d5      	adds	r5, r2, r3
 8019a58:	42ac      	cmp	r4, r5
 8019a5a:	d101      	bne.n	8019a60 <__sfputs_r+0x12>
 8019a5c:	2000      	movs	r0, #0
 8019a5e:	e007      	b.n	8019a70 <__sfputs_r+0x22>
 8019a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a64:	463a      	mov	r2, r7
 8019a66:	4630      	mov	r0, r6
 8019a68:	f7ff ffda 	bl	8019a20 <__sfputc_r>
 8019a6c:	1c43      	adds	r3, r0, #1
 8019a6e:	d1f3      	bne.n	8019a58 <__sfputs_r+0xa>
 8019a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a74 <_vfiprintf_r>:
 8019a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a78:	460d      	mov	r5, r1
 8019a7a:	b09d      	sub	sp, #116	@ 0x74
 8019a7c:	4614      	mov	r4, r2
 8019a7e:	4698      	mov	r8, r3
 8019a80:	4606      	mov	r6, r0
 8019a82:	b118      	cbz	r0, 8019a8c <_vfiprintf_r+0x18>
 8019a84:	6a03      	ldr	r3, [r0, #32]
 8019a86:	b90b      	cbnz	r3, 8019a8c <_vfiprintf_r+0x18>
 8019a88:	f7ff fe76 	bl	8019778 <__sinit>
 8019a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a8e:	07d9      	lsls	r1, r3, #31
 8019a90:	d405      	bmi.n	8019a9e <_vfiprintf_r+0x2a>
 8019a92:	89ab      	ldrh	r3, [r5, #12]
 8019a94:	059a      	lsls	r2, r3, #22
 8019a96:	d402      	bmi.n	8019a9e <_vfiprintf_r+0x2a>
 8019a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a9a:	f7ff ff48 	bl	801992e <__retarget_lock_acquire_recursive>
 8019a9e:	89ab      	ldrh	r3, [r5, #12]
 8019aa0:	071b      	lsls	r3, r3, #28
 8019aa2:	d501      	bpl.n	8019aa8 <_vfiprintf_r+0x34>
 8019aa4:	692b      	ldr	r3, [r5, #16]
 8019aa6:	b99b      	cbnz	r3, 8019ad0 <_vfiprintf_r+0x5c>
 8019aa8:	4629      	mov	r1, r5
 8019aaa:	4630      	mov	r0, r6
 8019aac:	f000 fc7e 	bl	801a3ac <__swsetup_r>
 8019ab0:	b170      	cbz	r0, 8019ad0 <_vfiprintf_r+0x5c>
 8019ab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ab4:	07dc      	lsls	r4, r3, #31
 8019ab6:	d504      	bpl.n	8019ac2 <_vfiprintf_r+0x4e>
 8019ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019abc:	b01d      	add	sp, #116	@ 0x74
 8019abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac2:	89ab      	ldrh	r3, [r5, #12]
 8019ac4:	0598      	lsls	r0, r3, #22
 8019ac6:	d4f7      	bmi.n	8019ab8 <_vfiprintf_r+0x44>
 8019ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019aca:	f7ff ff31 	bl	8019930 <__retarget_lock_release_recursive>
 8019ace:	e7f3      	b.n	8019ab8 <_vfiprintf_r+0x44>
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ad4:	2320      	movs	r3, #32
 8019ad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ade:	2330      	movs	r3, #48	@ 0x30
 8019ae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019c90 <_vfiprintf_r+0x21c>
 8019ae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ae8:	f04f 0901 	mov.w	r9, #1
 8019aec:	4623      	mov	r3, r4
 8019aee:	469a      	mov	sl, r3
 8019af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019af4:	b10a      	cbz	r2, 8019afa <_vfiprintf_r+0x86>
 8019af6:	2a25      	cmp	r2, #37	@ 0x25
 8019af8:	d1f9      	bne.n	8019aee <_vfiprintf_r+0x7a>
 8019afa:	ebba 0b04 	subs.w	fp, sl, r4
 8019afe:	d00b      	beq.n	8019b18 <_vfiprintf_r+0xa4>
 8019b00:	465b      	mov	r3, fp
 8019b02:	4622      	mov	r2, r4
 8019b04:	4629      	mov	r1, r5
 8019b06:	4630      	mov	r0, r6
 8019b08:	f7ff ffa1 	bl	8019a4e <__sfputs_r>
 8019b0c:	3001      	adds	r0, #1
 8019b0e:	f000 80a7 	beq.w	8019c60 <_vfiprintf_r+0x1ec>
 8019b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b14:	445a      	add	r2, fp
 8019b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8019b18:	f89a 3000 	ldrb.w	r3, [sl]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	f000 809f 	beq.w	8019c60 <_vfiprintf_r+0x1ec>
 8019b22:	2300      	movs	r3, #0
 8019b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b2c:	f10a 0a01 	add.w	sl, sl, #1
 8019b30:	9304      	str	r3, [sp, #16]
 8019b32:	9307      	str	r3, [sp, #28]
 8019b34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019b38:	931a      	str	r3, [sp, #104]	@ 0x68
 8019b3a:	4654      	mov	r4, sl
 8019b3c:	2205      	movs	r2, #5
 8019b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b42:	4853      	ldr	r0, [pc, #332]	@ (8019c90 <_vfiprintf_r+0x21c>)
 8019b44:	f7e6 fbe4 	bl	8000310 <memchr>
 8019b48:	9a04      	ldr	r2, [sp, #16]
 8019b4a:	b9d8      	cbnz	r0, 8019b84 <_vfiprintf_r+0x110>
 8019b4c:	06d1      	lsls	r1, r2, #27
 8019b4e:	bf44      	itt	mi
 8019b50:	2320      	movmi	r3, #32
 8019b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b56:	0713      	lsls	r3, r2, #28
 8019b58:	bf44      	itt	mi
 8019b5a:	232b      	movmi	r3, #43	@ 0x2b
 8019b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b60:	f89a 3000 	ldrb.w	r3, [sl]
 8019b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8019b66:	d015      	beq.n	8019b94 <_vfiprintf_r+0x120>
 8019b68:	9a07      	ldr	r2, [sp, #28]
 8019b6a:	4654      	mov	r4, sl
 8019b6c:	2000      	movs	r0, #0
 8019b6e:	f04f 0c0a 	mov.w	ip, #10
 8019b72:	4621      	mov	r1, r4
 8019b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b78:	3b30      	subs	r3, #48	@ 0x30
 8019b7a:	2b09      	cmp	r3, #9
 8019b7c:	d94b      	bls.n	8019c16 <_vfiprintf_r+0x1a2>
 8019b7e:	b1b0      	cbz	r0, 8019bae <_vfiprintf_r+0x13a>
 8019b80:	9207      	str	r2, [sp, #28]
 8019b82:	e014      	b.n	8019bae <_vfiprintf_r+0x13a>
 8019b84:	eba0 0308 	sub.w	r3, r0, r8
 8019b88:	fa09 f303 	lsl.w	r3, r9, r3
 8019b8c:	4313      	orrs	r3, r2
 8019b8e:	9304      	str	r3, [sp, #16]
 8019b90:	46a2      	mov	sl, r4
 8019b92:	e7d2      	b.n	8019b3a <_vfiprintf_r+0xc6>
 8019b94:	9b03      	ldr	r3, [sp, #12]
 8019b96:	1d19      	adds	r1, r3, #4
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	9103      	str	r1, [sp, #12]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	bfbb      	ittet	lt
 8019ba0:	425b      	neglt	r3, r3
 8019ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8019ba6:	9307      	strge	r3, [sp, #28]
 8019ba8:	9307      	strlt	r3, [sp, #28]
 8019baa:	bfb8      	it	lt
 8019bac:	9204      	strlt	r2, [sp, #16]
 8019bae:	7823      	ldrb	r3, [r4, #0]
 8019bb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019bb2:	d10a      	bne.n	8019bca <_vfiprintf_r+0x156>
 8019bb4:	7863      	ldrb	r3, [r4, #1]
 8019bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019bb8:	d132      	bne.n	8019c20 <_vfiprintf_r+0x1ac>
 8019bba:	9b03      	ldr	r3, [sp, #12]
 8019bbc:	1d1a      	adds	r2, r3, #4
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	9203      	str	r2, [sp, #12]
 8019bc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019bc6:	3402      	adds	r4, #2
 8019bc8:	9305      	str	r3, [sp, #20]
 8019bca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019ca0 <_vfiprintf_r+0x22c>
 8019bce:	7821      	ldrb	r1, [r4, #0]
 8019bd0:	2203      	movs	r2, #3
 8019bd2:	4650      	mov	r0, sl
 8019bd4:	f7e6 fb9c 	bl	8000310 <memchr>
 8019bd8:	b138      	cbz	r0, 8019bea <_vfiprintf_r+0x176>
 8019bda:	9b04      	ldr	r3, [sp, #16]
 8019bdc:	eba0 000a 	sub.w	r0, r0, sl
 8019be0:	2240      	movs	r2, #64	@ 0x40
 8019be2:	4082      	lsls	r2, r0
 8019be4:	4313      	orrs	r3, r2
 8019be6:	3401      	adds	r4, #1
 8019be8:	9304      	str	r3, [sp, #16]
 8019bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bee:	4829      	ldr	r0, [pc, #164]	@ (8019c94 <_vfiprintf_r+0x220>)
 8019bf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019bf4:	2206      	movs	r2, #6
 8019bf6:	f7e6 fb8b 	bl	8000310 <memchr>
 8019bfa:	2800      	cmp	r0, #0
 8019bfc:	d03f      	beq.n	8019c7e <_vfiprintf_r+0x20a>
 8019bfe:	4b26      	ldr	r3, [pc, #152]	@ (8019c98 <_vfiprintf_r+0x224>)
 8019c00:	bb1b      	cbnz	r3, 8019c4a <_vfiprintf_r+0x1d6>
 8019c02:	9b03      	ldr	r3, [sp, #12]
 8019c04:	3307      	adds	r3, #7
 8019c06:	f023 0307 	bic.w	r3, r3, #7
 8019c0a:	3308      	adds	r3, #8
 8019c0c:	9303      	str	r3, [sp, #12]
 8019c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c10:	443b      	add	r3, r7
 8019c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c14:	e76a      	b.n	8019aec <_vfiprintf_r+0x78>
 8019c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c1a:	460c      	mov	r4, r1
 8019c1c:	2001      	movs	r0, #1
 8019c1e:	e7a8      	b.n	8019b72 <_vfiprintf_r+0xfe>
 8019c20:	2300      	movs	r3, #0
 8019c22:	3401      	adds	r4, #1
 8019c24:	9305      	str	r3, [sp, #20]
 8019c26:	4619      	mov	r1, r3
 8019c28:	f04f 0c0a 	mov.w	ip, #10
 8019c2c:	4620      	mov	r0, r4
 8019c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c32:	3a30      	subs	r2, #48	@ 0x30
 8019c34:	2a09      	cmp	r2, #9
 8019c36:	d903      	bls.n	8019c40 <_vfiprintf_r+0x1cc>
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d0c6      	beq.n	8019bca <_vfiprintf_r+0x156>
 8019c3c:	9105      	str	r1, [sp, #20]
 8019c3e:	e7c4      	b.n	8019bca <_vfiprintf_r+0x156>
 8019c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c44:	4604      	mov	r4, r0
 8019c46:	2301      	movs	r3, #1
 8019c48:	e7f0      	b.n	8019c2c <_vfiprintf_r+0x1b8>
 8019c4a:	ab03      	add	r3, sp, #12
 8019c4c:	9300      	str	r3, [sp, #0]
 8019c4e:	462a      	mov	r2, r5
 8019c50:	4b12      	ldr	r3, [pc, #72]	@ (8019c9c <_vfiprintf_r+0x228>)
 8019c52:	a904      	add	r1, sp, #16
 8019c54:	4630      	mov	r0, r6
 8019c56:	f3af 8000 	nop.w
 8019c5a:	4607      	mov	r7, r0
 8019c5c:	1c78      	adds	r0, r7, #1
 8019c5e:	d1d6      	bne.n	8019c0e <_vfiprintf_r+0x19a>
 8019c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c62:	07d9      	lsls	r1, r3, #31
 8019c64:	d405      	bmi.n	8019c72 <_vfiprintf_r+0x1fe>
 8019c66:	89ab      	ldrh	r3, [r5, #12]
 8019c68:	059a      	lsls	r2, r3, #22
 8019c6a:	d402      	bmi.n	8019c72 <_vfiprintf_r+0x1fe>
 8019c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c6e:	f7ff fe5f 	bl	8019930 <__retarget_lock_release_recursive>
 8019c72:	89ab      	ldrh	r3, [r5, #12]
 8019c74:	065b      	lsls	r3, r3, #25
 8019c76:	f53f af1f 	bmi.w	8019ab8 <_vfiprintf_r+0x44>
 8019c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c7c:	e71e      	b.n	8019abc <_vfiprintf_r+0x48>
 8019c7e:	ab03      	add	r3, sp, #12
 8019c80:	9300      	str	r3, [sp, #0]
 8019c82:	462a      	mov	r2, r5
 8019c84:	4b05      	ldr	r3, [pc, #20]	@ (8019c9c <_vfiprintf_r+0x228>)
 8019c86:	a904      	add	r1, sp, #16
 8019c88:	4630      	mov	r0, r6
 8019c8a:	f000 f923 	bl	8019ed4 <_printf_i>
 8019c8e:	e7e4      	b.n	8019c5a <_vfiprintf_r+0x1e6>
 8019c90:	0801d437 	.word	0x0801d437
 8019c94:	0801d441 	.word	0x0801d441
 8019c98:	00000000 	.word	0x00000000
 8019c9c:	08019a4f 	.word	0x08019a4f
 8019ca0:	0801d43d 	.word	0x0801d43d

08019ca4 <malloc>:
 8019ca4:	4b02      	ldr	r3, [pc, #8]	@ (8019cb0 <malloc+0xc>)
 8019ca6:	4601      	mov	r1, r0
 8019ca8:	6818      	ldr	r0, [r3, #0]
 8019caa:	f000 b825 	b.w	8019cf8 <_malloc_r>
 8019cae:	bf00      	nop
 8019cb0:	24004a10 	.word	0x24004a10

08019cb4 <sbrk_aligned>:
 8019cb4:	b570      	push	{r4, r5, r6, lr}
 8019cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8019cf4 <sbrk_aligned+0x40>)
 8019cb8:	460c      	mov	r4, r1
 8019cba:	6831      	ldr	r1, [r6, #0]
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	b911      	cbnz	r1, 8019cc6 <sbrk_aligned+0x12>
 8019cc0:	f000 fc82 	bl	801a5c8 <_sbrk_r>
 8019cc4:	6030      	str	r0, [r6, #0]
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4628      	mov	r0, r5
 8019cca:	f000 fc7d 	bl	801a5c8 <_sbrk_r>
 8019cce:	1c43      	adds	r3, r0, #1
 8019cd0:	d103      	bne.n	8019cda <sbrk_aligned+0x26>
 8019cd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	bd70      	pop	{r4, r5, r6, pc}
 8019cda:	1cc4      	adds	r4, r0, #3
 8019cdc:	f024 0403 	bic.w	r4, r4, #3
 8019ce0:	42a0      	cmp	r0, r4
 8019ce2:	d0f8      	beq.n	8019cd6 <sbrk_aligned+0x22>
 8019ce4:	1a21      	subs	r1, r4, r0
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	f000 fc6e 	bl	801a5c8 <_sbrk_r>
 8019cec:	3001      	adds	r0, #1
 8019cee:	d1f2      	bne.n	8019cd6 <sbrk_aligned+0x22>
 8019cf0:	e7ef      	b.n	8019cd2 <sbrk_aligned+0x1e>
 8019cf2:	bf00      	nop
 8019cf4:	2401088c 	.word	0x2401088c

08019cf8 <_malloc_r>:
 8019cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cfc:	1ccd      	adds	r5, r1, #3
 8019cfe:	f025 0503 	bic.w	r5, r5, #3
 8019d02:	3508      	adds	r5, #8
 8019d04:	2d0c      	cmp	r5, #12
 8019d06:	bf38      	it	cc
 8019d08:	250c      	movcc	r5, #12
 8019d0a:	2d00      	cmp	r5, #0
 8019d0c:	4606      	mov	r6, r0
 8019d0e:	db01      	blt.n	8019d14 <_malloc_r+0x1c>
 8019d10:	42a9      	cmp	r1, r5
 8019d12:	d904      	bls.n	8019d1e <_malloc_r+0x26>
 8019d14:	230c      	movs	r3, #12
 8019d16:	6033      	str	r3, [r6, #0]
 8019d18:	2000      	movs	r0, #0
 8019d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019df4 <_malloc_r+0xfc>
 8019d22:	f000 faa3 	bl	801a26c <__malloc_lock>
 8019d26:	f8d8 3000 	ldr.w	r3, [r8]
 8019d2a:	461c      	mov	r4, r3
 8019d2c:	bb44      	cbnz	r4, 8019d80 <_malloc_r+0x88>
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4630      	mov	r0, r6
 8019d32:	f7ff ffbf 	bl	8019cb4 <sbrk_aligned>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	4604      	mov	r4, r0
 8019d3a:	d158      	bne.n	8019dee <_malloc_r+0xf6>
 8019d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8019d40:	4627      	mov	r7, r4
 8019d42:	2f00      	cmp	r7, #0
 8019d44:	d143      	bne.n	8019dce <_malloc_r+0xd6>
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	d04b      	beq.n	8019de2 <_malloc_r+0xea>
 8019d4a:	6823      	ldr	r3, [r4, #0]
 8019d4c:	4639      	mov	r1, r7
 8019d4e:	4630      	mov	r0, r6
 8019d50:	eb04 0903 	add.w	r9, r4, r3
 8019d54:	f000 fc38 	bl	801a5c8 <_sbrk_r>
 8019d58:	4581      	cmp	r9, r0
 8019d5a:	d142      	bne.n	8019de2 <_malloc_r+0xea>
 8019d5c:	6821      	ldr	r1, [r4, #0]
 8019d5e:	1a6d      	subs	r5, r5, r1
 8019d60:	4629      	mov	r1, r5
 8019d62:	4630      	mov	r0, r6
 8019d64:	f7ff ffa6 	bl	8019cb4 <sbrk_aligned>
 8019d68:	3001      	adds	r0, #1
 8019d6a:	d03a      	beq.n	8019de2 <_malloc_r+0xea>
 8019d6c:	6823      	ldr	r3, [r4, #0]
 8019d6e:	442b      	add	r3, r5
 8019d70:	6023      	str	r3, [r4, #0]
 8019d72:	f8d8 3000 	ldr.w	r3, [r8]
 8019d76:	685a      	ldr	r2, [r3, #4]
 8019d78:	bb62      	cbnz	r2, 8019dd4 <_malloc_r+0xdc>
 8019d7a:	f8c8 7000 	str.w	r7, [r8]
 8019d7e:	e00f      	b.n	8019da0 <_malloc_r+0xa8>
 8019d80:	6822      	ldr	r2, [r4, #0]
 8019d82:	1b52      	subs	r2, r2, r5
 8019d84:	d420      	bmi.n	8019dc8 <_malloc_r+0xd0>
 8019d86:	2a0b      	cmp	r2, #11
 8019d88:	d917      	bls.n	8019dba <_malloc_r+0xc2>
 8019d8a:	1961      	adds	r1, r4, r5
 8019d8c:	42a3      	cmp	r3, r4
 8019d8e:	6025      	str	r5, [r4, #0]
 8019d90:	bf18      	it	ne
 8019d92:	6059      	strne	r1, [r3, #4]
 8019d94:	6863      	ldr	r3, [r4, #4]
 8019d96:	bf08      	it	eq
 8019d98:	f8c8 1000 	streq.w	r1, [r8]
 8019d9c:	5162      	str	r2, [r4, r5]
 8019d9e:	604b      	str	r3, [r1, #4]
 8019da0:	4630      	mov	r0, r6
 8019da2:	f000 fa69 	bl	801a278 <__malloc_unlock>
 8019da6:	f104 000b 	add.w	r0, r4, #11
 8019daa:	1d23      	adds	r3, r4, #4
 8019dac:	f020 0007 	bic.w	r0, r0, #7
 8019db0:	1ac2      	subs	r2, r0, r3
 8019db2:	bf1c      	itt	ne
 8019db4:	1a1b      	subne	r3, r3, r0
 8019db6:	50a3      	strne	r3, [r4, r2]
 8019db8:	e7af      	b.n	8019d1a <_malloc_r+0x22>
 8019dba:	6862      	ldr	r2, [r4, #4]
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	bf0c      	ite	eq
 8019dc0:	f8c8 2000 	streq.w	r2, [r8]
 8019dc4:	605a      	strne	r2, [r3, #4]
 8019dc6:	e7eb      	b.n	8019da0 <_malloc_r+0xa8>
 8019dc8:	4623      	mov	r3, r4
 8019dca:	6864      	ldr	r4, [r4, #4]
 8019dcc:	e7ae      	b.n	8019d2c <_malloc_r+0x34>
 8019dce:	463c      	mov	r4, r7
 8019dd0:	687f      	ldr	r7, [r7, #4]
 8019dd2:	e7b6      	b.n	8019d42 <_malloc_r+0x4a>
 8019dd4:	461a      	mov	r2, r3
 8019dd6:	685b      	ldr	r3, [r3, #4]
 8019dd8:	42a3      	cmp	r3, r4
 8019dda:	d1fb      	bne.n	8019dd4 <_malloc_r+0xdc>
 8019ddc:	2300      	movs	r3, #0
 8019dde:	6053      	str	r3, [r2, #4]
 8019de0:	e7de      	b.n	8019da0 <_malloc_r+0xa8>
 8019de2:	230c      	movs	r3, #12
 8019de4:	6033      	str	r3, [r6, #0]
 8019de6:	4630      	mov	r0, r6
 8019de8:	f000 fa46 	bl	801a278 <__malloc_unlock>
 8019dec:	e794      	b.n	8019d18 <_malloc_r+0x20>
 8019dee:	6005      	str	r5, [r0, #0]
 8019df0:	e7d6      	b.n	8019da0 <_malloc_r+0xa8>
 8019df2:	bf00      	nop
 8019df4:	24010890 	.word	0x24010890

08019df8 <_printf_common>:
 8019df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dfc:	4616      	mov	r6, r2
 8019dfe:	4698      	mov	r8, r3
 8019e00:	688a      	ldr	r2, [r1, #8]
 8019e02:	690b      	ldr	r3, [r1, #16]
 8019e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	bfb8      	it	lt
 8019e0c:	4613      	movlt	r3, r2
 8019e0e:	6033      	str	r3, [r6, #0]
 8019e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019e14:	4607      	mov	r7, r0
 8019e16:	460c      	mov	r4, r1
 8019e18:	b10a      	cbz	r2, 8019e1e <_printf_common+0x26>
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	6033      	str	r3, [r6, #0]
 8019e1e:	6823      	ldr	r3, [r4, #0]
 8019e20:	0699      	lsls	r1, r3, #26
 8019e22:	bf42      	ittt	mi
 8019e24:	6833      	ldrmi	r3, [r6, #0]
 8019e26:	3302      	addmi	r3, #2
 8019e28:	6033      	strmi	r3, [r6, #0]
 8019e2a:	6825      	ldr	r5, [r4, #0]
 8019e2c:	f015 0506 	ands.w	r5, r5, #6
 8019e30:	d106      	bne.n	8019e40 <_printf_common+0x48>
 8019e32:	f104 0a19 	add.w	sl, r4, #25
 8019e36:	68e3      	ldr	r3, [r4, #12]
 8019e38:	6832      	ldr	r2, [r6, #0]
 8019e3a:	1a9b      	subs	r3, r3, r2
 8019e3c:	42ab      	cmp	r3, r5
 8019e3e:	dc26      	bgt.n	8019e8e <_printf_common+0x96>
 8019e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e44:	6822      	ldr	r2, [r4, #0]
 8019e46:	3b00      	subs	r3, #0
 8019e48:	bf18      	it	ne
 8019e4a:	2301      	movne	r3, #1
 8019e4c:	0692      	lsls	r2, r2, #26
 8019e4e:	d42b      	bmi.n	8019ea8 <_printf_common+0xb0>
 8019e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019e54:	4641      	mov	r1, r8
 8019e56:	4638      	mov	r0, r7
 8019e58:	47c8      	blx	r9
 8019e5a:	3001      	adds	r0, #1
 8019e5c:	d01e      	beq.n	8019e9c <_printf_common+0xa4>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	6922      	ldr	r2, [r4, #16]
 8019e62:	f003 0306 	and.w	r3, r3, #6
 8019e66:	2b04      	cmp	r3, #4
 8019e68:	bf02      	ittt	eq
 8019e6a:	68e5      	ldreq	r5, [r4, #12]
 8019e6c:	6833      	ldreq	r3, [r6, #0]
 8019e6e:	1aed      	subeq	r5, r5, r3
 8019e70:	68a3      	ldr	r3, [r4, #8]
 8019e72:	bf0c      	ite	eq
 8019e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e78:	2500      	movne	r5, #0
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	bfc4      	itt	gt
 8019e7e:	1a9b      	subgt	r3, r3, r2
 8019e80:	18ed      	addgt	r5, r5, r3
 8019e82:	2600      	movs	r6, #0
 8019e84:	341a      	adds	r4, #26
 8019e86:	42b5      	cmp	r5, r6
 8019e88:	d11a      	bne.n	8019ec0 <_printf_common+0xc8>
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	e008      	b.n	8019ea0 <_printf_common+0xa8>
 8019e8e:	2301      	movs	r3, #1
 8019e90:	4652      	mov	r2, sl
 8019e92:	4641      	mov	r1, r8
 8019e94:	4638      	mov	r0, r7
 8019e96:	47c8      	blx	r9
 8019e98:	3001      	adds	r0, #1
 8019e9a:	d103      	bne.n	8019ea4 <_printf_common+0xac>
 8019e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ea4:	3501      	adds	r5, #1
 8019ea6:	e7c6      	b.n	8019e36 <_printf_common+0x3e>
 8019ea8:	18e1      	adds	r1, r4, r3
 8019eaa:	1c5a      	adds	r2, r3, #1
 8019eac:	2030      	movs	r0, #48	@ 0x30
 8019eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019eb2:	4422      	add	r2, r4
 8019eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019ebc:	3302      	adds	r3, #2
 8019ebe:	e7c7      	b.n	8019e50 <_printf_common+0x58>
 8019ec0:	2301      	movs	r3, #1
 8019ec2:	4622      	mov	r2, r4
 8019ec4:	4641      	mov	r1, r8
 8019ec6:	4638      	mov	r0, r7
 8019ec8:	47c8      	blx	r9
 8019eca:	3001      	adds	r0, #1
 8019ecc:	d0e6      	beq.n	8019e9c <_printf_common+0xa4>
 8019ece:	3601      	adds	r6, #1
 8019ed0:	e7d9      	b.n	8019e86 <_printf_common+0x8e>
	...

08019ed4 <_printf_i>:
 8019ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed8:	7e0f      	ldrb	r7, [r1, #24]
 8019eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019edc:	2f78      	cmp	r7, #120	@ 0x78
 8019ede:	4691      	mov	r9, r2
 8019ee0:	4680      	mov	r8, r0
 8019ee2:	460c      	mov	r4, r1
 8019ee4:	469a      	mov	sl, r3
 8019ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019eea:	d807      	bhi.n	8019efc <_printf_i+0x28>
 8019eec:	2f62      	cmp	r7, #98	@ 0x62
 8019eee:	d80a      	bhi.n	8019f06 <_printf_i+0x32>
 8019ef0:	2f00      	cmp	r7, #0
 8019ef2:	f000 80d2 	beq.w	801a09a <_printf_i+0x1c6>
 8019ef6:	2f58      	cmp	r7, #88	@ 0x58
 8019ef8:	f000 80b9 	beq.w	801a06e <_printf_i+0x19a>
 8019efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019f04:	e03a      	b.n	8019f7c <_printf_i+0xa8>
 8019f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019f0a:	2b15      	cmp	r3, #21
 8019f0c:	d8f6      	bhi.n	8019efc <_printf_i+0x28>
 8019f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8019f14 <_printf_i+0x40>)
 8019f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019f14:	08019f6d 	.word	0x08019f6d
 8019f18:	08019f81 	.word	0x08019f81
 8019f1c:	08019efd 	.word	0x08019efd
 8019f20:	08019efd 	.word	0x08019efd
 8019f24:	08019efd 	.word	0x08019efd
 8019f28:	08019efd 	.word	0x08019efd
 8019f2c:	08019f81 	.word	0x08019f81
 8019f30:	08019efd 	.word	0x08019efd
 8019f34:	08019efd 	.word	0x08019efd
 8019f38:	08019efd 	.word	0x08019efd
 8019f3c:	08019efd 	.word	0x08019efd
 8019f40:	0801a081 	.word	0x0801a081
 8019f44:	08019fab 	.word	0x08019fab
 8019f48:	0801a03b 	.word	0x0801a03b
 8019f4c:	08019efd 	.word	0x08019efd
 8019f50:	08019efd 	.word	0x08019efd
 8019f54:	0801a0a3 	.word	0x0801a0a3
 8019f58:	08019efd 	.word	0x08019efd
 8019f5c:	08019fab 	.word	0x08019fab
 8019f60:	08019efd 	.word	0x08019efd
 8019f64:	08019efd 	.word	0x08019efd
 8019f68:	0801a043 	.word	0x0801a043
 8019f6c:	6833      	ldr	r3, [r6, #0]
 8019f6e:	1d1a      	adds	r2, r3, #4
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	6032      	str	r2, [r6, #0]
 8019f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019f7c:	2301      	movs	r3, #1
 8019f7e:	e09d      	b.n	801a0bc <_printf_i+0x1e8>
 8019f80:	6833      	ldr	r3, [r6, #0]
 8019f82:	6820      	ldr	r0, [r4, #0]
 8019f84:	1d19      	adds	r1, r3, #4
 8019f86:	6031      	str	r1, [r6, #0]
 8019f88:	0606      	lsls	r6, r0, #24
 8019f8a:	d501      	bpl.n	8019f90 <_printf_i+0xbc>
 8019f8c:	681d      	ldr	r5, [r3, #0]
 8019f8e:	e003      	b.n	8019f98 <_printf_i+0xc4>
 8019f90:	0645      	lsls	r5, r0, #25
 8019f92:	d5fb      	bpl.n	8019f8c <_printf_i+0xb8>
 8019f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019f98:	2d00      	cmp	r5, #0
 8019f9a:	da03      	bge.n	8019fa4 <_printf_i+0xd0>
 8019f9c:	232d      	movs	r3, #45	@ 0x2d
 8019f9e:	426d      	negs	r5, r5
 8019fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fa4:	4859      	ldr	r0, [pc, #356]	@ (801a10c <_printf_i+0x238>)
 8019fa6:	230a      	movs	r3, #10
 8019fa8:	e011      	b.n	8019fce <_printf_i+0xfa>
 8019faa:	6821      	ldr	r1, [r4, #0]
 8019fac:	6833      	ldr	r3, [r6, #0]
 8019fae:	0608      	lsls	r0, r1, #24
 8019fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019fb4:	d402      	bmi.n	8019fbc <_printf_i+0xe8>
 8019fb6:	0649      	lsls	r1, r1, #25
 8019fb8:	bf48      	it	mi
 8019fba:	b2ad      	uxthmi	r5, r5
 8019fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8019fbe:	4853      	ldr	r0, [pc, #332]	@ (801a10c <_printf_i+0x238>)
 8019fc0:	6033      	str	r3, [r6, #0]
 8019fc2:	bf14      	ite	ne
 8019fc4:	230a      	movne	r3, #10
 8019fc6:	2308      	moveq	r3, #8
 8019fc8:	2100      	movs	r1, #0
 8019fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019fce:	6866      	ldr	r6, [r4, #4]
 8019fd0:	60a6      	str	r6, [r4, #8]
 8019fd2:	2e00      	cmp	r6, #0
 8019fd4:	bfa2      	ittt	ge
 8019fd6:	6821      	ldrge	r1, [r4, #0]
 8019fd8:	f021 0104 	bicge.w	r1, r1, #4
 8019fdc:	6021      	strge	r1, [r4, #0]
 8019fde:	b90d      	cbnz	r5, 8019fe4 <_printf_i+0x110>
 8019fe0:	2e00      	cmp	r6, #0
 8019fe2:	d04b      	beq.n	801a07c <_printf_i+0x1a8>
 8019fe4:	4616      	mov	r6, r2
 8019fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8019fea:	fb03 5711 	mls	r7, r3, r1, r5
 8019fee:	5dc7      	ldrb	r7, [r0, r7]
 8019ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ff4:	462f      	mov	r7, r5
 8019ff6:	42bb      	cmp	r3, r7
 8019ff8:	460d      	mov	r5, r1
 8019ffa:	d9f4      	bls.n	8019fe6 <_printf_i+0x112>
 8019ffc:	2b08      	cmp	r3, #8
 8019ffe:	d10b      	bne.n	801a018 <_printf_i+0x144>
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	07df      	lsls	r7, r3, #31
 801a004:	d508      	bpl.n	801a018 <_printf_i+0x144>
 801a006:	6923      	ldr	r3, [r4, #16]
 801a008:	6861      	ldr	r1, [r4, #4]
 801a00a:	4299      	cmp	r1, r3
 801a00c:	bfde      	ittt	le
 801a00e:	2330      	movle	r3, #48	@ 0x30
 801a010:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a014:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a018:	1b92      	subs	r2, r2, r6
 801a01a:	6122      	str	r2, [r4, #16]
 801a01c:	f8cd a000 	str.w	sl, [sp]
 801a020:	464b      	mov	r3, r9
 801a022:	aa03      	add	r2, sp, #12
 801a024:	4621      	mov	r1, r4
 801a026:	4640      	mov	r0, r8
 801a028:	f7ff fee6 	bl	8019df8 <_printf_common>
 801a02c:	3001      	adds	r0, #1
 801a02e:	d14a      	bne.n	801a0c6 <_printf_i+0x1f2>
 801a030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a034:	b004      	add	sp, #16
 801a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a03a:	6823      	ldr	r3, [r4, #0]
 801a03c:	f043 0320 	orr.w	r3, r3, #32
 801a040:	6023      	str	r3, [r4, #0]
 801a042:	4833      	ldr	r0, [pc, #204]	@ (801a110 <_printf_i+0x23c>)
 801a044:	2778      	movs	r7, #120	@ 0x78
 801a046:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a04a:	6823      	ldr	r3, [r4, #0]
 801a04c:	6831      	ldr	r1, [r6, #0]
 801a04e:	061f      	lsls	r7, r3, #24
 801a050:	f851 5b04 	ldr.w	r5, [r1], #4
 801a054:	d402      	bmi.n	801a05c <_printf_i+0x188>
 801a056:	065f      	lsls	r7, r3, #25
 801a058:	bf48      	it	mi
 801a05a:	b2ad      	uxthmi	r5, r5
 801a05c:	6031      	str	r1, [r6, #0]
 801a05e:	07d9      	lsls	r1, r3, #31
 801a060:	bf44      	itt	mi
 801a062:	f043 0320 	orrmi.w	r3, r3, #32
 801a066:	6023      	strmi	r3, [r4, #0]
 801a068:	b11d      	cbz	r5, 801a072 <_printf_i+0x19e>
 801a06a:	2310      	movs	r3, #16
 801a06c:	e7ac      	b.n	8019fc8 <_printf_i+0xf4>
 801a06e:	4827      	ldr	r0, [pc, #156]	@ (801a10c <_printf_i+0x238>)
 801a070:	e7e9      	b.n	801a046 <_printf_i+0x172>
 801a072:	6823      	ldr	r3, [r4, #0]
 801a074:	f023 0320 	bic.w	r3, r3, #32
 801a078:	6023      	str	r3, [r4, #0]
 801a07a:	e7f6      	b.n	801a06a <_printf_i+0x196>
 801a07c:	4616      	mov	r6, r2
 801a07e:	e7bd      	b.n	8019ffc <_printf_i+0x128>
 801a080:	6833      	ldr	r3, [r6, #0]
 801a082:	6825      	ldr	r5, [r4, #0]
 801a084:	6961      	ldr	r1, [r4, #20]
 801a086:	1d18      	adds	r0, r3, #4
 801a088:	6030      	str	r0, [r6, #0]
 801a08a:	062e      	lsls	r6, r5, #24
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	d501      	bpl.n	801a094 <_printf_i+0x1c0>
 801a090:	6019      	str	r1, [r3, #0]
 801a092:	e002      	b.n	801a09a <_printf_i+0x1c6>
 801a094:	0668      	lsls	r0, r5, #25
 801a096:	d5fb      	bpl.n	801a090 <_printf_i+0x1bc>
 801a098:	8019      	strh	r1, [r3, #0]
 801a09a:	2300      	movs	r3, #0
 801a09c:	6123      	str	r3, [r4, #16]
 801a09e:	4616      	mov	r6, r2
 801a0a0:	e7bc      	b.n	801a01c <_printf_i+0x148>
 801a0a2:	6833      	ldr	r3, [r6, #0]
 801a0a4:	1d1a      	adds	r2, r3, #4
 801a0a6:	6032      	str	r2, [r6, #0]
 801a0a8:	681e      	ldr	r6, [r3, #0]
 801a0aa:	6862      	ldr	r2, [r4, #4]
 801a0ac:	2100      	movs	r1, #0
 801a0ae:	4630      	mov	r0, r6
 801a0b0:	f7e6 f92e 	bl	8000310 <memchr>
 801a0b4:	b108      	cbz	r0, 801a0ba <_printf_i+0x1e6>
 801a0b6:	1b80      	subs	r0, r0, r6
 801a0b8:	6060      	str	r0, [r4, #4]
 801a0ba:	6863      	ldr	r3, [r4, #4]
 801a0bc:	6123      	str	r3, [r4, #16]
 801a0be:	2300      	movs	r3, #0
 801a0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a0c4:	e7aa      	b.n	801a01c <_printf_i+0x148>
 801a0c6:	6923      	ldr	r3, [r4, #16]
 801a0c8:	4632      	mov	r2, r6
 801a0ca:	4649      	mov	r1, r9
 801a0cc:	4640      	mov	r0, r8
 801a0ce:	47d0      	blx	sl
 801a0d0:	3001      	adds	r0, #1
 801a0d2:	d0ad      	beq.n	801a030 <_printf_i+0x15c>
 801a0d4:	6823      	ldr	r3, [r4, #0]
 801a0d6:	079b      	lsls	r3, r3, #30
 801a0d8:	d413      	bmi.n	801a102 <_printf_i+0x22e>
 801a0da:	68e0      	ldr	r0, [r4, #12]
 801a0dc:	9b03      	ldr	r3, [sp, #12]
 801a0de:	4298      	cmp	r0, r3
 801a0e0:	bfb8      	it	lt
 801a0e2:	4618      	movlt	r0, r3
 801a0e4:	e7a6      	b.n	801a034 <_printf_i+0x160>
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	4632      	mov	r2, r6
 801a0ea:	4649      	mov	r1, r9
 801a0ec:	4640      	mov	r0, r8
 801a0ee:	47d0      	blx	sl
 801a0f0:	3001      	adds	r0, #1
 801a0f2:	d09d      	beq.n	801a030 <_printf_i+0x15c>
 801a0f4:	3501      	adds	r5, #1
 801a0f6:	68e3      	ldr	r3, [r4, #12]
 801a0f8:	9903      	ldr	r1, [sp, #12]
 801a0fa:	1a5b      	subs	r3, r3, r1
 801a0fc:	42ab      	cmp	r3, r5
 801a0fe:	dcf2      	bgt.n	801a0e6 <_printf_i+0x212>
 801a100:	e7eb      	b.n	801a0da <_printf_i+0x206>
 801a102:	2500      	movs	r5, #0
 801a104:	f104 0619 	add.w	r6, r4, #25
 801a108:	e7f5      	b.n	801a0f6 <_printf_i+0x222>
 801a10a:	bf00      	nop
 801a10c:	0801d448 	.word	0x0801d448
 801a110:	0801d459 	.word	0x0801d459

0801a114 <__sflush_r>:
 801a114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a11c:	0716      	lsls	r6, r2, #28
 801a11e:	4605      	mov	r5, r0
 801a120:	460c      	mov	r4, r1
 801a122:	d454      	bmi.n	801a1ce <__sflush_r+0xba>
 801a124:	684b      	ldr	r3, [r1, #4]
 801a126:	2b00      	cmp	r3, #0
 801a128:	dc02      	bgt.n	801a130 <__sflush_r+0x1c>
 801a12a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	dd48      	ble.n	801a1c2 <__sflush_r+0xae>
 801a130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a132:	2e00      	cmp	r6, #0
 801a134:	d045      	beq.n	801a1c2 <__sflush_r+0xae>
 801a136:	2300      	movs	r3, #0
 801a138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a13c:	682f      	ldr	r7, [r5, #0]
 801a13e:	6a21      	ldr	r1, [r4, #32]
 801a140:	602b      	str	r3, [r5, #0]
 801a142:	d030      	beq.n	801a1a6 <__sflush_r+0x92>
 801a144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a146:	89a3      	ldrh	r3, [r4, #12]
 801a148:	0759      	lsls	r1, r3, #29
 801a14a:	d505      	bpl.n	801a158 <__sflush_r+0x44>
 801a14c:	6863      	ldr	r3, [r4, #4]
 801a14e:	1ad2      	subs	r2, r2, r3
 801a150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a152:	b10b      	cbz	r3, 801a158 <__sflush_r+0x44>
 801a154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a156:	1ad2      	subs	r2, r2, r3
 801a158:	2300      	movs	r3, #0
 801a15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a15c:	6a21      	ldr	r1, [r4, #32]
 801a15e:	4628      	mov	r0, r5
 801a160:	47b0      	blx	r6
 801a162:	1c43      	adds	r3, r0, #1
 801a164:	89a3      	ldrh	r3, [r4, #12]
 801a166:	d106      	bne.n	801a176 <__sflush_r+0x62>
 801a168:	6829      	ldr	r1, [r5, #0]
 801a16a:	291d      	cmp	r1, #29
 801a16c:	d82b      	bhi.n	801a1c6 <__sflush_r+0xb2>
 801a16e:	4a2a      	ldr	r2, [pc, #168]	@ (801a218 <__sflush_r+0x104>)
 801a170:	410a      	asrs	r2, r1
 801a172:	07d6      	lsls	r6, r2, #31
 801a174:	d427      	bmi.n	801a1c6 <__sflush_r+0xb2>
 801a176:	2200      	movs	r2, #0
 801a178:	6062      	str	r2, [r4, #4]
 801a17a:	04d9      	lsls	r1, r3, #19
 801a17c:	6922      	ldr	r2, [r4, #16]
 801a17e:	6022      	str	r2, [r4, #0]
 801a180:	d504      	bpl.n	801a18c <__sflush_r+0x78>
 801a182:	1c42      	adds	r2, r0, #1
 801a184:	d101      	bne.n	801a18a <__sflush_r+0x76>
 801a186:	682b      	ldr	r3, [r5, #0]
 801a188:	b903      	cbnz	r3, 801a18c <__sflush_r+0x78>
 801a18a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a18e:	602f      	str	r7, [r5, #0]
 801a190:	b1b9      	cbz	r1, 801a1c2 <__sflush_r+0xae>
 801a192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a196:	4299      	cmp	r1, r3
 801a198:	d002      	beq.n	801a1a0 <__sflush_r+0x8c>
 801a19a:	4628      	mov	r0, r5
 801a19c:	f7ff fbf6 	bl	801998c <_free_r>
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a1a4:	e00d      	b.n	801a1c2 <__sflush_r+0xae>
 801a1a6:	2301      	movs	r3, #1
 801a1a8:	4628      	mov	r0, r5
 801a1aa:	47b0      	blx	r6
 801a1ac:	4602      	mov	r2, r0
 801a1ae:	1c50      	adds	r0, r2, #1
 801a1b0:	d1c9      	bne.n	801a146 <__sflush_r+0x32>
 801a1b2:	682b      	ldr	r3, [r5, #0]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d0c6      	beq.n	801a146 <__sflush_r+0x32>
 801a1b8:	2b1d      	cmp	r3, #29
 801a1ba:	d001      	beq.n	801a1c0 <__sflush_r+0xac>
 801a1bc:	2b16      	cmp	r3, #22
 801a1be:	d11e      	bne.n	801a1fe <__sflush_r+0xea>
 801a1c0:	602f      	str	r7, [r5, #0]
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	e022      	b.n	801a20c <__sflush_r+0xf8>
 801a1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1ca:	b21b      	sxth	r3, r3
 801a1cc:	e01b      	b.n	801a206 <__sflush_r+0xf2>
 801a1ce:	690f      	ldr	r7, [r1, #16]
 801a1d0:	2f00      	cmp	r7, #0
 801a1d2:	d0f6      	beq.n	801a1c2 <__sflush_r+0xae>
 801a1d4:	0793      	lsls	r3, r2, #30
 801a1d6:	680e      	ldr	r6, [r1, #0]
 801a1d8:	bf08      	it	eq
 801a1da:	694b      	ldreq	r3, [r1, #20]
 801a1dc:	600f      	str	r7, [r1, #0]
 801a1de:	bf18      	it	ne
 801a1e0:	2300      	movne	r3, #0
 801a1e2:	eba6 0807 	sub.w	r8, r6, r7
 801a1e6:	608b      	str	r3, [r1, #8]
 801a1e8:	f1b8 0f00 	cmp.w	r8, #0
 801a1ec:	dde9      	ble.n	801a1c2 <__sflush_r+0xae>
 801a1ee:	6a21      	ldr	r1, [r4, #32]
 801a1f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a1f2:	4643      	mov	r3, r8
 801a1f4:	463a      	mov	r2, r7
 801a1f6:	4628      	mov	r0, r5
 801a1f8:	47b0      	blx	r6
 801a1fa:	2800      	cmp	r0, #0
 801a1fc:	dc08      	bgt.n	801a210 <__sflush_r+0xfc>
 801a1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a206:	81a3      	strh	r3, [r4, #12]
 801a208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a210:	4407      	add	r7, r0
 801a212:	eba8 0800 	sub.w	r8, r8, r0
 801a216:	e7e7      	b.n	801a1e8 <__sflush_r+0xd4>
 801a218:	dfbffffe 	.word	0xdfbffffe

0801a21c <_fflush_r>:
 801a21c:	b538      	push	{r3, r4, r5, lr}
 801a21e:	690b      	ldr	r3, [r1, #16]
 801a220:	4605      	mov	r5, r0
 801a222:	460c      	mov	r4, r1
 801a224:	b913      	cbnz	r3, 801a22c <_fflush_r+0x10>
 801a226:	2500      	movs	r5, #0
 801a228:	4628      	mov	r0, r5
 801a22a:	bd38      	pop	{r3, r4, r5, pc}
 801a22c:	b118      	cbz	r0, 801a236 <_fflush_r+0x1a>
 801a22e:	6a03      	ldr	r3, [r0, #32]
 801a230:	b90b      	cbnz	r3, 801a236 <_fflush_r+0x1a>
 801a232:	f7ff faa1 	bl	8019778 <__sinit>
 801a236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d0f3      	beq.n	801a226 <_fflush_r+0xa>
 801a23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a240:	07d0      	lsls	r0, r2, #31
 801a242:	d404      	bmi.n	801a24e <_fflush_r+0x32>
 801a244:	0599      	lsls	r1, r3, #22
 801a246:	d402      	bmi.n	801a24e <_fflush_r+0x32>
 801a248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a24a:	f7ff fb70 	bl	801992e <__retarget_lock_acquire_recursive>
 801a24e:	4628      	mov	r0, r5
 801a250:	4621      	mov	r1, r4
 801a252:	f7ff ff5f 	bl	801a114 <__sflush_r>
 801a256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a258:	07da      	lsls	r2, r3, #31
 801a25a:	4605      	mov	r5, r0
 801a25c:	d4e4      	bmi.n	801a228 <_fflush_r+0xc>
 801a25e:	89a3      	ldrh	r3, [r4, #12]
 801a260:	059b      	lsls	r3, r3, #22
 801a262:	d4e1      	bmi.n	801a228 <_fflush_r+0xc>
 801a264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a266:	f7ff fb63 	bl	8019930 <__retarget_lock_release_recursive>
 801a26a:	e7dd      	b.n	801a228 <_fflush_r+0xc>

0801a26c <__malloc_lock>:
 801a26c:	4801      	ldr	r0, [pc, #4]	@ (801a274 <__malloc_lock+0x8>)
 801a26e:	f7ff bb5e 	b.w	801992e <__retarget_lock_acquire_recursive>
 801a272:	bf00      	nop
 801a274:	24010888 	.word	0x24010888

0801a278 <__malloc_unlock>:
 801a278:	4801      	ldr	r0, [pc, #4]	@ (801a280 <__malloc_unlock+0x8>)
 801a27a:	f7ff bb59 	b.w	8019930 <__retarget_lock_release_recursive>
 801a27e:	bf00      	nop
 801a280:	24010888 	.word	0x24010888

0801a284 <__sread>:
 801a284:	b510      	push	{r4, lr}
 801a286:	460c      	mov	r4, r1
 801a288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a28c:	f000 f98a 	bl	801a5a4 <_read_r>
 801a290:	2800      	cmp	r0, #0
 801a292:	bfab      	itete	ge
 801a294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a296:	89a3      	ldrhlt	r3, [r4, #12]
 801a298:	181b      	addge	r3, r3, r0
 801a29a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a29e:	bfac      	ite	ge
 801a2a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a2a2:	81a3      	strhlt	r3, [r4, #12]
 801a2a4:	bd10      	pop	{r4, pc}

0801a2a6 <__swrite>:
 801a2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2aa:	461f      	mov	r7, r3
 801a2ac:	898b      	ldrh	r3, [r1, #12]
 801a2ae:	05db      	lsls	r3, r3, #23
 801a2b0:	4605      	mov	r5, r0
 801a2b2:	460c      	mov	r4, r1
 801a2b4:	4616      	mov	r6, r2
 801a2b6:	d505      	bpl.n	801a2c4 <__swrite+0x1e>
 801a2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2bc:	2302      	movs	r3, #2
 801a2be:	2200      	movs	r2, #0
 801a2c0:	f000 f95e 	bl	801a580 <_lseek_r>
 801a2c4:	89a3      	ldrh	r3, [r4, #12]
 801a2c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a2ce:	81a3      	strh	r3, [r4, #12]
 801a2d0:	4632      	mov	r2, r6
 801a2d2:	463b      	mov	r3, r7
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2da:	f000 b985 	b.w	801a5e8 <_write_r>

0801a2de <__sseek>:
 801a2de:	b510      	push	{r4, lr}
 801a2e0:	460c      	mov	r4, r1
 801a2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2e6:	f000 f94b 	bl	801a580 <_lseek_r>
 801a2ea:	1c43      	adds	r3, r0, #1
 801a2ec:	89a3      	ldrh	r3, [r4, #12]
 801a2ee:	bf15      	itete	ne
 801a2f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a2f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a2f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a2fa:	81a3      	strheq	r3, [r4, #12]
 801a2fc:	bf18      	it	ne
 801a2fe:	81a3      	strhne	r3, [r4, #12]
 801a300:	bd10      	pop	{r4, pc}

0801a302 <__sclose>:
 801a302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a306:	f000 b909 	b.w	801a51c <_close_r>
	...

0801a30c <fiprintf>:
 801a30c:	b40e      	push	{r1, r2, r3}
 801a30e:	b503      	push	{r0, r1, lr}
 801a310:	4601      	mov	r1, r0
 801a312:	ab03      	add	r3, sp, #12
 801a314:	4805      	ldr	r0, [pc, #20]	@ (801a32c <fiprintf+0x20>)
 801a316:	f853 2b04 	ldr.w	r2, [r3], #4
 801a31a:	6800      	ldr	r0, [r0, #0]
 801a31c:	9301      	str	r3, [sp, #4]
 801a31e:	f7ff fba9 	bl	8019a74 <_vfiprintf_r>
 801a322:	b002      	add	sp, #8
 801a324:	f85d eb04 	ldr.w	lr, [sp], #4
 801a328:	b003      	add	sp, #12
 801a32a:	4770      	bx	lr
 801a32c:	24004a10 	.word	0x24004a10

0801a330 <__swbuf_r>:
 801a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a332:	460e      	mov	r6, r1
 801a334:	4614      	mov	r4, r2
 801a336:	4605      	mov	r5, r0
 801a338:	b118      	cbz	r0, 801a342 <__swbuf_r+0x12>
 801a33a:	6a03      	ldr	r3, [r0, #32]
 801a33c:	b90b      	cbnz	r3, 801a342 <__swbuf_r+0x12>
 801a33e:	f7ff fa1b 	bl	8019778 <__sinit>
 801a342:	69a3      	ldr	r3, [r4, #24]
 801a344:	60a3      	str	r3, [r4, #8]
 801a346:	89a3      	ldrh	r3, [r4, #12]
 801a348:	071a      	lsls	r2, r3, #28
 801a34a:	d501      	bpl.n	801a350 <__swbuf_r+0x20>
 801a34c:	6923      	ldr	r3, [r4, #16]
 801a34e:	b943      	cbnz	r3, 801a362 <__swbuf_r+0x32>
 801a350:	4621      	mov	r1, r4
 801a352:	4628      	mov	r0, r5
 801a354:	f000 f82a 	bl	801a3ac <__swsetup_r>
 801a358:	b118      	cbz	r0, 801a362 <__swbuf_r+0x32>
 801a35a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a35e:	4638      	mov	r0, r7
 801a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a362:	6823      	ldr	r3, [r4, #0]
 801a364:	6922      	ldr	r2, [r4, #16]
 801a366:	1a98      	subs	r0, r3, r2
 801a368:	6963      	ldr	r3, [r4, #20]
 801a36a:	b2f6      	uxtb	r6, r6
 801a36c:	4283      	cmp	r3, r0
 801a36e:	4637      	mov	r7, r6
 801a370:	dc05      	bgt.n	801a37e <__swbuf_r+0x4e>
 801a372:	4621      	mov	r1, r4
 801a374:	4628      	mov	r0, r5
 801a376:	f7ff ff51 	bl	801a21c <_fflush_r>
 801a37a:	2800      	cmp	r0, #0
 801a37c:	d1ed      	bne.n	801a35a <__swbuf_r+0x2a>
 801a37e:	68a3      	ldr	r3, [r4, #8]
 801a380:	3b01      	subs	r3, #1
 801a382:	60a3      	str	r3, [r4, #8]
 801a384:	6823      	ldr	r3, [r4, #0]
 801a386:	1c5a      	adds	r2, r3, #1
 801a388:	6022      	str	r2, [r4, #0]
 801a38a:	701e      	strb	r6, [r3, #0]
 801a38c:	6962      	ldr	r2, [r4, #20]
 801a38e:	1c43      	adds	r3, r0, #1
 801a390:	429a      	cmp	r2, r3
 801a392:	d004      	beq.n	801a39e <__swbuf_r+0x6e>
 801a394:	89a3      	ldrh	r3, [r4, #12]
 801a396:	07db      	lsls	r3, r3, #31
 801a398:	d5e1      	bpl.n	801a35e <__swbuf_r+0x2e>
 801a39a:	2e0a      	cmp	r6, #10
 801a39c:	d1df      	bne.n	801a35e <__swbuf_r+0x2e>
 801a39e:	4621      	mov	r1, r4
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	f7ff ff3b 	bl	801a21c <_fflush_r>
 801a3a6:	2800      	cmp	r0, #0
 801a3a8:	d0d9      	beq.n	801a35e <__swbuf_r+0x2e>
 801a3aa:	e7d6      	b.n	801a35a <__swbuf_r+0x2a>

0801a3ac <__swsetup_r>:
 801a3ac:	b538      	push	{r3, r4, r5, lr}
 801a3ae:	4b29      	ldr	r3, [pc, #164]	@ (801a454 <__swsetup_r+0xa8>)
 801a3b0:	4605      	mov	r5, r0
 801a3b2:	6818      	ldr	r0, [r3, #0]
 801a3b4:	460c      	mov	r4, r1
 801a3b6:	b118      	cbz	r0, 801a3c0 <__swsetup_r+0x14>
 801a3b8:	6a03      	ldr	r3, [r0, #32]
 801a3ba:	b90b      	cbnz	r3, 801a3c0 <__swsetup_r+0x14>
 801a3bc:	f7ff f9dc 	bl	8019778 <__sinit>
 801a3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3c4:	0719      	lsls	r1, r3, #28
 801a3c6:	d422      	bmi.n	801a40e <__swsetup_r+0x62>
 801a3c8:	06da      	lsls	r2, r3, #27
 801a3ca:	d407      	bmi.n	801a3dc <__swsetup_r+0x30>
 801a3cc:	2209      	movs	r2, #9
 801a3ce:	602a      	str	r2, [r5, #0]
 801a3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3d4:	81a3      	strh	r3, [r4, #12]
 801a3d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3da:	e033      	b.n	801a444 <__swsetup_r+0x98>
 801a3dc:	0758      	lsls	r0, r3, #29
 801a3de:	d512      	bpl.n	801a406 <__swsetup_r+0x5a>
 801a3e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a3e2:	b141      	cbz	r1, 801a3f6 <__swsetup_r+0x4a>
 801a3e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a3e8:	4299      	cmp	r1, r3
 801a3ea:	d002      	beq.n	801a3f2 <__swsetup_r+0x46>
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	f7ff facd 	bl	801998c <_free_r>
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801a3f6:	89a3      	ldrh	r3, [r4, #12]
 801a3f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a3fc:	81a3      	strh	r3, [r4, #12]
 801a3fe:	2300      	movs	r3, #0
 801a400:	6063      	str	r3, [r4, #4]
 801a402:	6923      	ldr	r3, [r4, #16]
 801a404:	6023      	str	r3, [r4, #0]
 801a406:	89a3      	ldrh	r3, [r4, #12]
 801a408:	f043 0308 	orr.w	r3, r3, #8
 801a40c:	81a3      	strh	r3, [r4, #12]
 801a40e:	6923      	ldr	r3, [r4, #16]
 801a410:	b94b      	cbnz	r3, 801a426 <__swsetup_r+0x7a>
 801a412:	89a3      	ldrh	r3, [r4, #12]
 801a414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a41c:	d003      	beq.n	801a426 <__swsetup_r+0x7a>
 801a41e:	4621      	mov	r1, r4
 801a420:	4628      	mov	r0, r5
 801a422:	f000 f83f 	bl	801a4a4 <__smakebuf_r>
 801a426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a42a:	f013 0201 	ands.w	r2, r3, #1
 801a42e:	d00a      	beq.n	801a446 <__swsetup_r+0x9a>
 801a430:	2200      	movs	r2, #0
 801a432:	60a2      	str	r2, [r4, #8]
 801a434:	6962      	ldr	r2, [r4, #20]
 801a436:	4252      	negs	r2, r2
 801a438:	61a2      	str	r2, [r4, #24]
 801a43a:	6922      	ldr	r2, [r4, #16]
 801a43c:	b942      	cbnz	r2, 801a450 <__swsetup_r+0xa4>
 801a43e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a442:	d1c5      	bne.n	801a3d0 <__swsetup_r+0x24>
 801a444:	bd38      	pop	{r3, r4, r5, pc}
 801a446:	0799      	lsls	r1, r3, #30
 801a448:	bf58      	it	pl
 801a44a:	6962      	ldrpl	r2, [r4, #20]
 801a44c:	60a2      	str	r2, [r4, #8]
 801a44e:	e7f4      	b.n	801a43a <__swsetup_r+0x8e>
 801a450:	2000      	movs	r0, #0
 801a452:	e7f7      	b.n	801a444 <__swsetup_r+0x98>
 801a454:	24004a10 	.word	0x24004a10

0801a458 <__swhatbuf_r>:
 801a458:	b570      	push	{r4, r5, r6, lr}
 801a45a:	460c      	mov	r4, r1
 801a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a460:	2900      	cmp	r1, #0
 801a462:	b096      	sub	sp, #88	@ 0x58
 801a464:	4615      	mov	r5, r2
 801a466:	461e      	mov	r6, r3
 801a468:	da0d      	bge.n	801a486 <__swhatbuf_r+0x2e>
 801a46a:	89a3      	ldrh	r3, [r4, #12]
 801a46c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a470:	f04f 0100 	mov.w	r1, #0
 801a474:	bf14      	ite	ne
 801a476:	2340      	movne	r3, #64	@ 0x40
 801a478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a47c:	2000      	movs	r0, #0
 801a47e:	6031      	str	r1, [r6, #0]
 801a480:	602b      	str	r3, [r5, #0]
 801a482:	b016      	add	sp, #88	@ 0x58
 801a484:	bd70      	pop	{r4, r5, r6, pc}
 801a486:	466a      	mov	r2, sp
 801a488:	f000 f858 	bl	801a53c <_fstat_r>
 801a48c:	2800      	cmp	r0, #0
 801a48e:	dbec      	blt.n	801a46a <__swhatbuf_r+0x12>
 801a490:	9901      	ldr	r1, [sp, #4]
 801a492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a49a:	4259      	negs	r1, r3
 801a49c:	4159      	adcs	r1, r3
 801a49e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a4a2:	e7eb      	b.n	801a47c <__swhatbuf_r+0x24>

0801a4a4 <__smakebuf_r>:
 801a4a4:	898b      	ldrh	r3, [r1, #12]
 801a4a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a4a8:	079d      	lsls	r5, r3, #30
 801a4aa:	4606      	mov	r6, r0
 801a4ac:	460c      	mov	r4, r1
 801a4ae:	d507      	bpl.n	801a4c0 <__smakebuf_r+0x1c>
 801a4b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a4b4:	6023      	str	r3, [r4, #0]
 801a4b6:	6123      	str	r3, [r4, #16]
 801a4b8:	2301      	movs	r3, #1
 801a4ba:	6163      	str	r3, [r4, #20]
 801a4bc:	b003      	add	sp, #12
 801a4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4c0:	ab01      	add	r3, sp, #4
 801a4c2:	466a      	mov	r2, sp
 801a4c4:	f7ff ffc8 	bl	801a458 <__swhatbuf_r>
 801a4c8:	9f00      	ldr	r7, [sp, #0]
 801a4ca:	4605      	mov	r5, r0
 801a4cc:	4639      	mov	r1, r7
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	f7ff fc12 	bl	8019cf8 <_malloc_r>
 801a4d4:	b948      	cbnz	r0, 801a4ea <__smakebuf_r+0x46>
 801a4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4da:	059a      	lsls	r2, r3, #22
 801a4dc:	d4ee      	bmi.n	801a4bc <__smakebuf_r+0x18>
 801a4de:	f023 0303 	bic.w	r3, r3, #3
 801a4e2:	f043 0302 	orr.w	r3, r3, #2
 801a4e6:	81a3      	strh	r3, [r4, #12]
 801a4e8:	e7e2      	b.n	801a4b0 <__smakebuf_r+0xc>
 801a4ea:	89a3      	ldrh	r3, [r4, #12]
 801a4ec:	6020      	str	r0, [r4, #0]
 801a4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4f2:	81a3      	strh	r3, [r4, #12]
 801a4f4:	9b01      	ldr	r3, [sp, #4]
 801a4f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a4fa:	b15b      	cbz	r3, 801a514 <__smakebuf_r+0x70>
 801a4fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a500:	4630      	mov	r0, r6
 801a502:	f000 f82d 	bl	801a560 <_isatty_r>
 801a506:	b128      	cbz	r0, 801a514 <__smakebuf_r+0x70>
 801a508:	89a3      	ldrh	r3, [r4, #12]
 801a50a:	f023 0303 	bic.w	r3, r3, #3
 801a50e:	f043 0301 	orr.w	r3, r3, #1
 801a512:	81a3      	strh	r3, [r4, #12]
 801a514:	89a3      	ldrh	r3, [r4, #12]
 801a516:	431d      	orrs	r5, r3
 801a518:	81a5      	strh	r5, [r4, #12]
 801a51a:	e7cf      	b.n	801a4bc <__smakebuf_r+0x18>

0801a51c <_close_r>:
 801a51c:	b538      	push	{r3, r4, r5, lr}
 801a51e:	4d06      	ldr	r5, [pc, #24]	@ (801a538 <_close_r+0x1c>)
 801a520:	2300      	movs	r3, #0
 801a522:	4604      	mov	r4, r0
 801a524:	4608      	mov	r0, r1
 801a526:	602b      	str	r3, [r5, #0]
 801a528:	f7e7 fa18 	bl	800195c <_close>
 801a52c:	1c43      	adds	r3, r0, #1
 801a52e:	d102      	bne.n	801a536 <_close_r+0x1a>
 801a530:	682b      	ldr	r3, [r5, #0]
 801a532:	b103      	cbz	r3, 801a536 <_close_r+0x1a>
 801a534:	6023      	str	r3, [r4, #0]
 801a536:	bd38      	pop	{r3, r4, r5, pc}
 801a538:	24010884 	.word	0x24010884

0801a53c <_fstat_r>:
 801a53c:	b538      	push	{r3, r4, r5, lr}
 801a53e:	4d07      	ldr	r5, [pc, #28]	@ (801a55c <_fstat_r+0x20>)
 801a540:	2300      	movs	r3, #0
 801a542:	4604      	mov	r4, r0
 801a544:	4608      	mov	r0, r1
 801a546:	4611      	mov	r1, r2
 801a548:	602b      	str	r3, [r5, #0]
 801a54a:	f7e7 fa13 	bl	8001974 <_fstat>
 801a54e:	1c43      	adds	r3, r0, #1
 801a550:	d102      	bne.n	801a558 <_fstat_r+0x1c>
 801a552:	682b      	ldr	r3, [r5, #0]
 801a554:	b103      	cbz	r3, 801a558 <_fstat_r+0x1c>
 801a556:	6023      	str	r3, [r4, #0]
 801a558:	bd38      	pop	{r3, r4, r5, pc}
 801a55a:	bf00      	nop
 801a55c:	24010884 	.word	0x24010884

0801a560 <_isatty_r>:
 801a560:	b538      	push	{r3, r4, r5, lr}
 801a562:	4d06      	ldr	r5, [pc, #24]	@ (801a57c <_isatty_r+0x1c>)
 801a564:	2300      	movs	r3, #0
 801a566:	4604      	mov	r4, r0
 801a568:	4608      	mov	r0, r1
 801a56a:	602b      	str	r3, [r5, #0]
 801a56c:	f7e7 fa12 	bl	8001994 <_isatty>
 801a570:	1c43      	adds	r3, r0, #1
 801a572:	d102      	bne.n	801a57a <_isatty_r+0x1a>
 801a574:	682b      	ldr	r3, [r5, #0]
 801a576:	b103      	cbz	r3, 801a57a <_isatty_r+0x1a>
 801a578:	6023      	str	r3, [r4, #0]
 801a57a:	bd38      	pop	{r3, r4, r5, pc}
 801a57c:	24010884 	.word	0x24010884

0801a580 <_lseek_r>:
 801a580:	b538      	push	{r3, r4, r5, lr}
 801a582:	4d07      	ldr	r5, [pc, #28]	@ (801a5a0 <_lseek_r+0x20>)
 801a584:	4604      	mov	r4, r0
 801a586:	4608      	mov	r0, r1
 801a588:	4611      	mov	r1, r2
 801a58a:	2200      	movs	r2, #0
 801a58c:	602a      	str	r2, [r5, #0]
 801a58e:	461a      	mov	r2, r3
 801a590:	f7e7 fa0b 	bl	80019aa <_lseek>
 801a594:	1c43      	adds	r3, r0, #1
 801a596:	d102      	bne.n	801a59e <_lseek_r+0x1e>
 801a598:	682b      	ldr	r3, [r5, #0]
 801a59a:	b103      	cbz	r3, 801a59e <_lseek_r+0x1e>
 801a59c:	6023      	str	r3, [r4, #0]
 801a59e:	bd38      	pop	{r3, r4, r5, pc}
 801a5a0:	24010884 	.word	0x24010884

0801a5a4 <_read_r>:
 801a5a4:	b538      	push	{r3, r4, r5, lr}
 801a5a6:	4d07      	ldr	r5, [pc, #28]	@ (801a5c4 <_read_r+0x20>)
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	4608      	mov	r0, r1
 801a5ac:	4611      	mov	r1, r2
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	602a      	str	r2, [r5, #0]
 801a5b2:	461a      	mov	r2, r3
 801a5b4:	f7e7 f999 	bl	80018ea <_read>
 801a5b8:	1c43      	adds	r3, r0, #1
 801a5ba:	d102      	bne.n	801a5c2 <_read_r+0x1e>
 801a5bc:	682b      	ldr	r3, [r5, #0]
 801a5be:	b103      	cbz	r3, 801a5c2 <_read_r+0x1e>
 801a5c0:	6023      	str	r3, [r4, #0]
 801a5c2:	bd38      	pop	{r3, r4, r5, pc}
 801a5c4:	24010884 	.word	0x24010884

0801a5c8 <_sbrk_r>:
 801a5c8:	b538      	push	{r3, r4, r5, lr}
 801a5ca:	4d06      	ldr	r5, [pc, #24]	@ (801a5e4 <_sbrk_r+0x1c>)
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	4604      	mov	r4, r0
 801a5d0:	4608      	mov	r0, r1
 801a5d2:	602b      	str	r3, [r5, #0]
 801a5d4:	f7e7 f9f6 	bl	80019c4 <_sbrk>
 801a5d8:	1c43      	adds	r3, r0, #1
 801a5da:	d102      	bne.n	801a5e2 <_sbrk_r+0x1a>
 801a5dc:	682b      	ldr	r3, [r5, #0]
 801a5de:	b103      	cbz	r3, 801a5e2 <_sbrk_r+0x1a>
 801a5e0:	6023      	str	r3, [r4, #0]
 801a5e2:	bd38      	pop	{r3, r4, r5, pc}
 801a5e4:	24010884 	.word	0x24010884

0801a5e8 <_write_r>:
 801a5e8:	b538      	push	{r3, r4, r5, lr}
 801a5ea:	4d07      	ldr	r5, [pc, #28]	@ (801a608 <_write_r+0x20>)
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	4608      	mov	r0, r1
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	602a      	str	r2, [r5, #0]
 801a5f6:	461a      	mov	r2, r3
 801a5f8:	f7e7 f994 	bl	8001924 <_write>
 801a5fc:	1c43      	adds	r3, r0, #1
 801a5fe:	d102      	bne.n	801a606 <_write_r+0x1e>
 801a600:	682b      	ldr	r3, [r5, #0]
 801a602:	b103      	cbz	r3, 801a606 <_write_r+0x1e>
 801a604:	6023      	str	r3, [r4, #0]
 801a606:	bd38      	pop	{r3, r4, r5, pc}
 801a608:	24010884 	.word	0x24010884

0801a60c <abort>:
 801a60c:	b508      	push	{r3, lr}
 801a60e:	2006      	movs	r0, #6
 801a610:	f000 f82c 	bl	801a66c <raise>
 801a614:	2001      	movs	r0, #1
 801a616:	f7e7 f95d 	bl	80018d4 <_exit>

0801a61a <_raise_r>:
 801a61a:	291f      	cmp	r1, #31
 801a61c:	b538      	push	{r3, r4, r5, lr}
 801a61e:	4605      	mov	r5, r0
 801a620:	460c      	mov	r4, r1
 801a622:	d904      	bls.n	801a62e <_raise_r+0x14>
 801a624:	2316      	movs	r3, #22
 801a626:	6003      	str	r3, [r0, #0]
 801a628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a62c:	bd38      	pop	{r3, r4, r5, pc}
 801a62e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a630:	b112      	cbz	r2, 801a638 <_raise_r+0x1e>
 801a632:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a636:	b94b      	cbnz	r3, 801a64c <_raise_r+0x32>
 801a638:	4628      	mov	r0, r5
 801a63a:	f000 f831 	bl	801a6a0 <_getpid_r>
 801a63e:	4622      	mov	r2, r4
 801a640:	4601      	mov	r1, r0
 801a642:	4628      	mov	r0, r5
 801a644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a648:	f000 b818 	b.w	801a67c <_kill_r>
 801a64c:	2b01      	cmp	r3, #1
 801a64e:	d00a      	beq.n	801a666 <_raise_r+0x4c>
 801a650:	1c59      	adds	r1, r3, #1
 801a652:	d103      	bne.n	801a65c <_raise_r+0x42>
 801a654:	2316      	movs	r3, #22
 801a656:	6003      	str	r3, [r0, #0]
 801a658:	2001      	movs	r0, #1
 801a65a:	e7e7      	b.n	801a62c <_raise_r+0x12>
 801a65c:	2100      	movs	r1, #0
 801a65e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a662:	4620      	mov	r0, r4
 801a664:	4798      	blx	r3
 801a666:	2000      	movs	r0, #0
 801a668:	e7e0      	b.n	801a62c <_raise_r+0x12>
	...

0801a66c <raise>:
 801a66c:	4b02      	ldr	r3, [pc, #8]	@ (801a678 <raise+0xc>)
 801a66e:	4601      	mov	r1, r0
 801a670:	6818      	ldr	r0, [r3, #0]
 801a672:	f7ff bfd2 	b.w	801a61a <_raise_r>
 801a676:	bf00      	nop
 801a678:	24004a10 	.word	0x24004a10

0801a67c <_kill_r>:
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4d07      	ldr	r5, [pc, #28]	@ (801a69c <_kill_r+0x20>)
 801a680:	2300      	movs	r3, #0
 801a682:	4604      	mov	r4, r0
 801a684:	4608      	mov	r0, r1
 801a686:	4611      	mov	r1, r2
 801a688:	602b      	str	r3, [r5, #0]
 801a68a:	f7e7 f911 	bl	80018b0 <_kill>
 801a68e:	1c43      	adds	r3, r0, #1
 801a690:	d102      	bne.n	801a698 <_kill_r+0x1c>
 801a692:	682b      	ldr	r3, [r5, #0]
 801a694:	b103      	cbz	r3, 801a698 <_kill_r+0x1c>
 801a696:	6023      	str	r3, [r4, #0]
 801a698:	bd38      	pop	{r3, r4, r5, pc}
 801a69a:	bf00      	nop
 801a69c:	24010884 	.word	0x24010884

0801a6a0 <_getpid_r>:
 801a6a0:	f7e7 b8fe 	b.w	80018a0 <_getpid>

0801a6a4 <_init>:
 801a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6a6:	bf00      	nop
 801a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6aa:	bc08      	pop	{r3}
 801a6ac:	469e      	mov	lr, r3
 801a6ae:	4770      	bx	lr

0801a6b0 <_fini>:
 801a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b2:	bf00      	nop
 801a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6b6:	bc08      	pop	{r3}
 801a6b8:	469e      	mov	lr, r3
 801a6ba:	4770      	bx	lr
